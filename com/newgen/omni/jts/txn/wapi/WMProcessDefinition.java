//----------------------------------------------------------------------------------------------------
//                              NEWGEN SOFTWARE TECHNOLOGIES LIMITED
//                                        Group : Application-Products
//                            Product / Project : WorkFlow
//                                       Module : Transaction Server
//                                    File Name : WMProcessDefinition.java
//                                       Author : Prashant
//                    Date written (DD/MM/YYYY) : 16/05/2002
//                                  Description :
//----------------------------------------------------------------------------------------------------
//                                      CHANGE HISTORY
//----------------------------------------------------------------------------------------------------
//  Date                Change By               Change Description (Bug No. (If Any))
// (DD/MM/YYYY)
//----------------------------------------------------------------------------------------------------
//  01/10/2002          Prashant                Changes for ProcessInstanceID generation
//  26/11/2002          Prashant                Bug No OF_BUG_53
//  23/01/2003          Prashant                Bug No WFL_2.0.5.014
//  31/05/2003          Prashant                Bug No TSR_3.0.2.0011
//  14/06/2004          Krishan Dutt            Bug No WSE_I_5.0.1_002,WSE_I_5.0.1_004,WSE_I_5.0.1_190,WSE_I_5.0.1_196,WSE_I_5.0.1_240
//  21/06/2004          Krishan Dutt            Bug No WSE_I_5.0.1_073
//  24/06/2004          Krishan Dutt            Bug No WSE_I_5.0.1_265
//  07/07/2004          Harmeet                 Bug NO WSE_I_5.0.1_694
//  08/09/2004          Krishan                 wfs_5_001 (For removing JMS)
//  21/10/2004          Ruhi Hira               Changes made for Cache management
//                                                  (cachetime tag and value returned from getProcessInfo).
//  25/10/2004          Krishan                 Bug # wfs_5_006 (EntryDatetime null in fetch atribute)
//  27/10/2004          Ruhi Hira               Oracle Support in getProcessList.
//  30/10/2004          Ruhi Hira               Sort should be case insensitive.
//  24/02/2004          Ruhi Hira               SrNo-1, SrNo-2, SrNo-3, SrNo-4, SrNo-5.
//  04/03/2005          Ashish Mangla           Modification in WMCreateProcessInstance for multiple introduction workstep
//  07/04/2005          Ruhi Hira               Bug # WFS_6_001.
//  08/04/2005          Ruhi Hira               Bug # WFS_6_003.
//  09/04/2005          Harmeet Kaur            WFS_6_004
//  13/04/2005          Harmeet Kaur            WFS_6_007
//  20/05/2005          Ashish Mangla           Automatic Cache updation
//  03/06/2005          Ashish Mangla           CacheTime related changes / removal of thread, no static hashmap.
//  15/06/2005          Ashish Mangla           WFS_6_026 createProcessInstance (transaction should be there)
//  29/08/2005          Ashish Mangla           WFS_6.1_034, CabinetCache should contain entry as null is cabinet Cache cannot be create
//  14/09/2005          Mandeep Kaur            WFS_6.1_048,when a workitem is initiated ,entrydatetime in WORKDONETABLE has null value
//  15/02/2006          Ashish Mangla           WFS_6.1.2_049 (Changed WMUser.WFCheckSession by WFSUtil.WFCheckSession)
//  12/06/2006          Ashish Mangla           WFSUtil.getDate(dbType) used as jts time was inserted instead of database time WFS_6.1.2_068
//  13/07/2006          Virochan                Bug 26 - Bugilla, One query is made for all database servers (RC - Review Comment).
//  13/07/2006          Virochan                Bug 28 - Bugzilla Where clause "Where 1=1" removed (RC - Review Comment).
//  07/19/2006          Ahsan Javed             Coded for getBatchSize
//  27/06/2006          Ashish Mangla           DB2 index name constraint (max 18 char)
//  16/08/2006          Ruhi Hira               Bugzilla Id 68.
//  18/08/2006          Ruhi Hira               Bugzilla Id 54.
//  18/08/2006          Ruhi Hira               Bugzilla Id 77.
//  24/11/2006          Varun Bhansaly          Bugzilla Bug 296.
//  06/12/2006          Varun Bhansaly          Added to provide support for Calender Feature.
//                                                  (Changes made in API WMGetProcessList(), WMSetTurnAroundTime())
//  13/12/2006          Shilpi                  Bugzilla Id 359
//  01/02/2007          Ahsan Javed             Added for getNextDateTime() method in Calendar implementation.
//  08/02/2007          Ahsan Javed             Added for WFSUtil.getCalendarData() method in Calendar implementation.
//  13/02/2007          Varun Bhansaly          Bugzilla Id 54  (Provide Dirty Read Support for DB2 Database)
//  01/03/2007          Ruhi Hira               Bugzilla Id 465 (Result Set closed in finally).
//  04/05/2007          Shilpi                  RuleCalFlag ( calendar related changes)
//  14/05/2007          Ruhi Hira               Bugzilla Bug 690, delete on collect configuration.
//  24/05/2007          Ruhi Hira               Bugzilla Bug 936.
//  24/05/2007          Ashish Mangla           Bugzilla Bug 824 (Distinct added again for SQL / Oracle) Still pending for DB2
//  24/05/2007          Ruhi Hira               Bugzilla Bug 944.
//  19/06/2007          Ruhi Hira               Bugzilla Bug 1175.
//  08/08/2007          Shilpi S                Bug # 1608
//  05/09/2007          Shilpi S                SrNo-6, omniflow7.1 feature , date precision till minutes
//  05/09/2007          Tirupati Srivastava     inserting two API's for quicksearch feature
//  05/09/2007          Ruhi Hira               SrNo-7, Synchronous routing of workitems.
//  17/09/2007          Shilpi Srivastava       Bugzilla Bug 1148 (Global Temporary Table used).
//  11/10/2007          Shilpi Srivastava       SrNo-8 (Wildcard (*) support in ProcessName in getProcessList , new tag ProcessPrefix is added)
//  19/10/2007          Varun Bhansaly	        SrNo-9, Use WFSUtil.printXXX instead of System.out.println()
//                                                  System.err.println() & printStackTrace() for logging.
//  12/11/2007          Tirupati Srivastava     changed stmt to pstmt (BUG ID 1717)
//  12/11/2007          Ruhi Hira               SrNo-10, Synchronous routing of workitems, Removal of WorkDoneTable.
//  14/11/2007          Ruhi Hira               Bugzilla Bug 1686, LockWI is mandatory before initiate.
//  19/11/2007          Varun Bhansaly	        WFSUtil.getBIGData() to be used instead of getBinaryStream
//  19/11/2007          Varun Bhansaly	        WFSUtil.getBIGData() signature changed
//  20/11/2007          Tirupati Srivastava		changes made to make code compatible with postgreSQL
//  23/11/2007          Shilpi S                SrNo-11, Export Utiltiy
//  07/12/2007          Tirupati Srivastava     BUG ID 1798
//  07/12/2007          Shilpi S                Bugzilla bug 1804
//  08/12/2007          Shilpi S                Bugzilla bug 1752
//  10/12/2007          Shilpi S                Bugzilla Bug # 1863
//  12/12/2007          Tirupati Srivastava		BUG ID 1909
//  13/12/2007          Shilpi S                Bugzilla Bug # 2228
//  14/12/2007          Tirupati Srivastava		BUG ID 2739
//  17/12/2007          Ashish Mangla	        Bugzilla Bug 2300 (PriorityLevel set was executing only in exception case , corrected)
//  19/12/2007          Tirupati Srivastava     work for ActionId for Setting quicksearchVariable
//  20/12/2007          Shilpi Srivastava       Bug # 2824
//  27/12/2007          Ruhi Hira               Bugzilla Bug 2829, condition added for dropping tables.
//  27/12/2007          Shilpi Srivastava       Bug # 3078
//	29/12/2007			Ashish Mangla			Bugzilla Bug 3131, Check rightsflag for dropping only when temp table created under this condition
//  29/12/2007			Ashish Mangla			Bugzilla Bug 3076, updation in post gres was causing order of rows in temp table change.
//  02/01/2008          Ruhi Hira               Bugzilla Bug 3056, to avoid nested transactions in sync routing mode
//  03/01/2008          Ruhi Hira               Bugzilla Bug 3227, Subprocess not working.
//  09/01/2008			Varun Bhansaly			Bugzilla Id 3284
//												(Bug WFS_5_221 Returning the size of variables in case of char/varchar/nvarchar)
//  08/01/2008          Shilpi S                Bug # 1716
//  11/01/2008          Shilpi S                Bug # 3443
//  07/01/2008          Ruhi Hira               Bugzilla Bug 3225, Nolock added to getProcessInfo/ getDMSFolderDef
//                                              CommitFlag added to startProcess
//  15/01/2008			Ruhi Hira				Bugzilla Bug 3421, new method getLikeFilterStr added in WFSUtil.
//  15/01/2008			Vikram Kumbhar			Bugzilla Bug 2774 Maker Checker Functionality
//  17/01/2008          Ruhi Hira               Bugzilla Bug 3488, expiry is String in database.
//  24/01/2008          Ashish Mangla			Bugzilla Bug 3326 (update query was not being fired, bug inserted while correction of Bugzilla Bug 3076)
//  01/02/2008          Ruhi Hira               Bugzilla Bug 3511, createProcessInstance moved to WFSUtil
//                                                  wfs_ejb classes not accessible from wfsshared.
//
//  11/02/2008          Shilpi S                Bug # 3887
//  26/02/2008          Shilpi S                return target activity id from complete workitem
//  05/05/2008          Shilpi S                SrNo-12, Support for Local and Global Scope in WebService/Catalog functions    
//  14/05/2008          Shilpi S                SrNo-13, BPEL Compliant Omniflow- Support for Complex data types in rules
//	27/03/2008			Shweta Tyagi			Bugzilla Bug 4159
//  27/03/2008			Shweta Tyagi			SrNo-14 System Methods catalog support 
//  17/06/2008          Ruhi Hira               SrNo-15, New feature : user defined complex data type support [OF 7.2]
//	03/07/2008	        Shweta Tyagi		    Bugzilla Bug 5517 Complex Structure support in System Catalog methods														//  14/08/2008          Varun Bhansaly          SrNo-16, Meta-data API WFGetQuickSearchVariables to return precision & length 
//                                              for float variables + deleted commented queries.	
//   07/08/2008         Shilpi S                 Complex Data type support in Mail Trigger   
//   28/08/2008         Shilpi S                 SrNo-16, Block Activity Requirement
//   03/09/2008         Shilpi S                 SrNo-17, Complex data type support in subprocess  
//   03/09/2008         Shweta Tyagi             SrNo-18, Complex data type support in export utility
//   04/11/2008         Shilpi S				Bug # 6888
//   05/11/2008			Ashish Mangla			Bugzilla Bug 6900 (ArgList should be defined while defining template (PFE can also use same arglist))
//   10/11/2008         Shilpi S				Bug # 6925
//   24/11/2008         Shilpi S				Bug # 6982 
//   28/11/2008         Shilpi S				SrNo-19, Web Service invoatcion from process server 
//   04/11/2008         Shweta Tyagi			Bugzilla Bug 5985, Order of parameters for system methods was not correct
//   06/12/2008         Shilpi Srivastava		Bug # 7171, TargetActivityID and TargetQueueID comnig even workstep is not in the block   
//	15/12/2008			Ashish Mangla			Bugzilla Bug 7292 (ArgList changes)
//	16/12/2008			Ashish Mangla			Bugzilla Bug 5805
//  31/12/2008			Ashish Mangla			Bugzilla Bug 7538 (Reflect changes of 5.0 for Collection criteria)
//  09/06/2009          Shilpi Srivastava		SrNo-20, Return two extra values for columns InputBuffer and OutputBuffer from webservicetable[changed for BOA]
//  24/06/2009          Shilpi Srivastava		Bug # 9790
//  30/03/2009			Shilpi S				Bug#9862, WFS_7.1_006 Omnidocs calls fail if DMSSession of Utilities is invalidated - replicated from 7.1
//	28/05/2009			Preeti Sindhu			WFS_7.1_026	All defined quick search are available to user even if has no rights on the process
//  31/08/2009          Shilpi S                WFS_8.0_026, workitem specific calendar  
//	02/09/2009			Saurabh Kamal			New API as WFGetExtInterfaceRules for Conditional External Interfaces
//	08/09/2009			Saurabh Kamal			Bugzilla 10527--incorrect format of WFGetExtInterfaceRules output xml 
//  14/10/2009          Abhishek Gupta          BugZilla ID 11012 - Error fetching value of a column twice with MSSQL 2000 driver.
//	03/11/09			Saurabh Kamal			WFS_8.0_049 Return completion time,ProcessInstanceId,ActivityId,ActivityName,WorkitemId in StartProcess
//  06/11/2009			Preeti Awasthi			WFS_8.0_055 New APIs added for Export Purge Utility.
//  17/11/2009			Preeti Awasthi			WFS_8.0_058 WMStartProcess call failed due to SQLException :The result set has no current row.
//  03/02/2010			Ruhi Hira				WFS_8.0_082 Block Activity support for reinitiate and subprocess cases [CIG (CapGemini) ? generic AP process].
//	10/02/2010			Saurabh Kamal			[OTMS]Change in WMChangeProcessDefinitionState, WMSetTurnAroundTime,WFSetDynamicConstants, WFSetQuickSeachVariables
//  03/03/2010			Ashish Mangla			Bugzilla Bug 12001 - Processname getting repeated in next batch
//  12/03/2010			Saurabh Kamal			Provision of User Credential in case of invoking an authentic webservice
//	19/04/2010			Saurabh Kamal			Bugzilla Bug 12277, Error in WFSetExportPurgeCriteria in case of oracle
//	26/04/2010			Saurabh Kamal			Bugzilla Bug 12517, Batch size not working properly in case of last process having multiple version and batchsize = NumberOfProcess-1.
//	17/08/2010			Saurabh Kamal			Bugs correction of OF8.0 reflected to OF9.0 as well
//	25/01/2011			Preeti Awasthi			[Replicated]WFS_8.0_146: SystemDefinedName is to be set in WFQuickSearchTable
//												while creating quick search variables
//23/09/2011            Bhavneet Kaur           Bug 28442  Offline Table Information was read in case if External Table was not present in the process (in WMGetProcessInfo call).
//                                              Changes done so that Complex Table Information is not read in External Table Tag
//  31/08/2010			Saurabh Kamal           Change in get process info for createChildWorkitem trigger
//  02/02/2012          Vikas Saraswat			Bug 30383 - null pointer exception is coming in get activity property call
//	21/06/2010			Vikas Saraswat			WFS_8.0_105 Support of NCLOB Data in Export Utility.
//	13/03/2012			Preeti Awasthi			Bug 30633: 1. Support of Macro in File path
//														   2. Support of exporting all documents for mapped document Type
//	28/03/2012			Preeti Awasthi			[Replicated]Bug 29777 - quick search variables are available to user even if has no rights on the process.
// 24/04/2012           Bhavneet Kaur     		Bug 31160: Supprort of defining format of Template to be gererated(Pdf/Doc).
// 05/07/2012     		Bhavneet Kaur       	Bug 33029 Cabinet Based Logging for Console, Error, PSError, PSXML & PSOut logs
// 12/09/2012           Hitesh Kumar            [Replicated] Bug 33764 - Handling for case sensitivity in oracle for WMGetProcessList and WMGetQueueList 
// 13/09/2012			Bhavneet Kaur			Bug 34911 - WMGetProcessInstance returning Invalid ProcessInstance 
//	24/09/2012			Neeraj Sharma			Bug 35070 - In WMGetProcessInstance call PocessName tag was wrongly containing the ProcessInstanceId value instead of ProcessName value.
//07/01/2013			Sajid Khan				Bug 37632-  Not able to differentiate between checkin of process as same or new version 
//23/01/2013		    Sajid Khan					Bug 38003 - History is not generated for operation 'Delete Variable in Quick Search     Manangement' in Audit log
//23/01/2013		    Sajid Khan					Bug 38002 - History is not generated for operation 'Add Variable in Quick Search     Manangement' in Audit log
//25/01/2013            Kahkeshan               Bug 37959- Positioning of layout is not showing while we set the Preview 2nd time
//28/01/2013			Bhavneet Kaur			Bug 38096 - ORA-00936 missing expression error coming while modifying Purge Criteria in case of Oracle database 
//10/05/2013			Mohnish Chopra			Changes done for Process Variant Support.
//17/05/2013			Shweta Singhal			Changes done for Process Variant Support in WMGetProcessInfo and WMStartProcess API.
//01/05/2013            Kahkeshan               Bug 39079 - EscalateToWithTrigger Feature requirement.
//06/06/2013            Kahkeshan               bug 40008- ProcessManagement :: PurgeCriteria can be seen without rights on processes 
//22/12/2013  			Kahkeshan				Code Optimization changes done in CreateProcessVariant method.
//24/12/2013			Anwar  Danish		    Changes done for code optimization 
//19/02/2014			Anwar  Danish			Changes done for Bug of Process Variant 
//05/03/2014			Sajid Khan				Bug 43313 and Bug 43303.
//07/03/2014			Sajid Khan				Bug 43582 - Error in creating variant in oracle
//10/03/2014			Sajid Khan				Bug 43599 - Variant Type of processes should not appear in Process List of Forward Mapping Tab of Sub Process Activity
//14/03/2014                    Sajid Khan                              Bug 43573 - "WM_INSUFFICIENT_BUFFER_SIZE" Error on creation of variant workitem
//20-03-2014			Sajid Khan				Bug 43147 - Inconsistency in getting process; list for admin user
//25-3-2014				Sajid Khan				Bug 43415 - Added variable is not getting deleted during modifyVariant call 
//27-03-2014			Sajid Khan				Enabling/Disabling of variants and New tags provided in GetProcessList call like Description,Createdon,CreatedBy .
//27-03-2014		    Kahkeshan			    Code Optimization : Removal Of Views
//01-04-2014            Kanika Manik            Bug 43992 in Variant Definition window > Event tab > a function name is showing twice after modification.
//04-04-2014			Mohnish Chopra			Code Optimization : Return Error message in StartProcess if workitem has expired
//14-04-2014            Kanika Manik            Bug 44147 - If added any new variable on checked out variant process and checkin without giving rights on data >> By dafualt dispaly checkbox should not checked in create variant
//23-05-2014			Sajid Khan				Bug 45864 - While delete variant from variant-base-process, now created workitem is not getting opened.
//27-05-2014            Kanika Manik            PRD Bug 42494 - BCC support at each email sending modules
// 28/05/2014           Anwar Danish            PRD Bug 42795 Merged - Activity wise customization of sending mail priority
//11/06/2014            Gourav Chadha			PRD Bug 42861 merged - In omniflow UserQueueTable is replaced with QUserGroupView to provide omniflow support for applications not using WMconnect call
//26-06-2014			Sajid Khan				Bug 46244 - Arabic: If Select value from date-picker and save the workitem, an error is generated. 
//26/06/2014            Anwar Danish            PRD Bug 45001 merged - Add new action ids, handle also at front end configuration screen and history generation functionality.
//12-08-2014			Sajid Khan				Multilingual Support for Queue, Activity, Process,Aliases - Bug 41790.
//01/10/2014			Mohnish Chopra			Bug 50574 - SAP: Workitem is not moving after SAP Adapter Activity
//05/11/2014			Anwar Danish		    PRDP Bug 51341 merged - To provide support to fetch action description/statement corresponding to each actionId at server end via WFGetWorkItemHistory and WFGetHistory API call itself.
//14/04/2015            RishiRam Meel           New API WFGetTasksForUser added for iBPS Case Management 
//15-04-2015			Sajid Khan				WFGetTaskList and WFGetTaskPropertyAssociation API introduce in IBPS3.0 for Case Management.
//16-04-2015            RishiRam Meel           New API WFRevokeTask added for  iBPS Case Management 
//10-05-2015            RishiRam Meel           New API WFAddTask added for  iBPS Case Management 
//12-05-2015            RishiRam Meel           New API WFGetTemplateList added for  iBPS Case Management 
//14-04-2015            RishiRam Meel           New API WFGetTemplateField added for  iBPS Case Management 
//21-05-2015			Mohnish Chopra			Changes in API WFGetWorkdeskLayout and WFSetWorkdeskLayout for Case Management
//26-05-2015            Sajid Khan              WFGetTaskList modified for fetch those tasks whose scope is U [Run Time Created Tasks]
//08-06-2015			Mohnish Chopra			Added API WFGetTaskListForCalendar for Case Management
//24/06/2015			Mohnish Chopra			Changes for DBLinking in Case Management.
//14/07/2015			Mohnish Chopra			Changes for Case Management --Add task was failing without template task data.
//19/08/2015            Rishiram Meel           Bug 54778 - Windows : JBOSS : SQL : Functional > Dynamic constant on Inclusive Collect gateway is not working at run time
//01/09/2015			Mohnish Chopra			Changes for form association with Task in Case Management
//08/09/2015			Mohnish Chopra			Changes for notify by email in Case Management
//11/09/2015			Mohnish Chopra			Changes for Case Management --Returning WM_INVALID_CASE error in case Task is initiated or Added for a case which has already moved from Case Workstep 
//												& Returning ActionDateTime(Revoked Time) from WFRevokeTask API
//22/09/2015			Mohnish Chopra			Changes for Case Management --Rights on Case Visualisation during Initiation of Task
//26/10/2015			Kirti Wadhwa			Changes for Case Management -- Mark a task as Read/Unread on selection 
//26/10/2015			Kirti Wadhwa			Changes for Case Management -- Sort the tasks on the basis of ReadFlag status in WFGetTasksForUser
//27/10/2015			Kirti Wadhwa			Changes for Case Management -- Set Priority of task as asked by user.
//28/10/2015			Kirti Wadhwa			Changes for Case Management -- Added API WFCompleteTask to complete task.
//03/11/2015			Mohnish Chopra			Changes for Case Management -- Can Initiate Requirement
//16 Nov 2015			Sajid Khan				Hold Workstep Enhancement
//16/11/2015	        Mohnish Chopra			Changes for Case Management -- Sending AssignedBy in GetTaskList
//26/11/2015			Mohnish Chopra			Bug 57360 - error while performing done operation in a WI where all mandatory tasks are completed
//26/11/2015			Mohnish Chopra			Bug 57754 - multiple labels and textboxes are visible inside task
//26/11/2015			Mohnish Chopra			Bug 57417 - task name already exists error in adhoc task
//26/11/2015            Kirti Wadhwa            Changes for Case Management -- FomBuffer handling in WFAddTask   
//26/11/2015            Kirti Wadhwa            Bug 57382- add new error code in WFInitiateTAsk WF_TASK_PRECONDITION_FAILED
//26/11/2015            Kirti Wadhwa            Changes for Case Management -- Returning Global template Metadata in WFGetTemplateField
//01/12/2015			Mohnish Chopra			Bug 57926 - case worker can initiate task, even when case manager revoked the task from case worker
//03/12/2015			Kirti Wadhwa			Changes in WFGetTaskList for Bug 58054 - user is unable to perform done operation when same task is mandatory in all case workdesk
//04/12/2015			Mohnish Chopra			Bug 58097 - case worker can add task even when task has been revoked from the worker by case manager. 
//												Renamed WF_INITIATE_TASK_NOT_ALLOWED to WF_NO_AUTHORIZATION_ON_CASE for more general error.
//												and Changes for Bug 58094 - adhoc task added by casemanager is not visible in task list of caseworker and vice-versa
//07/12/2015			Mohnish Chopra			Bug 58093 - error while initiating adhoc tast after adding task variable
//22/12/2015			Kirti Wadhwa			Changes in WFInitiateTask for  Bug 57652 - while diversion, tasks should also be diverted along with the workitems 
//28/12/2015            Kirti Wadhwa            Changes are made in WFGetTaskList for Bug 58149 - my cases is not getting refreshed when task is revoked from case worker
//08/02/2016			Kirti Wadhwa            Changes are made in WFGetTaskPropertyAssociation for Bug 58158 - task worker is able to provide all rights to todo/exception/form/document while initiating task.
//10/02/2016			Mohnish Chopra			Bug 58949 - 	EAP+SQL+WINDOWS: revoke button for adhoc task is not working + details not showing revoke statement 
//18/02/2016			Kirti Wadhwa			Bug 59097 - EAP+SQL+WINDOWS: Sort on feature for my cases & my tasks is inconsistance . Changes are done in WFGetTasksForUser.
//18/02/2016			Kirti Wadhwa			Done changes for  improper Batching functioning ( in oracle ) in  WFGetTasksForUser.
//18/02/2016			Kirti Wadhwa            Done changes for Sort and Batching on ReadFlag in WFGetTasksForUser
//23/02/2016			Kirti Wadhwa			 Done changes in WFGetTemplateField for Bug 59235.
// 03/03/2015			Mohnish Chopra			Merged Prdp BUGS for ICICI : 56950
//04/03/2016			Kirti Wadhwa			Changes for Bug 58771 - EAP + Oracle + Windows: case worker can add task even when task has been revoked from the worker by case manager (
//05/07/2016			Mohnish Chopra			Changes for Postgres in WFGetProcessDefinition
//20 July 2016                  Sajid Khan                      Bug 62747 - IBPS3.0 Postgres(BPM):unable to create variant it shows "Error in updating properties of Variant
//26/07/2016            Kirti Wadhwa            Changes for Bug 62833 - Postgre | During initiation of Adhoc task, case manager is not able to see the option of Form rights only document rights are visible
//09/08/2016			Mohnish Chopra			Changes for Reopened Bug 62833 - Postgre | During initiation of Adhoc task, case manager is not able to see the option of Form rights only document rights are visible
//22/12/2016            Rishi Ram 				Bug 65064 - iBPS Mobile: Only Mobile enabled process should shown
//02/02/2017            Rishi Meel				Bug 66954 - If sweep or click on more action action button >>click on initiate>> unable to Initiate WI .
//09/02/2017            Rishi Meel				Bug 67153 - Custom task when initiated shows the attached error.
//20/02/2017            Sajid Khan              Bug 67387 - Error in WFGetProcessList if the locale of the user searching is null
//01/03/2017            Rishi Meel              Bug 67588 - iBPS 3.0 SP-2 +SQL: Getting error in workitem creation on old version of process
//02/03/2017			Mohnish Chopra			Bug 67697 - iBPS 3.0 SP-2 +SQL: Getting error if approve request of enable variant 
//08/03/2017            RishiRam Meel			Bug 67812 - iBPS 3.0 - SP2 | Not able to initiate a task having special character '&' in instructions
//07/04/2017			Kumar Kimil				Bug 63462 -Wrong escalation time set in case of EntryDateTime system variable used in Escalation rule
//12/04/2017           Rakesh K Saini           Bug 59932 - Optimization related to the DMS folder association with Process Definition.
//04/05/2017           Kumar Kimil              'ExtIObjId' was replaced by 'ExtObjId' for Bug 59932 - Optimization related to the DMS folder association with Process Definition.
//09-05-2017            Sajid Khan			Queue Varaible Extension Enahncement
//07/05/2017		Kumar Kimil      		Bug 55927 - Support for API Wise Synchronous Routing.
//09/05/2017		   Kumar Kimil			Bug 67446-Issues in Synchonous mode routing - Workitem not routing to second workstep of subprocess itself
//30/06/2017           Kumar Kimil          Email Notification to Case Manager and Task Initiator whenever a task gets completed
//03/07/2017		   Ambuj Tripathi			Changes to support Calendar Sharing feature in Case Management
//04/07/2017		Shubhankur Manuja		Changes to support rejecting a task in Case Management.
//11/07/2017		Shubhankur Manuja		Changes to support rejection of multiple task in a single call.
//18/07/2017        Kumar Kimil     Multiple Precondition enhancement
//26/07/2017        Kumar Kimil     Auto-Initiate Task based on Precondition 
//28/07/2017		Ambuj Tripathi      	Added the changes for the task expiry feature for Case Management
//09/08/2017		Shubhankur Manuja		Bug 70947 - External ejb methods were not getting called.
//11/08/2017		Mohnish Chopra			Changes for Adhoc Task and iFORM support in case management
//16/08/2017		Ambuj Tripathi  Code review points added for the task expiry and task escalation feature for Case Management
//19/08/2017        Kumar Kimil       Process Task Changes(Synchronous and Asynchronous)
//21/08/2017		Ambuj Tripathi  Code review points added for the task expiry and task escalation feature for Case Management
//21/08/2017		Mohnish Chopra			Changes for Case management feedback points -- Returning declinedby , priority in WFGetTaskList . Not resetting assignedto in WFDeclineTask
//23/08/2017            Sajid Khan                      PRDP  Bug 69029 - Need to send escalation mail after every defined time
//28/08/2017		Ambuj Tripathi  		New API added for the UserGroup feature in for Case Management
//28/08/2017		Ambuj Tripathi  		UT Defects in the ReassignTask API on the integration server
//30/08/2017		Ambuj Tripathi  		Adding Review changes in the Decline task API
//06/09/2017		Mohnish Chopra			Changes for Adhoc task data saving approach
//06/09/2017        Kumar Kimil             Process task Changes (User Monitored,Synchronous and Asynchronous)
//12/09/2017        Ambuj Tripathi          Changes for Adding the searching, sorting & filtering in GetTasksForUser API.
//13/09/2017        Kumar Kimil             Revamping of Adhoc task
//18/09/2017        Kumar Kimil             Color Coding for Rework,escalated,expired taskId(Server changes)
//20/09/2017		Mohnish Chopra			Changes for Sonar issues
//22/09/2017        Kumar Kimil             Multiple Initiation of Task
//27/09/2017        Kumar Kimil              Changes for Sonar issues
//27/09/2017        Kumar Kimil             Bug 72147 - EAP+SQL: Getting error "requested Operation Failed" if add task with lengthy data containing special chars
//28/09/2017		Ambuj Tripathi			Bug fix for bug#71828, Add TurnaoundTime in teh tasks details if the task is not initiated
//28/09/2017		Ambuj Tripathi			Bug fix for bug#72202 Unable to reassign the Task getting error "Requested Operation Failed"
//28/09/2017        Kumar Kimil             Bug 71741 - Tool tip is not visible when task is in waiting state 
//29/09/2017        Kumar Kimil            Bug 72213 - EAP6.4+SQL:-Under New added task click on view form it shows Error
//3/10/2017        	Ambuj Tripathi         Bug 72224 - EAP+SQL: Getting error if save task form
//4/10/2017			Ambuj Tripathi			Added feature for adding the expiry and escalation for adhoc tasks.
//04/10/2017		Ambuj Tripathi   		Bug#72218 EAp 6.2+SQl:- Task Preferences functionality not working
//04/10/2017        Kumar Kimil             Changes in Auto-Initiate for Task-Preferences changes
//05/10/2017		Ambuj Tripathi   		Bug 72105-Specification issue While revoking a task, it doesn't ask for any confirmation. Added changes in WFGetTaskHistory to display the revoke comments.
//06/10/2017        Ambuj Tripathi          BUgFix for BUf#72224 Handling of special character for Instructions and goals while initiating adhoc task
//09/10/2017        Ambuj Tripathi          Bugfix#72457 Duplicate tasks in mytask window. Changed in the query of wfgettasksforuser.
//10/11/2017        Kumar Kimil             Bug 72004 - EAP 6.4+SQL:-Should not ask to approved in case if both case manager and case worker in the task are same
//23/10/2017        Ambuj Tripathi			Added changes for OFME Support in WFGetTemplateList API.
//24/10/2017        Kumar Kimil         Case Registration requirement--Upload Workitem changes
//30/10/2017		Sajid Khan			Bug 72940 - weblogic+oracle: Getting error on saving purge criteria

//31/10/2017        Kumar Kimil         Bug 72866 - Task not initiated getting error" The requested filter is invalid."
//01/11/2017        Ambuj Tripathi			Updated logic for OFME Support in WFGetTemplateList API.
//06/11/2017        Kumar Kimil         Bug 72824 - Action id bugs reported by simulator team
//07/11/2017		Ambuj Tripathi		Updated WFGetTasksForUser API to add URN tag in the API Output for Case Registration changes
//14/11/2017        Kumar Kimil         Bug 73459 - Case-Registration -Search Workitems
//15/11/2017        Kumar Kimil     API Changes for Case Registration
//17/11/2017        Ambuj Tripathi        Case registration changes for adding URN in the XML output of APIs
//17/11/2017        Ambuj Tripathi        Provision of TaskDueDate requirement in Expiry & escalation while initiatiating the task, minor bug fixes in the expiry and escalation modules.
//17/11/2017        Mohnish Chopra        Case Registration changes for Mailing Templates
//22/11/2017		Ambuj Tripathi		Bug 72004 - EAP 6.4+SQL:-Should not ask to approved in case if both case manager and case worker in the task are same.
//22/11/2017        Kumar Kimil     Multiple Precondition enhancement
//24/11/2017        Ambuj Tripathi		Bug 72530 - EAP 6.4+SQL:-Task immediately shown expired the moment it is initiated. 
//05/12/2017		Mohnish Chopra		Changes for Sonar .Resources should be closed 
//07/12/2017		Ambuj Tripathi		Bug#71971 merging :: Sessionid and other important input parameters to be added in output xml response of important APIs
//12/08/2017        Kumar Kimil         [Bug 73895] Helpdesk Alpha Release: On initiating a task, first it goes in waiting, then on refereshing its state gets changed to Initiated
//12/12/2017		Sajid Khan			Bug 73913 - Rest Ful webservices implementation in iBPS
//13/12/2017		Ambuj Tripathi		Changes done to fix the issues of Sonar
//14/12/2017		Shubhankur Manuja	Bug 74184 - External Jar's method is getting called but parameter as not mapping.
//18/12/2017		Ambuj Tripathi		Bug 72004 - EAP 6.4+SQL:-Should not ask to approved in case if both case manager and case worker in the task are same.
//03/01/2018		Mohnish Chopra		Bug 74326 - EAP6.4+SQL: If reassign task, URN should be shown in mail notification instead of processinstanceid & change label name of Case ID
//04/01/2018		Ambuj Tripathi		Bug 74294 - Remove batch size limit from server.xml in WMFetchProcessDefinitions API
//09/01/2018		AMbuj Tripathi		Bug 74626 - Decline and Reassign showing disabled, updated teh logic in WFGetTasksForUser
//13/01/2018        Kumar Kimil         Bug 74878 - Arabic:: Not able to save alias Name for search variables if try to save in Arabic 
//30/01/2018        Kumar Kimil         Bug 74756 - For Task Approval, If task initiator is unable to approve the task (due to any reason), Case Manager should be able to make an exceptional approval on the task from Case Summary/File view
//12/02/2018        Ambuj Tripathi		Bug 73001 - WBL+Oracle: Getting error to open task from "Open Task" link of received mail
//13/02/2018        Kumar Kimil         Bug 76009 - Task state issue
//22/02/2018		Ambuj Tripathi		Bug 75515 - Arabic ibps 4: Validation message is coming in English and that out of colored area 
//05/03/2018		Ambuj Tripathi		Bug 76277 - Arabic:-Unable to initate Linked sub process getting error"null"
//14/03/2018		Ambuj Tripathi		Bug 76548 - EAP6.4+SQL: If more than one combos are taken in adhoc task, value of all combos are shown in each combo
//17/03/2018            Sajid Khan              Merging Bug 76281 - Workitem was getting suspended when lookup of omnidocs fail .
//11/04/2018		Ambuj Tripathi		Bug 77005 - Not able to introduce Workitem. Reason - ownerEmailId was made mandetory tag in PS, so made changes to send this tag even if owner email is empty.
//18/04/2018		Ambuj Tripathi		Issue in helpdesk production - Completed tasks appear as expired after due date is passed(Helpdesk Production issue)
//24/04/2018       	Ambuj Tripathi		Bug 77302 - Getting error "Precondition not met" if initate more then one task.
//27/04/2018        Kumar Kimil         Bug 77175 - EAP6.4+SQL: Getting error on changing value of dynamic constants
//01/05/2018        Kumar Kimil         Bug 77372 - EAP 6.4+SQL: If modify activity name in case of multiple version of process, activity name of latest version is showing in Workstep picklist
//04/05/2018		Ambuj Tripathi		Bug 77303 - New Added task not getting reflecting in case visualization.
//11/05/2018		AMbuj Tripathi		Bug 77524 - getting error while initiate task - e.getSQLState() was throwing null pointer exception. The resultset null issue is already within try catch.
//11/05/2018		AMbuj Tripathi		Bug 78148 - Assigned task not visible in My task.
//30/05/2018		Ambuj Tripathi		Bug 78191 - Incorrect case id coming in task email. 
//11/06/2018		Mohnish Chopra		Helpdesk issues - Auto Initiate failure causes infinite mails to User
//25/06/2018		AMbuj Tripathi		Bug 78148 - Assigned task not visible in My task. -- Adding UPPER check in the remaining APIs which are comparing the username in SQL Query
//10/07/2018		AMbuj Tripathi		Bug 78895 - Mobile(iOS):-Unable to create Task it shows error - Postgres specific issue - not occuring in SQL/Oracle
//11/07/2018		Ambuj Tripathi		Bug 78917 - Case Management:-Not able to initate multiple task getting error "Requested operation failed" 
//13/07/2018		Ambuj Tripathi		[Bug 78934] PMWeb: Issue in creating variant
//10/08/2018		Ambuj Tripathi		Bug 79413 - Case management:-Getting error "The requested filter is invalid"
//05/09/2018		Mohnish Chopra		Bug 80085 - Ibps 4.0:Task gets expired only once. It should get expired everytime it gets initiated i.e Valid till should be set everytime task is initiated. 
//05/09/2018		Mohnish Chopra		Bug 80086 - iBPS 4:Provision to call Revoke and Reassign APi's on expiry of task based on some ini.
//21/11/2018		Ravi Ranjan				Bug 80133 - Task functionality not working properly for distributed Case workitem as user is able to view tasks assigned for other parallel case workitems 
//08/01/2019		Ravi Ranjan Kumar	Bug 79120 - Create Adhoc task Showing error "The requested operation failed.
//19/02/2019		Ambuj Tripathi		Bug 83161 - Entry not going in Escalation Table
//21/02/2019		Ambuj Tripathi		Changes for CQRN-0000035978 - in WFGetPRocessList API to get the process details if queueId is supplied.
//08/03/2019		Mohnish Chopra		Bug 83485 - iBPS 4.0 : &amp; is coming instead of & in instructions of Case Summary document .
//12/06/2019		Ravi Ranjan Kumar	Bug 85207 - Support of special character in Doc type
//05/12/2019		Ravi Ranjan Kumar	Bug 86949 - Remove support for filter from WMFetchProcessDefinitions API(PRDP Bug Merging)
//10/12/2019	Ravi Ranjan Kumar PRDP Bug Merging(Bug 87270 - Handling done to execute product API's even if API name in input xml has different case.)
//20/12/2019		Ambuj Tripathi	Changes for DataExchange Functionality
//27/12/2019		Ravi Ranjan Kumar		Bug 89374 - Support for Global Webservice and external method 
//27/12/2019		Chitranshi Nitharia     Bug 89384 - Support for global catalog function framework
//20/12/2019		Mohnish Chopra			Changes for Multilingual support in WFGetQuickSearchVariables.
//24/01/2020        Chitranshi Nitharia     Bug 90094 - Creation Of Utility User Via API instead of scripts
//27/01/2020		Ravi Ranjan Kumar		Bug 89722 - Getting error "The Requested operation failed " on click on MY Task.
//30/01/2020		Ravi Ranjan Kumar 	Bug 76106 - Not able to check in process getting error "Requested operation failed."
//30/01/2020		Ambuj Tripathi		Data Exchange INternal Bug fix for Oracle Database
//05/02/2020		Ambuj Tripathi		Bug 90445 - Weblogic+Oracle & Jboss+Postgres: Data exchange operations Insert, Update are not working.
//05/02/2020		Shahzad Malik		Bug 90535 - Product query optimization
//21/02/2020		Ambuj Tripathi		Bug 90875 - Unable to initiate adhoc task getting error
//28/02/2020		Ambuj Tripathi		Bug 91099 - Process Server for Data Exchange process is not working
//08/04/2020		Shahzad Malik		Bug 91513 - Optimization in mailing utility.
//28/04/2020		Ambuj Tripathi		Bug 91981 - French:-Case summary showing in english - French data was getting corrupted after calling stringescapeutils.excapexml.
//12/05/2020		Ravi Ranjan Kumar		Bug 92328 - JWS: Unable to introduce workitem getting error "operation failed".
//06/11/2020        Sourabh Tantuway Bug 95940 - iBPS 4.0 : Requirement for optimizations related to workitem expiry.
//23/02/2023        Vaishali Jain    Bug 124213 - iBPS 5 SP1 patch2 - CQRN-0000247054 - Can't able to submit reassigned task
//25/01/2023		Vaishali Jain		iBPS5SP2 - CQRN-0000242109 - Getting error in purge criteria window (NoClassDefFoundError OracleClob)
//27/02/2023		Vaishali Jain		Bug 124357 - iBPS 5 - CQRN-0000250118 - Issue in no of trials in case workstep
//17/04/2023		Vaishali Jain			iBPS5x - CQRN-0000259119 - Requirements in Task Email notification
//28/04/2023 Satyanarayan Sharma Bug 127811 - Requirement to provide filter support on association of users/groups in a task on case workstep.
//28/04/2023 Satyanarayan Sharma Bug 124359 - Adding Task Scope tag in WFGetTasksForUser Api output.
//28/04/2023 Satyanarayan Sharma Bug 127809 - On CaseManager workdesk data and document rules should work on WFGetTaskList api call instead of Task Initiation.
//----------------------------------------------------------------------------------------------------
package com.newgen.omni.jts.txn.wapi;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang.StringEscapeUtils;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.newgen.omni.jts.cache.CachedObjectCollection;
import com.newgen.omni.jts.cmgr.XMLGenerator;
import com.newgen.omni.jts.cmgr.XMLParser;
import com.newgen.omni.jts.constt.JTSConstant;
import com.newgen.omni.jts.constt.WFSConstant;
/* Tirupati Srivastava : inserting two API's for quicksearch feature */
import com.newgen.omni.jts.dataObject.WFAdminLogValue;
import com.newgen.omni.jts.dataObject.WFAttributedef;
import com.newgen.omni.jts.dataObject.WFCalAssocData;
import com.newgen.omni.jts.dataObject.WFDocDataClassMapping;
import com.newgen.omni.jts.dataObject.WFDuration;
import com.newgen.omni.jts.dataObject.WMAttribute;
import com.newgen.omni.jts.excp.JTSException;
import com.newgen.omni.jts.excp.JTSSQLError;
import com.newgen.omni.jts.excp.WFSError;
import com.newgen.omni.jts.excp.WFSErrorMsg;
import com.newgen.omni.jts.excp.WFSException;
import com.newgen.omni.jts.srvr.DatabaseTransactionServer;
import com.newgen.omni.jts.srvr.ServerProperty;
import com.newgen.omni.jts.srvr.WFFindClass;
import com.newgen.omni.jts.srvr.WFServerProperty;
import com.newgen.omni.jts.txn.wapi.common.WfsStrings;
import com.newgen.omni.jts.util.EmailTemplateUtil;
import com.newgen.omni.jts.util.WFCreateWorkitemInternal;
import com.newgen.omni.jts.util.WFRoutingUtil;
import com.newgen.omni.jts.util.WFSUtil;
import com.newgen.omni.jts.util.WFTMSUtil;
import com.newgen.omni.jts.util.WFTaskInfoClass;
import com.newgen.omni.jts.util.WFXMLUtil;
import com.newgen.omni.jts.util.WorkerThread;
import com.newgen.omni.util.cal.WFCalUtil;
import com.newgen.omni.wf.data.process.WFProcess;
import com.newgen.omni.wf.data.workitem.WFWorkitem;
import com.newgen.omni.wf.ps.WFRuleEngine;
import com.newgen.omni.wf.util.app.constant.ApplicationConstants;
import com.newgen.omni.wf.util.constant.NGConstant;
import com.newgen.omni.wf.util.misc.Utility;
import com.newgen.omni.wf.util.xml.api.CreateXML;

import oracle.jdbc.OracleResultSet;
import oracle.sql.CLOB;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.util.Arrays;

public class WMProcessDefinition extends com.newgen.omni.jts.txn.NGOServerInterface {
//								  implements com.newgen.omni.jts.txn.Transaction {
//----------------------------------------------------------------------------------------------------
//	Function Name 				:	execute
//	Date Written (DD/MM/YYYY)	:	16/05/2002
//	Author						:	Prashant
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:   none
//	Return Values				:	String
//	Description					:   Reads the Option from the input XML and invokes the
//									Appropriate function .
//----------------------------------------------------------------------------------------------------
    public String execute(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException,
        WFSException {
        String option = parser.getValueOf("Option", "", false);
        String outputXml = null;
//----------------------------------------------------------------------------
// Changed By							: Prashant
// Reason / Cause (Bug No if Any)	: WFL_2.0.5.014
// Change Description			: Call names WMFetchProcessDefinitions, WMFetchProcessDefinitionStates
//													WMFetchProcessInstanceAttributes ,	WMFetchProcessInstances
//													chganged for proper understanding .
//----------------------------------------------------------------------------
		if (("WMFetchProcessDefinition").equalsIgnoreCase(option)) {
			outputXml = WMFetchProcessDefinitions(con, parser, gen);
		} else if (("WMFetchProcessDefinitions").equalsIgnoreCase(option)) {
			outputXml = WMFetchProcessDefinitions(con, parser, gen);
		} else if (("WMFetchProcessDefinitionState").equalsIgnoreCase(option)) {
			outputXml = WMFetchProcessDefinitionStates(con, parser, gen);
		} else if (("WMFetchProcessDefinitionStates").equalsIgnoreCase(option)) {
			outputXml = WMFetchProcessDefinitionStates(con, parser, gen);
		} else if (("WMChangeProcessDefinitionState").equalsIgnoreCase(option)) {
			outputXml = WMChangeProcessDefinitionState(con, parser, gen);
		} else if (("WMCreateProcessInstance").equalsIgnoreCase(option)) {
			outputXml = WMCreateProcessInstance(con, parser, gen);
		} else if (("WMStartProcess").equalsIgnoreCase(option)) {
			outputXml = WMStartProcess(con, parser, gen);
		} else if (("WMTerminateProcessInstance").equalsIgnoreCase(option)) {
			outputXml = WMTerminateProcessInstance(con, parser, gen);
		} else if (("WMFetchProcessInstanceStates").equalsIgnoreCase(option)) {
			outputXml = WMFetchProcessInstanceState(con, parser, gen);
		} else if (("WMFetchProcessInstanceState").equalsIgnoreCase(option)) {
			outputXml = WMFetchProcessInstanceState(con, parser, gen);
		} else if (("WMChangeProcessInstanceState").equalsIgnoreCase(option)) {
			outputXml = WMChangeProcessInstanceState(con, parser, gen);
		} else if (("WMFetchProcessInstanceAttribute").equalsIgnoreCase(option)) {
			outputXml = WMFetchProcessInstanceAttributes(con, parser, gen);
		} else if (("WMFetchProcessInstanceAttributes").equalsIgnoreCase(option)) {
			outputXml = WMFetchProcessInstanceAttributes(con, parser, gen);
		} else if (("WMGetProcessInstanceAttributeValue").equalsIgnoreCase(option)) {
			outputXml = WMGetProcessInstanceAttributeValue(con, parser, gen);
		} else if (("WMAssignProcessInstanceAttribute").equalsIgnoreCase(option)) {
			outputXml = WMAssignProcessInstanceAttribute(con, parser, gen);
		} else if (("WMFetchProcessInstance").equalsIgnoreCase(option)) {
			outputXml = WMFetchProcessInstances(con, parser, gen);
		} else if (("WMFetchProcessInstances").equalsIgnoreCase(option)) {
			outputXml = WMFetchProcessInstances(con, parser, gen);
		} else if (("WMGetProcessInstance").equalsIgnoreCase(option)) {
			outputXml = WMGetProcessInstance(con, parser, gen);
		} else if (("WFGetWorkItemScanningInfo").equalsIgnoreCase(option)) {
			outputXml = WFGetWorkItemScanningInfo(con, parser, gen);
		} else if (("WFGetDMSFolderDefinition").equalsIgnoreCase(option)) {
			//outputXml = WFGetDMSFolderDefinition(con, parser, gen);
		} else if (("WMGetProcessList").equalsIgnoreCase(option)) {
			outputXml = WMGetProcessList(con, parser, gen);
		} else if (("WMSetTurnAroundTime").equalsIgnoreCase(option)) {
			outputXml = WMSetTurnAroundTime(con, parser, gen);
		} else if (("WFGetProcessProperty").equalsIgnoreCase(option)) {
			outputXml = WFGetProcessProperty(con, parser, gen);
		} else if (("WFGetProcessDefinition").equalsIgnoreCase(option)) {
			outputXml = WFGetProcessDefinition(con, parser, gen);
		} else if (("WFGetProcessInfo").equalsIgnoreCase(option)) {
			outputXml = WFGetProcessInfo(con, parser, gen);
			// --------------------------------------------------------------------------------------
			// Changed On  : 24/02/2005
			// Changed By  : Ruhi Hira
			// Description : SrNo-2, Omniflow 6.0, Feature: DynamicRuleModification, New APIs
			//				WFGetDynamicConstants, WFSetDynamicConstants added.
			// --------------------------------------------------------------------------------------
		} else if (("WFGetDynamicConstants").equalsIgnoreCase(option)) {
			outputXml = WFGetDynamicConstants(con, parser, gen);
		} else if (("WFSetDynamicConstants").equalsIgnoreCase(option)) {
			outputXml = WFSetDynamicConstants(con, parser, gen);
		} else if (("WFSetQuickSearchVariables").equalsIgnoreCase(option)) { /* Tirupati Srivastava : inserting two API's for quicksearch feature */
			outputXml = WFSetQuickSearchVariables(con, parser, gen);
		} else if (("WFGetQuickSearchVariables").equalsIgnoreCase(option)) {
			outputXml = WFGetQuickSearchVariables(con, parser, gen);
		} else if (("WFGetExtInterfaceRules").equalsIgnoreCase(option)) {
			outputXml = WFGetExtInterfaceRules(con, parser, gen);
		} else if(("WFSetExportPurgeCriteria").equalsIgnoreCase(option)) {	//WFS_8.0_055
		    outputXml = WFSetExportPurgeCriteria(con, parser, gen);
	    } else if(("WFGetExportPurgeCriteria").equalsIgnoreCase(option)) {	//WFS_8.0_055
		    outputXml = WFGetExportPurgeCriteria(con, parser, gen);
        } else if(("WFGetWorkdeskLayout").equalsIgnoreCase(option)) {	//WFS_8.0_055
		    outputXml = WFGetWorkdeskLayout(con, parser, gen);
        } else if(("WFSetWorkdeskLayout").equalsIgnoreCase(option)) {	//WFS_8.0_055
		    outputXml = WFSetWorkdeskLayout(con, parser, gen);
		} else if (("WFGetProcessVariantList").equalsIgnoreCase(option)) {
			outputXml = WFGetProcessVariantList(con, parser, gen);
		} else if (("WFCreateProcessVariant").equalsIgnoreCase(option)) {
			outputXml = WFCreateProcessVariant(con, parser, gen);
		} else if (("WFGetProcessVariantInfo").equalsIgnoreCase(option)) {
			outputXml = WFGetProcessVariantInfo(con, parser, gen);
		} else if (("WFDeleteProcessVariant").equalsIgnoreCase(option)) {
			outputXml = WFDeleteProcessVariant(con, parser, gen);
		} else if(("WFChangeProcessVariantState").equalsIgnoreCase(option)) {	//WFS_8.0_055
            outputXml = WFChangeProcessVariantState(con, parser, gen);
        } else if(("WFModifyProcessVariant").equalsIgnoreCase(option)) {	//WFS_8.0_055
            outputXml = WFModifyProcessVariant(con, parser, gen);
        }  else if(("WFGetTaskList").equalsIgnoreCase(option)) {	
            outputXml = WFGetTaskList(con, parser, gen);
        }  else if(("WFGetTasksForUser").equalsIgnoreCase(option)) {	//WFS_8.0_055
		    outputXml = WFGetTasksForUser(con, parser, gen);
        } else if(("WFGetTaskPropertyAssociation").equalsIgnoreCase(option)) {	//WFS_8.0_055
		    outputXml = WFGetTaskPropertyAssociation(con, parser, gen);
        }  else if(("WFRevokeTask").equalsIgnoreCase(option)) {	//WFS_8.0_055
		    outputXml = WFRevokeTask(con, parser, gen);
    	} else if (("WFDeclineTask").equalsIgnoreCase(option)) {
      		outputXml = WFDeclineTask(con, parser, gen);
        }else if(("WFInitiateTask").equals(option)) {	 
		    outputXml = WFInitiateTask(con, parser, gen);
        }else if(("WFGetTemplateForTask").equalsIgnoreCase(option)) {	
		    outputXml = WFGetTemplateForTask (con, parser, gen);
        } else if(("WFAddTask").equalsIgnoreCase(option)) {	
		    outputXml = WFAddTask(con, parser, gen);
        } else if(("WFGetTemplateList").equalsIgnoreCase(option)) {	
		    outputXml = WFGetTemplateList(con, parser, gen);
		   
        }else if(("WFGetTemplateField").equalsIgnoreCase(option)) {	
		    outputXml = WFGetTemplateField(con, parser, gen);
        }else if(("WFGetTaskListForCalendar").equalsIgnoreCase(option)) {	
		    outputXml = WFGetTaskListForCalendar(con, parser, gen);
        }else if(("WFChangeTaskReadStatus").equalsIgnoreCase(option)){
        	outputXml=WFChangeTaskReadStatus(con,parser,gen);
        }else if(("WFChangeTaskPriorityStatus").equalsIgnoreCase(option)){
        	outputXml=WFChangeTaskPriorityStatus(con,parser,gen);
        }else if(("WFCompleteTask").equalsIgnoreCase(option)){
        	outputXml=WFCompleteTask(con,parser,gen);
        }else if(("WFReassignTask").equalsIgnoreCase(option)){
        	outputXml=WFReassignTask(con,parser,gen);
        }else if(("WFInitiateProcessTask").equalsIgnoreCase(option)){
        	outputXml=WFInitiateProcessTask(con,parser,gen);
        } else if (("WFGetCatalogMethodInfo").equalsIgnoreCase(option)) {
            outputXml = WFGetCatalogMethodInfo(con, parser, gen);
        }else {
        	outputXml = gen.writeError("WMProcessDefinition", WFSError.WF_INVALID_OPERATION_SPECIFICATION,
        			0, WFSErrorMsg.getMessage(WFSError.WF_INVALID_OPERATION_SPECIFICATION), null,
        			WFSError.WF_TMP);
        }
		return outputXml;
	}

//----------------------------------------------------------------------------------------------------
//	Function Name 				:	WMFetchProcessDefinition
//	Date Written (DD/MM/YYYY)	:	16/05/2002
//	Author						:	Prashant
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:   none
//	Return Values				:	String
//	Description					:   Returns the next process definition from the set of
//									process definitions that met the selection criterion
//----------------------------------------------------------------------------------------------------
    public String WMFetchProcessDefinitions(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
		StringBuilder outputXML = new StringBuilder();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
                String engine = "";
				String option = parser.getValueOf("Option", "", false);
        try {
            int sessionID = parser.getIntOf("SessionId", 0, false);
            char countFlag = parser.getCharOf("CountFlag", 'N', true);
            engine = parser.getValueOf("EngineName");
            int noOfRectoFetch = parser.getIntOf("NoOfRecordsToFetch", ServerProperty.getReference().getBatchSize(), true);
            if (noOfRectoFetch > ServerProperty.getReference().getBatchSize() || noOfRectoFetch <= 0) //Added by Ahsan Javed for getBatchSize
                    //noOfRectoFetch = ServerProperty.getReference().getBatchSize();
            	noOfRectoFetch = 500;  //PRDP Bug Merge, Bug#74294 hardcoding batch size to 500
            int dbType = ServerProperty.getReference().getDBType(engine);
            StringBuffer tempXml = new StringBuffer(100);
            WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
            if (participant != null) {
                int fetchedRecordCount = 0;
                int k = 0;
                String processArr[] = new String[15];
                Vector processList = new Vector();
                //SrNo-6
                //Bug # 1716
                pstmt = con.prepareStatement(" Select ProcessDefId , VersionNo , ProcessName , ProcessState , RegPrefix , RegSuffix , RegStartingNo , ProcessTurnAroundTime , TATCalFlag , CabinetName , RouteFolderId , ScratchFolderId , WorkFlowFolderId , CompletedFolderId , DiscardFolderId from ( Select a.* , CabinetName , RouteFolderId , ScratchFolderId , WorkFlowFolderId , CompletedFolderId , DiscardFolderId  from "
                    + WFSUtil.join(dbType, "ProcessDefTable a " + WFSUtil.getTableLockHintStr(dbType) + " LEFT OUTER JOIN RouteFolderDefTable b " + WFSUtil.getTableLockHintStr(dbType) + " ON a.ProcessDefId = b.ProcessDefId ") + ") c  where VersionNo = ( Select Max (VersionNo) from ProcessDefTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessName = c.ProcessName ) "
                    + WFSUtil.getBatch(parser, "", WFSConstant.WF_STR, "ProcessDefId", WFSConstant.WF_INT));

                pstmt.execute();
                rs = pstmt.getResultSet();
                int i = 0;
                while (rs.next()) {
                    //SrNo-6
                    //Bug # 1716
                    processArr = new String[15];
                    for (int j = 0; j < 15; j++) {
                        processArr[j] = rs.getString(j + 1);
                    }
                    processList.addElement(processArr);
                    i++;
                }
                if (rs != null)
                    rs.close();
                pstmt.close();
                i = 0;
                int j = 0;
                //Bug # 1716
                while (i < processList.size()) {
                    try {
                        String[] tempArr = (String[]) processList.elementAt(i);
                        String processName = tempArr[2];
                        StringBuffer tempStr = new StringBuffer(parser.toString());
                        int processDefId = Integer.parseInt(tempArr[0]);
						boolean rightsFlag = WFSUtil.checkRights(con, dbType, WFSConstant.CONST_OBJTYPE_PROCESS, processDefId, sessionID, WFSConstant.CONST_PROCESS_VIEW);
						parser.setInputXML(tempStr.toString());
						if (rightsFlag) {
							if (j < noOfRectoFetch) {
								tempXml.append("\n<ProcessDefinition>\n");
								tempXml.append(gen.writeValueOf("ProcessDefinitionId", tempArr[0]));
								tempXml.append(gen.writeValueOf("ProcessDefinitionVersion", tempArr[1]));
								tempXml.append(gen.writeValueOf("ProcessDefinitionName", tempArr[2]));
								tempXml.append(gen.writeValueOf("ProcessDefinitionState", tempArr[3]));
								tempXml.append(gen.writeValueOf("RegisterationPrefix", tempArr[4]));
								tempXml.append(gen.writeValueOf("RegisterationSuffix", tempArr[5]));
								tempXml.append(gen.writeValueOf("StartingNo", tempArr[6]));
								//Bug # 1716
								int durationId = 0;
								try {
									durationId = Integer.parseInt(tempArr[7]);
								} catch (Exception exp) {
									durationId = 0;
								}
								if (durationId > 0) {
									//int processDefId = Integer.parseInt(tempArr[0]);
									HashMap map = (HashMap) CachedObjectCollection.getReference().getCacheObject(con, engine, processDefId, WFSConstant.CACHE_CONST_WFDuration, "").getData();
									WFDuration duration = (WFDuration) map.get(durationId + "");
									if (duration != null) {
										tempXml.append(gen.writeValueOf("TurnAroundTime", duration.toString()));
									}
								}
								tempXml.append(gen.writeValueOf("ProcessTATCalFlag", tempArr[8]));
								tempXml.append(gen.writeValueOf("CabinetName", tempArr[9]));
								tempXml.append(gen.writeValueOf("RouteFolderId", tempArr[10]));
								tempXml.append(gen.writeValueOf("ScratchFolderId", tempArr[11]));
								tempXml.append(gen.writeValueOf("WorkFlowFolderId", tempArr[12]));
								tempXml.append(gen.writeValueOf("CompletedFolderId", tempArr[13]));
								tempXml.append(gen.writeValueOf("DiscardFolderId", tempArr[14]));
								tempXml.append("\n</ProcessDefinition>\n");
								j++;
								fetchedRecordCount++;
							}
						}
						i++;
					} catch (Exception e) {
						i++;
					}
				}
				if (fetchedRecordCount > 0) {
					tempXml.insert(0, "<ProcessDefinitions>\n");
					tempXml.append("</ProcessDefinitions>\n");
				} else {
					mainCode = WFSError.WM_NO_MORE_DATA;
					subCode = 0;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}
				tempXml.append(gen.writeValueOf("Count", String.valueOf(fetchedRecordCount)));
				tempXml.append(gen.writeValueOf("RetrievedCount", String.valueOf(fetchedRecordCount)));
			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if (mainCode == 0) {
				outputXML.append(gen.createOutputFile("WMFetchProcessDefinitions"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(tempXml);
				outputXML.append(gen.closeOutputFile("WMFetchProcessDefinitions"));
			}
		} catch (SQLException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0)
				if (e.getSQLState().equalsIgnoreCase("08S01"))
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
				else
					descr = e.getMessage();
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (WFSException e) {
			mainCode = WFSError.WM_NO_MORE_DATA;
			subCode = 0;
			subject = WFSErrorMsg.getMessage(mainCode);
			descr = WFSErrorMsg.getMessage(subCode);
			errType = WFSError.WF_TMP;
		} catch (JTSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		}  finally {
			try {
				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
			} catch (Exception e) {}
			
		}if (mainCode != 0){
			
			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			outputXML.append(errorString);
		}
		return outputXML.toString();
	}
    
  //----------------------------------------------------------------------------------------------------
//	Function Name 				:	WFChangeTaskPriorityStatus
//	Date Written (DD/MM/YYYY)	:	27/10/2015
//	Author						:	Kirti Wadhwa
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:   none
//	Return Values				:	String
//	Description					:   Changes the priority of task on selection
//----------------------------------------------------------------------------------------------------
    public String WFChangeTaskPriorityStatus(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
    	
    	PreparedStatement pstmt = null;
    	StringBuilder outputXML = new StringBuilder();
    	int mainCode = 0;
    	int subCode = 0;
    	String subject = null;
    	String descr = null;
    	String errType = WFSError.WF_TMP;
    	String engine = parser.getValueOf("EngineName");
		String option = parser.getValueOf("Option", "", false);
    	String taskList = "";
    	int noOfTasks = 0;
    	XMLParser tmpParser = new XMLParser();
    	int PriorityState=0;
    	int rowsAffected=0;
    	try {
    		int sessionID = parser.getIntOf("SessionId", 0, false);
    		int dbType = ServerProperty.getReference().getDBType(engine);
    		int counter=0;
    		WFParticipant user = WFSUtil.WFCheckSession(con, sessionID); 
    		taskList = parser.getValueOf("TaskList", "N", false);		
    		String modifiedTime =WFSUtil.dbDateTime(con, dbType);

    		if (user != null) {
    			int userId=user.getid();
    			if(!taskList.equals("")){
    				noOfTasks = parser.getNoOfFields("TaskInfo");
    			}
    			if (con.getAutoCommit()) {
    				con.setAutoCommit(false);
    			}
    			PriorityState=parser.getIntOf("Priority",0,false);
    			String query="Update WFTASKSTATUSTABLE Set Priority = ? where ProcessInstanceID = ? and WorkItemId=? and ProcessDefId=? and ActivityId=? and TaskId=? and SubTaskId=? ";
    			pstmt = con.prepareStatement(query);
    			while(noOfTasks>0){
    				if(counter==0)
    				{
    					tmpParser.setInputXML(parser.getFirstValueOf("TaskInfo"));
    					counter++;
    				}
    				else{
    					tmpParser.setInputXML("");
    					tmpParser.setInputXML(parser.getNextValueOf("TaskInfo"));
    				}
    				int processDefId = tmpParser.getIntOf("ProcessDefId", 0, false);
    				int activityId = tmpParser.getIntOf("ActivityId",0,false);
    				int wId = tmpParser.getIntOf("WorkItemId", 0, false);
    				String pId = tmpParser.getValueOf("ProcessInstanceId","",false);
    				int taskId=tmpParser.getIntOf("taskId", 0, false);
    				int subTaskId = tmpParser.getIntOf("SubTaskId", 0, false);
    				pstmt.setInt(1,PriorityState);
    				WFSUtil.DB_SetString(2, pId, pstmt, dbType);
    				pstmt.setInt(3,wId);
    				pstmt.setInt(4,processDefId);
    				pstmt.setInt(5,activityId);
    				pstmt.setInt(6,taskId);
    				pstmt.setInt(7,subTaskId);
    				rowsAffected=pstmt.executeUpdate();
    				if(rowsAffected>0){
    					//WFSUtil.generateTaskLog(engine, con,dbType, pId,WFSConstant.WFL_TaskCompleted, wId, 
    							//processDefId,activityId,null,0,userId , user.getname(),null, taskId,subTaskId,modifiedTime);
    				}
    				else {
    					mainCode = WFSError.WF_NO_AUTHORIZATION;
    					subCode = 0;
    					subject = WFSErrorMsg.getMessage(mainCode);
    					descr = WFSErrorMsg.getMessage(subCode);
    					errType = WFSError.WF_TMP;
    	
    					String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
    					return errorString;

    				}
    				noOfTasks--;
    			}
    			if (pstmt != null) {
    				pstmt.close();
    				pstmt = null;
    			}
    		} 
    		else {
    			mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
    			subCode = 0;
    			subject = WFSErrorMsg.getMessage(mainCode);
    			descr = WFSErrorMsg.getMessage(subCode);
    			errType = WFSError.WF_TMP;
    		}

    		if (mainCode == 0) {

    			if (!con.getAutoCommit()) {
    				con.commit();
    				con.setAutoCommit(true);
    			}
    			
    			outputXML.append(gen.createOutputFile("WFChangeTaskPriorityStatus"));
    			outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
    			outputXML.append(gen.closeOutputFile("WFChangeTaskPriorityStatus"));
    		}

    	}

    	catch (SQLException e) {
    		WFSUtil.printErr(engine,"", e);
    		mainCode = WFSError.WM_INVALID_FILTER;
    		subCode = WFSError.WFS_SQL;
    		subject = WFSErrorMsg.getMessage(mainCode);
    		errType = WFSError.WF_FAT;
    		if (e.getErrorCode() == 0)
    			if (e.getSQLState().equalsIgnoreCase("08S01"))
    				descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
    			else
    				descr = e.getMessage();
    	} catch (NumberFormatException e) {
    		WFSUtil.printErr(engine,"", e);
    		mainCode = WFSError.WF_OPERATION_FAILED;
    		subCode = WFSError.WFS_ILP;
    		subject = WFSErrorMsg.getMessage(mainCode);
    		errType = WFSError.WF_TMP;
    		descr = e.toString();
    	} catch (NullPointerException e) {
    		WFSUtil.printErr(engine,"", e);
    		mainCode = WFSError.WF_OPERATION_FAILED;
    		subCode = WFSError.WFS_SYS;
    		subject = WFSErrorMsg.getMessage(mainCode);
    		errType = WFSError.WF_TMP;
    		descr = e.toString();
    	} catch (WFSException e) {
    		mainCode = WFSError.WM_NO_MORE_DATA;
    		subCode = 0;
    		subject = WFSErrorMsg.getMessage(mainCode);
    		descr = WFSErrorMsg.getMessage(subCode);
    		errType = WFSError.WF_TMP;
    	} catch (JTSException e) {
    		WFSUtil.printErr(engine,"", e);
    		mainCode = WFSError.WF_OPERATION_FAILED;
    		subCode = e.getErrorCode();
    		subject = WFSErrorMsg.getMessage(mainCode);
    		errType = WFSError.WF_TMP;
    		descr = e.getMessage();
    	} catch (Exception e) {
    		WFSUtil.printErr(engine,"", e);
    		mainCode = WFSError.WF_OPERATION_FAILED;
    		subCode = WFSError.WFS_EXP;
    		subject = WFSErrorMsg.getMessage(mainCode);
    		errType = WFSError.WF_TMP;
    		descr = e.toString();
    	}  finally {
    		try {
    			if (!con.getAutoCommit()) {
    				con.rollback();
    				con.setAutoCommit(true);
    			}
    		} catch (SQLException e1) {
    			// TODO Auto-generated catch block
    		}
    		try {
    			if (pstmt != null) {
    				pstmt.close();
    				pstmt = null;
    			}
    		} catch (Exception e) {}
    		
    	}
    	if (mainCode != 0) {

			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			outputXML.append( errorString);

		}
    	return outputXML.toString();
    }

    //----------------------------------------------------------------------------------------------------
    //	Function Name 				:	WFChangeTaskReadStatus
    //	Date Written (DD/MM/YYYY)	:	26/10/2015
    //	Author						:	Kirti Wadhwa
    //	Input Parameters			:	Connection , XMLParser , XMLGenerator
    //	Output Parameters			:   none
    //	Return Values				:	String
    //	Description					:   Changes the status of task as Read or unread on selection
    //----------------------------------------------------------------------------------------------------
    public String WFChangeTaskReadStatus(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {

    	PreparedStatement pstmt = null;
    	StringBuilder outputXML = new StringBuilder();
    	int mainCode = 0;
    	int subCode = 0;
    	String subject = null;
    	String descr = null;
    	String errType = WFSError.WF_TMP;
    	String engine = parser.getValueOf("EngineName");
		String option = parser.getValueOf("Option", "", false);
    	String taskList = "";
    	int noOfTasks = 0;
    	XMLParser tmpParser = new XMLParser();
    	String readFlag="";
    	int rowsAffected=0;
    	try {
    		int sessionID = parser.getIntOf("SessionId", 0, false);
    		int dbType = ServerProperty.getReference().getDBType(engine);
    		int counter=0;
    		WFParticipant user = WFSUtil.WFCheckSession(con, sessionID); 
    		String modifiedTime =WFSUtil.dbDateTime(con, dbType);
    		taskList = parser.getValueOf("TaskList", "N", false);		
    		if (user != null) {
    			int userId=user.getid();
    			if(!taskList.equals("")){
    				noOfTasks = parser.getNoOfFields("TaskInfo");
    			}
    			if (con.getAutoCommit()) {
    				con.setAutoCommit(false);
    			}
    			readFlag=parser.getValueOf("ReadFlag","N",false);
    			String query="Update WFTASKSTATUSTABLE Set readFlag = ? where ProcessInstanceID = ? and WorkItemId=? and ProcessDefId=? and ActivityId=? and TaskId=? and SubTaskId=? ";
    			pstmt = con.prepareStatement(query);
    			while(noOfTasks>0){
    				if(counter==0)
    				{
    					tmpParser.setInputXML(parser.getFirstValueOf("TaskInfo"));
    					counter++;
    				}
    				else{
    					tmpParser.setInputXML("");
    					tmpParser.setInputXML(parser.getNextValueOf("TaskInfo"));
    				}
    				int processDefId = tmpParser.getIntOf("ProcessDefId", 0, false);
    				int activityId = tmpParser.getIntOf("ActivityId",0,false);
    				int wId = tmpParser.getIntOf("WorkItemId", 0, false);
    				String pId = tmpParser.getValueOf("ProcessInstanceId","",false);
    				int taskId=tmpParser.getIntOf("taskId", 0, false);
    				int subTaskId = tmpParser.getIntOf("SubTaskId", 0, false);
    				pstmt.setString(1,readFlag);
    				WFSUtil.DB_SetString(2, pId, pstmt, dbType);
    				pstmt.setInt(3,wId);
    				pstmt.setInt(4,processDefId);
    				pstmt.setInt(5,activityId);
    				pstmt.setInt(6,taskId);
    				pstmt.setInt(7,subTaskId);
    				rowsAffected=pstmt.executeUpdate();
    				if(rowsAffected>0){
    					//WFSUtil.generateTaskLog(engine, con,dbType, pId,WFSConstant.WFL_TaskCompleted, wId, 
    					//		processDefId,activityId,null,0,userId , user.getname(),null, taskId,subTaskId,modifiedTime);
    				}
    				else {
    					mainCode = WFSError.WF_NO_AUTHORIZATION;
    					subCode = 0;
    					subject = WFSErrorMsg.getMessage(mainCode);
    					descr = WFSErrorMsg.getMessage(subCode);
    					errType = WFSError.WF_TMP;
    	
    					String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
    					return errorString;

    				}
    				noOfTasks--;
    			}
    			if (pstmt != null) {
    				pstmt.close();
    				pstmt = null;
    			}
    		} 
    		else {
    			mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
    			subCode = 0;
    			subject = WFSErrorMsg.getMessage(mainCode);
    			descr = WFSErrorMsg.getMessage(subCode);
    			errType = WFSError.WF_TMP;
    		}
    		if (mainCode == 0) {
    			if (!con.getAutoCommit()) {
    				con.commit();
    				con.setAutoCommit(true);
    			}
    			
    			outputXML.append(gen.createOutputFile("WFChangeTaskReadStatus"));
    			outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
    			/*outputXML.append(tempXML);*/
    			outputXML.append(gen.closeOutputFile("WFChangeTaskReadStatus"));
    		}
    	}
    	catch (SQLException e) {
    		WFSUtil.printErr(engine,"", e);
    		mainCode = WFSError.WM_INVALID_FILTER;
    		subCode = WFSError.WFS_SQL;
    		subject = WFSErrorMsg.getMessage(mainCode);
    		errType = WFSError.WF_FAT;
    		if (e.getErrorCode() == 0)
    			if (e.getSQLState().equalsIgnoreCase("08S01"))
    				descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
    			else
    				descr = e.getMessage();
    	} catch (NumberFormatException e) {
    		WFSUtil.printErr(engine,"", e);
    		mainCode = WFSError.WF_OPERATION_FAILED;
    		subCode = WFSError.WFS_ILP;
    		subject = WFSErrorMsg.getMessage(mainCode);
    		errType = WFSError.WF_TMP;
    		descr = e.toString();
    	} catch (NullPointerException e) {
    		WFSUtil.printErr(engine,"", e);
    		mainCode = WFSError.WF_OPERATION_FAILED;
    		subCode = WFSError.WFS_SYS;
    		subject = WFSErrorMsg.getMessage(mainCode);
    		errType = WFSError.WF_TMP;
    		descr = e.toString();
    	} catch (WFSException e) {
    		mainCode = WFSError.WM_NO_MORE_DATA;
    		subCode = 0;
    		subject = WFSErrorMsg.getMessage(mainCode);
    		descr = WFSErrorMsg.getMessage(subCode);
    		errType = WFSError.WF_TMP;
    	} catch (JTSException e) {
    		WFSUtil.printErr(engine,"", e);
    		mainCode = WFSError.WF_OPERATION_FAILED;
    		subCode = e.getErrorCode();
    		subject = WFSErrorMsg.getMessage(mainCode);
    		errType = WFSError.WF_TMP;
    		descr = e.getMessage();
    	} catch (Exception e) {
    		WFSUtil.printErr(engine,"", e);
    		mainCode = WFSError.WF_OPERATION_FAILED;
    		subCode = WFSError.WFS_EXP;
    		subject = WFSErrorMsg.getMessage(mainCode);
    		errType = WFSError.WF_TMP;
    		descr = e.toString();
    	}  finally {
    		try {
    			if (!con.getAutoCommit()) {
    				con.rollback();
    				con.setAutoCommit(true);
    			}
    		} catch (SQLException e1) {
    			// TODO Auto-generated catch block
    		}
    		try {
    			if (pstmt != null) {
    				pstmt.close();
    				pstmt = null;
    			}
    		} catch (Exception e) {}
    		
    	}
    	if (mainCode != 0) {

			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			outputXML.append( errorString);

		}
    	return outputXML.toString();
    }

//	Function Name 				:	WFCompleteTask
//	Date Written (DD/MM/YYYY)	:	28/10/2015
//	Author						:	Kirti Wadhwa
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:   none
//	Return Values				:	String
//	Description					:   Mark the task status as completed.
//----------------------------------------------------------------------------------------------------
    public String WFCompleteTask(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
    	
    	PreparedStatement pstmt = null;
    	StringBuilder outputXML = new StringBuilder(); 
    	int rowsAffected=0;
    	int mainCode = 0;
    	int subCode = 0;
    	String subject = null;
    	String descr = null;
    	String errType = WFSError.WF_TMP;
    	String engine = parser.getValueOf("EngineName");
        String option = parser.getValueOf("Option", "", false);
    	String taskList = "";
    	int noOfTasks = 0;
    	int taskType=0;
    	XMLParser tmpParser = new XMLParser();
    	WFParticipant user = null;
    	String urn=null;
		boolean callTaskListThread=false; 
    	int processDefId=0;
    	int activityId=0;
    	int wId =0;
    	String pId="";
    	int sessionID=0;
		String caseManager="";
		try {
			sessionID = parser.getIntOf("SessionId", 0, false);
    		int dbType = ServerProperty.getReference().getDBType(engine);
    		int counter=0;
    		char omniServiceFlag = parser.getCharOf("OmniService", 'N', true);
    		boolean approvalRequired =false;
    		if (omniServiceFlag == 'Y') {
    			 user = new WFParticipant(0, "System", 'P', "SERVER", Locale.getDefault().toString());
    		}
    		else{
    			user = WFSUtil.WFCheckSession(con, sessionID);
    			 }
            String modifiedTime =WFSUtil.dbDateTime(con, dbType);
    		taskList = parser.getValueOf("TaskList", "N", false);		
    		
    		if (user != null) {
        		String userName = user.gettype() == 'P' ? "System" : user.getname();
    			int userId = user.getid();
    			if(!taskList.equals("")){
    				noOfTasks = parser.getNoOfFields("TaskInfo");
    			}
    			if (con.getAutoCommit()) {
    				con.setAutoCommit(false);
    			}
    			while(noOfTasks>0){
    				if(counter==0){
    					tmpParser.setInputXML(parser.getFirstValueOf("TaskInfo"));
    					counter++;
    				}
    				else{
    					tmpParser.setInputXML("");
    					tmpParser.setInputXML(parser.getNextValueOf("TaskInfo"));
    				}
					 boolean insertApprovalComments = false;
					 boolean insertRejectionComments = false;
    				processDefId = tmpParser.getIntOf("ProcessDefId", 0, false);
    				activityId = tmpParser.getIntOf("ActivityId",0,false);
    				wId = tmpParser.getIntOf("WorkItemId", 0, false);
    				pId = tmpParser.getValueOf("ProcessInstanceId","",false);
    				int taskId=tmpParser.getIntOf("taskId", 0, false);
    				int subTaskId = tmpParser.getIntOf("SubTaskId", 0, false);
    				boolean approvedFlag = tmpParser.getValueOf("ApprovedFlag","",true).equalsIgnoreCase("Y");
    				boolean rejectedFlag = tmpParser.getValueOf("ApprovedFlag","",true).equalsIgnoreCase("N");
    				String approvalSentBy = null;
    				String initiatedBy = null;
    				int taskStatus = 0;
					 pstmt = con
							 .prepareStatement("select ApprovalRequired,ApprovalSentBy,InitiatedBy,TaskStatus from WFTaskStatusTable " + WFSUtil.getTableLockHintStr(dbType)
							 + "where ProcessInstanceId= ? and WorkItemId= ? and ProcessDefId= ? and ActivityId= ? and TaskId= ? and subtaskid= ? "
							 + "and UPPER(AssignedTo)= ? ");
					 WFSUtil.DB_SetString(1, pId, pstmt, dbType);
					 pstmt.setInt(2, wId);
					 pstmt.setInt(3, processDefId);
					 pstmt.setInt(4, activityId);
					 pstmt.setInt(5, taskId);
					 pstmt.setInt(6, subTaskId);
					 WFSUtil.DB_SetString(7, userName.toUpperCase(), pstmt, dbType);
					 pstmt.executeQuery();
					 ResultSet rs = pstmt.getResultSet();
					 if (rs.next()) {
						 approvalRequired = rs.getString("ApprovalRequired").equalsIgnoreCase("Y");
						 approvalSentBy = rs.getString("ApprovalSentBy");
						 initiatedBy = rs.getString("InitiatedBy");
						 taskStatus = rs.getInt("TaskStatus");
					 }
					 rs.close();
					 pstmt.close();
					 /*Changes done for Bug#72004-> if the userName and initiatedBy is same, 
					  * then no approval is required to be sent. Check for taskStatus is there
					  * because task approver can only approver/reject, not complete the task*/
					 if((initiatedBy != null && userName != null && initiatedBy.equalsIgnoreCase(userName)) && taskStatus == WFSConstant.WF_TaskInitiated){
						 approvalRequired = false;
					 }
					 /*Changes for bug#72004 till here*/
					 HashMap<String,Integer> completeTaskMap=new HashMap<String,Integer>();
					 if((approvedFlag)&&(approvalRequired)){
						 completeTaskMap= WFSUtil.completeTask(con, dbType, processDefId, pId, wId, activityId, taskId, subTaskId,modifiedTime,userName);
						 rowsAffected = completeTaskMap.get("UpdateCount");
						 callTaskListThread=true;
						 insertApprovalComments = true;
					 }
					 else if(!approvalRequired){
						 completeTaskMap = WFSUtil.completeTask(con, dbType, processDefId, pId, wId, activityId, taskId, subTaskId,modifiedTime,userName);
						 rowsAffected=completeTaskMap.get("UpdateCount");
						 callTaskListThread=true;
					}
    				String comments = tmpParser.getValueOf("Comments", "", true);

    				if(rowsAffected<=0){
    					if((rejectedFlag)&&(approvalRequired)){
    						 pstmt = con.prepareStatement(" update WFTaskStatusTable set TaskStatus=?,AssignedTo = ?,ApprovalSentBy = ?,"
    								 + "ActionDateTime=" + WFSUtil.TO_DATE(modifiedTime, true, dbType) + " "
    								 + "where ProcessInstanceId=? and WorkItemId=? and ProcessDefId=? and ActivityId=? and TaskId=? and SubTaskId =? and TaskStatus=? and ApprovalRequired=?");
    						 pstmt.setInt(1, WFSConstant.WF_TaskInitiated); 
    						 WFSUtil.DB_SetString(2,approvalSentBy,pstmt,dbType);
    						 WFSUtil.DB_SetString(3, userName, pstmt, dbType);
    						 WFSUtil.DB_SetString(4, pId, pstmt, dbType);
    						 pstmt.setInt(5, wId); 
    						 pstmt.setInt(6, processDefId);
    						 pstmt.setInt(7, activityId);
    						 pstmt.setInt(8, taskId); 
    						 pstmt.setInt(9, subTaskId); 
    						 pstmt.setInt(10, 6);
    						 WFSUtil.DB_SetString(11, "Y", pstmt, dbType);
    						 rowsAffected=pstmt.executeUpdate();
    						 insertRejectionComments = true;
    					 }
    						 
    					else if(!rejectedFlag &&!approvedFlag && approvalRequired){
       						 
    						pstmt = con.prepareStatement(" update WFTaskStatusTable set TaskStatus=?,ApprovalSentBy=?,AssignedTo=initiatedby , ActionDateTime=" + WFSUtil.TO_DATE(modifiedTime, true, dbType) 
       						 + " where ProcessInstanceId=? and WorkItemId=? and ProcessDefId=? and ActivityId=? and TaskId=? and SubTaskId =? and TaskStatus=? and Assignedto=? and ApprovalRequired=?");
       						 pstmt.setInt(1, WFSConstant.WF_TaskPendingForApproval); 
       						 WFSUtil.DB_SetString(2, userName, pstmt, dbType);
       						 WFSUtil.DB_SetString(3, pId, pstmt, dbType);
       						 pstmt.setInt(4, wId); 
       						 pstmt.setInt(5, processDefId);
       						 pstmt.setInt(6, activityId);
       						 pstmt.setInt(7, taskId); 
       						 pstmt.setInt(8, subTaskId); 
       						 pstmt.setInt(9, 2);
       						 WFSUtil.DB_SetString(10, userName, pstmt, dbType);
       						 WFSUtil.DB_SetString(11, "Y", pstmt, dbType);
       						 rowsAffected=pstmt.executeUpdate();

       					 }
    					 if(pstmt!=null){
    						 pstmt.close();
    						 pstmt =null;
    					 }
    				}

    			   				
    				if(rowsAffected>0){
    					if(insertApprovalComments){
    						WFSUtil.generateTaskLog(engine, con,dbType, pId,WFSConstant.WFL_TaskApproved, wId, 
                                    processDefId,activityId,null,0,userId , user.getname(),null, taskId,subTaskId,modifiedTime);
    						if (!comments.equals("")) {
								pstmt = con.prepareStatement(
										"insert into WFCommentsTable(ProcessDefId, ActivityId, ProcessInstanceId, "
												+ "WorkItemId, ProcessVariantId, TaskId, SubTaskId, CommentsBy, CommentsByName, CommentsTo, "
												+ "CommentsToName, Comments, CommentsType, ActionDateTime) "
												+ "values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "
												+ WFSUtil.getDate(dbType) + ")");
								pstmt.setInt(1, processDefId);
								pstmt.setInt(2, activityId);
								WFSUtil.DB_SetString(3, pId, pstmt, dbType);
								pstmt.setInt(4, wId);
								pstmt.setInt(5, 0);
								pstmt.setInt(6, taskId);
								pstmt.setInt(7, subTaskId);
								pstmt.setInt(8, userId);
								WFSUtil.DB_SetString(9, userName, pstmt, dbType);
								pstmt.setInt(10, 0);
								WFSUtil.DB_SetString(11, approvalSentBy, pstmt, dbType);
								WFSUtil.DB_SetString(12, comments, pstmt, dbType);
								pstmt.setInt(13, WFSConstant.CONST_COMMENTS_TASK_APPROVAL);
								pstmt.execute();
								pstmt.close();
								pstmt = null;
							}    						
    						
    					}
    					else if(insertRejectionComments){
    						WFSUtil.generateTaskLog(engine, con,dbType, pId,WFSConstant.WFL_TaskRejected, wId, 
                                    processDefId,activityId,null,0,userId , user.getname(),null, taskId,subTaskId,modifiedTime);
    						if (!comments.equals("")) {
								pstmt = con.prepareStatement(
										"insert into WFCommentsTable(ProcessDefId, ActivityId, ProcessInstanceId, "
												+ "WorkItemId, ProcessVariantId, TaskId, SubTaskId, CommentsBy, CommentsByName, CommentsTo, "
												+ "CommentsToName, Comments, CommentsType, ActionDateTime) "
												+ "values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "
												+ WFSUtil.getDate(dbType) + ")");
								pstmt.setInt(1, processDefId);
								pstmt.setInt(2, activityId);
								WFSUtil.DB_SetString(3, pId, pstmt, dbType);
								pstmt.setInt(4, wId);
								pstmt.setInt(5, 0);
								pstmt.setInt(6, taskId);
								pstmt.setInt(7, subTaskId);
								pstmt.setInt(8, userId);
								WFSUtil.DB_SetString(9, userName, pstmt, dbType);
								pstmt.setInt(10, 0);
								WFSUtil.DB_SetString(11, approvalSentBy, pstmt, dbType);
								WFSUtil.DB_SetString(12, comments, pstmt, dbType);
								pstmt.setInt(13, WFSConstant.CONST_COMMENTS_TASK_REJECTED);
								pstmt.execute();
								pstmt.close();
								pstmt = null;
							}    						
    						
    					}
    					
    					else{
    						WFSUtil.generateTaskLog(engine, con,dbType, pId,WFSConstant.WFL_TaskCompleted, wId, 
    								processDefId,activityId,null,0,userId , user.getname(),null, taskId,subTaskId,modifiedTime);
    					}
    					
    					//int activityType =0;
    					rs=null;
    					pstmt = con.prepareStatement("Select AssignedUser ,URN FROM WFInstrumentTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessInstanceId = ? AND WorkItemId  = ? ");
    			        WFSUtil.DB_SetString(1, pId, pstmt, dbType);
    			        pstmt.setInt(2, wId);

    			        pstmt.execute();
    					rs = pstmt.getResultSet();
    			        if (rs != null && rs.next()) {
    			        	
    			        	caseManager=rs.getString("AssignedUser");
    			        	if(insertApprovalComments || insertRejectionComments) {
    			        		caseManager = approvalSentBy;
    			        	}
    			        	urn = rs.getString("URN");
    			        }

    			        if (rs != null) {
    			            rs.close();
    			            rs = null;
    			        }
    			        if (pstmt != null) {
    			            pstmt.close();
    			            pstmt = null;
    			        }
    			   
    				
    					HashMap<String,String> mapForTaskAttributes = new HashMap<String, String>();
                        boolean notifyByEmail=false;
                        String taskName="";String taskInitiator="";
                        pstmt = con.prepareStatement("Select NotifyEmail, TaskName,"+WFSUtil.getDate(dbType)+" CreatedDate,TaskType  From WFTaskDefTable " + WFSUtil.getTableLockHintStr(dbType) + " Where ProcessDefId = ? And TaskId = ? ");
                        pstmt.setInt(1, processDefId);
                        pstmt.setInt(2, taskId);
                        rs = pstmt.executeQuery();
                        
						if(rs.next()){
                            notifyByEmail = (rs.getString("NotifyEmail")).equalsIgnoreCase("Y");
                            taskName = rs.getString(2);
                            taskType=rs.getInt("TaskType");
                            mapForTaskAttributes.put("TaskName",taskName);
                            mapForTaskAttributes.put("CompletedOn",rs.getString("CreatedDate"));
                        }
                        if(pstmt!= null){
                            pstmt.close();
                            pstmt = null;
                        }
                        if(rs!= null){
                            rs.close();
                            rs = null;
                        }
                        if(notifyByEmail && taskType==WFSConstant.TASK_NORMAL){//Email only applicable for Normal task , not for subprocessTask
                        	pstmt = con.prepareStatement("Select AssignedBy, AssignedTo  From wftaskstatustable " + WFSUtil.getTableLockHintStr(dbType) + " Where ProcessDefId = ? And TaskId = ? and processinstanceid=?");
                            pstmt.setInt(1, processDefId);
                            pstmt.setInt(2, taskId);
                            pstmt.setString(3,pId);
                            rs = pstmt.executeQuery();
                            
    						if(rs.next()){
    							if(approvalRequired) {
    								taskInitiator = userName;
    							}else {
    								taskInitiator=rs.getString("AssignedTo");
    							}
                                mapForTaskAttributes.put("CompletedBy",taskInitiator);
                                mapForTaskAttributes.put("AssignedTo",rs.getString("AssignedTo"));
                            }
    						if(pstmt!= null){
                                pstmt.close();
                                pstmt = null;
                            }
                            if(rs!= null){
                                rs.close();
                                rs = null;
                            }
                        	pstmt =con.prepareStatement("Select a.processname, b.activityname from ProcessDefTable a " + WFSUtil.getTableLockHintStr(dbType) + " inner join activitytable b " + WFSUtil.getTableLockHintStr(dbType) + " on a.processdefid = b.processdefid and a.processdefid = ? and b.activityid = ?");
                        	pstmt.setInt(1, processDefId);
                        	pstmt.setInt(2, activityId);
                        	rs=pstmt.executeQuery();
                        	if(rs.next()){
                        		mapForTaskAttributes.put("RouteName",rs.getString("processname"));
                        		mapForTaskAttributes.put("ActivityName",rs.getString("activityname"));
                        	}
                        	 if(pstmt!= null){
                                 pstmt.close();
                                 pstmt = null;
                             }
                             if(rs!= null){
                                 rs.close();
                                 rs = null;
                             }
                        	
                        
                        String webServerAddress = parser.getValueOf("WebServerAddress","http://127.0.0.1:8080",true);
                        int webServerPort = parser.getIntOf("WebServerPort",0,true);
                       
                  	  String OAPWebServerAddress = parser.getValueOf("OAPWebServerAddress","http://127.0.0.1:8080",true);
            			mapForTaskAttributes.put("ProcessInstanceId", pId);
        				mapForTaskAttributes.put("WorkItemId", String.valueOf(wId));
        			//	mapForTaskAttributes.put("DueDate",dueDate);////Not required
        			//	mapForTaskAttributes.put("InitiatedOn",strDate);//Not required
        			//	mapForTaskAttributes.put("CompletedOn",);//Newly Added-added
        			//	mapForTaskAttributes.put("AssignedTo", assgnTo);//--
        				mapForTaskAttributes.put("EngineName", engine);
        				mapForTaskAttributes.put("TaskId",String.valueOf(taskId));
        				mapForTaskAttributes.put("OAPWebServerAddress", OAPWebServerAddress);//--
        				mapForTaskAttributes.put("WebServerAddress",webServerAddress);//--
        			//	mapForTaskAttributes.put("WebServerPort",String.valueOf(webServerPort));//--Not required
        				//mapForTaskAttributes.put("Instructions",instruction);//--//Not required
        				mapForTaskAttributes.put("ActivityType",String.valueOf(32));//--
        				//mapForTaskAttributes.put("TaskName",taskName);//--Already added
        				
        				
                        pstmt = con.prepareStatement("Select MailId From wfuserview Where UserName = ?");
                        pstmt.setString(1, caseManager);
                        rs = pstmt.executeQuery();
                        String userEmail="";
						while(rs.next()){
                            userEmail = rs.getString(1)+";"+userEmail;
                        }
						if(rs!=null){
							rs.close();
							rs = null;
						}
						if(pstmt!=null){
							pstmt.close();
							pstmt = null;
						}
						
						//cc mailId support
						pstmt = con.prepareStatement("Select MailId From wfuserview Where UserName = ?");
                        pstmt.setString(1, taskInitiator);
                        rs = pstmt.executeQuery();
                        String ccUserEmail="";
						while(rs.next()){
							ccUserEmail = rs.getString(1)+";"+ccUserEmail;
                        }
						if(rs!=null){
							rs.close();
							rs = null;
						}
						if(pstmt!=null){
							pstmt.close();
							pstmt = null;
						}
						
						int queueId = 0;
                        pstmt = con.prepareStatement("Select distinct Q_QueueId from wfinstrumenttable " + WFSUtil.getTableLockHintStr(dbType) + " where processinstanceid = ? and workitemId = ?");
                        WFSUtil.DB_SetString(1, pId, pstmt, dbType);
                        pstmt.setInt(2, wId);
                        rs = pstmt.executeQuery();
						if(rs.next()){
                            queueId = rs.getInt(1);
                        }
                        if(userEmail != null && !("".equals(userEmail))){
                        	mapForTaskAttributes.put("MailSubject", "Task- "+taskName+ " completed for "+pId);
							HashMap<String, String> mailStringAttributes = new HashMap<String, String>(); 
							HashMap<String, Integer> mailIntAttributes = new HashMap<String, Integer>();
							mailStringAttributes.put("CabinetName", engine);
							mailStringAttributes.put("MailTo", userEmail.toString());
							if(ccUserEmail != null && !("".equals(ccUserEmail))) {
							mailStringAttributes.put("MailCC", ccUserEmail.toString());
							}else {
								mailStringAttributes.put("MailCC", null);
							}
							mailStringAttributes.put("MailAttachmentIndex", null);
							mailStringAttributes.put("MailAttachmentNames", null);
							mailStringAttributes.put("MailStatus", "N");
							mailStringAttributes.put("MailStatusComments", null);
							mailStringAttributes.put("MailInsertedBy", null);
							mailStringAttributes.put("MailActionType", "TaskNotification");
							mailStringAttributes.put("MailAttachmentExtensions", null);
							if(insertApprovalComments) {
								mailStringAttributes.put("PropertyName", "ApproveTask");
							}else if(insertRejectionComments) {
								mailStringAttributes.put("PropertyName", "RejectTask");
							}else {
								mailStringAttributes.put("PropertyName", "CompleteTask");
							}
							mailStringAttributes.put("ProcessInstanceId", pId);
							if(urn!=null&&!urn.equalsIgnoreCase("")){
								mapForTaskAttributes.put("URN", urn);
							}else{
								mapForTaskAttributes.put("URN", pId);
							}
							mailIntAttributes.put("MailPriority", 1);
							mailIntAttributes.put("ProcessDefID", processDefId);
							mailIntAttributes.put("WorkItemId", wId);
							mailIntAttributes.put("ActivityId", activityId);
							mailIntAttributes.put("DbType", dbType);
							mailIntAttributes.put("NoOfTrials", 0);
							mapForTaskAttributes.put("QueueId", Integer.toString(queueId));
							mapForTaskAttributes.put("SubTaskId", String.valueOf(subTaskId));
							EmailTemplateUtil.addTaskToMailQueue(con, mapForTaskAttributes, mailIntAttributes, mailStringAttributes);
                        }
                        if(pstmt!= null){
                            pstmt.close();
                            pstmt = null;
                        }
                        if(rs!= null){
                            rs.close();
                            rs = null;
                        }
                       
                      }
    				}
    				else {
    					mainCode = WFSError.WF_NO_AUTHORIZATION;
    					subCode = 0;
    					subject = WFSErrorMsg.getMessage(mainCode);
    					descr = WFSErrorMsg.getMessage(subCode);
    					errType = WFSError.WF_TMP;
    					String strReturn = WFSUtil.generalError(option, engine, gen, mainCode, subCode, errType, subject,
    							descr);
    					return strReturn;    				
    					
    				}
                    //Delete any escalation defined on the task to be completed..
                    pstmt = con.prepareStatement("delete from WFEscalationTable where PROCESSINSTANCEID = ? and WORKITEMID = ? and PROCESSDEFID = ? and ACTIVITYID = ? "
                    		+ " and ESCALATIONMODE = 'Mail' and TASKID = ? and ESCALATIONTYPE = 'F'");
                    pstmt.setString(1, pId);
                    pstmt.setInt(2, wId);
                    pstmt.setInt(3, processDefId);
                    pstmt.setInt(4, -activityId);
                    pstmt.setInt(5, taskId);
                    pstmt.executeUpdate();
                    if(pstmt!= null){
                        pstmt.close();
                        pstmt = null;
                    }
    				noOfTasks--;
    			}

    		} else {
    			mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
    			subCode = 0;
    			subject = WFSErrorMsg.getMessage(mainCode);
    			descr = WFSErrorMsg.getMessage(subCode);
    			errType = WFSError.WF_TMP;
    		}
    		if (mainCode == 0) {
    			if (!con.getAutoCommit()) {
                    con.commit();
                    con.setAutoCommit(true);
                }
    			
    			outputXML.append(gen.createOutputFile("WFCompleteTask"));
    			outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
    			/*outputXML.append(tempXML);*/
    			outputXML.append(gen.closeOutputFile("WFCompleteTask"));
    		}
    	}
    	catch (SQLException e) {
    		WFSUtil.printErr(engine,"", e);
    		mainCode = WFSError.WM_INVALID_FILTER;
    		subCode = WFSError.WFS_SQL;
    		subject = WFSErrorMsg.getMessage(mainCode);
    		errType = WFSError.WF_FAT;
    		if (e.getErrorCode() == 0)
    			if (e.getSQLState().equalsIgnoreCase("08S01"))
    				descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
    			else
    				descr = e.getMessage();
    	} catch (NumberFormatException e) {
    		WFSUtil.printErr(engine,"", e);
    		mainCode = WFSError.WF_OPERATION_FAILED;
    		subCode = WFSError.WFS_ILP;
    		subject = WFSErrorMsg.getMessage(mainCode);
    		errType = WFSError.WF_TMP;
    		descr = e.toString();
    	} catch (NullPointerException e) {
    		WFSUtil.printErr(engine,"", e);
    		mainCode = WFSError.WF_OPERATION_FAILED;
    		subCode = WFSError.WFS_SYS;
    		subject = WFSErrorMsg.getMessage(mainCode);
    		errType = WFSError.WF_TMP;
    		descr = e.toString();
    	} catch (WFSException e) {
    		mainCode = WFSError.WM_NO_MORE_DATA;
    		subCode = 0;
    		subject = WFSErrorMsg.getMessage(mainCode);
    		descr = WFSErrorMsg.getMessage(subCode);
    		errType = WFSError.WF_TMP;
    	} catch (JTSException e) {
    		WFSUtil.printErr(engine,"", e);
    		mainCode = WFSError.WF_OPERATION_FAILED;
    		subCode = e.getErrorCode();
    		subject = WFSErrorMsg.getMessage(mainCode);
    		errType = WFSError.WF_TMP;
    		descr = e.getMessage();
    	} catch (Exception e) {
    		WFSUtil.printErr(engine,"", e);
    		mainCode = WFSError.WF_OPERATION_FAILED;
    		subCode = WFSError.WFS_EXP;
    		subject = WFSErrorMsg.getMessage(mainCode);
    		errType = WFSError.WF_TMP;
    		descr = e.toString();
    	}  finally {
    		try {
				if (!con.getAutoCommit()) {
				    con.rollback();
				    con.setAutoCommit(true);
				}
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
			}
    		try {
    			if (pstmt != null) {
    				pstmt.close();
    				pstmt = null;
    			}
    		} catch (Exception e) {}
    		 if(callTaskListThread){
    	        	WFSUtil.printOut(engine,"Calling TaskList thread starts");
    	        	ExecutorService executor = Executors.newFixedThreadPool(1);
    	        	Runnable worker = new WorkerThread(engine,"WFInitiateTask", pId, wId, activityId, sessionID, processDefId);
    	        	executor.execute(worker);
    	        	WFSUtil.printOut(engine,"Calling TaskList thread ends");
    	        }
    		
    	}
    	if (mainCode != 0) {
			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			outputXML.append( errorString);

		}
    	return outputXML.toString();
    }

//----------------------------------------------------------------------------------------------------
//	Function Name 				:	WMFetchProcessDefinitionStates
//	Date Written (DD/MM/YYYY)	:	16/05/2002
//	Author						:	Prashant
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:   none
//	Return Values				:	String
//	Description					:   Fetches the possible States for a given ProcessDefinition
//----------------------------------------------------------------------------------------------------
    public String WMFetchProcessDefinitionStates(Connection con, XMLParser parser,
                                                 XMLGenerator gen) throws JTSException, WFSException {
        StringBuilder outputXML = new StringBuilder();
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        String engine  = "";
		String option = parser.getValueOf("Option", "", false);
        try {
            int sessionID = parser.getIntOf("SessionId", 0, false);
            char countFlag = parser.getCharOf("CountFlag", 'N', true);
            engine = parser.getValueOf("EngineName");
            int noOfRectoFetch = parser.getIntOf("NoOfRecordsToFetch",
                                                 ServerProperty.getReference().getBatchSize(), true);
            if (noOfRectoFetch > ServerProperty.getReference().getBatchSize() || noOfRectoFetch <= 0) //Added by Ahsan Javed for getBatchSize
                noOfRectoFetch = ServerProperty.getReference().getBatchSize();

			String lastValue = parser.getValueOf("LastValue", "", true);
			StringBuffer tempXml = null;

			WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
			if (participant != null) {

				tempXml = new StringBuffer(100);

				if (countFlag == 'Y') {
					tempXml.append(gen.writeValueOf("Count", "2"));

				}
				int i = 0;
				tempXml.append("<ProcessDefinitionStates>\n");
				if (noOfRectoFetch > i && lastValue.compareTo("Disabled") < 0) {
					tempXml.append("\n<ProcessDefinitionState>Disabled</ProcessDefinitionState>\n");
					i++;
				}
				if (noOfRectoFetch > i && lastValue.compareTo("Enabled") < 0) {
					tempXml.append("\n<ProcessDefinitionState>Enabled</ProcessDefinitionState>\n");
					i++;
				}
				if (i == 0) {
					mainCode = WFSError.WM_NO_MORE_DATA;
					subCode = 0;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}
				tempXml.append("</ProcessDefinitionStates>\n");
				tempXml.append(gen.writeValueOf("RetrievedCount", String.valueOf(i)));
			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if (mainCode == 0) {
				//outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WMFetchProcessDefinitionState"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(tempXml);
				outputXML.append(gen.closeOutputFile("WMFetchProcessDefinitionState"));
			}
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (JTSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		}  finally {
			try {
				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
			} catch (Exception e) {}
			
		}
		if (mainCode != 0) {
			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			outputXML.append( errorString);
		}
		return outputXML.toString();
	}

//----------------------------------------------------------------------------------------------------
//	Function Name 				:	WMChangeProcessDefinitionState
//	Date Written (DD/MM/YYYY)	:	16/05/2002
//	Author						:	Prashant
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:   none
//	Return Values				:	String
//	Description					:   Changes the state of a given ProcessDefinition
//----------------------------------------------------------------------------------------------------
    public String WMChangeProcessDefinitionState(Connection con, XMLParser parser,
                                                 XMLGenerator gen) throws JTSException, WFSException {
    	StringBuffer outputXML = new StringBuffer("");
        PreparedStatement pstmt = null;
        PreparedStatement pstmt2 = null;
		Statement actionStmt = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
		ResultSet rs = null;
		int authID = 0; // Bugzilla Bug 2774
		XMLParser inputXML = new XMLParser();
		inputXML.setInputXML(parser.toString());
		StringBuffer tempXml = new StringBuffer(100);
                String engine = "";
				String option = parser.getValueOf("Option", "", false);

		try {
			int sessionID = parser.getIntOf("SessionId", 0, false);
			int procDefID = parser.getIntOf("ProcessDefinitionId", 0, false);
			String procDefState = parser.getValueOf("ProcessDefinitionState", "", false);
			engine = parser.getValueOf("EngineName");
			int dbType = ServerProperty.getReference().getDBType(engine);
			String actionComments = parser.getValueOf("ActionComments", "", true);
			boolean pendingActionsFlag = parser.getValueOf("PendingActionsFlag").startsWith("Y"); // Bugzilla Bug 2774
			WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
			if (participant != null && participant.gettype() != 'S') {
				int userID = participant.getid();
				String userName = participant.getname().trim(); // Bugzilla Bug 2774
				char pType = participant.gettype();
				if (con.getAutoCommit())
					con.setAutoCommit(false);
				Statement stmt = con.createStatement();
				String processName = null;
				int versionNo = 1;
				int max_reg = 0;
                /* Bugzilla Id 54, LockHint for DB2, 18/08/2006 - Ruhi Hira */
                rs = stmt.executeQuery(" Select ProcessName, VersionNo from ProcessDefTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessDefId = " + procDefID + WFSUtil.getQueryLockHintStr(dbType));
                if (rs.next()) {
                    processName = rs.getString(1).trim();
					versionNo = rs.getInt("VersionNo");

					rs.close();

				} else{
	
					String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
					return errorString;
					
				}
                if(procDefState.equalsIgnoreCase("ENABLED")) {
                    rs = stmt.executeQuery(" Select Processdefid from ProcessDefTable  " + WFSUtil.getTableLockHintStr(dbType) + " where UPPER(processName) = " + WFSUtil.TO_STRING(WFSUtil.TO_STRING(processName, true, dbType), false, dbType) + " AND UPPER(ProcessState) = 'ENABLED' " );
                    if (rs.next()) {
                       // throw new WFSException(WFSError.WF_OPERATION_FAILED, WFSError.WF_PROCESS_ALREADY_ENABLED, WFSError.WF_TMP, WFSErrorMsg.getMessage(WFSError.WF_OPERATION_FAILED), WFSErrorMsg.getMessage(WFSError.WF_PROCESS_ALREADY_ENABLED));
                    	mainCode = WFSError.WF_PROCESS_ALREADY_ENABLED;
        				subCode = 0;
        				subject = WFSErrorMsg.getMessage(mainCode);
        				descr = WFSErrorMsg.getMessage(subCode);
        				errType = WFSError.WF_TMP;
                    }
                    if(rs!=null){
                    	rs.close();
                    	rs=null;
                    }
                    if(stmt!=null){
                    	stmt.close();
                    	stmt=null;
                    }
                    if (mainCode != 0) {
       
        				String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
        				return errorString;

                    }
                    stmt = con.createStatement();
                    rs = stmt.executeQuery(" Select MAX(REGSTARTINGNO) from ProcessDefTable  " + WFSUtil.getTableLockHintStr(dbType) + " where UPPER(processName) = " + WFSUtil.TO_STRING(WFSUtil.TO_STRING(processName, true, dbType), false, dbType) );
                    if (rs.next()) {
                        max_reg = rs.getInt(1);
                    }
                    rs.close();
                     
                }
				if (stmt != null) {
					stmt.close();
					stmt = null;
				}

				StringBuffer tempStr = new StringBuffer(parser.toString());
				boolean rightsFlag = WFSUtil.checkRights(con, dbType, WFSConstant.CONST_OBJTYPE_PROCESS, procDefID, sessionID, WFSConstant.CONST_PROCESS_CHNGSTATE);
				parser.setInputXML(tempStr.toString());
				if (!rightsFlag) {
					mainCode = WFSError.WFS_NORIGHTS;
					subCode = WFSError.WM_SUCCESS;
					subject = WFSErrorMsg.getMessage(mainCode);
					errType = WFSError.WF_TMP;
				}

				if (mainCode == 0) {
					if (procDefState.equalsIgnoreCase("Disabled") || procDefState.equalsIgnoreCase("Enabled")) {
						char AuthorizationFlag = parser.getCharOf("AuthorizationFlag", 'N', true);
						if(AuthorizationFlag == 'Y') {
							authID = WFSUtil.generateAuthorizationID('P', procDefID, processName, userName, con, dbType, engine);
							pstmt = con.prepareStatement("Insert into WFAuthorizeProcessDefTable(AuthorizationID, ActionID, VersionNo, ProcessState)values(" + authID + ", " + WFSConstant.WFL_ProcessStateChanged + ",  " + versionNo + ", ?)");
							WFSUtil.DB_SetString(1, procDefState, pstmt, dbType);
						} else  if(procDefState.equalsIgnoreCase("ENABLED")) {
	                         pstmt = con.prepareStatement("	Update ProcessDefTable Set ProcessState = ?, RegStartingNo = ? where ProcessDefID = ? ");
	                         WFSUtil.DB_SetString(1, procDefState,pstmt,dbType);
	                         pstmt.setInt(2, max_reg);
	                         pstmt.setInt(3, procDefID);

	                    }else {
							pstmt = con.prepareStatement(" Update ProcessDefTable Set ProcessState = ? where ProcessDefID = ?	");
							WFSUtil.DB_SetString(1, procDefState,pstmt,dbType);
							pstmt.setInt(2, procDefID);
                          if (procDefState.equalsIgnoreCase("Disabled")){
							pstmt2 = con.prepareStatement("	Update WFProcessVariantDefTable Set ProcessVariantState = ? where ProcessDefID = ?	");
							WFSUtil.DB_SetString(1, procDefState,pstmt2,dbType);
							pstmt2.setInt(2, procDefID);
                            pstmt2.executeUpdate();
                            pstmt2.close();
							}
						}
						int res = pstmt.executeUpdate();
						pstmt.close();
						
						if(res == 0) {
							mainCode = WFSError.WM_INVALID_PROCESS_DEFINITION;
							subCode = 0;
							subject = WFSErrorMsg.getMessage(mainCode);
							descr = WFSErrorMsg.getMessage(subCode);
							errType = WFSError.WF_TMP;
						} else {
							// Bugzilla Bug 2774
							//	Bug 37632-  Not able to differentiate between checkin of process as same or new version 	
							String logStr = "<ProcessName>"+processName+"</ProcessName><ChangedState>"+procDefState+"</ChangedState><VersionNo>"+versionNo+"</VersionNo>";
							if(AuthorizationFlag == 'Y') {
								logStr += "<AuthorizationFlag>Y</AuthorizationFlag>";
							}
							WFSUtil.genAdminLog(engine, con, WFSConstant.WFL_ProcessStateChanged, procDefID, 0, null, userID, userName, procDefID, logStr, null, null);
							WFTMSUtil.genRequestId(engine, con, WFSConstant.WFL_ProcessStateChanged, processName, "P", procDefID, actionComments, inputXML, participant,procDefID);
						}
					} else {
					 	mainCode = WFSError.WM_INVALID_STATE;
						subCode = 0;
						subject = WFSErrorMsg.getMessage(mainCode);
						descr = WFSErrorMsg.getMessage(subCode);
						errType = WFSError.WF_TMP;
						return null;
					}
					if(pendingActionsFlag) {
						pstmt = con.prepareStatement("select authorizationid from WFAuthorizationTable "+WFSUtil.getTableLockHintStr(dbType)+" where EntityId = ?");
						WFSUtil.printOut(engine,"Processdefid:: "+procDefID);
						pstmt.setInt(1, procDefID);
						pstmt.execute();
						ResultSet actionRs = pstmt.getResultSet();
						if(actionRs != null && actionRs.next()) {
							String authIdList = actionRs.getString("authorizationid");
							WFSUtil.printOut(engine,"hello1234..!!");
							while(actionRs.next())
								authIdList += ", " + actionRs.getString("authorizationid");

							actionStmt = con.createStatement();
							actionRs = actionStmt.executeQuery("select actionid from WFAuthorizeProcessDefTable "+WFSUtil.getTableLockHintStr(dbType)+" where authorizationid in ( " + WFSUtil.TO_SANITIZE_STRING(authIdList, true) + " ) ");
							if(actionRs != null && actionRs.next()) {
								WFSUtil.printOut(engine,"hello..!!");
								tempXml.append("<PendingActions>");
								tempXml.append(actionRs.getString("actionid"));
								while(actionRs.next())
									tempXml.append("," + actionRs.getString(1));
								tempXml.append("</PendingActions>");
							}
							actionStmt.close();
						}
						pstmt.close();
					}
					if (!con.getAutoCommit()) {
						con.commit();
						con.setAutoCommit(true);
					}
				}
			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if (mainCode == 0) {
				outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WMChangeProcessDefinitionState"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(tempXml);
				outputXML.append(gen.closeOutputFile("WMChangeProcessDefinitionState"));
            }
        } catch (SQLException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WM_INVALID_STATE;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
                        + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (JTSException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
        } catch (Exception e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        }  finally {
            try {
                if (!con.getAutoCommit()) {
                    con.rollback();
                    con.setAutoCommit(true);
                }
                if (rs != null)
                    rs.close();
                if (pstmt != null) {
                    pstmt.close();
                    pstmt = null;
                }
            } catch (Exception e) {}
           
        }
        if (mainCode != 0) {

			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			return errorString;
        }
        return outputXML.toString();
    }

//----------------------------------------------------------------------------------------------------
//	Function Name 				:	WMCreateProcessInstance
//	Date Written (DD/MM/YYYY)	:	16/05/2002
//	Author						:	Prashant
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:   none
//	Return Values				:	String
//	Description					:   creates an Instance of the given ProcessDefinition
//----------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------
// Changed On					: 04/03/2005
// Changed By					: Ashish Mangla
// Description					: Multiple Introduction Workstep
// --------------------------------------------------------------------------------------
    public String WMCreateProcessInstance(Connection con, XMLParser parser,
                                          XMLGenerator gen) throws JTSException, WFSException {

    	StringBuffer outputXML = new StringBuffer("");
		Statement stmt = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
		ResultSet rs = null;
                String engine = "";
				String option = parser.getValueOf("Option", "", false);
		char char21 = 21;
		String string21 = "" + char21;
		HashMap<String,String> returnMap=new HashMap<String,String>();
		try {
			int sessionID = parser.getIntOf("SessionId", 0, true);
			int procDefID = parser.getIntOf("ProcessDefinitionId", 0, false);
			engine = parser.getValueOf("EngineName");
			int dbType = ServerProperty.getReference().getDBType(engine);
			String pinstId = "";
			int queueId = parser.getIntOf("QueueId", 0, true); //Ashish added parse this tags also
			int activityId = parser.getIntOf("ActivityId", 0, true); //Ashish added parse this tags also
			char omniServiceFlag = parser.getCharOf("OmniService", 'N', true);
			boolean syncRoutingFlag = false;
                        int procVarId = parser.getIntOf("VariantId", 0, true);

			/* 05/09/2007, SrNo-7, Synchronous routing of workitems - Ruhi Hira */
			WFParticipant participant = null;
			if (omniServiceFlag == 'Y') {
				participant = new WFParticipant(0, "System", 'P', "SERVER", Locale.getDefault().toString());
				syncRoutingFlag = true;
			} else {
				participant = WMUser.WFCheckUpdateSession(con, sessionID, dbType);
			}
			/** @todo Check why check&Update session required ??  - Ruhi */
//            WFParticipant participant = WMUser.WFCheckUpdateSession(con, sessionID, dbType);
			if (participant != null && (participant.gettype() == 'U' || participant.gettype() == 'P')) {

				int userID = participant.gettype() == 'P' ? 0 : participant.getid();
				String username = participant.gettype() == 'P' ? "System" : participant.getname();

				ArrayList actList = new ArrayList();
				ArrayList assocActList = new ArrayList();

				int iActivityId = -1;
				int iDefaultIntroAct = -1;
				String sActivityName = "";
				StringBuffer sbActivityIds = new StringBuffer("0");
				int iQueueId = -1;
				String sQueueName = "";
				int iStreamId = -1;
				String currentDate = "";

				/*String activityQuery = "SELECT ActivityId, ActivityName, PrimaryActivity FROM ActivityTable "
                    + "WHERE processdefid = " + procDefID
                    + " AND ActivityType = " + WFSConstant.ACT_INTRODUCTION
                    + (activityId != 0 ? " AND ActivityId = " + activityId : "")
                    + ((activityId == 0 & queueId == 0) ? " AND PrimaryActivity = " + WFSConstant.WF_VARCHARPREFIX + "Y'" : "");*/

				// Tirupati Srivastava : changes made to make code compatible with postgreSQL
				String activityQuery = "SELECT ActivityId, ActivityName, PrimaryActivity FROM ActivityTable "+WFSUtil.getTableLockHintStr(dbType)+" WHERE processdefid = " + procDefID
					+ " AND ActivityType = " + WFSConstant.ACT_INTRODUCTION
					+ (activityId != 0 ? " AND ActivityId = " + activityId : "")
					+ ( (activityId == 0 && queueId == 0) ? " AND PrimaryActivity = " + WFSUtil.TO_STRING("Y", true, dbType) : "");

				stmt = con.createStatement();

				rs = stmt.executeQuery(activityQuery);
				while (rs.next()) {
					Activity actv = new Activity();
					actv.iActivityId = rs.getInt("ActivityId");
					actv.strActivityName = rs.getString("ActivityName");
					actv.strPrimaryActivity = rs.getString("PrimaryActivity");
					actv.strPrimaryActivity = rs.wasNull() ? "" : actv.strPrimaryActivity;
					actList.add(actv);
					sbActivityIds.append(", ").append(actv.iActivityId);
					if (actv.strPrimaryActivity.trim().equalsIgnoreCase("Y")) {
						iDefaultIntroAct = actv.iActivityId;
					}
				}
				if (actList.size() == 0) {
					mainCode = WFSError.WM_INVALID_PROCESS_DEFINITION;
					subCode = WFSError.WM_INVALID_ACTIVITY_DEFINITION;
				}

				if (rs != null) {
					rs.close();
					rs = null;
				}

				if (mainCode == 0) {
					/*String queueQuery = "SELECT QueueDefTable.QueueId, QueueDefTable.QueueName,"
                        + " QueueStreamTable.StreamId, QueueStreamTable.ActivityId"
                        + " FROM QueueDefTable, QueueStreamTable"
                        + " WHERE QueueDefTable.QueueId = QueueStreamTable.QueueId"
                        + " AND QueueType = " + WFSConstant.WF_VARCHARPREFIX + "I'"
                        + " AND ProcessDefId = " + procDefID
                        + (queueId != 0 ? " AND QueueDefTable.QueueId = " + queueId : "")
                        + " AND QueueStreamTable.ActivityId IN (" + sbActivityIds + ")";*/

					// Tirupati Srivastava : changes made to make code compatible with postgreSQL
					String queueQuery = "SELECT QueueDefTable.QueueId, QueueDefTable.QueueName,"
						+ " QueueStreamTable.StreamId, QueueStreamTable.ActivityId"
						+ " FROM QueueDefTable "+WFSUtil.getTableLockHintStr(dbType)+", QueueStreamTable "+WFSUtil.getTableLockHintStr(dbType)+" WHERE QueueDefTable.QueueId = QueueStreamTable.QueueId"
						+ " AND QueueType = " + WFSUtil.TO_STRING("I", true, dbType)
						+ " AND ProcessDefId = " + procDefID
						+ (queueId != 0 ? " AND QueueDefTable.QueueId = " + queueId : "")
						+ " AND QueueStreamTable.ActivityId IN (" + sbActivityIds + ")";

					rs = stmt.executeQuery(queueQuery);
					while (rs.next()) {
						iQueueId = rs.getInt(1); //QueueId will be same for each resultset
						sQueueName = rs.getString(2); //QueueName will be same for each resultset
						iStreamId = rs.getInt(3); //will be different for each Activity
						iActivityId = rs.getInt(4); //will be different for each Activity
						//			assocActList.add(iStreamId  + "#" + iActivityId);
						assocActList.add(iActivityId + string21 + iStreamId); //Bug WFS_6_007
					}
					if (assocActList.size() == 0) {
						mainCode = WFSError.WM_INVALID_PROCESS_DEFINITION;
						subCode = WFSError.WFS_NOQ;
					}
					if (rs != null) {
						rs.close();
						rs = null;
					}
					//Check the case of multiple introduction activities on the same queue

					if (assocActList.size() > 1) {
						boolean bdefaultFound = false;
						String tempString = "";
						//check if default intro is there on the queue
						for (int iCount = 0; iCount < assocActList.size(); iCount++) {
							int tempActivityId;
							tempString = (String) (assocActList.get(iCount));
							tempActivityId = Integer.parseInt(tempString.substring(0, tempString.indexOf(string21)));
							if (iDefaultIntroAct == tempActivityId) {
								bdefaultFound = true;
								break;
							}
						}
						if (!bdefaultFound) {
							mainCode = WFSError.WM_INVALID_PROCESS_DEFINITION;
							subCode = WFSError.WFS_NOQ;
						} else {
							iStreamId = Integer.parseInt(tempString.substring(tempString.indexOf(string21) + 1));
							iActivityId = iDefaultIntroAct;
						}
					}
				}

				if (mainCode == 0) {
					for (int iCount = 0; iCount < actList.size(); iCount++) {
						Activity actv;
						actv = (Activity) (actList.get(iCount));
						if (actv.iActivityId == iActivityId) {
							sActivityName = actv.strActivityName;
						}
					}

                    if (participant.gettype() != 'P') {
                        String userQuery = "SELECT UserId, " + WFSUtil.getDate(dbType)
                            + " FROM QUserGroupView "+WFSUtil.getTableLockHintStr(dbType)+" WHERE QueueId = " + iQueueId
                            + " And UserId = " + userID;

						rs = stmt.executeQuery(userQuery);
						if (rs.next()) {
							currentDate = rs.getString(2);
						} else {
							mainCode = WFSError.WM_INVALID_PROCESS_DEFINITION;
							subCode = WFSError.WF_NO_AUTHORIZATION;
						}
						if (rs != null) {
							rs.close();
							rs = null;
						}
					}
				}

				stmt.close();
				stmt = null;

				if (mainCode == 0) {
					StringBuffer sbActivityId = new StringBuffer(iActivityId + "");
					StringBuffer sbActivityName = new StringBuffer(sActivityName);
					/** 01/02/2008, Bugzilla Bug 3511, createProcessInstance moved to WFSUtil
					 * wfs_ejb classes not accessible from wfsshared. - Ruhi Hira */
					/** 05/02/2010,	WFS_8.0_082 Block Activity support for reinitiate and subprocess cases 
					  * [CIG (CapGemini) ? generic AP process]. 
					  * SyncRoutingFlag shouldn't be hardcoded as false, otherwise, it will insert data in WorkListTable 
					  * for reinitiate case and routing in synchronous mode will return error that WI is invalid - Ruhi Hira */
					
					returnMap = WFSUtil.createProcessInstance(con, procDefID, userID, username, iStreamId, iQueueId,
                        sQueueName, dbType, sbActivityId, sbActivityName, syncRoutingFlag, parser,procVarId);
					pinstId=returnMap.get("ProcessInstanceID");

                    WFSUtil.generateLog(engine, con, WFSConstant.WFL_CreateProcessInstance, pinstId, 0, procDefID, 
						Integer.parseInt(sbActivityId.toString()), sbActivityName.toString(),
						iQueueId, userID, username, 0, null, currentDate, null, null, null);
                }
            } else {
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            if (mainCode == 0) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WMCreateProcessInstance"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append("<ProcessInstanceId>" + pinstId + "</ProcessInstanceId>\n");
                outputXML.append(gen.writeValueOf("URN", returnMap.get("URN")));
                outputXML.append(gen.closeOutputFile("WMCreateProcessInstance"));
            }
        } catch (SQLException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WM_INVALID_PROCESS_DEFINITION;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
                        + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (WFSException e) {
            mainCode = e.getMainErrorCode();
            subCode = e.getSubErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = WFSErrorMsg.getMessage(subCode);
        } catch (JTSException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
        } catch (Exception e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        }  finally {
            try {
                if (stmt != null) {
                    stmt.close();
                    stmt = null;
                }
            } catch (Exception e) {}
           
        }
        if (mainCode != 0) {
			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			return errorString;

        }
        return outputXML.toString();
    }

//----------------------------------------------------------------------------------------------------
//	Function Name 				:	WMStartProcess
//	Date Written (DD/MM/YYYY)	:	16/05/2002
//	Author						:	Prashant
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:   none
//	Return Values				:	String
//	Description					:   starts an operational Instance by Introducing into WorkFlow
//  Change Description          :   Bug # 1716
//----------------------------------------------------------------------------------------------------
    public String WMStartProcess(Connection con, XMLParser parser,
									 XMLGenerator gen) throws JTSException, WFSException {
		StringBuilder outputXML = new StringBuilder();
		Statement stmt = null;
		Statement stmt1 = null; /*Bug # 9790*/
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
		int targetActivityID = 0;
		int targetQueueID = 0;
		String targetQueueType = null;
		String targetProcessInstanceId = null;
		String targetWorkitemId = null;
		/*Bug # 7171*/
		String srcActivityId = "0";
		String srcBlockId = "0";
		String targetBlockId = "0";
		/*WFS_8.0_026*/
		Statement stmt2 = null;
		ResultSet rs2 = null;
		boolean debug = true;
		String updateStr = null;
		ArrayList parameter = new ArrayList();
		PreparedStatement pstmt = null;	
		String option = null;	
		String engine = null;	
		
		/** 08/01/2008, Bugzilla Bug 3380, commitFlag added to support nesting - Ruhi Hira */
		boolean commitFlag = false;
		boolean bSynchronousRoutingFlag = false;
                engine = parser.getValueOf("EngineName");
		try {
			int sessionID = parser.getIntOf("SessionId", 0, true);
			String procInstID = parser.getValueOf("ProcessInstanceId", "", false);
			int workItemId = parser.getIntOf("WorkItemId", 1, true);
			
			int dbType = ServerProperty.getReference().getDBType(engine);
			char omniServiceFlag = parser.getCharOf("OmniService", 'N', true);
			String synchronousRoutingFlag = parser.getValueOf("SynchronousRouting", "", true);
            if(synchronousRoutingFlag.equalsIgnoreCase("Y") || synchronousRoutingFlag.equalsIgnoreCase("true"))
                bSynchronousRoutingFlag = true;
            else if(synchronousRoutingFlag.equalsIgnoreCase(""))
                bSynchronousRoutingFlag = WFSUtil.isSyncRoutingMode();
            boolean psFlag = parser.getValueOf("PSFlag", "N", true).equalsIgnoreCase("P");
           
			option = parser.getValueOf("Option", "", false);
			boolean debugFlag =parser.getCharOf("DebugFlag", 'N', true)== 'Y'?true:false;  
			debug = debugFlag;
			int procDefID = 0;
			int wkduration = 0;
			String actName = "";
			int actID = 0;			
			String urn = "";
			/* 05/09/2007, SrNo-7, Synchronous routing of workitems - Ruhi Hira */
			WFParticipant participant = null;
			if (omniServiceFlag == 'Y') {
				participant = new WFParticipant(0, "System", 'P', "SERVER", Locale.getDefault().toString());
			} else {
				participant = WFSUtil.WFCheckSession(con, sessionID);
			}
			if (participant != null) {
				int userID = participant.gettype() == 'P' ? 0 : participant.getid();
				/**
				 * Changed by: Mohnish Chopra
				 * Change Description : Return Error if workitem has expired.
				 * 
				 */
				/*if(WFSUtil.isWorkItemExpired(con, dbType, procInstID, 1, sessionID, userID, debugFlag, engine)){
    				
                   // throw new WFSException(mainCode, subCode, errType, subject, descr);
                
    				    mainCode = WFSError.WF_OPERATION_FAILED;
    		            subCode = WFSError.WM_WORKITEM_EXPIRED;
    		            subject = WFSErrorMsg.getMessage(mainCode);
    		            errType = WFSError.WF_TMP;
    		            descr = WFSErrorMsg.getMessage(subCode);
    		            String strReturn = WFSUtil.generalError(option, engine, gen,
    	   	                   mainCode, subCode,
    	   	                   errType, subject,
    	   	                    descr);
    	   	             
    	   	        return strReturn;	
                
    			}*/
				String username = participant.gettype() == 'P' ? "System" : participant.getname();

				String createdDate = "";
				stmt = con.createStatement();

				/*ResultSet rs = stmt.executeQuery(" Select ProcessInstanceState,ProcessDefId,CreatedDateTime "
												 + " from ProcessInstanceTable where ProcessInstanceID = " + WFSConstant.WF_VARCHARPREFIX + procInstID + "' ");*/
				// Tirupati Srivastava : changes made to make code compatible with postgreSQL
				//ResultSet rs = stmt.executeQuery(" Select ProcessInstanceState,ProcessDefId,CreatedDateTime "
				//								 + " from WFINSTRUMENTTABLE  " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessInstanceID = " + WFSUtil.TO_STRING(procInstID, true, dbType));
				String qStr = " Select ProcessInstanceState,ProcessDefId,CreatedDateTime,URN from WFINSTRUMENTTABLE  " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessInstanceID = ?";
				pstmt = con.prepareStatement(qStr);
				WFSUtil.DB_SetString(1, procInstID, pstmt, dbType);
				parameter.clear();
				parameter.add(procInstID);
				ResultSet rs = WFSUtil.jdbcExecuteQuery(procInstID, sessionID, participant.getid(), qStr, pstmt, parameter, debug, engine);
				if (rs.next()) {                    
					String currentDate = null;
					String lockedTime = null;
					String entryDateTime = null;
					int processingTime = 0;

					if (rs.getInt(1) != 1) {
						if (rs != null)
							rs.close();
						mainCode = WFSError.WM_INVALID_PROCESS_INSTANCE;
						subCode = WFSError.WM_TRANSITION_NOT_ALLOWED;
						subject = WFSErrorMsg.getMessage(mainCode);
						descr = WFSErrorMsg.getMessage(subCode);
						errType = WFSError.WF_TMP;
					} else {
						procDefID = rs.getInt(2);
						createdDate = rs.getString(3);
						createdDate = rs.wasNull() ? "" : WFSUtil.TO_DATE(createdDate, true, dbType);
						urn = rs.getString("URN");
						if (rs != null)
							rs.close();
						if(pstmt != null){
							pstmt.close();
							pstmt = null;
						}

						//int actID = 0;
						//String actName = "";
						int lockedBy = 0;
						int priority = 0;
						String entry = null;

						/*	************************************************************************************	*/
						/*		Change By	: Varun Bhansaly														*/
						/*		Reason		: WMStartProcess : More queries being fired than required				*/
						/*		Date		: 24/11/2006															*/
						/*		Bug No.		: Bugzilla Bug 296														*/
						/*	************************************************************************************	*/

						//boolean worklist = false;
						String tableName = "WFINSTRUMENTTABLE";
						/*Bug # 6925*/
						/*if(participant.gettype() == 'P' && omniServiceFlag != 'Y'){
							tableName = "WORKLISTTABLE";
							worklist = true;
						}*/
						String lockStatus = "Y";
						
						/** 14/11/2007, Bugzilla Bug 1686, LockWI is mandatory before initiate. - Ruhi Hira */
						/*rs = stmt.executeQuery(
							" Select ActivityId ,ActivityName ,Q_UserId ,PriorityLevel ,EntryDateTime," + WFSUtil.DATEDIFF(WFSConstant.WFL_ss, "CreatedDatetime", WFSUtil.getDate(dbType), dbType) + "," + WFSUtil.getDate(dbType) + "," + WFSUtil.DATEDIFF(WFSConstant.WFL_ss, "LockedTime", WFSUtil.getDate(dbType), dbType)
							+ " from WorkinProcesstable where ProcessInstanceID = " + WFSConstant.WF_VARCHARPREFIX + procInstID + "' ");*/
						// Tirupati Srivastava : changes made to make code compatible with postgreSQL
						// rs = stmt.executeQuery(
						//	" Select ActivityId, ActivityName, Q_UserId, PriorityLevel, EntryDateTime, CreatedDatetime," + WFSUtil.getDate(dbType) + ", LockedTime, LockStatus from " + tableName + " where ProcessInstanceID = " + WFSUtil.TO_STRING(procInstID, true, dbType));
						   qStr = " Select ActivityId, ActivityName, Q_UserId, PriorityLevel, EntryDateTime, CreatedDatetime," + WFSUtil.getDate(dbType) + ", LockedTime, LockStatus from " + tableName + " where ProcessInstanceID = ?";
						   pstmt = con.prepareStatement(qStr);
						   WFSUtil.DB_SetString(1, procInstID, pstmt, dbType);
						   parameter.add(procInstID);
						   rs = WFSUtil.jdbcExecuteQuery(procInstID, sessionID, participant.getid(), qStr, pstmt, parameter, debug, engine);
						if (rs.next()) {
							actID = rs.getInt(1);
							actName = rs.getString(2);
							lockedBy = rs.getInt(3);
							priority = rs.getInt(4);
							entry = rs.getString(5);
							/*	************************************************************************************	*/
							/*		Change By	: Krishan Dutt Dixit													*/
							/*		Reason		: Time duration for the workitem is calculated 							*/
							/*		Date		: 24/06/2004															*/
							/*		Bug No.		: WSE_I_5.0.1_265														*/
							/*	************************************************************************************	*/
							entryDateTime = rs.getString(6);
							currentDate = rs.getString(7);
							lockedTime = rs.getString(8);
							if(participant.gettype() == 'P' && omniServiceFlag != 'Y'){      
								lockStatus = rs.getString(9);
							} 
							rs.close();
							wkduration = WFSUtil.getTimeDiff(entryDateTime, currentDate, engine);
							if(pstmt != null){
								pstmt.close();
								pstmt = null;
							}
						} else {
							if (rs != null)
								rs.close();
							//throw new WFSException(WFSError.WM_INVALID_PROCESS_INSTANCE, 0, errType, subject, descr);
							
							String strReturn = WFSUtil.generalError(option, engine, gen, WFSError.WM_INVALID_PROCESS_INSTANCE, 0, errType, subject, descr);
	 
							return strReturn;
						}
					
						//if (lockedBy == userID || worklist) {
						if (lockedBy == userID || lockStatus.equalsIgnoreCase("N")){
							if (participant.gettype() == 'P'|| psFlag) {
								// Tirupati Srivastava : changes made to make code compatible with postgreSQL
								/*rs = stmt.executeQuery(" SELECT QUEUEDEFTABLE.QUEUENAME,QUEUEDEFTABLE.QUEUETYPE,"
									+ " QUEUEDEFTABLE.QUEUEID , QUEUESTREAMTABLE.STREAMID"
									+ " FROM QUEUESTREAMTABLE " + WFSUtil.getTableLockHintStr(dbType) + ",ACTIVITYTABLE " + WFSUtil.getTableLockHintStr(dbType) + ",QUEUEDEFTABLE " + WFSUtil.getTableLockHintStr(dbType) + " "
									+ " WHERE ACTIVITYTABLE.PROCESSDEFID = " + procDefID
									+ " AND ACTIVITYTABLE.ACTIVITYTYPE 	= " + WFSConstant.ACT_INTRODUCTION
									+ " AND ACTIVITYTABLE.PROCESSDEFID = QUEUESTREAMTABLE.PROCESSDEFID "
									+ " AND ACTIVITYTABLE.ACTIVITYID	= QUEUESTREAMTABLE.ACTIVITYID	"
									+ " AND QUEUESTREAMTABLE.QUEUEID 	= QUEUEDEFTABLE.QUEUEID AND QUEUETYPE = " + WFSUtil.TO_STRING("I", true, dbType));*/
								updateStr = " SELECT QUEUEDEFTABLE.QUEUENAME,QUEUEDEFTABLE.QUEUETYPE,"
										+ " QUEUEDEFTABLE.QUEUEID , QUEUESTREAMTABLE.STREAMID"
										+ " FROM QUEUESTREAMTABLE " + WFSUtil.getTableLockHintStr(dbType) + ",ACTIVITYTABLE " + WFSUtil.getTableLockHintStr(dbType) + ",QUEUEDEFTABLE " + WFSUtil.getTableLockHintStr(dbType) + " "
										+ " WHERE ACTIVITYTABLE.PROCESSDEFID = " + procDefID
										+ " AND ACTIVITYTABLE.ACTIVITYTYPE 	= " + WFSConstant.ACT_INTRODUCTION
										+ " AND ACTIVITYTABLE.PROCESSDEFID = QUEUESTREAMTABLE.PROCESSDEFID "
										+ " AND ACTIVITYTABLE.ACTIVITYID	= QUEUESTREAMTABLE.ACTIVITYID	"
										+ " AND QUEUESTREAMTABLE.QUEUEID 	= QUEUEDEFTABLE.QUEUEID AND QUEUETYPE = " + WFSUtil.TO_STRING("I", true, dbType);
								rs = WFSUtil.jdbcExecuteQuery(procInstID, sessionID, participant.getid(), updateStr, stmt, null, debug, engine);
							} else {
//	        Changed By : Varun Bhansaly On 13/02/2007 for Bugzilla Id 54 to Provide Dirty Read Support for DB2 Database
								// Tirupati Srivastava : changes made to make code compatible with postgreSQL
								/*rs = stmt.executeQuery(" SELECT QUEUEDEFTABLE.QUEUENAME,QUEUEDEFTABLE.QUEUETYPE,"
									+ " QUEUEDEFTABLE.QUEUEID , QUEUESTREAMTABLE.STREAMID"
									+ " FROM QUEUESTREAMTABLE " + WFSUtil.getTableLockHintStr(dbType) + ",QUserGroupView " + WFSUtil.getTableLockHintStr(dbType) + ",ACTIVITYTABLE " + WFSUtil.getTableLockHintStr(dbType) + ",QUEUEDEFTABLE " + WFSUtil.getTableLockHintStr(dbType) + " "
									+ " WHERE ACTIVITYTABLE.PROCESSDEFID = " + procDefID
									+ " AND ACTIVITYTABLE.ACTIVITYTYPE 	= " + WFSConstant.ACT_INTRODUCTION
									+ " AND ACTIVITYTABLE.PROCESSDEFID = QUEUESTREAMTABLE.PROCESSDEFID "
									+ " AND ACTIVITYTABLE.ACTIVITYID	= QUEUESTREAMTABLE.ACTIVITYID	"
									+ " AND QUEUESTREAMTABLE.QUEUEID 	= QUserGroupView.QUEUEID "
									+ " AND QUEUEDEFTABLE.QUEUEID 		= QUserGroupView.QUEUEID "
									+ " AND QUEUETYPE = " + WFSUtil.TO_STRING("I", true, dbType) + " AND USERID = " + userID + WFSUtil.getQueryLockHintStr(dbType));*/
								updateStr = " SELECT QUEUEDEFTABLE.QUEUENAME,QUEUEDEFTABLE.QUEUETYPE,"
										+ " QUEUEDEFTABLE.QUEUEID , QUEUESTREAMTABLE.STREAMID"
										+ " FROM QUEUESTREAMTABLE " + WFSUtil.getTableLockHintStr(dbType) + ",QUserGroupView " + WFSUtil.getTableLockHintStr(dbType) + ",ACTIVITYTABLE " + WFSUtil.getTableLockHintStr(dbType) + ",QUEUEDEFTABLE " + WFSUtil.getTableLockHintStr(dbType) + " "
										+ " WHERE ACTIVITYTABLE.PROCESSDEFID = " + procDefID
										+ " AND ACTIVITYTABLE.ACTIVITYTYPE 	= " + WFSConstant.ACT_INTRODUCTION
										+ " AND ACTIVITYTABLE.PROCESSDEFID = QUEUESTREAMTABLE.PROCESSDEFID "
										+ " AND ACTIVITYTABLE.ACTIVITYID	= QUEUESTREAMTABLE.ACTIVITYID	"
										+ " AND QUEUESTREAMTABLE.QUEUEID 	= QUserGroupView.QUEUEID "
										+ " AND QUEUEDEFTABLE.QUEUEID 		= QUserGroupView.QUEUEID "
										+ " AND QUEUETYPE = " + WFSUtil.TO_STRING("I", true, dbType) + " AND USERID = " + userID + WFSUtil.getQueryLockHintStr(dbType);
								rs = WFSUtil.jdbcExecuteQuery(procInstID, sessionID, participant.getid(), updateStr, stmt, null, debug, engine);
							}
							int streamId = 0;
							int queueId = 0;
							String queuename = "";
							String queuetype = "";
							if (rs.next()) {
								queuename = rs.getString(1);
								queuetype = rs.getString(2);
								queueId = rs.getInt(3);
								streamId = rs.getInt(4);
							}
							if (rs != null)
								rs.close();
							if (queueId == 0) {
								//throw new WFSException(WFSError.WM_INVALID_PROCESS_DEFINITION,
								//	WFSError.WF_NO_AUTHORIZATION, errType, subject, descr);
								String strReturn = WFSUtil.generalError(option, engine, gen, WFSError.WM_INVALID_PROCESS_DEFINITION,WFSError.WF_NO_AUTHORIZATION, errType, subject, descr);
	 
								return strReturn;
							}

							//SrNo-6
							/*rs = stmt.executeQuery("Select ProcessTurnAroundTime, TATCalFlag, " + WFSUtil.getDate(dbType) + " currentT, ProcessName , VersionNo , WFDurationTable.WFYears, WFDurationTable.WFMonths, WFDurationTable.WFDays, 		WFDurationTable.WFHours, WFDurationTable.WFMinutes, WFDurationTable.WFSeconds FROM " +
														 WFSUtil.join(dbType, " PROCESSDEFTABLE LEFT OUTER JOIN WFDurationtable ON PROCESSDEFTABLE.processturnaroundtime = WFDurationTable.durationid and processdeftable.processdefid = WFDurationTable.processdefid where ") + "  PROCESSDEFTABLE.ProcessDefID = " + procDefID);*/
							// Tirupati Srivastava : changes made to make code compatible with postgreSQL
							//Bug # 1716
							//rs = stmt.executeQuery("Select ProcessTurnAroundTime, TATCalFlag, " + WFSUtil.getDate(dbType) + " AS currentT, ProcessName , VersionNo FROM PROCESSDEFTABLE  " + WFSUtil.getTableLockHintStr(dbType) + " WHERE PROCESSDEFTABLE.ProcessDefID = " + procDefID);
							updateStr = "Select ProcessTurnAroundTime, TATCalFlag, " + WFSUtil.getDate(dbType) + " AS currentT, ProcessName , VersionNo FROM PROCESSDEFTABLE  " + WFSUtil.getTableLockHintStr(dbType) + " WHERE PROCESSDEFTABLE.ProcessDefID = " + procDefID ; 
							rs = WFSUtil.jdbcExecuteQuery(procInstID, sessionID, participant.getid(), updateStr, stmt, null, debug, engine);							
							if (rs.next()) {
								int durationId = rs.getInt("ProcessTurnAroundTime");
								String processTurnAroundTime = "null";
								if (durationId > 0) {
									HashMap map = (HashMap) CachedObjectCollection.getReference().getCacheObject(con, engine, procDefID, WFSConstant.CACHE_CONST_WFDuration, "").getData();
									WFDuration duration = (WFDuration) map.get(durationId + "");
									if (duration != null) {
										String years = duration.getYears();
										String months = duration.getMonths();
										String days = duration.getDays();
										String hours = duration.getHours();
										String minutes = duration.getMinutes();
										String seconds = duration.getSeconds();
										String tatCalFlag = rs.getString("TATCalFlag");
										tatCalFlag = rs.wasNull() ? "N" : tatCalFlag;
										//SrNo-6
										java.util.Date nextDateTime = null;
										java.util.Date currentDateTime = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US).parse(rs.getString("currentT"));
										Calendar cal = Calendar.getInstance();
										if (tatCalFlag.equalsIgnoreCase("Y")) {
											// Get the calenderid / calenderType associated with this process from Process-Calendar-Association Cache.
											// call calutil method (passing these calenderid / calenderType) to add days / hours to a given Date
											// Added for testing of WFCalCache by Ahsan Javed
											/*WFS_8.0_026*/
											String calendarName = null;
											stmt2 = con.createStatement();
											//rs2 = stmt2.executeQuery(" Select CalendarName From WFINSTRUMENTTABLE where ProcessInstanceID = " + WFSUtil.TO_STRING(procInstID, true, dbType) + " And WorkitemId = 1");
											updateStr = " Select CalendarName From WFINSTRUMENTTABLE where ProcessInstanceID = " + WFSUtil.TO_STRING(procInstID, true, dbType) + " And WorkitemId = 1";
											rs2 = WFSUtil.jdbcExecuteQuery(procInstID, sessionID, participant.getid(), updateStr, stmt2, null, debug, engine);
											if(rs2 != null && rs2.next()){ //WFS_8.0_058
												calendarName = rs2.getString("CalendarName");	
											}
											if(rs2 != null){
												rs2.close();
												rs2 = null;
											}
											if(stmt2 != null){
												stmt2.close();
												stmt2 = null;
											}
											WFCalAssocData wfCalAssocData = WFSUtil.getWICalendarInfo(con, engine, procDefID, "0", calendarName);
											//WFCa lAssocData wfCalAssocData = (WFCalAssocData) CachedObjectCollection.getReference().getCacheObject(con, engine, procDefID, WFSConstant.CACHE_CONST_CalCache, "0").getData();
											/* Bugzilla Bug 1175, Check for NULL, 19/06/2007 - Ruhi Hira */
											if (wfCalAssocData != null) {
												nextDateTime = WFCalUtil.getSharedInstance().
												getNextDateTime(currentDateTime, Integer.parseInt(days),
														Integer.parseInt(hours), Integer.parseInt(minutes),
														wfCalAssocData.getProcessDefId(),
														wfCalAssocData.getCalId());
												cal.setTime(nextDateTime);
												cal.add(Calendar.YEAR, Integer.parseInt(years));
												cal.add(Calendar.MONTH, Integer.parseInt(months));
												nextDateTime = cal.getTime();
												processTurnAroundTime = WFSUtil.TO_DATE(new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US).format(nextDateTime), true, dbType);
											} else {
												processTurnAroundTime = " null ";
											}
										} else {
											//SrNo-6
											cal.setTime(currentDateTime);
											cal.add(Calendar.YEAR, Integer.parseInt(years));
											cal.add(Calendar.MONTH, Integer.parseInt(months));
											cal.add(Calendar.DATE, Integer.parseInt(days));
											cal.add(Calendar.HOUR, Integer.parseInt(hours));
											cal.add(Calendar.MINUTE, Integer.parseInt(minutes));
											java.util.Date nextDate = null;
											nextDate = cal.getTime();
											nextDateTime = new java.sql.Timestamp(nextDate.getTime());
											processTurnAroundTime = WFSUtil.TO_DATE(new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US).format(nextDateTime), true, dbType);
										}
									} else {
										processTurnAroundTime = " null ";
									}
								} else {
									processTurnAroundTime = " null ";
								}
								String processName = rs.getString("ProcessName");
								processName = rs.wasNull() ? " null " : processName.trim();
								short version = rs.getShort("VersionNo");

								rs.close();
								if (con.getAutoCommit()) {
									con.setAutoCommit(false);
									commitFlag = true;
								}
								/*	************************************************************************************	*/
								/*		Change By	: Krishan Dutt Dixit													*/
								/*		Reason		: Introduced Workitem should be transferred to the WorkdoneTable  and	*/
								/*					  deleted from workinprocesstable or worklisttable						*/
								/*		Date		: 14/06/2004															*/
								/*		Bug No.		: WSE_I_5.0.1_002,WSE_I_5.0.1_004,WSE_I_5.0.1_190,WSE_I_5.0.1_196,WSE_I_5.0.1_240	*/
								/*	************************************************************************************	*/
								/*stmt.addBatch(" Update ProcessInstanceTable Set IntroducedByID = " + userID
											  + ", IntroducedBy= " + WFSConstant.WF_VARCHARPREFIX + username + "',IntroductionDatetime = " + WFSUtil.getDate(dbType)
											  + " , ProcessInstanceState = 2 , ExpectedProcessDelay = " + processTurnAroundTime
											  + " where ProcessInstanceID = " + WFSConstant.WF_VARCHARPREFIX + procInstID + "'");*/
								// Tirupati Srivastava : changes made to make code compatible with postgreSQL
								
								stmt1 = con.createStatement();  /*Bug # 9790*/
								// Changes done for Code Optimization
								/*stmt1.addBatch(" Update ProcessInstanceTable Set IntroducedByID = " + userID
										+ ", IntroducedBy= " + WFSUtil.TO_STRING(username, true, dbType) + ",IntroductionDatetime = " + WFSUtil.getDate(dbType)
										+ " , ProcessInstanceState = 2 , ExpectedProcessDelay = " + processTurnAroundTime
										+ " where ProcessInstanceID = " + WFSUtil.TO_STRING(procInstID, true, dbType)); */
										
								//WFS_6.1_048-By Mandeep Kaur

								/*	************************************************************************************	*/
								/*		Change By	: Varun Bhansaly														*/
								/*		Reason		: WMStartProcess : More queries being fired than required				*/
								/*		Date		: 24/11/2006															*/
								/*		Bug No.		: Bugzilla Bug 296														*/
								/*	************************************************************************************	*/

								/** 14/11/2007, SrNo-10, Synchronous routing of workitems. - Ruhi Hira */
								if (!bSynchronousRoutingFlag) {
									/*stmt.addBatch(" Insert into WorkDonetable ( ProcessInstanceId,WorkItemId,ProcessName,"
												  + "ProcessVersion,ProcessDefID,LastProcessedBy,ProcessedBy,ActivityName,ActivityId,"
												  + "EntryDateTime,ParentWorkItemId,PriorityLevel,ValidTill,CreatedDateTime,"
												  + "PreviousStage,AssignmentType, WorkItemState, Statename) Select "
												  + WFSConstant.WF_VARCHARPREFIX + procInstID + "',1," + WFSConstant.WF_VARCHARPREFIX
												  + processName + "'," + version + "," + procDefID + "," + userID + "," + WFSConstant.WF_VARCHARPREFIX + username
												  + "'," + WFSConstant.WF_VARCHARPREFIX + actName + "'," + actID + ",EntryDateTime,0," + priority + ",ValidTill,CreatedDateTime," + WFSConstant.WF_VARCHARPREFIX
												  + actName + "','Y', 6, " + WFSConstant.WF_VARCHARPREFIX + WFSConstant.WF_COMPLETED + "' from " + tableName + " where ProcessInstanceID = " + WFSConstant.WF_VARCHARPREFIX + procInstID + "'");*/
									// Tirupati Srivastava : changes made to make code compatible with postgreSQL
									/*Bug # 9790*/
									//Process Variant Support
									
									updateStr = " Update WFINSTRUMENTTABLE Set IntroducedByID = " + userID
										+ ", IntroducedBy = " + WFSUtil.TO_STRING(username, true, dbType) + ",IntroductionDatetime = " + WFSUtil.getDate(dbType)
										+ " , ProcessInstanceState = 2 , ExpectedProcessDelay = " + processTurnAroundTime
										+ ", ProcessName = " + WFSUtil.TO_STRING(processName, true, dbType)
										+", ProcessVersion = " + version +" , ProcessDefID = " + procDefID
										+", LastProcessedBy = " + userID + " , ProcessedBy = " 
										+ WFSUtil.TO_STRING(username, true, dbType) + ", ActivityName = " 
										+ WFSUtil.TO_STRING(actName, true, dbType) + ", ActivityId = " + actID
										+ ", ParentWorkItemId = 0 , PriorityLevel = " + priority
										+ ", PreviousStage = " + WFSUtil.TO_STRING(actName, true, dbType)
										+ ", AssignmentType = 'Y' ,validtill=null, WorkItemState = 6 "
										+ ", Statename = " + WFSUtil.TO_STRING(WFSConstant.WF_COMPLETED, true, dbType)
										+ ", CollectFlag = null , Q_StreamId = null"
										+ ", Q_QueueId = null , Q_UserId = null , AssignedUser = null "
										+ ", FilterValue = null , ExpectedWorkitemDelay = null "
										+ ", LockedByName = null , LockStatus = 'N' "
										+ ", LockedTime = null , Queuename = null , Queuetype = null"
										+ " , NotifyStatus = null , RoutingStatus = 'Y' ,EntryDateTime=" + WFSUtil.getDate(dbType)+" "	
										+ " where ProcessInstanceID = " + WFSUtil.TO_STRING(procInstID, true, dbType) + " And WorkItemId = " + workItemId;	
										
									// Changes done for Code Optimization	
									
									/* stmt1.addBatch(" Insert into WorkDonetable ( ProcessInstanceId,WorkItemId,ProcessName,"
											+ "ProcessVersion,ProcessDefID,LastProcessedBy,ProcessedBy,ActivityName,ActivityId,"
											+ "EntryDateTime,ParentWorkItemId,PriorityLevel,ValidTill,CreatedDateTime,"
											+ "PreviousStage,AssignmentType, WorkItemState, Statename, ProcessVariantId) Select "
											+ WFSUtil.TO_STRING(procInstID, true, dbType) + ",1," + WFSUtil.TO_STRING(processName, true, dbType) + "," + version + "," + procDefID + "," + userID + "," + WFSUtil.TO_STRING(username, true, dbType) + "," + WFSUtil.TO_STRING(actName, true, dbType) + "," + actID + ",EntryDateTime,0," + priority + ",ValidTill,CreatedDateTime," + WFSUtil.TO_STRING(actName, true, dbType) + ",'Y', 6, " + WFSUtil.TO_STRING(WFSConstant.WF_COMPLETED, true, dbType) +
											" , ProcessVariantId from " + tableName + " where ProcessInstanceID = " + WFSUtil.TO_STRING(procInstID, true, dbType)); */

									/*stmt.addBatch("Delete from " + tableName + " where ProcessInstanceID = " + WFSConstant.WF_VARCHARPREFIX + procInstID + "'");*/
									// Changes done for Code Optimization
									/*stmt1.addBatch(" Delete from " + tableName + " where ProcessInstanceID = " + WFSUtil.TO_STRING(procInstID, true, dbType)); */
								} else {
									/*stmt.addBatch(" Update WorkInProcessTable set LastProcessedBy = " + userID
												  + ", ProcessedBy = " + WFSConstant.WF_VARCHARPREFIX + username + "', ActivityName = "
												  + WFSConstant.WF_VARCHARPREFIX + actName + "', ActivityId = " + actID
												  + ", PreviousStage = " + WFSConstant.WF_VARCHARPREFIX + actName
												  + "', AssignmentType = 'Y', WorkItemState = 6, Statename = "
												  + WFSConstant.WF_VARCHARPREFIX + WFSConstant.WF_COMPLETED
												  + "' where ProcessInstanceID = " + WFSConstant.WF_VARCHARPREFIX + procInstID + "'");*/
									/*Bug # 9790*/
									
									updateStr = " Update WFINSTRUMENTTABLE Set IntroducedByID = " + userID
										+ ", IntroducedBy = " + WFSUtil.TO_STRING(username, true, dbType) + ",IntroductionDatetime = " + WFSUtil.getDate(dbType)
										+ " , ProcessInstanceState = 2 , ExpectedProcessDelay = " + processTurnAroundTime
										+ ", LastProcessedBy = " + userID
										+ ", ProcessedBy = " + WFSUtil.TO_STRING(username, true, dbType) + ", ActivityName = "
										+ WFSUtil.TO_STRING(actName, true, dbType) 
										+ ", ActivityId = " + actID
										+ ", PreviousStage = " + WFSUtil.TO_STRING(actName, true, dbType) + ", AssignmentType = 'Y',validtill=null,assigneduser = null, WorkItemState = 6, Statename = "
										+ WFSUtil.TO_STRING(WFSConstant.WF_COMPLETED, true, dbType) 
										+ ",NotifyStatus = null, RoutingStatus = 'Y' ,EntryDateTime=" + WFSUtil.getDate(dbType)+""
										+ " where ProcessInstanceID = " + WFSUtil.TO_STRING(procInstID, true, dbType) + " And WorkItemId = " + workItemId;	
									
									// Changes Done for Code Optimization 
									
									/*stmt1.addBatch(" Update WorkInProcessTable set LastProcessedBy = " + userID
											+ ", ProcessedBy = " + WFSUtil.TO_STRING(username, true, dbType) + ", ActivityName = "
											+ WFSUtil.TO_STRING(actName, true, dbType) + ", ActivityId = " + actID
											+ ", PreviousStage = " + WFSUtil.TO_STRING(actName, true, dbType) + ", AssignmentType = 'Y', WorkItemState = 6, Statename = "
											+ WFSUtil.TO_STRING(WFSConstant.WF_COMPLETED, true, dbType) + " where ProcessInstanceID = " + WFSUtil.TO_STRING(procInstID, true, dbType)); */
								}
								//int[] res = new int[3];
								//res = stmt1.executeBatch();								
								int res = WFSUtil.jdbcExecuteUpdate(procInstID, sessionID, participant.getid(), updateStr, stmt1, null, debug, engine);

								/*	************************************************************************************	*/
								/*		Change By	: Varun Bhansaly														*/
								/*		Reason		: WMStartProcess : More queries being fired than required				*/
								/*		Date		: 24/11/2006															*/
								/*		Bug No.		: Bugzilla Bug 296														*/
								/*	************************************************************************************	*/
								/*
									 if(res[0] > 0){ //first update successful
								 if(res[1] <= 0 ) {	// No workItem in workin process
									 if (!con.getAutoCommit()){
								   con.rollback();
								   con.setAutoCommit(false);
								  }
								  // Bug # wfs_5_006
								  stmt.addBatch(" Update ProcessInstanceTable Set IntroducedByID = " + userID
								   + ", IntroducedBy= "+ WFSConstant.WF_VARCHARPREFIX + username+"',IntroductionDatetime = " + WFSUtil.getDate(dbType)
								   + " , ProcessInstanceState = 2 , ExpectedProcessDelay = " + processTurnAroundTime
								   + " where ProcessInstanceID = "+ WFSConstant.WF_VARCHARPREFIX + procInstID + "'");
								  stmt.addBatch(" Insert into WorkDonetable ( ProcessInstanceId,WorkItemId,ProcessName,"
								   + "ProcessVersion,ProcessDefID,LastProcessedBy,ProcessedBy,ActivityName,ActivityId,"
								   + "EntryDateTime,ParentWorkItemId,PriorityLevel,ValidTill,CreatedDateTime,"
								   + "PreviousStage,AssignmentType, WorkItemState, Statename) Select "
								   + WFSConstant.WF_VARCHARPREFIX  + procInstID + "',1,"+ WFSConstant.WF_VARCHARPREFIX
								   + processName + "'," + version + "," + procDefID + "," + userID + ","+ WFSConstant.WF_VARCHARPREFIX + username
								   + "',"+ WFSConstant.WF_VARCHARPREFIX + actName + "'," + actID + ",EntryDateTime,0," + priority + ",ValidTill,CreatedDateTime,"+ WFSConstant.WF_VARCHARPREFIX
								   + actName+ "','Y', 6, "+ WFSConstant.WF_VARCHARPREFIX + WFSConstant.WF_COMPLETED +"' from workListtable where ProcessInstanceID = "+ WFSConstant.WF_VARCHARPREFIX + procInstID+"'");
								  stmt.addBatch("Delete from workListtable where ProcessInstanceID = "+ WFSConstant.WF_VARCHARPREFIX + procInstID + "'");
								  res = stmt.executeBatch();
								 */
								if ( (!bSynchronousRoutingFlag && res > 0) ||
										(bSynchronousRoutingFlag && res > 0)) {
									/* 05/09/2007, SrNo-7, Synchronous routing of workitems - Ruhi Hira */
									if (bSynchronousRoutingFlag) {
										//                                        WFSUtil.printOut(parser,"[WMProcessDefinition] WMStartProcess() Invoking routeWorkitem() for " + " pinstId >> " + procInstID + " workItemID >> " + 1);
										String[] retInfo = WFRoutingUtil.routeWorkitem(con, procInstID, workItemId, procDefID, engine,sessionID,userID,debugFlag,bSynchronousRoutingFlag);
										/*Bug # 7171*/
										if (retInfo != null) {
											srcActivityId = retInfo[0];
											srcBlockId = retInfo[1];
											if (retInfo[2] != null) {
												targetActivityID = Integer.parseInt(retInfo[2]);
											}
											targetBlockId = retInfo[3];
											if (retInfo[4] != null) {
												targetQueueID = Integer.parseInt(retInfo[4]);
											}
											/** 05/02/2010,	WFS_8.0_082 Block Activity support for reinitiate and subprocess cases 
											 * [CIG (CapGemini) ? generic AP process]. - Ruhi Hira */
											 targetQueueType = retInfo[5];
											targetProcessInstanceId = retInfo[6];
											targetWorkitemId = retInfo[7];
											/**
											 * Fetch the updated activityId -> Change done to update the logging activity name in the workitem history.
											 */
											String updatedActName = "";
											String actQuery = "select ActivityName from ActivityTable " + WFSUtil.getTableLockHintStr(dbType) 
													+ " where processDefid = "+ procDefID +" and ActivityId = " + targetActivityID;
											stmt2 = con.createStatement();
											rs2 = stmt2.executeQuery(actQuery);
											if(rs2 != null && rs2.next()){
												updatedActName = rs2.getString(1);
											}
											if(rs2 != null){
												rs2.close();
												rs2 = null;
											}
											if(stmt2 != null){
												stmt2.close();
												stmt2 = null;
											}
											WFSUtil.generateLog(engine, con, WFSConstant.WFL_WorkItemUnlock, procInstID, 1, procDefID,
													targetActivityID, updatedActName, targetQueueID, userID, username, 0, null, currentDate, null, lockedTime, null, 1);
											WFSUtil.generateLog(engine, con, WFSConstant.WFL_StartProcessInstance, procInstID, 1, procDefID, 
													targetActivityID, updatedActName, targetQueueID, userID, username, 0, null, currentDate, entryDateTime, lockedTime, null);
										} 
									}
									if(!bSynchronousRoutingFlag){
										WFSUtil.generateLog(engine, con, WFSConstant.WFL_WorkItemUnlock, procInstID, 1, procDefID,
											actID, actName, queueId, userID, username, 0, null, currentDate, null, lockedTime, null, 1);
										WFSUtil.generateLog(engine, con, WFSConstant.WFL_StartProcessInstance, procInstID, 1, procDefID, 
											actID, actName, queueId, userID, username, 0, null, currentDate, entryDateTime, lockedTime, null);
									}
	                                   
									if (commitFlag && !con.getAutoCommit()) {
										con.commit();
										con.setAutoCommit(true);
										commitFlag = false;
									}
									//Entry was getting inserted in table twice--Kimil
									/*WFSUtil.generateLog(engine, con, WFSConstant.WFL_StartProcessInstance, procInstID, 1, procDefID, 
											actID, actName, queueId, userID, username, 0, null, currentDate, entryDateTime, lockedTime, null);*/
									
								} else {
									if (commitFlag && !con.getAutoCommit()) {
										con.rollback();
										con.setAutoCommit(true);
										commitFlag = false;
									}
									mainCode = WFSError.WM_INVALID_PROCESS_INSTANCE;
									subCode = 0;
									subject = WFSErrorMsg.getMessage(mainCode);
									descr = WFSErrorMsg.getMessage(subCode);
									errType = WFSError.WF_TMP;
									stmt.close();
									stmt = null;
								}
								/*	************************************************************************************	*/
								/*		Change By	: Varun Bhansaly														*/
								/*		Reason		: WMStartProcess : More queries being fired than required				*/
								/*		Date		: 24/11/2006															*/
								/*		Bug No.		: Bugzilla Bug 296														*/
								/*	************************************************************************************	*/
							} else {
								if (rs != null)
									rs.close();
								mainCode = WFSError.WM_INVALID_PROCESS_INSTANCE;
								subCode = WFSError.WM_LOCKED;
								subject = WFSErrorMsg.getMessage(mainCode);
								descr = WFSErrorMsg.getMessage(subCode);
								errType = WFSError.WF_TMP;
							}
						} else {
							mainCode = WFSError.WM_INVALID_PROCESS_INSTANCE;
							subCode = WFSError.WM_LOCKED;
							subject = WFSErrorMsg.getMessage(mainCode);
							descr = WFSErrorMsg.getMessage(subCode);
							errType = WFSError.WF_TMP;
						}
					}
				} else {
					if (rs != null)
						rs.close();
					mainCode = WFSError.WM_INVALID_PROCESS_INSTANCE;
					subCode = WFSError.WFS_PRS_ALRDY_ST;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}
			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if (mainCode == 0) {
				//outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WMStartProcess"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append("<ProcessInstanceId>" + procInstID + "</ProcessInstanceId>\n");
				outputXML.append("<WorkitemId>1</WorkitemId>\n");
				outputXML.append(gen.writeValue("URN", urn));
				outputXML.append("<ActivityName>" + actName + "</ActivityName>\n");				
				outputXML.append("<ActivityId>" + actID + "</ActivityId>\n");
				/*Bug # 7171*/
				if(!srcBlockId.equalsIgnoreCase("0") && srcBlockId.equalsIgnoreCase(targetBlockId)){
					outputXML.append("<TargetActivityID>" + targetActivityID + "</TargetActivityID>\n");
					outputXML.append("<TargetQueueID>" + targetQueueID + "</TargetQueueID>\n");
					outputXML.append("<TargetQueueType>" + targetQueueType + "</TargetQueueType>\n");
					//WFS_8.0_093
					outputXML.append("<TargetProcessInstanceId>" + ((targetProcessInstanceId != null) ? targetProcessInstanceId : "")+ "</TargetProcessInstanceId>\n");
					outputXML.append("<TargetWorkitemId>" + ((targetWorkitemId != null) ? targetWorkitemId : "")+ "</TargetWorkitemId>\n");
				}
				outputXML.append(gen.writeValueOf("CompletionTime", String.valueOf(wkduration)));
				outputXML.append(gen.closeOutputFile("WMStartProcess"));
			}
		} catch (SQLException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_INVALID_PROCESS_INSTANCE;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0) {
				if (e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
					+ ")";
				}
			} else {
				descr = e.getMessage();
			}
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (WFSException e) {
			mainCode = e.getMainErrorCode();
			subCode = e.getSubErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = e.getTypeOfError();
			descr = WFSErrorMsg.getMessage(subCode);
		} catch (JTSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		}  finally {
			try {
				if (commitFlag && !con.getAutoCommit()) {
					con.rollback();
					con.setAutoCommit(true);
					commitFlag = false;
				}
				if (stmt != null) {
					stmt.close();
					stmt = null;
				}
				/*Bug # 9790*/
				if(stmt1 != null){
					stmt1.close();
					stmt1 = null;
				}
				if (rs2 != null) {
					rs2.close();
					rs2 = null;
				}
				if (stmt2 != null) {
					stmt2.close();
					stmt2 = null;
				}
				if(pstmt != null){
					pstmt.close();
					pstmt = null;
				}
			} catch (Exception e) {}
			
		}
		if (mainCode != 0) {
			//throw new WFSException(mainCode, subCode, errType, subject, descr);
			
			String strReturn = WFSUtil.generalError(option, engine, gen, mainCode, subCode, errType, subject, descr);
 
			outputXML.append( strReturn);
		}
		return outputXML.toString();
	}
	//----------------------------------------------------------------------------------------------------
	//	Function Name 				:	WMTerminateProcessInstance
	//	Date Written (DD/MM/YYYY)	:	16/05/2002
	//	Author						:	Prashant
	//	Input Parameters			:	Connection , XMLParser , XMLGenerator
	//	Output Parameters			:   none
	//	Return Values				:	String
	//	Description					:   Terminates an operational Instance of a Process
	//----------------------------------------------------------------------------------------------------
    //  Change Description          : Changes for Code Optimization-Merging of WorkFlow 
    //								  tables to WFInstrumentTable and logging of Query
    //  Changed by					: Mohnish Chopra  
	public String WMTerminateProcessInstance(Connection con, XMLParser parser,
			XMLGenerator gen) throws JTSException, WFSException {
		
		StringBuilder outputXML = new StringBuilder();
		Statement stmt = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
		PreparedStatement pstmt=null;
		String query= null;
		String engine =null;
                String option = parser.getValueOf("Option", "", false);
                engine = parser.getValueOf("EngineName");
		try {
			int sessionID = parser.getIntOf("SessionId", 0, false);
			String procInstID = parser.getValueOf("ProcessInstanceId", "", false);
			
			int dbType = ServerProperty.getReference().getDBType(engine);
			ArrayList parameters = new ArrayList();
			boolean loggingFlag= true;
			WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
			int userID = 0;
			char pType = '\0';
			if (user != null) {
				userID = user.getid();
				pType = user.gettype();
				String userName = user.getname();
				int activityId = 0;
				String activityName = "";
				stmt = con.createStatement();
				//Changes for Code Optimization
				/*ResultSet rs = stmt.executeQuery(" Select ProcessInstanceState,ProcessDefID from "
                                                 + " ProcessInstanceTable where ProcessInstanceID = " 
                                                 + WFSConstant.WF_VARCHARPREFIX + procInstID + "'");*/
				// Tirupati Srivastava : changes made to make code compatible with postgreSQL
/*				ResultSet rs = stmt.executeQuery(" Select ProcessInstanceState,ProcessDefID from "
						+ " ProcessInstanceTable where ProcessInstanceID = " + WFSUtil.TO_STRING(procInstID, true, dbType));*/
				query="Select distinct ProcessInstanceState,ProcessDefID from WFInstrumentTable where ProcessInstanceID =? "; 
				pstmt=con.prepareStatement(query);
				WFSUtil.DB_SetString(1,procInstID, pstmt, dbType);
				parameters.add(procInstID);
				ResultSet rs = WFSUtil.jdbcExecuteQuery(procInstID, sessionID, userID, query, pstmt, parameters, loggingFlag, engine);
				parameters.clear();
				if (rs.next()) {
					int pState = rs.getInt(1);
					if (pState == 4 || pState == 5 || pState == 6) {
						if (rs != null)
							rs.close();
						mainCode = WFSError.WM_INVALID_PROCESS_INSTANCE;
						subCode = WFSError.WM_TRANSITION_NOT_ALLOWED;
						subject = WFSErrorMsg.getMessage(mainCode);
						descr = WFSErrorMsg.getMessage(subCode);
						errType = WFSError.WF_TMP;
					} else {
						int procDefID = rs.getInt(2);
						if (rs != null)
							rs.close();

						/*	************************************************************************************	*/
						/*		Change By	: Dinesh Parikh															*/
						/*		Reason		: Workitem state name should be Teriminated.							*/
						/*					  Queue related info should be null.									*/
						/*		Date		: 21/06/2004															*/
						/*	************************************************************************************	*/
						stmt.close(); ////Statement closed to open again for transaction case below

						if (con.getAutoCommit()) {
							con.setAutoCommit(false);
						}
						if(pstmt!=null){
						pstmt.close();
						pstmt=null;
						}
						stmt = con.createStatement();
						StringBuffer strBuff = new StringBuffer(250);
						strBuff.append("Insert Into QueueHistoryTable (ProcessDefId,ProcessName,ProcessVersion,ProcessInstanceId,ProcessInstanceName," +
								"ActivityId,ActivityName,ParentWorkItemId,WorkItemId,ProcessInstanceState,WorkItemState,Statename,InstrumentStatus," +
								"CheckListCompleteFlag,IntroductionDateTime,CreatedDateTime,IntroducedBy,CreatedByName,EntryDateTime,HoldStatus," +
								"PriorityLevel,ValidTill,SaveStage,PreviousStage,ExpectedWorkItemDelayTime,ExpectedProcessDelayTime," +
								"Status,"
                                                        + " VAR_INT1, VAR_INT2, VAR_INT3, VAR_INT4, VAR_INT5, VAR_INT6, VAR_INT7,"
+ "VAR_INT8,VAR_FLOAT1, VAR_FLOAT2, VAR_DATE1, VAR_DATE2, VAR_DATE3, VAR_DATE4,VAR_DATE5, VAR_DATE6, VAR_LONG1, VAR_LONG2, VAR_LONG3, VAR_LONG4,VAR_LONG5, VAR_LONG6, VAR_STR1, VAR_STR2, VAR_STR3, VAR_STR4, "
+ "VAR_STR5, VAR_STR6, VAR_STR7, VAR_STR8,VAR_STR9, VAR_STR10, VAR_STR11, VAR_STR12, VAR_STR13, VAR_STR14, VAR_STR15, VAR_STR16, VAR_STR17, VAR_STR18, VAR_STR19, VAR_STR20, VAR_REC_1, VAR_REC_2,VAR_REC_3, VAR_REC_4, VAR_REC_5,"
                                                        + "LastProcessedBy," +
								"ProcessedBy,ReferredTo,ReferredToName,ReferredBy,ReferredByName,CollectFlag, ProcessVariantId) ");
				/*		
						strBuff.append(" Select a.ProcessDefId,ProcessName,ProcessVersion,a.ProcessInstanceId,a.ProcessInstanceId," +
								"ActivityId,ActivityName,a.ParentWorkItemId,a.WorkItemId,4,4,N'TERMINATED',InstrumentStatus," +
								"CheckListCompleteFlag,IntroductionDateTime,a.CreatedDateTime,IntroducedBy,CreatedByName,EntryDateTime," +
								"HoldStatus,PriorityLevel,ValidTill,SaveStage,PreviousStage,ExpectedWorkItemDelay,ExpectedProcessDelay," +
								"Status,VAR_INT1,VAR_INT2,VAR_INT3,VAR_INT4,VAR_INT5,VAR_INT6,VAR_INT7,VAR_INT8,VAR_FLOAT1,VAR_FLOAT2," +
								"VAR_DATE1,VAR_DATE2,VAR_DATE3,VAR_DATE4,VAR_LONG1,VAR_LONG2,VAR_LONG3,VAR_LONG4,VAR_STR1,VAR_STR2,VAR_STR3," +
								"VAR_STR4,VAR_STR5,VAR_STR6,VAR_STR7,VAR_STR8,VAR_REC_1,VAR_REC_2,VAR_REC_3,VAR_REC_4,VAR_REC_5," +
								"LastProcessedBy,ProcessedBy,ReferredTo,ReferredToName,ReferredBy,ReferredByName,CollectFlag, ProcessVariantId");
						strBuff.append(" From worklisttable a, queuedatatable b ,ProcessInstanceTable c ");
						strBuff.append(" Where a.ProcessInstanceId = ");*/
/*						// Tirupati Srivastava : changes made to make code compatible with postgreSQL
						//strBuff.append(WFSConstant.WF_VARCHARPREFIX);
						//strBuff.append(procInstID);
						strBuff.append(WFSUtil.TO_STRING(procInstID, true, dbType));
						strBuff.append(" And a.ProcessInstanceId = c.ProcessInstanceId And a.ProcessInstanceId = b.ProcessInstanceId");*/
						
						//changes for Code Optimization
						strBuff.append(" Select ProcessDefId,ProcessName,ProcessVersion,ProcessInstanceId,ProcessInstanceId," +
								"ActivityId,ActivityName,ParentWorkItemId,WorkItemId,4,4,N'TERMINATED',InstrumentStatus," +
								"CheckListCompleteFlag,IntroductionDateTime,CreatedDateTime,IntroducedBy,CreatedByName,EntryDateTime," +
								"HoldStatus,PriorityLevel,ValidTill,SaveStage,PreviousStage,ExpectedWorkItemDelay,ExpectedProcessDelay," +
								"Status,"
                                                        + " VAR_INT1, VAR_INT2, VAR_INT3, VAR_INT4, VAR_INT5, VAR_INT6, VAR_INT7,"
                                            + "VAR_INT8,VAR_FLOAT1, VAR_FLOAT2, VAR_DATE1, VAR_DATE2, VAR_DATE3, VAR_DATE4,VAR_DATE5, VAR_DATE6, VAR_LONG1, VAR_LONG2, VAR_LONG3, VAR_LONG4,VAR_LONG5, VAR_LONG6, VAR_STR1, VAR_STR2, VAR_STR3, VAR_STR4, "
                            + "VAR_STR5, VAR_STR6, VAR_STR7, VAR_STR8,VAR_STR9, VAR_STR10, VAR_STR11, VAR_STR12, VAR_STR13, VAR_STR14, VAR_STR15, VAR_STR16, VAR_STR17, VAR_STR18, VAR_STR19, VAR_STR20, VAR_REC_1, VAR_REC_2,VAR_REC_3, VAR_REC_4, VAR_REC_5," +
								"LastProcessedBy,ProcessedBy,ReferredTo,ReferredToName,ReferredBy,ReferredByName,CollectFlag, ProcessVariantId");
						strBuff.append(" From WFInstrumentTable ");
						strBuff.append(" Where ProcessInstanceId = ? and RoutingStatus = ? and LockStatus = ? ");
						
						
						// Tirupati Srivastava : changes made to make code compatible with postgreSQL
						//strBuff.append(WFSConstant.WF_VARCHARPREFIX);
						//strBuff.append(procInstID);
/*						strBuff.append(WFSUtil.TO_STRING(procInstID, true, dbType));
						strBuff.append(" And a.ProcessInstanceId = c.ProcessInstanceId And a.ProcessInstanceId = b.ProcessInstanceId");*/
/*						stmt.addBatch(strBuff.toString());*/
						query =strBuff.toString(); 
						pstmt = con.prepareStatement(query);
						WFSUtil.DB_SetString(1, procInstID, pstmt, dbType);
						WFSUtil.DB_SetString(2, "N", pstmt, dbType);
						WFSUtil.DB_SetString(3, "N", pstmt, dbType);
						parameters.add(procInstID);
						parameters.add("N");
						parameters.add("N");
						int res0= WFSUtil.jdbcExecuteUpdate(procInstID, sessionID, userID, query, pstmt, parameters, loggingFlag, engine);
						parameters.clear();
						pstmt.close();
						pstmt=null;
						//Now delete entries from three tables.
					/*	strBuff = new StringBuffer(100);
						strBuff.append(" Delete From worklisttable where processInstanceId = ");
						strBuff.append(WFSUtil.TO_STRING(procInstID, true, dbType));
						//strBuff.append(WFSConstant.WF_VARCHARPREFIX);
						//strBuff.append(procInstID);
						//strBuff.append("'");
						stmt.addBatch(strBuff.toString());*/
						query = " Delete From WFInstrumentTable where processInstanceId = ? and RoutingStatus = ? and LockStatus = ?";
						pstmt = con.prepareStatement(query);
						WFSUtil.DB_SetString(1, procInstID, pstmt, dbType);
						WFSUtil.DB_SetString(2, "N", pstmt, dbType);
						WFSUtil.DB_SetString(3, "N", pstmt, dbType);
						parameters.add(procInstID);
						parameters.add("N");
						parameters.add("N");
						int res1= WFSUtil.jdbcExecuteUpdate(procInstID, sessionID, userID, query, pstmt, parameters, loggingFlag, engine);
						parameters.clear();
				/*		strBuff = new StringBuffer(100);
						strBuff.append(" Delete From queuedatatable where processInstanceId = ");
						strBuff.append(WFSUtil.TO_STRING(procInstID, true, dbType));
						//strBuff.append(WFSConstant.WF_VARCHARPREFIX);
						//strBuff.append(procInstID);
						//strBuff.append("'");
						stmt.addBatch(strBuff.toString());*/
						/*strBuff = new StringBuffer(100);
						strBuff.append(" Delete From ProcessInstanceTable where processInstanceId = ");
						strBuff.append(WFSUtil.TO_STRING(procInstID, true, dbType));*/
						//strBuff.append(WFSConstant.WF_VARCHARPREFIX);
						//strBuff.append(procInstID);
						//strBuff.append("'");
						/*stmt.addBatch(strBuff.toString());*/
/*						int res[] = stmt.executeBatch();
*/						/*if (res[0] > 0 && res[1] > 0 && res[2] > 0 && res[3] > 0) {
							if (!con.getAutoCommit()) {
								con.commit();
								con.setAutoCommit(true);
							}*/
						if (res0 > 0 && res1 > 0) {
							if (!con.getAutoCommit()) {
								con.commit();
								con.setAutoCommit(true);
							}
							/*rs = stmt.executeQuery(" Select activityId,activityName	from QueueHistoryTable where ProcessInstanceID = " + WFSConstant.WF_VARCHARPREFIX + procInstID + "'");*/
							rs = stmt.executeQuery(" Select activityId,activityName	from "+WFSUtil.getTableLockHintStr(dbType)+" QueueHistoryTable where ProcessInstanceID = " + WFSUtil.TO_STRING(procInstID, true, dbType));
							if (rs.next()) {
								activityId = rs.getInt(1);
								activityName = rs.getString(2);
							}
							if (rs != null)
								rs.close();
							if (stmt != null)
								stmt.close();
							/*	************************************************************************************	*/
							/*		Change By	: Krishan Dutt Dixit													*/
							/*		Reason		: Workstep name is also passed to the audit log							*/
							/*		Date		: 21/06/2004															*/
							/*		Bug No.		: WSE_I_5.0.1_073														*/
							/*	************************************************************************************	*/
							WFSUtil.generateLog(engine, con, WFSConstant.WFL_ProcessInstanceTerminated, procInstID, 0, procDefID, 
									activityId, activityName, 0, userID, userName, procDefID, null, null, null, null, null);
						} else {
							if (!con.getAutoCommit()) {
								con.rollback();
								con.setAutoCommit(true);
							}
							mainCode = WFSError.WM_INVALID_PROCESS_INSTANCE;
							subCode = 0;
							subject = WFSErrorMsg.getMessage(mainCode);
							descr = WFSErrorMsg.getMessage(subCode);
							errType = WFSError.WF_TMP;
						}
					}
				} else {
					if (rs != null)
						rs.close();
					stmt.close();
					mainCode = WFSError.WM_INVALID_PROCESS_INSTANCE;
					subCode = 0;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}
			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if (mainCode == 0) {
			//	outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WMTerminateProcessInstance"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(gen.closeOutputFile("WMTerminateProcessInstance"));
			}
		} catch (SQLException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_INVALID_PROCESS_INSTANCE;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0) {
				if (e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
					+ ")";
				}
			} else {
				descr = e.getMessage();
			}
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (JTSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		}  finally {
			try {
				if (!con.getAutoCommit()) {
					con.rollback();
					con.setAutoCommit(true);
				}

				if (stmt != null) {
					stmt.close();
					stmt = null;
				}
			} catch (Exception e) {}
			
		}
		if (mainCode != 0) {
			/*				throw new WFSException(mainCode, subCode, errType, subject, descr);
			*/			   String strReturn = WFSUtil.generalError(option, engine, gen,
			   	                   mainCode, subCode,
			   	                   errType, subject,
			   	                   descr);
			   	             
					outputXML.append( strReturn);	
						}
		return outputXML.toString();
	}

	//----------------------------------------------------------------------------------------------------
	//	Function Name 				:	WMFetchProcessInstanceState
	//	Date Written (DD/MM/YYYY)	:	16/05/2002
	//	Author						:	Prashant
	//	Input Parameters			:	Connection , XMLParser , XMLGenerator
	//	Output Parameters			:   none
	//	Return Values				:	String
	//	Description					:   Fetch possible ProcessInstanceStates
	//----------------------------------------------------------------------------------------------------
	public String WMFetchProcessInstanceState(Connection con, XMLParser parser,
			XMLGenerator gen) throws JTSException, WFSException {
		StringBuilder outputXML = new StringBuilder();
		PreparedStatement pstmt = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
		String engine = parser.getValueOf("EngineName");
		String option = parser.getValueOf("Option", "", false);
		ArrayList parameters = new ArrayList();
		try {
			int sessionID = parser.getIntOf("SessionId", 0, false);
			char countFlag = parser.getCharOf("CountFlag", 'N', true);
			String procInstID = parser.getValueOf("ProcessInstanceId", "", false);
			String query = null;
			int dbType = ServerProperty.getReference().getDBType(engine);
			boolean debugFlag =parser.getCharOf("DebugFlag", 'N', true)== 'Y'?true:false;  
			int noOfRectoFetch = parser.getIntOf("NoOfRecordsToFetch",
					ServerProperty.getReference().getBatchSize(), true);
			if (noOfRectoFetch > ServerProperty.getReference().getBatchSize() || noOfRectoFetch <= 0) //Added by Ahsan Javed for getBatchSize
				noOfRectoFetch = ServerProperty.getReference().getBatchSize();

			String lastValue = parser.getValueOf("LastValue", "", true);

			WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
			int userID = 0;
			char pType = '\0';
			int procDefId = 0;
			StringBuffer tempXml = new StringBuffer(100);
			if (user != null) {
				userID = user.getid();
				pType = user.gettype();
				//	Changed By : Varun Bhansaly On 13/02/2007 for Bugzilla Id 54 to Provide Dirty Read Support for DB2 Database
				/*pstmt = con.prepareStatement(
						" Select DISTINCT ProcessDefId from queueview where ProcessInstanceId = ? " + WFSUtil.getQueryLockHintStr(dbType));
				WFSUtil.DB_SetString(1, procInstID, pstmt, dbType);
				pstmt.execute();
				ResultSet rs = pstmt.getResultSet();
				if (rs.next()) {
					procDefId = rs.getInt(1);
				}
				if (rs != null)
					rs.close();
				pstmt.close();*/
				
				query = " Select ProcessDefId from WFInstrumentTable"+WFSUtil.getTableLockHintStr(dbType)+"where ProcessInstanceId = ? " + WFSUtil.getQueryLockHintStr(dbType);
				pstmt = con.prepareStatement(query);
				WFSUtil.DB_SetString(1, procInstID, pstmt, dbType);
				parameters.add(procInstID);
				WFSUtil.jdbcExecute(procInstID, sessionID, userID, query, pstmt, parameters, debugFlag, engine);
				ResultSet rs = pstmt.getResultSet();
				if(rs != null && rs.next()){
					procDefId = rs.getInt(1);
					rs.close();
					pstmt.close();
				}
				else {
					query = " Select ProcessDefId from QueueHistoryTable"+WFSUtil.getTableLockHintStr(dbType)+"where ProcessInstanceId = ? " + WFSUtil.getQueryLockHintStr(dbType);
					pstmt = con.prepareStatement(query);
					WFSUtil.DB_SetString(1, procInstID, pstmt, dbType);
					parameters.clear();
					parameters.add(procInstID);
					WFSUtil.jdbcExecute(procInstID, sessionID, userID, query, pstmt, parameters, debugFlag, engine);
					rs = pstmt.getResultSet();
					if(rs != null && rs.next()){
						procDefId = rs.getInt(1);
					}
				}
				
				if(rs != null)
					rs.close();
				pstmt.close();
				
				if (countFlag == 'Y') {
					pstmt = con.prepareStatement(
							"Select COUNT(*) from StatesDefTable "+WFSUtil.getTableLockHintStr(dbType)+" where ProcessDefId  = ? "
							+ WFSUtil.TO_SANITIZE_STRING(WFSUtil.getFilter(parser, con), true));
					pstmt.setInt(1, procDefId);
					pstmt.execute();
					rs = pstmt.getResultSet();
					if (rs.next()) {
						tempXml.append(gen.writeValueOf("Count", String.valueOf(rs.getInt(1))));
					}
					if (rs != null)
						rs.close();
					pstmt.close();
				}
				pstmt = con.prepareStatement(
						"Select StateName from StatesDefTable "+WFSUtil.getTableLockHintStr(dbType)+" where ProcessDefId  = ? "
						+ WFSUtil.TO_SANITIZE_STRING(WFSUtil.getFilter(parser, con), true) + WFSUtil.getBatch(parser, "", 0, "StateName",
								WFSConstant.WF_STR));
				pstmt.setInt(1, procDefId);
				pstmt.execute();
				rs = pstmt.getResultSet();
				int i = 0;
				while (rs.next() && i < noOfRectoFetch) {
					tempXml.append(gen.writeValueOf("ProcessInstanceState", rs.getString(1)));
					i++;
				}
				if (rs != null)
					rs.close();
				pstmt.close();
				if (i > 0) {
					tempXml.insert(0, "<ProcessInstanceStates>\n");
					tempXml.append("</ProcessInstanceStates>\n");
				} else {
					mainCode = WFSError.WM_NO_MORE_DATA;
					subCode = 0;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				} // BUG ID 1909
				tempXml.append(gen.writeValueOf("RetrievedCount", String.valueOf(i)));
			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if (mainCode == 0) {
				//outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WMFetchProcessInstanceState"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(tempXml);
				outputXML.append(gen.closeOutputFile("WMFetchProcessInstanceState"));
			}
		} catch (SQLException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0) {
				if (e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
					+ ")";
				}
			} else {
				descr = e.getMessage();
			}
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (JTSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		}  finally {
			try {
				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
			} catch (Exception e) {}
			
		}
		if (mainCode != 0) {

			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			outputXML.append( errorString);

		}
		return outputXML.toString();
	}

	//----------------------------------------------------------------------------------------------------
	//	Function Name 				:	WMChangeProcessInstanceState
	//	Date Written (DD/MM/YYYY)	:	16/05/2002
	//	Author						:	Prashant
	//	Input Parameters			:	Connection , XMLParser , XMLGenerator
	//	Output Parameters			:   none
	//	Return Values				:	String
	//	Description					:   Change ProcessInstance's State
	//----------------------------------------------------------------------------------------------------
    //  Change Description          : Changes for Code Optimization-Merging of WorkFlow 
    //								  tables to WFInstrumentTable and logging of Query
    //  Changed by					: Mohnish Chopra  
	public String WMChangeProcessInstanceState(Connection con, XMLParser parser,
			XMLGenerator gen) throws JTSException, WFSException {
		StringBuilder outputXML = new StringBuilder();
		PreparedStatement pstmt = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
		String query=null;
        String option = parser.getValueOf("Option", "", false);
        String engine=null;
        engine = parser.getValueOf("EngineName");
		try {
			int sessionID = parser.getIntOf("SessionId", 0, false);
			String procInstID = parser.getValueOf("ProcessInstanceId", "", false);
			String procInstState = parser.getValueOf("ProcessInstanceState", "", false);
			
			int dbType = ServerProperty.getReference().getDBType(engine);
			ArrayList parameters = new ArrayList();
			WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
			boolean loggingFlag= parser.getValueOf("DebugFlag", "N", true).equalsIgnoreCase("Y");
			if (participant != null) {
				int userID = participant.getid();
				char pType = participant.gettype();

			/*	pstmt = con.prepareStatement(
						"Select ProcessInstanceState , ProcessDefId from ProcessInstanceTable where ProcessInstanceID =  ? ");
				WFSUtil.DB_SetString(1, procInstID, pstmt, dbType);
				pstmt.execute();
				ResultSet rs = pstmt.getResultSet();*/
				query="Select distinct ProcessInstanceState , ProcessDefId from WFInstrumentTable "+WFSUtil.getTableLockHintStr(dbType)+" where ProcessInstanceID =  ?";
				pstmt = con.prepareStatement(query);
				WFSUtil.DB_SetString(1, procInstID, pstmt, dbType);
				parameters.add(procInstID);
				WFSUtil.jdbcExecute(procInstID, sessionID, userID, query, pstmt, parameters, loggingFlag, engine);
				parameters.clear();
				ResultSet rs = pstmt.getResultSet();
				if (rs.next()) {
					int pState = rs.getInt(1);
					int procDefId = rs.getInt(2);
					rs.close();
					pstmt.close();
					/*pstmt = con.prepareStatement(
                        "Select StateId from StatesDefTable where ProcessDefID=? and UPPER (RTRIM(StateName))=?");*/
					// Tirupati Srivastava : changes made to make code compatible with postgreSQL
					pstmt = con.prepareStatement(
							"Select StateId from StatesDefTable "+WFSUtil.getTableLockHintStr(dbType)+" where ProcessDefID=? and " + WFSUtil.TO_STRING("StateName", false, dbType)
							+ " = " + WFSUtil.TO_STRING("?", false, dbType));
					pstmt.setInt(1, procDefId);
					WFSUtil.DB_SetString(2, procInstState.toUpperCase(), pstmt, dbType);
					pstmt.execute();
					rs = pstmt.getResultSet();
					if (rs.next()) {
						int cPState = rs.getInt(1);
						rs.close();
						pstmt.close();
						if (pState > 3 && pState < 7 || pState == cPState || (pState == 1 && (cPState == 3
								|| cPState == 5 || cPState == 6 || cPState == 2)) || (cPState == 6 && pState != 2)
								|| (cPState == 1 && (pState == 2 || pState == 3)) || cPState == 4 || cPState == 5) {
							mainCode = WFSError.WM_TRANSITION_NOT_ALLOWED;
							subCode = 0;
							subject = WFSErrorMsg.getMessage(mainCode);
							descr = WFSErrorMsg.getMessage(subCode);
							errType = WFSError.WF_TMP;
						} else {
							if (cPState == 6) {
								//                Changed By : Varun Bhansaly On 13/02/2007 for Bugzilla Id 54 to Provide Dirty Read Support for DB2 Database
								query = "Select * From  WFInstrumentTable "+WFSUtil.getTableLockHintStr(dbType)+" where ProcessInstanceID= ? and  WorkItemState in (1, 2 ,3) " 
										+ WFSUtil.getQueryLockHintStr(dbType) ;
								pstmt = con.prepareStatement(query);
								WFSUtil.DB_SetString(1, procInstID, pstmt, dbType);
								parameters.add(procInstID);
								WFSUtil.jdbcExecute(procInstID, sessionID, userID, query, pstmt, parameters, loggingFlag, engine);
								rs = pstmt.getResultSet();
								if (rs.next()) {
									rs.close();
									pstmt.close();
									mainCode = WFSError.WM_TRANSITION_NOT_ALLOWED;
									subCode = 0;
									subject = WFSErrorMsg.getMessage(mainCode);
									descr = WFSErrorMsg.getMessage(subCode);
									errType = WFSError.WF_TMP;
								} else {
									if (rs != null)
										rs.close();
									pstmt.close();

									WFSUtil.generateLog(engine, con, WFSConstant.WFL_ProcessInstanceStateChanged, procInstID, 0, 
											procDefId, 0, null, 0, userID, participant.getname(), procDefId, procInstState, null, null, null, null);
								}
							} else {
								if (con.getAutoCommit())
									con.setAutoCommit(false);
/*								pstmt = con.prepareStatement(
										"Update ProcessInstanceTable Set ProcessInstanceState = ? where ProcessInstanceID = ?  ");
										
*/								query= " Update WFInstrumentTable Set ProcessInstanceState = ? where ProcessInstanceID = ?  ";
								pstmt = con.prepareStatement(query);
								pstmt.setInt(1, cPState);
								WFSUtil.DB_SetString(2, procInstID, pstmt, dbType);
								parameters.add(cPState);
								parameters.add(procInstID);
								WFSUtil.jdbcExecute(procInstID, sessionID, userID, query, pstmt, parameters, loggingFlag, engine);
								parameters.clear();
							//	pstmt.execute();
								pstmt.close();

								WFSUtil.generateLog(engine, con, WFSConstant.WFL_ProcessInstanceStateChanged, procInstID, 0, 
										procDefId, 0, null, 0, userID, participant.getname(), procDefId, procInstState, null, null, null, null);

								if (!con.getAutoCommit()) {

									con.commit();
									con.setAutoCommit(true);
								}
							}
						}
					} else {
						if (rs != null)
							rs.close();
						pstmt.close();
						mainCode = WFSError.WM_INVALID_STATE;
						subCode = 0;
						subject = WFSErrorMsg.getMessage(mainCode);
						descr = WFSErrorMsg.getMessage(subCode);
						errType = WFSError.WF_TMP;
					}
				} else {
					if (rs != null)
						rs.close();
					pstmt.close();
					mainCode = WFSError.WM_INVALID_PROCESS_INSTANCE;
					subCode = 0;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}
			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if (mainCode == 0) {
				//outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WMChangeProcessInstanceState"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(gen.closeOutputFile("WMChangeProcessInstanceState"));
			}
		} catch (SQLException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_INVALID_STATE;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0) {
				if (e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
					+ ")";
				}
			} else {
				descr = e.getMessage();
			}
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OTHER;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OTHER;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (JTSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OTHER;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OTHER;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		}  finally {
			try {
				if (!con.getAutoCommit()) {
					con.rollback();
					con.setAutoCommit(true);
				}

				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
			} catch (Exception e) {}
			
		}
		if (mainCode != 0) {
			
			String strReturn = WFSUtil.generalError(option, engine, gen,
   	                   mainCode, subCode,
   	                   errType, subject,
   	                    descr);
   	             
			outputXML.append( strReturn);	
			/* throw new WFSException(mainCode, subCode, errType, subject, descr); */
		}
		return outputXML.toString();
	}

	//----------------------------------------------------------------------------------------------------
	//	Function Name 				:	WMFetchProcessInstanceAttributes
	//	Date Written (DD/MM/YYYY)	:	16/05/2002
	//	Author						:	Prashant
	//	Input Parameters			:	Connection , XMLParser , XMLGenerator
	//	Output Parameters			:   none
	//	Return Values				:	String
	//	Description					:   Fetch ProcessInstance's Attributes
	//----------------------------------------------------------------------------------------------------
	public String WMFetchProcessInstanceAttributes(Connection con, XMLParser parser,
			XMLGenerator gen) throws JTSException, WFSException {
		StringBuilder outputXML = new StringBuilder();
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
                String engine = parser.getValueOf("EngineName");
				String option = parser.getValueOf("Option", "", false);
		try {
			int sessionID = parser.getIntOf("SessionId", 0, false);
			String procInstID = parser.getValueOf("ProcessInstanceId", "", false);
			
			int dbType = ServerProperty.getReference().getDBType(engine);
			String filter = WFSUtil.getFilter(parser, con);
			int userID = 0;
			char pType = '\0';
			String tempXml = "";

			WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
			if (user != null) {
				userID = user.getid();
				pType = user.gettype();
				String userName = user.getname();

				tempXml = (String) WFSUtil.fetchAttributes(con, procInstID, 1, filter, engine, dbType, gen,
						"", false, false);
			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if (mainCode == 0) {
				//outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WMFetchProcessInstanceAttributes"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(tempXml);
				outputXML.append(gen.closeOutputFile("WMFetchProcessInstanceAttributes"));
			}
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (WFSException e) {
			mainCode = e.getMainErrorCode();
			subCode = e.getSubErrorCode();
			subject = e.getMessage();
			errType = e.getTypeOfError();
			descr = e.getErrorDescription();
		} catch (JTSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		}  finally {
			
		}
		if (mainCode != 0) {

			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			outputXML.append( errorString);

		}
		return outputXML.toString();
	}

	//----------------------------------------------------------------------------------------------------
	//	Function Name 				:	WMGetProcessInstanceAttributeValue
	//	Date Written (DD/MM/YYYY)	:	16/05/2002
	//	Author						:	Prashant
	//	Input Parameters			:	Connection , XMLParser , XMLGenerator
	//	Output Parameters			:   none
	//	Return Values				:	String
	//	Description					:   Get ProcessInstance's specified Attribute
	//----------------------------------------------------------------------------------------------------
	public String WMGetProcessInstanceAttributeValue(Connection con, XMLParser parser,
			XMLGenerator gen) throws JTSException, WFSException {
		StringBuilder outputXML = new StringBuilder();
		PreparedStatement pstmt = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
                String engine = parser.getValueOf("EngineName", "", false);
				String option = parser.getValueOf("Option", "", false);

		try {
			int sessionID = parser.getIntOf("SessionId", 0, true);
			String procInstID = parser.getValueOf("ProcessInstanceId", "", false);
			String name = parser.getValueOf("Name", "", false);
			
			int dbType = ServerProperty.getReference().getDBType(engine);
			char omniServiceFlag = parser.getCharOf("OmniService", 'N', true);

			/* 05/09/2007, SrNo-7, Synchronous routing of workitems - Ruhi Hira */
			WFParticipant user = null;
			if (omniServiceFlag == 'Y') {
				user = new WFParticipant(0, "System", 'P', "SERVER", Locale.getDefault().toString());
			} else {
				user = WFSUtil.WFCheckSession(con, sessionID);
			}
			//            WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
			int userID = 0;
			char pType = '\0';
			StringBuffer tempXml = new StringBuffer(100);
			if (user != null) {
				userID = user.getid();
				pType = user.gettype();

				tempXml = new StringBuffer( (String) WFSUtil.fetchAttributes(con, procInstID, 1, "", engine,
						dbType, gen, name, false, false));

			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if (mainCode == 0) {
				//outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WMGetProcessInstanceAttributeValue"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(tempXml);
				outputXML.append(gen.closeOutputFile("WMGetProcessInstanceAttributeValue"));
			}
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (JTSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_INVALID_ATTRIBUTE;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		}  finally {
			try {
				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
			} catch (Exception e) {}
			
		}
		if (mainCode != 0) {
			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			outputXML.append( errorString);

		}
		return outputXML.toString();
	}

	//----------------------------------------------------------------------------------------------------
	//	Function Name 				:	WMAssignProcessInstanceAttribute
	//	Date Written (DD/MM/YYYY)	:	16/05/2002
	//	Author						:	Prashant
	//	Input Parameters			:	Connection , XMLParser , XMLGenerator
	//	Output Parameters			:   none
	//	Return Values				:	String
	//	Description					:   Assign ProcessInstance's specified Attribute
	//----------------------------------------------------------------------------------------------------
	public String WMAssignProcessInstanceAttribute(Connection con, XMLParser parser,
			XMLGenerator gen) throws JTSException, WFSException {
		StringBuilder outputXML = new StringBuilder();
		PreparedStatement pstmt = null;
		Statement stmt = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
                String engine = parser.getValueOf("EngineName");
				String option = parser.getValueOf("Option", "", false);
		try {
			int sessionID = parser.getIntOf("SessionId", 0, false);
			String procInstID = parser.getValueOf("ProcessInstanceId", "", false);
			HashMap ipattributes = new HashMap(1, 1.0F);
			String name = parser.getValueOf("Name", "", false);
			int type = parser.getIntOf("Type", 0, false);
			int len = parser.getIntOf("Length", 0, false);
			String value = parser.getValueOf("Value", "", true);
			ipattributes.put(name.toUpperCase(), new WMAttribute(name, value, type));

			
			int dbType = ServerProperty.getReference().getDBType(engine);
			boolean userDefVarFlag = parser.getValueOf("UserDefVarFlag", "N", true).equalsIgnoreCase("Y");
			boolean debugFlag = parser.getValueOf("DebugFlag", "N", true).equalsIgnoreCase("Y");

			WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
			if (participant != null) {
				if(!userDefVarFlag){
					WFSUtil.setAttributes(con, participant, ipattributes, engine, procInstID, 1, gen, null);
				} else {
					/** @todo is this support required here ... */
					/** 17/06/2008, SrNo-15, New feature : user defined complex data type support [OF 7.2] - Ruhi Hira */
					WFSUtil.setAttributesExt(con, participant, parser.getValueOf("Attributes"), engine, procInstID, 1, gen, null, false, debugFlag, false);
				}
			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if (mainCode == 0) {
			//	outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WMAssignProcessInstanceAttribute"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(gen.closeOutputFile("WMAssignProcessInstanceAttribute"));
			}
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_ATTRIBUTE_ASSIGNMENT_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_ATTRIBUTE_ASSIGNMENT_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (WFSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_ATTRIBUTE_ASSIGNMENT_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			descr = WFSErrorMsg.getMessage(subCode);
			errType = WFSError.WF_TMP;
		} catch (JTSException e) {

			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_ATTRIBUTE_ASSIGNMENT_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_ATTRIBUTE_ASSIGNMENT_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		}  finally {
			try {
				if (stmt != null) {
					stmt.close();
					stmt = null;
				}
				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
			} catch (Exception e) {}
			
		}
		if (mainCode != 0) {
			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
            outputXML.append( errorString);

		}
		return outputXML.toString();
	}

	//----------------------------------------------------------------------------------------------------
	//	Function Name 				:	WMGetProcessInstance
	//	Date Written (DD/MM/YYYY)	:	16/05/2002
	//	Author						:	Prashant
	//	Input Parameters			:	Connection , XMLParser , XMLGenerator
	//	Output Parameters			:   none
	//	Return Values				:	String
	//	Description					:   Returns the next ProcessInstance  from the set of
	//									ProcessInstances that met the selection criterion
	//----------------------------------------------------------------------------------------------------
	public String WMGetProcessInstance(Connection con, XMLParser parser,
			XMLGenerator gen) throws JTSException, WFSException {
		StringBuilder outputXML = new StringBuilder();
		PreparedStatement pstmt = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
		String engine = parser.getValueOf("EngineName");
		String option = parser.getValueOf("Option", "", false);
		String query = null;
		ArrayList parameters = new ArrayList();
		try {
			int sessionID = parser.getIntOf("SessionId", 0, false);
			String procInstID = parser.getValueOf("ProcessInstanceId", "", false);
			boolean debugFlag= parser.getValueOf("DebugFlag", "N", true).equalsIgnoreCase("Y");
			int dbType = ServerProperty.getReference().getDBType(engine);

			WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
			int userID = 0;
			char pType = '\0';
			StringBuffer tempXml = new StringBuffer(100);
			if (user != null) {
				userID = user.getid();
				pType = user.gettype();
				//      Changed By : Varun Bhansaly On 13/02/2007 for Bugzilla Id 54 to Provide Dirty Read Support for DB2 Database
				//pstmt = con.prepareStatement(" Select ProcessName, ProcessInstanceID , ProcessDefID , ProcessInstanceState , PriorityLevel  , LockedByName from  queueview where ProcessInstanceID = ? AND (PARENTWORKITEMID  IS NULL OR PARENTWORKITEMID  = 0) " + WFSUtil.getQueryLockHintStr(dbType));
				//WFSUtil.DB_SetString(1, procInstID, pstmt, dbType);
				//pstmt.execute();
				//ResultSet rs = pstmt.getResultSet();
				query = " Select ProcessName, ProcessInstanceID , ProcessDefID , ProcessInstanceState , PriorityLevel  , LockedByName,URN from  WFInstrumentTable "+WFSUtil.getTableLockHintStr(dbType)+" where ProcessInstanceID = ? AND (PARENTWORKITEMID  IS NULL OR PARENTWORKITEMID  = 0) " + WFSUtil.getQueryLockHintStr(dbType);
				pstmt = con.prepareStatement(query);
				WFSUtil.DB_SetString(1, procInstID, pstmt, dbType);
				parameters.add(procInstID);
				WFSUtil.jdbcExecute(procInstID, sessionID, userID, query, pstmt, parameters, debugFlag, engine);
				ResultSet rs = pstmt.getResultSet();
				if (rs.next()) {
					tempXml.append("\n<ProcessInstance>\n");
					tempXml.append(gen.writeValueOf("ProcessName", rs.getString(1)));
					tempXml.append(gen.writeValueOf("ProcessInstanceId", rs.getString(2)));
					tempXml.append(gen.writeValueOf("URN", rs.getString("URN")));
					tempXml.append(gen.writeValueOf("ProcessDefinitionId", rs.getString(3)));
					tempXml.append(gen.writeValueOf("ProcessInstanceState", rs.getString(4)));
					tempXml.append(gen.writeValueOf("PriorityLevel", rs.getString(5)));
					tempXml.append("<Participants>\n");
					tempXml.append(gen.writeValueOf("Participant", rs.getString(6)));
					tempXml.append("</Participants>\n");
					tempXml.append("\n</ProcessInstance>\n"); // 14/12/2007: Tirupati Srivastava:  BUG ID 2739
					// Participants ????
				} else {
					mainCode = WFSError.WM_INVALID_PROCESS_INSTANCE;
					subCode = 0;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}
				if (rs != null)
					rs.close();
				pstmt.close();
			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if (mainCode == 0) {
				//outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WMGetProcessInstance"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(tempXml);
				outputXML.append(gen.closeOutputFile("WMGetProcessInstance"));
			}
		} catch (SQLException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OTHER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0) {
				if (e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
					+ ")";
				}
			} else {
				descr = e.getMessage();
			}
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OTHER;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OTHER;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (JTSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OTHER;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OTHER;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		}  finally {
			try {
				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
			} catch (Exception e) {}
			
		}
		if (mainCode != 0) {
			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			outputXML.append( errorString);		
		}
		return outputXML.toString();
	}

	//----------------------------------------------------------------------------------------------------
	//	Function Name 				:	WMFetchProcessInstance
	//	Date Written (DD/MM/YYYY)	:	16/05/2002
	//	Author						:	Prashant
	//	Input Parameters			:	Connection , XMLParser , XMLGenerator
	//	Output Parameters			:   none
	//	Return Values				:	String
	//	Description					:   Returns the next ProcessInstance from the set of
	//									ProcessInstances that met the selection criterion
	//----------------------------------------------------------------------------------------------------
	public String WMFetchProcessInstances(Connection con, XMLParser parser,
			XMLGenerator gen) throws JTSException, WFSException {
		StringBuilder outputXML = new StringBuilder();
		PreparedStatement pstmt = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
		String engine = parser.getValueOf("EngineName");
		String option = parser.getValueOf("Option", "", false);
		String query = null;
		ArrayList parameters = new ArrayList();
		boolean debug =  parser.getValueOf("DebugFlag", "N", true).equalsIgnoreCase("Y");
		try {
			int sessionID = parser.getIntOf("SessionId", 0, false);
			char countFlag = parser.getCharOf("CountFlag", 'N', true);
			
			//    Added By Varun Bhansaly On 13/02/2007
			int dbType = ServerProperty.getReference().getDBType(engine);
			int noOfRectoFetch = parser.getIntOf("NoOfRecordsToFetch",
			ServerProperty.getReference().getBatchSize(), true);
			if (noOfRectoFetch > ServerProperty.getReference().getBatchSize() || noOfRectoFetch <= 0) //Added by Ahsan Javed for getBatchSize
				noOfRectoFetch = ServerProperty.getReference().getBatchSize();
			
			WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
			int userID = 0;
			char pType = '\0';
			StringBuffer tempXml = new StringBuffer(100);
			String wfInsStr = "a.processdefid, processname, processversion, processinstanceid, processinstanceid AS processinstancename, activityid, activityname, "+
			"parentworkitemid, workitemid, processinstancestate, workitemstate, a.statename, queuename, queuetype,AssignedUser, AssignmentType, instrumentstatus,"+ "checklistcompleteflag, IntroductionDateTime, CreatedDatetime AS CreatedDatetime,Introducedby, createdbyname, entryDATETIME,lockstatus, holdstatus, prioritylevel,"+ "lockedbyname, lockedtime, validtill, savestage, previousstage,expectedworkitemdelay AS expectedworkitemdelaytime,expectedprocessdelay AS expectedprocessdelaytime,"+ "status,"
                                + " VAR_INT1, VAR_INT2, VAR_INT3, VAR_INT4, VAR_INT5, VAR_INT6, VAR_INT7,"
+ "VAR_INT8,VAR_FLOAT1, VAR_FLOAT2, VAR_DATE1, VAR_DATE2, VAR_DATE3, VAR_DATE4,VAR_DATE5, VAR_DATE6, VAR_LONG1, VAR_LONG2, VAR_LONG3, VAR_LONG4,VAR_LONG5, VAR_LONG6, VAR_STR1, VAR_STR2, VAR_STR3, VAR_STR4, "
+ "VAR_STR5, VAR_STR6, VAR_STR7, VAR_STR8,VAR_STR9, VAR_STR10, VAR_STR11, VAR_STR12, VAR_STR13, VAR_STR14, VAR_STR15, VAR_STR16, VAR_STR17, VAR_STR18, VAR_STR19, VAR_STR20, VAR_REC_1, VAR_REC_2,VAR_REC_3, VAR_REC_4, VAR_REC_5,"
                                + "q_streamid, q_queueid, q_userid, LastProcessedBy, processedby, referredto,referredtoname, referredby, referredbyname, collectflag, NULL AS CompletionDatetime, CalendarName, ProcessVariantId,URN ";
			
			String qhtStr = "q.PROCESSDEFID, PROCESSNAME, PROCESSVERSION, PROCESSINSTANCEID, PROCESSINSTANCEID AS PROCESSINSTANCENAME, ACTIVITYID, ACTIVITYNAME, PARENTWORKITEMID, WORKITEMID, PROCESSINSTANCESTATE, WORKITEMSTATE, q.STATENAME, QUEUENAME, QUEUETYPE, ASSIGNEDUSER, ASSIGNMENTTYPE, INSTRUMENTSTATUS, CHECKLISTCOMPLETEFLAG, INTRODUCTIONDATETIME, CREATEDDATETIME AS CREATEDDATETIME, INTRODUCEDBY, CREATEDBYNAME, ENTRYDATETIME, LOCKSTATUS, HOLDSTATUS, PRIORITYLEVEL, LOCKEDBYNAME, LOCKEDTIME, VALIDTILL, SAVESTAGE, PREVIOUSSTAGE, EXPECTEDWORKITEMDELAYTIME AS EXPECTEDWORKITEMDELAYTIME, EXPECTEDPROCESSDELAYTIME AS EXPECTEDPROCESSDELAYTIME, STATUS,"
                                + " VAR_INT1, VAR_INT2, VAR_INT3, VAR_INT4, VAR_INT5, VAR_INT6, VAR_INT7,"
+ "VAR_INT8,VAR_FLOAT1, VAR_FLOAT2, VAR_DATE1, VAR_DATE2, VAR_DATE3, VAR_DATE4,VAR_DATE5, VAR_DATE6, VAR_LONG1, VAR_LONG2, VAR_LONG3, VAR_LONG4,VAR_LONG5, VAR_LONG6, VAR_STR1, VAR_STR2, VAR_STR3, VAR_STR4, "
+ "VAR_STR5, VAR_STR6, VAR_STR7, VAR_STR8,VAR_STR9, VAR_STR10, VAR_STR11, VAR_STR12, VAR_STR13, VAR_STR14, VAR_STR15, VAR_STR16, VAR_STR17, VAR_STR18, VAR_STR19, VAR_STR20, VAR_REC_1, VAR_REC_2,VAR_REC_3, VAR_REC_4, VAR_REC_5,"
                                + " Q_STREAMID, Q_QUEUEID, Q_USERID, LASTPROCESSEDBY, PROCESSEDBY, REFERREDTO, REFERREDTONAME, REFERREDBY, REFERREDBYNAME, COLLECTFLAG, NULL AS COMPLETIONDATETIME, CALENDARNAME, PROCESSVARIANTID,URN ";
			if (user != null) {
				userID = user.getid();
				pType = user.gettype();

				if (countFlag == 'Y') {
					//        Changed By : Varun Bhansaly On 13/02/2007 for Bugzilla Id 54 to Provide Dirty Read Support for DB2 Database
					/*pstmt = con.prepareStatement(
							"SELECT COUNT(*) FROM queueview A WHERE A.PARENTWORKITEMID  = 0 "
							+ WFSUtil.getFilter(parser, con) + WFSUtil.getQueryLockHintStr(dbType));*/
					pstmt = con.prepareStatement("SELECT COUNT(*) FROM WFInstrumentTable A  WHERE A.PARENTWORKITEMID  = 0 "
							+ WFSUtil.TO_SANITIZE_STRING(WFSUtil.getFilter(parser, con), true) + WFSUtil.getQueryLockHintStr(dbType) + " UNION ALL  SELECT COUNT(*) FROM QueueHistoryTable B  WHERE B.PARENTWORKITEMID  = 0 "
							+ WFSUtil.TO_SANITIZE_STRING(WFSUtil.getFilter(parser, con), true) + WFSUtil.getQueryLockHintStr(dbType));
					pstmt.execute();
					ResultSet rs = pstmt.getResultSet();
					if (rs.next()) {
						tempXml.append(gen.writeValueOf("Count", String.valueOf(rs.getInt(1))));
					}
					if (rs != null)
						rs.close();
					pstmt.close();
				}
				//        Changed By : Varun Bhansaly On 13/02/2007 for Bugzilla Id 54 to Provide Dirty Read Support for DB2 Database
				/*pstmt = con.prepareStatement(" Select ProcessInstanceName, ProcessInstanceID , ProcessDefID , State , PriorityLevel , LockedByName ,ProcessInstanceState  from ( Select a.*, StatesDefTable.StateName as State from queueview a, StatesDefTable where a.ProcessInstanceState = StateID and StatesDefTable.ProcessDefId = a.ProcessDefId and a.ParentWorkItemID  = 0 ) b where 1= 1 "
						+ WFSUtil.getFilter(parser, con) + WFSUtil.getBatch(parser, "PriorityLevel",
								WFSConstant.WF_INT, "ProcessInstanceId", WFSConstant.WF_STR) + WFSUtil.getQueryLockHintStr(dbType));
				//				pstmt.setFetchSize(noOfRectoFetch);
				pstmt.execute();
				ResultSet rs = pstmt.getResultSet();*/
				query = " Select ProcessInstanceName, ProcessInstanceID , ProcessDefID , State , PriorityLevel , LockedByName ,ProcessInstanceState,URN  from ( Select " +wfInsStr+ ",StatesDefTable.StateName as State from WFInstrumentTable a "+WFSUtil.getTableLockHintStr(dbType)+", StatesDefTable "+WFSUtil.getTableLockHintStr(dbType)+" where a.ProcessInstanceState = StateID and StatesDefTable.ProcessDefId = a.ProcessDefId and a.ParentWorkItemID  = 0 UNION ALL Select " +qhtStr+ ",StatesDefTable.StateName as State from QueueHistoryTable q "+WFSUtil.getTableLockHintStr(dbType)+", StatesDefTable "+WFSUtil.getTableLockHintStr(dbType)+" where q.ProcessInstanceState =StateID and StatesDefTable.ProcessDefId = q.ProcessDefId ) b where 1= 1 "
						+ WFSUtil.TO_SANITIZE_STRING(WFSUtil.getFilter(parser, con), true) + WFSUtil.getBatch(parser, "PriorityLevel",
								WFSConstant.WF_INT, "ProcessInstanceId", WFSConstant.WF_STR) + WFSUtil.getQueryLockHintStr(dbType);
				pstmt = con.prepareStatement(query);
				WFSUtil.jdbcExecute(null, sessionID, userID, query, pstmt, null, debug, engine);
				ResultSet rs = pstmt.getResultSet();
				int i = 0;
				while (rs.next() && i < noOfRectoFetch) {
					tempXml.append("\n<ProcessInstance>\n");
					tempXml.append(gen.writeValueOf("ProcessName", rs.getString(1)));
					tempXml.append(gen.writeValueOf("ProcessInstanceId", rs.getString(2)));
					tempXml.append(gen.writeValueOf("URN", rs.getString("URN")));
					tempXml.append(gen.writeValueOf("ProcessDefinitionId", rs.getString(3)));
					tempXml.append(gen.writeValueOf("State", rs.getString(4)));
					tempXml.append(gen.writeValueOf("PriorityLevel", rs.getString(5)));
					tempXml.append("\n<Participants>\n");
					tempXml.append(gen.writeValueOf("Participant", rs.getString(6)));
					tempXml.append("\n</Participants>\n");
					tempXml.append("\n</ProcessInstance>\n");
					i++;
				}
				if (rs != null)
					rs.close();
				pstmt.close();
				if (i > 0) {
					tempXml.insert(0, "<ProcessInstances>\n");
					tempXml.append("</ProcessInstances>\n");
				} else {
					mainCode = WFSError.WM_NO_MORE_DATA;
					subCode = 0;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}
				tempXml.append(gen.writeValueOf("RetrievedCount", String.valueOf(i)));
			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if (mainCode == 0) {
			//	outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WMFetchProcessInstance"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(tempXml);
				outputXML.append(gen.closeOutputFile("WMFetchProcessInstance"));
			}
		} catch (SQLException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0) {
				if (e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
					+ ")";
				}
			} else {
				descr = e.getMessage();
			}
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (JTSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		}  finally {
			try {
				if (!con.getAutoCommit()) {
					con.rollback();
					con.setAutoCommit(true);
				}
				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
			} catch (Exception e) {}
			
		}
		if (mainCode != 0) {
			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			outputXML.append( errorString);

		}
		return outputXML.toString();
	}

	//----------------------------------------------------------------------------------------------------
	//	Function Name 				:	WFGetWorkItemScanningInfo
	//	Date Written (DD/MM/YYYY)	:	16/05/2002
	//	Author						:	Prashant
	//	Input Parameters			:	Connection , XMLParser , XMLGenerator
	//	Output Parameters			:   none
	//	Return Values				:	String
	//	Description					:   Returns the ProcessIni for the Process Definiton
	//----------------------------------------------------------------------------------------------------
	public String WFGetWorkItemScanningInfo(Connection con, XMLParser parser,
			XMLGenerator gen) throws JTSException, WFSException {
		StringBuilder outputXML = new StringBuilder();
		PreparedStatement pstmt = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
		Object[] result = null;
		int dbType = -1;
		ResultSet rs = null;
                String engine = parser.getValueOf("EngineName");
                String option = parser.getValueOf("Option", "", false);
		try {
			int sessionID = parser.getIntOf("SessionId", 0, false);
			int procDefID = parser.getIntOf("ProcessDefinitionId", 0, false);

			WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
			int userID = 0;
			char pType = '\0';
			StringBuffer tempXml = new StringBuffer(100);
			if (user != null) {
				userID = user.getid();
				pType = user.gettype();

				/*				int len	=	0;
                         StringBuffer fileBuf	= new StringBuffer(2048);
                 java.io.FileInputStream fin	=	 new java.io.FileInputStream(parser.getValueOf("EngineName")+"_process_"+procDefID+".ini");
                 byte[] buf	=	new byte[2048] ;
                 int size	= 1;
                 while (size	> 0)
                 {
                 size = fin.read(buf);
                 if (size > 0){
                 len	+=	size;
                         fileBuf.append(new String (buf , 0, size, "8859_1" ));
                 }
                 }
                 fin.close();
                   tempXml.append(gen.writeValueOf("FileLength", String.valueOf(len)));
                 tempXml.append("\n<FileBuffer>");
                 tempXml.append(fileBuf);
                 tempXml.append("</FileBuffer>\n");
				 */
				/* Transaction opened especially for reading PostgreSQL LargeObjects
				 * -Varun Bhansaly
				 */
				if (con.getAutoCommit()) {
					con.setAutoCommit(false);
				}
				pstmt = con.prepareStatement(" Select ProcessIni from ProcessIniTable "+WFSUtil.getTableLockHintStr(dbType)+" where ProcessDefID  = ? ");
				pstmt.setInt(1, procDefID);
				pstmt.execute();
				rs = pstmt.getResultSet();
				if (rs.next()) {
					result = WFSUtil.getBIGData(con, rs, "ProcessIni", dbType, DatabaseTransactionServer.charSet);
					int len = ( (Integer) result[1]).intValue();
					tempXml.append(gen.writeValueOf("FileLength", String.valueOf(len)));
					tempXml.append("\n<FileBuffer>");
					tempXml.append( (String) result[0]);
					tempXml.append("</FileBuffer>\n");
				} else {
					mainCode = WFSError.WM_INVALID_PROCESS_DEFINITION;
					subCode = 0;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if (mainCode == 0) {
			//	outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WFGetWorkItemScanningInfo"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(tempXml);
				outputXML.append(gen.closeOutputFile("WFGetWorkItemScanningInfo"));
			}
		} catch (SQLException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0) {
				if (e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
					+ ")";
				}
			} else {
				descr = e.getMessage();
			}
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (JTSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		}  finally {
			try {
				if (!con.getAutoCommit()) {
					con.setAutoCommit(true);
				}
			} catch (SQLException sqle) {}
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
			} catch (SQLException sqle) {}
			try {
				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
			} catch (Exception e) {}
			
		}
		if (mainCode != 0) {
			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			outputXML.append( errorString);

		}
		return outputXML.toString();
	}

	//----------------------------------------------------------------------------------------------------
	//	Function Name 				:	WFGetDMSFolderDefinition
	//	Date Written (DD/MM/YYYY)	:	16/05/2002
	//	Author						:	Prashant
	//	Input Parameters			:	Connection , XMLParser , XMLGenerator
	//	Output Parameters			:   none
	//	Return Values				:	String
	//	Description					:   Get DMS Folders associated with the Process Definition
	//----------------------------------------------------------------------------------------------------
	public String WFGetDMSFolderDefinition(Connection con, XMLParser parser,
			XMLGenerator gen) throws JTSException, WFSException {
		StringBuilder  outputXML = new StringBuilder();
		PreparedStatement pstmt = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
                String engine = parser.getValueOf("EngineName");
				String option = parser.getValueOf("Option", "", false);

		try {
			int sessionID = parser.getIntOf("SessionId", 0, true);
			int procDefId = parser.getIntOf("ProcessDefinitionId", 0, true);
			int dbType = ServerProperty.getReference().getDBType(parser.getValueOf("EngineName"));
			char omniServiceFlag = parser.getCharOf("OmniService", 'N', true);
                        
			/* 05/09/2007, SrNo-7, Synchronous routing of workitems - Ruhi Hira */
			WFParticipant user = null;
			if (omniServiceFlag == 'Y') {
				user = new WFParticipant(0, "System", 'P', "SERVER", Locale.getDefault().toString());
			} else {
				user = WFSUtil.WFCheckSession(con, sessionID);
			}
			//            WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
			int userID = 0;
			char pType = '\0';
			StringBuffer tempXml = null;
			if (user != null) {
				userID = user.getid();
				pType = user.gettype();

				if (procDefId != 0) {
					/* 07/01/2008, Bugzilla Bug 3225, Nolock added to queries - Ruhi Hira */
					if (dbType == JTSConstant.JTS_ORACLE) {
						pstmt = con.prepareStatement(
								" Select ProcessDefId , CabinetName , RouteFolderId , ScratchFolderId , WorkFlowFolderId , CompletedFolderId , DiscardFolderId  , TableName from ( Select a.* , CabinetName , RouteFolderId , ScratchFolderId , WorkFlowFolderId , CompletedFolderId , DiscardFolderId  , TableName, ExtObjId   from ProcessDefTable a " + WFSUtil.getTableLockHintStr(dbType) + " , RouteFolderDefTable b " + WFSUtil.getTableLockHintStr(dbType) + ", ExtDBConfTable d " + WFSUtil.getTableLockHintStr(dbType) + " Where a.ProcessDefId = b.ProcessDefId (+) AND a.ProcessDefId = d.ProcessDefId (+)) c where ProcessDefId =  ? and NVL(ExtObjId,'1') = 1");
					} else { //Works for DB2 as well - Virochan // Works for PostgreSQL too - Tirupati
						pstmt = con.prepareStatement(
								" Select ProcessDefId, CabinetName , RouteFolderId , ScratchFolderId , WorkFlowFolderId , CompletedFolderId , DiscardFolderId  , TableName from ( Select a.* , CabinetName , RouteFolderId , ScratchFolderId , WorkFlowFolderId , CompletedFolderId , DiscardFolderId  , TableName, ExtObjId   from ProcessDefTable a " + WFSUtil.getTableLockHintStr(dbType) + " LEFT OUTER JOIN RouteFolderDefTable b " + WFSUtil.getTableLockHintStr(dbType) + " ON a.ProcessDefId = b.ProcessDefId LEFT OUTER JOIN ExtDBConfTable d ON a.ProcessDefId = d.ProcessDefId ) c where ProcessDefId =  ?   and COALESCE(ExtObjId,'1') = 1 ");
					}
					WFSUtil.printOut("Query is::::"+" Select ProcessDefId, CabinetName , RouteFolderId , ScratchFolderId , WorkFlowFolderId , CompletedFolderId , DiscardFolderId  , TableName from ( Select a.* , CabinetName , RouteFolderId , ScratchFolderId , WorkFlowFolderId , CompletedFolderId , DiscardFolderId  , TableName, ExtObjId   from ProcessDefTable a " + WFSUtil.getTableLockHintStr(dbType) + " LEFT OUTER JOIN RouteFolderDefTable b " + WFSUtil.getTableLockHintStr(dbType) + " ON a.ProcessDefId = b.ProcessDefId LEFT OUTER JOIN ExtDBConfTable d ON a.ProcessDefId = d.ProcessDefId ) c where ProcessDefId =  ?   and COALESCE(ExtObjId,'1') = 1 ");
					pstmt.setInt(1, procDefId);

					pstmt.execute();
					ResultSet rs = pstmt.getResultSet();
					int i = 0;
					tempXml = new StringBuffer(100);
					while (rs.next()) {
						i++;
						tempXml.append("\n<DMSFolderDefinition>\n");
						procDefId = rs.getInt(1); 
						tempXml.append(gen.writeValueOf("ProcessDefinitionId", String.valueOf(procDefId)));
						tempXml.append(gen.writeValueOf("CabinetName", engine));
						tempXml.append(gen.writeValueOf("RouteFolderId", rs.getString(3)));
						tempXml.append(gen.writeValueOf("ScratchFolderId", rs.getString(4)));
						tempXml.append(gen.writeValueOf("WorkFlowFolderId", rs.getString(5)));
						tempXml.append(gen.writeValueOf("CompletedFolderId", rs.getString(6)));
						tempXml.append(gen.writeValueOf("DiscardFolderId", rs.getString(7)));
						tempXml.append(gen.writeValueOf("DataClass", rs.getString(8)));
						tempXml.append("\n</DMSFolderDefinition>\n");
					}
					if (rs != null)
						rs.close();
					pstmt.close();
					if (i == 0 && procDefId != 0) {
						mainCode = WFSError.WM_INVALID_PROCESS_DEFINITION;
						subCode = 0;
						subject = WFSErrorMsg.getMessage(mainCode);
						descr = WFSErrorMsg.getMessage(subCode);
						errType = WFSError.WF_TMP;
					} else if (i == 0) {
						mainCode = WFSError.WM_NO_MORE_DATA;
						subCode = 0;
						subject = WFSErrorMsg.getMessage(mainCode);
						descr = WFSErrorMsg.getMessage(subCode);
						errType = WFSError.WF_TMP;
					}
				} else {
					mainCode = WFSError.WM_INVALID_PROCESS_DEFINITION;
					subCode = 0;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}
			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if (mainCode == 0) {
				//outputXML = new StringBuffer(200);
				//      Changed By Varun Bhansaly )n 13/02/2007
				outputXML.append(gen.createOutputFile("WFGetDMSFolderDefinition"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(tempXml);
				//      Changed By Varun Bhansaly )n 13/02/2007
				outputXML.append(gen.closeOutputFile("WFGetDMSFolderDefinition"));
			}
		} catch (SQLException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0) {
				if (e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
					+ ")";
				}
			} else {
				descr = e.getMessage();
			}
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (JTSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		}  finally {
			try {
				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
			} catch (Exception e) {}
			
		}
		if (mainCode != 0) {
			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			outputXML.append( errorString);

		}
		return outputXML.toString();
	}

	//----------------------------------------------------------------------------------------------------
	//	Function Name 						:	WFGetProcessList
	//	Date Written (DD/MM/YYYY)			:	16/05/2002
	//	Author								:	Advid Parmar
	//	Input Parameters					:	Connection , XMLParser , XMLGenerator
	//	Output Parameters					:   none
	//	Return Values						:	String
	//	Description							:   Returns List of Processes defined
	//
	//----------------------------------------------------------------------------------------------------
	public String WMGetProcessList(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
		int subCode = 0;
		int mainCode = 0;
		ResultSet rs = null;
		String descr = null;
		String subject = null;
		Statement stmt = null;
        String description = "";
		PreparedStatement pstmt = null; // Bugzilla Bug 2774
		Statement actionStmt = null; // Bugzilla Bug 2774
		StringBuilder outputXML = new StringBuilder();
		String errType = WFSError.WF_TMP;
		String engine = parser.getValueOf("EngineName");
		String option = parser.getValueOf("Option", "", false);
		int dbType = ServerProperty.getReference().getDBType(engine);
		String pnTableNameStr = "";
		String ptnTableNameStr = "";
		String indexNameStr = "";
		char pdaFlag = parser.getCharOf("PDAFlag", 'N', true);
		pnTableNameStr = WFSUtil.getTempTableName(con, "TempProcessName", dbType);
		ptnTableNameStr = WFSUtil.getTempTableName(con, "TempProcessTable", dbType);
		indexNameStr = "IX1_TempProcessTable";
		boolean rightsFlag = false;
		HashMap<Integer, String> rightQueueAssoc = new HashMap<Integer, String>();
                String locale = "en_us";
        StringBuilder inputParamInfo = new StringBuilder();
        String userLocale = null;
		int checkRightsCounter=0;
		try {
			//String enableMultiLingual = parser.getValueOf("EnableMultiLingual", "N", true);
			int sessionID = parser.getIntOf("SessionId", 0, false);
            String procType = parser.getValueOf("ProcessType", "", true);
			boolean dataflag = parser.getValueOf("DataFlag", "N", true).startsWith("Y");
			String queueName = parser.getValueOf("Queuename", "", true);
                        int projectId = parser.getIntOf("ProjectId", 0, true);
			int queueId = parser.getIntOf("QueueId", -1, true);
			char stateFlag = parser.getCharOf("StateFlag", 'B', true);
			String fromDate = parser.getValueOf("From", "", true);
			String toDate = parser.getValueOf("To", "", true);
			boolean latestVerFlag = parser.getValueOf("LatestVersionFlag", "N", true).startsWith("Y");
                        boolean pmWebCall = parser.getValueOf("PMWFlag", "N", true).startsWith("Y");
			String enableStr="";
			String enableMultiLingual = parser.getValueOf("EnableMultiLingual", "N", true);
			boolean pmMode = parser.getValueOf("OpenMode", "WD", true).equalsIgnoreCase("PM");
			if(pmMode){
				enableMultiLingual="N";
			}
			if(latestVerFlag && !pmWebCall){
                            enableStr=" and ProcessState='Enabled'";
			}
			userLocale = parser.getValueOf("Locale", "", true);
			int noOfRecordsToFetch = parser.getIntOf("NoOfRecordsToFetch", ServerProperty.getReference().getBatchSize(), true);
			if (noOfRecordsToFetch > ServerProperty.getReference().getBatchSize() || noOfRecordsToFetch <= 0) {
				noOfRecordsToFetch = ServerProperty.getReference().getBatchSize();
			}
			boolean sortOrder = parser.getValueOf("SortOrder", "A", true).startsWith("D");
			String lastValueProcess = parser.getValueOf("LastValue", "", true);
			int lastIndexProcess = parser.getIntOf("LastIndex", 0, true);
			String inputRights = parser.getValueOf("RightFlag", "000000", true);
			//String inputRights = parser.getValueOf("RightFlag", "00000000000000000000", true);
			String processPrefix = parser.getValueOf("ProcessPrefix", "", true); /*SrNo-8*/
			rightsFlag = inputRights.startsWith("01");
			//rightsFlag = WFSUtil.compareRightsOnObject(inputRights, WFSConstant.CONST_PROCESS_VIEW);
			WFSUtil.printOut(engine,"rightFlag : " + rightsFlag);
			String fromdateString = "";
			String todateString = "";
			String typeNVARCHAR = WFSUtil.getNVARCHARType(dbType);

			WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
			int userID = 0;
			boolean queueFilter = false;
			StringBuffer tempXml = new StringBuffer(100);
			StringBuffer strBuff = new StringBuffer(100);
			StringBuffer timeXml = new StringBuffer(100);
			inputParamInfo.append(gen.writeValueOf("SessionId", String.valueOf(sessionID)));
			inputParamInfo.append(gen.writeValueOf("UserName", (user == null ? "" : user.getname())));
			if (user != null) {
				boolean pendingActionsFlag = parser.getValueOf("PendingActionsFlag").startsWith("Y"); // Bugzilla Bug 2774
                                String scope = user.getscope();                                
                                if(!scope.equalsIgnoreCase("ADMIN"))
                                     locale = user.getlocale(); 
				userID = user.getid();
				if (user.gettype() == 'P' || user.gettype() == 'C')
					rightsFlag = false;
				String processFolder = "";
				int lastIndex = 0;
				String lastValue = lastValueProcess;
				int totalNoOfRecords = 0;
				int noOfRecordsFetch = 0;
				int recordStill = noOfRecordsToFetch + 1;
				stmt = con.createStatement();
				if (!queueName.equals("") || queueId != -1)
					queueFilter = true;
				if (rightsFlag) {
					WFSUtil.createTempTable(stmt, pnTableNameStr, "TempProcessName " + typeNVARCHAR + "(64)", dbType);
					//changed by Ashish Mangla on 20/05/2005 for Automatic Cache updation
					/*
					processFolder = (String) CachedObjectCollection.getReference().getCacheObject(con, engine, 0, WFSConstant.CACHE_CONST_CabinetPropertyCache, "ProcessFolder").getData();
                    if (processFolder == null) {
                        mainCode = WFSError.WM_NO_MORE_DATA; //WFS_6.1_034
                        subCode = 0;
                    } else {
                        WFSUtil.createTempTable(stmt, pnTableNameStr, "TempProcessName " + typeNVARCHAR + "(64)", dbType);

                        if (lastIndexProcess != 0) {
                            strBuff = new StringBuffer("Select A.DocumentIndex From PDBDocumentContent A " + WFSUtil.getTableLockHintStr(dbType) + ", PDBDocument B " + WFSUtil.getTableLockHintStr(dbType) + " where A.DocumentIndex = B.DocumentIndex And A.parentFolderIndex = ");
                            strBuff.append(processFolder);*/
					// Tirupati Srivastava : changes made to make code compatible with postgreSQL
					/* commened for Right Managemenet
                            strBuff.append(" And B.Name = ");
                            strBuff.append(WFSUtil.TO_STRING(lastValue, true, dbType));
					 */
					//strBuff.append(" And B.Name = " + WFSConstant.WF_VARCHARPREFIX);
					//strBuff.append(lastValue);
					//strBuff.append("'");
					/*strBuff.append(WFSUtil.getQueryLockHintStr(dbType));
                            rs = stmt.executeQuery(strBuff.toString());
                            if (rs != null && rs.next()) {
                                lastIndex = rs.getInt(1);
                                rs.close();
                                rs = null;
                            }
                        }
                    }*/
				}
				if (mainCode == 0) {

					//					Changed by Varun Bhansaly on 06/12/2006 to provide support for calender feature
					//WFS_8.0_119
					WFSUtil.createTempTable(stmt, ptnTableNameStr, "TempProcessDefId int, TempProcessName " + typeNVARCHAR + "(64), TempVersionNo smallint, TempNoofInstances Int, TempNoofInstancesCompleted int, TempNoofInstancesDiscarded Int,TempNoofInstancesDelayed Int, TempStateSince " + typeNVARCHAR + "(10), TempState " + typeNVARCHAR + "(10),ProcessTurnAroundTime int, TATCalFlag " + typeNVARCHAR + "(1), TempRegPrefix " + typeNVARCHAR + "(20), TempRegSuffix " + typeNVARCHAR + "(20), TempReqSeqLength int, ProcessType" + typeNVARCHAR + "(1) "+",DisplayName" + typeNVARCHAR + "(40) ", indexNameStr, "TempProcessDefId", dbType);

					StringBuffer filterStr = new StringBuffer(100);
					StringBuffer countFilterStr = new StringBuffer(100);
					StringBuffer queryStr = new StringBuffer(100);
					/*SrNo-8*/
					if (!processPrefix.equals("")) {
						filterStr.append(" AND ");
						filterStr.append(WFSUtil.getLikeFilterStr(parser, "A.ProcessName", processPrefix, dbType, true)); //Bugzilla Bug 3421
					}
					if (queueFilter) {
						//int queueId = 0;
						/* Bugzilla Id 68, 16/08/2006, Quote character issue in DB2 - Ruhi Hira */
						if(!queueName.equals("") && queueId == -1){
							strBuff = new StringBuffer("Select QueueId From QueueDefTable "+WFSUtil.getTableLockHintStr(dbType)+" Where QueueName = ");
							strBuff.append(WFSUtil.TO_STRING(queueName, true, dbType));
							rs = stmt.executeQuery(strBuff.toString());
							if (rs != null && rs.next()) {
								queueId = rs.getInt(1);
								rs.close();
								rs = null;
							}
						}else if(queueName.equals("") && queueId != -1){
							strBuff = new StringBuffer("Select QueueName From QueueDefTable "+WFSUtil.getTableLockHintStr(dbType)+" Where QueueId = " + queueId);
							rs = stmt.executeQuery(strBuff.toString());
							if (rs != null && rs.next()) {
								queueName = rs.getString(1);
								rs.close();
								rs = null;
							}
						}
						if (queueName.endsWith(WfsStrings.getMessage(1))) {
							int userIndex = 0;
							String userName = queueName.substring(0, queueName.indexOf(WfsStrings.getMessage(1))).trim();
							// Tirupati Srivastava : changes made to make code compatible with postgreSQL
							/*strBuff = new StringBuffer("Select Userindex From Wfuserview Where username = " + WFSConstant.WF_VARCHARPREFIX);*/
							strBuff = new StringBuffer(" Select Userindex From Wfuserview Where username = ");
							//strBuff.append(userName);
							//strBuff.append("'");
							strBuff.append(WFSUtil.TO_STRING(userName, true, dbType));
							rs = stmt.executeQuery(strBuff.toString());
							if (rs != null && rs.next()) {
								userIndex = rs.getInt(1);
								rs.close();
								rs = null;
							}
							//countFilterStr.append(" And AssignedUser = " + WFSConstant.WF_VARCHARPREFIX);
							//countFilterStr.append(userName);
							//countFilterStr.append("'");
							countFilterStr.append(" And AssignedUser = ");
							countFilterStr.append(WFSUtil.TO_STRING(userName, true, dbType));
						} else {
							countFilterStr.append(" And Q_QueueId= ");
							countFilterStr.append(queueId);
							filterStr.append(" And A.processdefid = C.processdefid And queueId =");
							filterStr.append(queueId);
						}
					}
					/*if(stateFlag != 'B'){
                        filterStr.append(" And A.ProcessState = " + WFSConstant.WF_VARCHARPREFIX);
                        switch(stateFlag){
                            case 'E':
                                filterStr.append("Enabled");
                                break;
                            case 'D':
                                filterStr.append("Disabled");
                                break;
                        }
                        filterStr.append("'");
                                         }*/
					if (stateFlag != 'B') {
						filterStr.append(" And A.ProcessState = ");
						switch (stateFlag) {
						case 'E':
							filterStr.append(WFSUtil.TO_STRING("Enabled", true, dbType));
							break;
						case 'D':
							filterStr.append(WFSUtil.TO_STRING("Disabled", true, dbType));
							break;
						}
					}
					if (!fromDate.equals(""))
						fromdateString = " and queuehistorytable.EntryDateTime>=" + WFSUtil.TO_DATE(fromDate, true, dbType);
					if (!toDate.equals(""))
						todateString = " and queuehistorytable.EntryDateTime<=" + WFSUtil.TO_DATE(toDate, true, dbType);

					if (latestVerFlag && !pmWebCall)
						filterStr.append(" And Versionno = (Select VersionNo From ProcessDefTable " + WFSUtil.getTableLockHintStr(dbType) + " Where Processname = A.ProcessName"+enableStr+ " ) ");
					if (latestVerFlag && pmWebCall)
                                            filterStr.append(" And Versionno = (Select Max(VersionNo) From ProcessDefTable " + WFSUtil.getTableLockHintStr(dbType) + " Where Processname = A.ProcessName ) ");
					//					Changed by Varun Bhansaly on 06/12/2006 to provide support for calender feature
					//WFS_8.0_119
					queryStr.append(" A.processdefid, A.ProcessName, A.VersionNo, A.ProcessState, A.ProcessTurnAroundTime, A.TATCalFlag,A.RegPrefix, A.RegSuffix, A.RegSeqLength,A.ProcessType,DisplayName,");
					queryStr.append(WFSUtil.TO_STRING("A.ProcessName", false, dbType) + " AS upperProcessName");
					queryStr.append(" From ");
					if (rightsFlag) {
						queryStr.append(pnTableNameStr + " B,");
						//					queryStr.append(" #TempProcessName B,");
					}
					queryStr.append(" ProcessDefTable A " + WFSUtil.getTableLockHintStr(dbType) + " ");
					if (queueFilter)
						queryStr.append(",QueueStreamTable C ");
					if(pdaFlag == 'N'){
						queryStr.append(" where 1 = 1 ");
					}else{
						queryStr.append("where A.processdefid  in ( select ProcessDefId from Process_InterfaceTable  where InterfaceName='Mobile' ) ");
					}
					if (rightsFlag)
						queryStr.append(" AND upper(A.ProcessName) = upper(B.TempProcessName) ");
					if (!lastValueProcess.equals("")) {
						// Bug # WFS_6_003, comparison should be case insensitive.
						// Tirupati Srivastava : changes made to make code compatible with postgreSQL
						//filterStr.append((sortOrder) ? " And ( Upper(RTRIM(A.ProcessName)) < " : " And ( Upper(RTRIM(A.ProcessName)) > ");
						filterStr.append( (sortOrder) ? " And ( " + WFSUtil.TO_STRING("A.ProcessName", false, dbType) + " < " : " And ( " + WFSUtil.TO_STRING("A.ProcessName", false, dbType) + " > ");
						//filterStr.append(" Upper(RTRIM(" + WFSUtil.TO_STRING(lastValueProcess, true, dbType) + "))");
						filterStr.append(WFSUtil.TO_STRING(WFSUtil.TO_STRING(lastValueProcess, true, dbType), false, dbType));
						//filterStr.append(" OR ( Upper(RTRIM(A.ProcessName)) = ");
						filterStr.append(" OR ( " + WFSUtil.TO_STRING("A.ProcessName", false, dbType) + " = ");
						//filterStr.append(" Upper(RTRIM(" + WFSUtil.TO_STRING(lastValueProcess, true, dbType) + "))");
						filterStr.append(WFSUtil.TO_STRING(WFSUtil.TO_STRING(lastValueProcess, true, dbType), false, dbType));
						filterStr.append( (sortOrder) ? " AND A.ProcessDefId < " : " AND A.ProcessDefId > ");
						filterStr.append(lastIndexProcess);
						filterStr.append("))");
					}
					// ------------------------------------------------
					//	Changed By  : Ruhi Hira
					//  Changed On  : 30/10/2004
					//  Description : Sort should be case insensitive.
					// ------------------------------------------------

					/*if((dbType == JTSConstant.JTS_ORACLE) || (dbType == JTSConstant.JTS_DB2)){
                     filterStr.append(" Order By UPPER(RTRIM(A.ProcessName)) ");
                          }
                          else{
                     filterStr.append(" Order By A.ProcessName ");
                          }*/
                                        //Bug 43599 - Fetcing process list on the basis of ProcessType
                                        if(procType.equalsIgnoreCase("M")){
                                            filterStr.append(" And A.ProcessType = 'M' ");
                                       }else if(procType.equalsIgnoreCase("S")){
                                            filterStr.append(" And A.ProcessType = 'S' ");
                                        }
					//Bug 26- Bugzilla
					filterStr.append(" Order By upperProcessName ");
					filterStr.append( (sortOrder) ? " DESC " : " ASC ");
					filterStr.append(",A.ProcessDefId ");
					filterStr.append( (sortOrder) ? " DESC " : " ASC ");
					queryStr.append(filterStr);
                  
					while (true) {
						if (rightsFlag) {
							strBuff = new StringBuffer(100);
							/*
						strBuff = new StringBuffer("<?xml version=\"1.0\"?><NGOGetDocumentListExt_Input><Option>NGOGetDocumentListExt</Option><CabinetName>");
                            strBuff.append(engine);
                            strBuff.append("</CabinetName><UserDBId>");
                            strBuff.append(sessionID);
                            strBuff.append("</UserDBId><FolderIndex>");
                            strBuff.append(processFolder);
                            strBuff.append("</FolderIndex><NoOfRecordsToFetch>");
                            strBuff.append(noOfRecordsToFetch == 32767 ? noOfRecordsToFetch : noOfRecordsToFetch + 1);
                            strBuff.append("</NoOfRecordsToFetch><OrderBy>2</OrderBy><SortOrder>");
                            strBuff.append( (sortOrder) ? "D" : "A");
                            strBuff.append("</SortOrder><LastSortField>");
                            strBuff.append(lastValue);
                            strBuff.append("</LastSortField><PreviousIndex>");
                            strBuff.append(lastIndex);
                            strBuff.append("</PreviousIndex><DataAlsoFlag>N</DataAlsoFlag></NGOGetDocumentListExt_Input>");
                            parser.setInputXML(strBuff.toString());
                            parser.setInputXML(com.newgen.omni.jts.srvr.WFFindClass.getReference().execute("NGOGetDocumentListExt", engine, con, parser, gen));
                            String status = parser.getValueOf("Status");
							 */
							checkRightsCounter++;
							long startTime = System.currentTimeMillis();
							String rightsWithObjects = WFSUtil.returnRightsForObjectType(con, dbType, userID, WFSConstant.CONST_OBJTYPE_PROCESS, (sortOrder) ? "D" : "A", noOfRecordsToFetch, lastValue,projectId);
							long endTime = System.currentTimeMillis();
							timeXml.append("<RightsTime"+checkRightsCounter+">"); 
							timeXml.append(endTime-startTime);
							timeXml.append("</RightsTime"+checkRightsCounter+">");
							WFSUtil.printOut(engine,"rightsWithObjects : " + rightsWithObjects);
							Statement tempStmt = null;
							boolean lastValFlag = false;
							if(lastValue != null && !lastValue.trim().equalsIgnoreCase("")){
								stmt.execute("Delete From " + pnTableNameStr);								
								lastValFlag = true;								
							}							
							
							if( !lastValFlag && (rightsWithObjects == null || rightsWithObjects.trim().equals(""))){
								mainCode = WFSError.WM_NO_MORE_DATA;
								subCode = 0;
								break;
							} else if(!(rightsWithObjects == null || rightsWithObjects.trim().equals(""))){
								parser.setInputXML(rightsWithObjects);	
								noOfRecordsFetch = Integer.parseInt(parser.getValueOf("RetrievedCount"));
								if(noOfRecordsFetch == 0 && !lastValFlag){
									if(lastIndex <= 0){
										mainCode = WFSError.WM_NO_MORE_DATA;
										subCode = 0;
									}
									break;
								} {
									//rightQueueAssoc = new HashMap<Integer, String>();	
									if(!lastValFlag){
										stmt.execute("Delete From " + pnTableNameStr);
									}	
									int startIndex = 0;
									int endIndex = 0;
									String loginUserRights = "";
									boolean isRightOnObject = false;
									for(int i = noOfRecordsFetch; i > 0; i--){
										startIndex = parser.getStartIndex("Object", endIndex, 0);
										endIndex = parser.getEndIndex("Object", startIndex, 0);
										lastValue = parser.getValueOf("ObjectName", startIndex, endIndex);
										lastIndex = Integer.parseInt(parser.getValueOf("ObjectId", startIndex, endIndex));
										loginUserRights = parser.getValueOf("RightString", startIndex, endIndex);
										//isRightOnObject = WFSUtil.checkRights(con, dbType, WFSConstant.CONST_OBJTYPE_QUEUE, queueId, sessionID, WFSConstant.CONST_QUEUE_VIEW);
										if(WFSUtil.compareRightsOnObject(loginUserRights, WFSConstant.CONST_PROCESS_VIEW)){
											rightQueueAssoc.put(lastIndex, loginUserRights);
											strBuff = new StringBuffer("Insert into " + pnTableNameStr);
											strBuff.append(" Values(");
											strBuff.append(WFSUtil.TO_STRING(lastValue, true, dbType)); /* Bugzilla Id 68, Quote char issue in DB2, 17/08/2006 - Ruhi Hira */
											strBuff.append(")");
											stmt.addBatch(strBuff.toString());
										}
									}
									stmt.executeBatch();
									totalNoOfRecords = Integer.parseInt(parser.getValueOf("TotalCount"));
								}
							}
							/*
							if (!status.equals("0")) {
                                mainCode = WFSError.WM_NO_MORE_DATA;
                                subCode = 0;
                                break;
                            } else {
                                noOfRecordsFetch = Integer.parseInt(parser.getValueOf("NoOfRecordsFetched"));
                                if (noOfRecordsFetch == 0) {
                                    if (lastIndex <= 0) {
                                        mainCode = WFSError.WM_NO_MORE_DATA;
                                        subCode = 0;
                                    }
                                    //break; 	//break shifted below
                                } else {
                                    stmt.execute("Delete From " + pnTableNameStr);
                                    //								stmt.execute("Delete From #TempProcessName");
                                    int startIndex = 0;
                                    int endIndex = 0;
                                    String loginUserRights = "";
                                    for (int i = noOfRecordsFetch; i > 0; i--) {
                                        startIndex = parser.getStartIndex("Document", endIndex, 0);
                                        endIndex = parser.getEndIndex("Document", startIndex, 0);
                                        lastValue = parser.getValueOf("DocumentName", startIndex, endIndex);
                                        lastIndex = Integer.parseInt(parser.getValueOf("DocumentIndex", startIndex, endIndex));
                                        loginUserRights = parser.getValueOf("LoginUserRights", startIndex, endIndex);
                                        if (WFSUtil.compareRights(inputRights, loginUserRights)) {
                                            strBuff = new StringBuffer("Insert into " + pnTableNameStr);
                                            strBuff.append(" Values(");
                                            strBuff.append(WFSUtil.TO_STRING(lastValue, true, dbType));
                                            strBuff.append(")");
                                            stmt.addBatch(strBuff.toString());
                                        }
                                    }
                                    stmt.executeBatch();
                                    totalNoOfRecords = Integer.parseInt(parser.getValueOf("TotalNoOfRecords"));
                                }
                            }*/
							if (!lastValueProcess.equals("")) {
								strBuff = new StringBuffer("Insert into " + pnTableNameStr);
								strBuff.append(" Values(");
								strBuff.append(WFSUtil.TO_STRING(lastValueProcess, true, dbType));
								strBuff.append(")");
								stmt.executeUpdate(strBuff.toString());
								lastValueProcess = "";	//Bugzilla Bug 12001
							}
						}
						strBuff = new StringBuffer(100);
						if (mainCode == 0) {

							// Changed by Varun Bhansaly on 06/12/2006 to provide support for calender feature
							strBuff.append("Insert Into " + ptnTableNameStr + " (TempProcessDefId , TempProcessName , TempVersionNo , TempState , ProcessTurnAroundTime , TATCalFlag, TempRegPrefix, TempRegSuffix, TempReqSeqLength, ProcessType,DisplayName )");//WFS_8.0_119
							// Bug 28 - Bugzilla
							strBuff.append(" select Processdefid, ProcessName, VersionNo, ProcessState, ProcessTurnAroundTime, TATCalFlag, RegPrefix, RegSuffix, RegSeqLength, ProcessType,DisplayName from ( Select Distinct " + WFSUtil.getFetchPrefixStr(dbType, recordStill) + queryStr + ")WFProcessAlias " + WFSUtil.getFetchSuffixStr(dbType, recordStill, WFSConstant.QUERY_STR_WHERE)); //Bugzilla Bug 824	Ashish added distinct again for SQL/Oracle//WFS_8.0_119
							strBuff.append(WFSUtil.getQueryLockHintStr(dbType));
                           // WFSUtil.printOut("[GetProcessList] process query>>"+strBuff.toString());
                       
							int result = stmt.executeUpdate(strBuff.toString());

							if (rightsFlag) {
								if (noOfRecordsFetch == 0){
									break;
								}
								if (result <= noOfRecordsToFetch) {
									recordStill = recordStill - result;
									if (totalNoOfRecords <= noOfRecordsFetch || recordStill < 1)
										break;
									else
										continue;
								} else
									break;
							} else
								break;
						} else
							break;
					} //end-while
					if (dataflag && mainCode == 0) {
						rs = stmt.executeQuery("Select TempProcessDefId from " + ptnTableNameStr);
						int[] pidary = new int[noOfRecordsToFetch + 1];
						int i = 0;
						int count = 0;
						while (rs.next()) {
							pidary[count] = rs.getInt(1);
							count++;
						}
						if(rs!=null){
							rs.close();
						}
						while (i < count) {
							queryStr = new StringBuffer(100);
							queryStr.append(" update " + ptnTableNameStr);
							queryStr.append(" set TempNoofInstances = (Select Count(Distinct(WFINSTRUMENTTABLE.processinstanceid)) From  WFINSTRUMENTTABLE " + WFSUtil.getTableLockHintStr(dbType) + " Where WFINSTRUMENTTABLE.ProcessInstanceState=2 And WFINSTRUMENTTABLE.Processdefid = ");
							queryStr.append(pidary[i]);
							queryStr.append(countFilterStr);
							queryStr.append("), TempNoofInstancesCompleted =");
							if (queueFilter)
								queryStr.append("Null, TempNoofInstancesDiscarded = ");
							else {
								queryStr.append(" ( Select Count(Distinct(processinstanceid)) From  Queuehistorytable " + WFSUtil.getTableLockHintStr(dbType) + " Where Processdefid = ");
								queryStr.append(pidary[i]);
								queryStr.append(fromdateString);
								queryStr.append(todateString);
								queryStr.append(countFilterStr);
								queryStr.append(" And processinstancestate = 6), TempNoofInstancesDiscarded = "); ;
							}
							if (queueFilter)
								queryStr.append("Null, TempNoofInstancesDelayed = ");
							else {
								queryStr.append(" ( Select Count(Distinct(processinstanceid)) From  Queuehistorytable " + WFSUtil.getTableLockHintStr(dbType) + " Where Processdefid = ");
								queryStr.append(pidary[i]);
								queryStr.append(fromdateString);
								queryStr.append(todateString);
								queryStr.append(countFilterStr);
								queryStr.append(" And processinstancestate = 5), TempNoofInstancesDelayed = "); ;
							}
							queryStr.append(" (Select Count(Distinct(WFINSTRUMENTTABLE.processinstanceid)) From  WFINSTRUMENTTABLE " + WFSUtil.getTableLockHintStr(dbType) + " Where WFINSTRUMENTTABLE.ProcessInstanceState=2 And WFINSTRUMENTTABLE.Processdefid = ");
							queryStr.append(pidary[i]);
							if (queueFilter)
								queryStr.append(countFilterStr);
							queryStr.append(" And WFINSTRUMENTTABLE.ExpectedProcessDelay > ");
							queryStr.append(WFSUtil.getDate(dbType));
							queryStr.append(")	where TempProcessDefId =");
							queryStr.append(pidary[i]);
							queryStr.append(WFSUtil.getQueryLockHintStr(dbType));
							stmt.addBatch(queryStr.toString());
							i++;
						}
						stmt.executeBatch();
					}

					// Bugzilla Bug 2774
					if(pendingActionsFlag) {
						pstmt = con.prepareStatement("select authorizationid from WFAuthorizationTable "+WFSUtil.getTableLockHintStr(dbType)+" where EntityId = ?");
					}
                                         String strQry = "";
                                        if((locale == null ) || (locale != null && locale.equalsIgnoreCase("en_us"))||!"Y".equalsIgnoreCase(enableMultiLingual))
                                             strQry = " Select * from " + WFSUtil.TO_SANITIZE_STRING(ptnTableNameStr, true) ;
                                        else
                                             strQry = " Select * from " + WFSUtil.TO_SANITIZE_STRING(ptnTableNameStr, true)+ " TT "+ WFSUtil.getTableLockHintStr(dbType) +  " Left Outer Join ProcessDefTable PT "+ WFSUtil.getTableLockHintStr(dbType) +  " on TT.TempProcessDefId = PT.processdefId LEFT OUTER JOIN WFMultiLingualTable B on TT.TempProcessDefId = B.EntityId and EntityType = 1 and Locale = '" + WFSUtil.TO_SANITIZE_STRING(locale, false) + "'";
                                            //strQry = "Select TempProcessDefId, TempProcessName, TempVersionNo, TempNoofInstances, TempNoofInstancesCompleted, TempNoofInstancesDiscarded,TempNoofInstancesDelayed, TempStateSince, TempState, ProcessTurnAroundTime, TATCalFlag, TempRegPrefix, TempRegSuffix, TempReqSeqLength, EntityName from " + ptnTableNameStr + " A LEFT OUTER JOIN WFMultiLingualTable B on A.TempProcessDefId = B.EntityId and EntityType = 1 and Locale = '" + locale + "'";
                                        if((locale == null ) || (locale != null && locale.equalsIgnoreCase("en_us"))||!"Y".equalsIgnoreCase(enableMultiLingual))
                                            strQry += " TT "+ WFSUtil.getTableLockHintStr(dbType) +  " Left Outer Join ProcessDefTable PT "+ WFSUtil.getTableLockHintStr(dbType) +  " on TT.TempProcessDefId = PT.processdefId ";
                                        if(procType.equalsIgnoreCase("M")){
                                            strQry += " And TT.processtype = 'M' ";
                                       }else if(procType.equalsIgnoreCase("S")){
                                            strQry += " And TT.processtype = 'S' ";
                                        }
                                       if(dbType == JTSConstant.JTS_MSSQL){
                                            strQry += " order by TT.TempProcessName" ;
                                            strQry += (sortOrder) ? " DESC " : " ASC ";
                                       }
                                       else if(dbType == JTSConstant.JTS_ORACLE){
                                            strQry += " order by upper(TEMPPROCESSNAME)" ;
                                            strQry += (sortOrder) ? " DESC " : " ASC ";
											strQry += " , TEMPPROCESSDEFID " ;
                                            strQry += (sortOrder) ? " DESC " : " ASC ";
                                        }
					rs = stmt.executeQuery(strQry);

					int i = 0;
					int tot = 0;
					int procDefId = 0;
					int durationId = 0;
					tempXml.append("\n<ProcessList>\n");
                                        String entityName = "";
					while (rs.next()) {
						if (i < noOfRecordsToFetch) {
							tempXml.append("\n<ProcessInfo>\n");
							procDefId = rs.getInt(1);
							tempXml.append(gen.writeValueOf("ID", String.valueOf(procDefId)));
                                                        String processName = rs.getString(2);
							
                                                        tempXml.append(gen.writeValueOf("Name", processName)); 
							// Bug # WFS_6_001, oracle driver creating issue while fetching string into float.
							tempXml.append(gen.writeValueOf("Version", rs.getString(3)));
							tempXml.append(gen.writeValueOf("RightString", rightQueueAssoc.get(procDefId)));
                                                        entityName = "";
                                                        if(locale != null && !locale.equalsIgnoreCase("en_us")&&"Y".equalsIgnoreCase(enableMultiLingual))
                                                        {                                
                                                            entityName = rs.getString("ENTITYNAME");
                                                            if(rs.wasNull())
                                                                entityName = "";
                                                        }
                                                        tempXml.append(gen.writeValueOf("EntityName", entityName));
							if (dataflag) {
								tempXml.append("\n<Data>\n");
								tempXml.append(gen.writeValueOf("NoofInstances", String.valueOf(rs.getInt(4))));
								tempXml.append(gen.writeValueOf("NoofInstancesCompleted", String.valueOf(rs.getInt(5))));
								tempXml.append(gen.writeValueOf("NoofInstancesDiscarded", String.valueOf(rs.getInt(6))));
								tempXml.append(gen.writeValueOf("NoofInstancesDelayed", String.valueOf(rs.getInt(7))));
								tempXml.append("\n</Data>\n");
							}
							// Bugzilla Bug 2774
							if(pendingActionsFlag) {
								pstmt.setInt(1, procDefId);
								pstmt.execute();
								ResultSet actionRs = pstmt.getResultSet();
								if(actionRs != null && actionRs.next()) {
									String authIdList = actionRs.getString("authorizationid");
									while(actionRs.next())
										authIdList += ", " + actionRs.getString("authorizationid");

									actionStmt = con.createStatement();
									actionRs = actionStmt.executeQuery("select actionid from WFAuthorizeProcessDefTable "+WFSUtil.getTableLockHintStr(dbType)+" where authorizationid in ( " + WFSUtil.TO_SANITIZE_STRING(authIdList, true) + " ) ");
									if(actionRs != null && actionRs.next()) {
										tempXml.append("<PendingActions>");
										tempXml.append(actionRs.getString("actionid"));
										while(actionRs.next())
											tempXml.append("," + actionRs.getString(1));
										tempXml.append("</PendingActions>");
									}
									actionStmt.close();
								}
								//pstmt.close();
							}
							tempXml.append(gen.writeValueOf("StateSince", rs.getString(8)));
							tempXml.append(gen.writeValueOf("State", rs.getString(9)));
							HashMap map = (HashMap) CachedObjectCollection.getReference().getCacheObject(con, engine, procDefId, WFSConstant.CACHE_CONST_WFDuration, "").getData();
							durationId = rs.getInt(10);
							if (durationId > 0) {
								WFDuration duration = (WFDuration) map.get(durationId + "");
								tempXml.append("<ProcessTurnAroundTime>");
								tempXml.append(duration);
								tempXml.append("</ProcessTurnAroundTime>");
							}
							//tempXml.append(gen.writeValueOf("ProcessTurnAroundTime", rs.getString(10)));
							/* Added by Varun Bhansaly on 06/12/2006 to provide support for calender feature */
							tempXml.append(gen.writeValueOf("ProcessTATCalFlag", rs.getString(11)));
							//WFS_8.0_119
							tempXml.append(gen.writeValueOf("DisplayName", rs.getString(16)));
							tempXml.append(gen.writeValueOf("RegPrefix", rs.getString(12)));
							tempXml.append(gen.writeValueOf("RegSuffix", rs.getString(13)));
							tempXml.append(gen.writeValueOf("RegSeqLength", rs.getString(14)));
                                                        tempXml.append(gen.writeValueOf("ProcessType", rs.getString(15)));
                                                        Object[] result = null;
                                                        result = WFSUtil.getBIGData(con, rs, "Description", dbType, null);
                                                        description = (String)result[0];
                                                        tempXml.append("\n<![CDATA["+description+"]]>\n");
                                                        tempXml.append(gen.writeValueOf("CreatedOn", rs.getString("CreatedOn")));
                                                        tempXml.append(gen.writeValueOf("CreatedBy", rs.getString("CreatedBy")));
                                                        tempXml.append(gen.writeValueOf("LastModifiedOn", rs.getString("LastModifiedOn")));
                                                        tempXml.append(gen.writeValueOf("LastModifiedBy", rs.getString("LastModifiedBy")));
							tempXml.append("\n</ProcessInfo>\n");
							i++;
						}
						tot++;
					}
					if(pstmt!=null)
					pstmt.close();
					if (i > 0) {
						tempXml.append("</ProcessList>\n");
						tempXml.append(gen.writeValueOf("TotalCount", String.valueOf(tot)));
						tempXml.append(gen.writeValueOf("RetrievedCount", String.valueOf(i)));
					} else {
						mainCode = WFSError.WM_NO_MORE_DATA;
						subCode = 0;
					}
				}
			} else {

				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
			}
			if (mainCode == 0) {
				//outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WMGetProcessList"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(tempXml);
				outputXML.append(inputParamInfo);
				outputXML.append(timeXml);
				outputXML.append(gen.closeOutputFile("WMGetProcessList"));
			} else {
				subject = WFSErrorMsg.getMessage(mainCode);
			}
		} catch (SQLException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode, userLocale);
			errType = WFSError.WF_FAT;
			descr = e.getMessage();
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode, userLocale);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode, userLocale);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (JTSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode, userLocale);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode, userLocale);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		}  finally {
			try { /*Bugzilla Id 1148*/
				/* 27/12/2007, Bugzilla Bug 2829, condition added for dropping tables - Ruhi Hira */
				if (stmt != null) {
					try {
						WFSUtil.dropTempTable(stmt, ptnTableNameStr, dbType);
					} catch (Exception excp) {}
					if (rightsFlag) {
						try {
							WFSUtil.dropTempTable(stmt, pnTableNameStr, dbType);
						} catch (Exception excp) {}
					}
				}
				/* Bugzilla Id 465, rs closed in finally - Ruhi Hira */
				try {
					if (rs != null) {
						rs.close();
						rs = null;
					}
				} catch (Exception excp) {}

				try {
					if (stmt != null) {
						stmt.close();
						stmt = null;
					}
				} catch (Exception ignored) {}
				// Bugzilla Bug 2774
				try {
					if(pstmt != null){
						pstmt.close();
						pstmt = null;
					}
				} catch (Exception ignored) {}
				try {
					if(actionStmt != null){
						actionStmt.close();
						actionStmt = null;
					}
				} catch (Exception ignored) {}
			} catch (Exception e) {}
			
		}
		if (mainCode != 0){
			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr, inputParamInfo.toString());
			outputXML.append( errorString);

		
		}
		return outputXML.toString();
	}

	//----------------------------------------------------------------------------------------------------
	//	Function Name 						:	WMSetTurnAroundTime
	//	Date Written (DD/MM/YYYY)			:	16/05/2002
	//	Author								:	Advid Parmar
	//	Input Parameters					:	Connection , XMLParser , XMLGenerator
	//	Output Parameters					:   none
	//	Return Values						:	String
	//	Description							:   Returns List of Processes defined
	//
	//----------------------------------------------------------------------------------------------------
	public String WMSetTurnAroundTime(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
		StringBuilder outputXML = new StringBuilder();
		PreparedStatement pstmt = null;
		Statement stmt = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
		ResultSet rs = null;
		XMLParser inputXML = new XMLParser();
		inputXML.setInputXML(parser.toString());
                String engine = parser.getValueOf("EngineName", "", false);
                String option = parser.getValueOf("Option", "", false);
                
		try {
			int sessionID = parser.getIntOf("SessionId", 0, false);
			int procDefId = parser.getIntOf("ProcessDefinitionID", 0, false);

			String tempVal = null;
			//SrNo-6
			String procTrnArnd = parser.getValueOf("ProcessTurnAround");

			WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
			
			/* Added by Varun Bhansaly on 06/12/2006 to provide support for calender feature */
			String processTATCalFlag = parser.getValueOf("ProcessTATCalFlag", "N", true);

			int dbType = ServerProperty.getReference().getDBType(parser.getValueOf("EngineName"));
			String actionComments = parser.getValueOf("ActionComments", "", true);
			boolean lastModifiedTimeUpdated = false;

			StringBuffer tempXml = new StringBuffer(100);
			int res = 0;
			int durationId = 0;

			if (user != null) {
				if (con.getAutoCommit())
					con.setAutoCommit(false);
				stmt = con.createStatement();
				String processName = null;

				int processTurnAroundTime = 0;
				//SrNo-6
				rs = stmt.executeQuery(" Select ProcessName , ProcessTurnAroundTime from ProcessDefTable " + WFSUtil.getTableLockHintStr(dbType)
						+ " where ProcessDefId = " + procDefId
						+ WFSUtil.getQueryLockHintStr(dbType));

				if (rs.next()) {
					processName = rs.getString("ProcessName").trim();
					//SrNo-6
					processTurnAroundTime = rs.getInt("ProcessTurnAroundTime");
					rs.close();
				} else{
					String errorString = WFSUtil.generalError(option, engine, gen,WFSError.WF_OPERATION_FAILED, WFSError.WM_INVALID_PROCESS_DEFINITION,WFSError.WF_TMP, WFSErrorMsg.getMessage(WFSError.WF_OPERATION_FAILED),WFSErrorMsg.getMessage(WFSError.WM_INVALID_PROCESS_DEFINITION));
					return errorString;
				}
				if (stmt != null) {
					stmt.close();
					stmt = null;
				}

				StringBuffer tempStr = new StringBuffer(parser.toString());
				StringBuffer tempAddList = new StringBuffer(100);
				tempAddList.append("<ProcessName>" + processName.trim() + "</ProcessName>");
				boolean rightsFlag = WFSUtil.checkRights(con, dbType, WFSConstant.CONST_OBJTYPE_PROCESS, procDefId, sessionID, WFSConstant.CONST_PROCESS_MODIFY);
				parser.setInputXML(tempStr.toString());
				if (!rightsFlag) {
					mainCode = WFSError.WFS_NORIGHTS;
					subCode = WFSError.WM_SUCCESS;
					subject = WFSErrorMsg.getMessage(mainCode);
					errType = WFSError.WF_TMP;
				}

				if (mainCode == 0) {
					if (!procTrnArnd.equals("")) {
						WFDuration processTAT = new WFDuration(procTrnArnd);

						if (processTurnAroundTime != 0) {
							pstmt = con.prepareStatement("Update WFDurationTable Set WFYears = ? , WFMonths = ? , WFDays = ? , WFHours = ? , WFMinutes = ? , WFSeconds = ? where processdefid = ? and durationid = ?");

							WFSUtil.DB_SetString(1, processTAT.getYears(), pstmt, dbType);
							WFSUtil.DB_SetString(2, processTAT.getMonths(), pstmt, dbType);
							WFSUtil.DB_SetString(3, processTAT.getDays(), pstmt, dbType);
							WFSUtil.DB_SetString(4, processTAT.getHours(), pstmt, dbType);
							WFSUtil.DB_SetString(5, processTAT.getMinutes(), pstmt, dbType);
							WFSUtil.DB_SetString(6, processTAT.getSeconds(), pstmt, dbType);
							pstmt.setInt(7, procDefId);
							pstmt.setInt(8, processTurnAroundTime);
							res = pstmt.executeUpdate();
							pstmt.close();

						} else {
							durationId = getMaxDurationId(con, procDefId, dbType);
							durationId++;
							pstmt = con.prepareStatement(" Insert Into WFDurationTable(ProcessDefId, DurationId, WFYears, WFMonths, WFDays, WFHours, WFMinutes, WFSeconds ) values (?, ?, ?, ?, ?, ?, ?, ?) ");

							pstmt.setInt(1, procDefId);
							pstmt.setInt(2, durationId);
							WFSUtil.DB_SetString(3, processTAT.getYears(), pstmt, dbType);
							WFSUtil.DB_SetString(4, processTAT.getMonths(), pstmt, dbType);
							WFSUtil.DB_SetString(5, processTAT.getDays(), pstmt, dbType);
							WFSUtil.DB_SetString(6, processTAT.getHours(), pstmt, dbType);
							WFSUtil.DB_SetString(7, processTAT.getMinutes(), pstmt, dbType);
							WFSUtil.DB_SetString(8, processTAT.getSeconds(), pstmt, dbType);

							res = pstmt.executeUpdate();
							pstmt.close();

							if (res <= 0) {
								throw new WFSException(WFSError.WM_INVALID_PROCESS_DEFINITION, 0, WFSError.WF_TMP, WFSErrorMsg.getMessage(WFSError.WM_INVALID_PROCESS_DEFINITION), WFSErrorMsg.getMessage(0));
							}
						}
						//Bugzilla bug 1752
						pstmt = con.prepareStatement("Update ProcessDefTable  Set tatCalFlag = ?" + (processTurnAroundTime == 0 ? ", ProcessTurnAroundTime = ? " : "") + ", lastModifiedOn = " + WFSUtil.getDate(dbType) + " where ProcessDefId = ?");
						WFSUtil.DB_SetString(1, processTATCalFlag, pstmt, dbType);
						if (processTurnAroundTime == 0) {
							pstmt.setInt(2, durationId);
							pstmt.setInt(3, procDefId);
						} else {
							pstmt.setInt(2, procDefId);
						}

						res = pstmt.executeUpdate();
						pstmt.close();
						if (res != 0) {
							/* Added by Varun Bhansaly on 06/12/2006 to provide support for calender feature */
							//Bug # 1716
							tempAddList.append("<ProcessTATime>" + processTAT.getXMLForHistory() + "</ProcessTATime>");	//Bugzilla Bug 5805
							tempAddList.append("<ProcessTATCalFlag>" + processTATCalFlag + "</ProcessTATCalFlag>");
							WFSUtil.genAdminLog(engine, con, WFSConstant.WFL_ProcessTATime, procDefId, 0, null, user.getid(), user.getname(), 0, tempAddList.toString(), null, null);
							lastModifiedTimeUpdated = true;
						} else {
							throw new WFSException(WFSError.WM_INVALID_PROCESS_DEFINITION, 0, WFSError.WF_TMP, WFSErrorMsg.getMessage(WFSError.WM_INVALID_PROCESS_DEFINITION), WFSErrorMsg.getMessage(0));
						}
					}
					//SrNo-6
					int noOfAct = parser.getNoOfFields("ActivityInfo");
					int start, end = 0;
					int addCnt = 0;
					/* Added by Varun Bhansaly on 06/12/2006 to provide support for calender feature */
					String tatCalFlag = "";
					tempAddList = new StringBuffer(100);
					tempAddList.append("<ProcessName>" + processName.trim() + "</ProcessName>");
					tempXml.append("<FailedList>");
					while (noOfAct-- > 0) {
						start = parser.getStartIndex("ActivityInfo", end, 0);
						end = parser.getEndIndex("ActivityInfo", start, 0);
						int actId = Integer.parseInt(parser.getValueOf("Id", start, end));
						tatCalFlag = parser.getValueOf("ActivityTATCalFlag", start, end); //Bugzilla Bug 1752
						/* Added by Varun Bhansaly on 06/12/2006 to provide support for calender feature */
						tatCalFlag = tatCalFlag.trim();
						if (tatCalFlag.equals("")) {
							tatCalFlag = "N";
						}

						String actTrnArnd = parser.getValueOf("TurnAround", start, end);
						WFDuration activityTAT = new WFDuration(actTrnArnd);

						String actName = "";
						int actTAT = 0;
						stmt = con.createStatement();
						//SrNo-6
						rs = stmt.executeQuery(" Select ActivityName , ActivityTurnAroundTime from activitytable " + WFSUtil.getTableLockHintStr(dbType)
								+ " where ActivityId = " + actId + " and ProcessDefId = " + procDefId
								+ WFSUtil.getQueryLockHintStr(dbType));
						if (rs.next()) {
							actName = rs.getString("ActivityName").trim();
							actTAT = rs.getInt("ActivityTurnAroundTime");
							if (rs.wasNull()) { //bugzilla bug 1752
								actTAT = -1;
							}
						} else
							throw new WFSException(WFSError.WF_OPERATION_FAILED, WFSError.WM_INVALID_ACTIVITY_DEFINITION, WFSError.WF_TMP, WFSErrorMsg.getMessage(WFSError.WF_OPERATION_FAILED), WFSErrorMsg.getMessage(WFSError.WM_INVALID_ACTIVITY_DEFINITION));
						if (rs != null)
							rs.close();
						stmt.close();
						//SrNo-6
						if ( (actTAT != 0) && (actTAT != -1)) { //Bugzilla Bug 1752
							pstmt = con.prepareStatement(" Update WFDurationTable Set WFYears = ? , WFMonths = ? , WFDays = ? , WFHours = ? , WFMinutes = ? , WFSeconds = ? where durationid = ? and processdefid = ? ");

							WFSUtil.DB_SetString(1, activityTAT.getYears(), pstmt, dbType);
							WFSUtil.DB_SetString(2, activityTAT.getMonths(), pstmt, dbType);
							WFSUtil.DB_SetString(3, activityTAT.getDays(), pstmt, dbType);
							WFSUtil.DB_SetString(4, activityTAT.getHours(), pstmt, dbType);
							WFSUtil.DB_SetString(5, activityTAT.getMinutes(), pstmt, dbType);
							WFSUtil.DB_SetString(6, activityTAT.getSeconds(), pstmt, dbType);
							pstmt.setInt(7, actTAT);
							pstmt.setInt(8, procDefId);
							res = pstmt.executeUpdate();
							pstmt.close();

							if (res <= 0) {
								tempXml.append(gen.writeValueOf("Id", String.valueOf(actId)));
							}
						} else {
							if (processTurnAroundTime != 0) {
								durationId = getMaxDurationId(con, procDefId, dbType);
							}
							durationId++;
							pstmt = con.prepareStatement(" Insert Into WFDurationTable(ProcessDefId, DurationId, WFYears, WFMonths, WFDays, WFHours, WFMinutes, WFSeconds ) values (?, ?, ?, ?, ?, ?, ?, ?) ");
							pstmt.setInt(1, procDefId);
							pstmt.setInt(2, durationId);
							WFSUtil.DB_SetString(3, activityTAT.getYears(), pstmt, dbType);
							WFSUtil.DB_SetString(4, activityTAT.getMonths(), pstmt, dbType);
							WFSUtil.DB_SetString(5, activityTAT.getDays(), pstmt, dbType);
							WFSUtil.DB_SetString(6, activityTAT.getHours(), pstmt, dbType);
							WFSUtil.DB_SetString(7, activityTAT.getMinutes(), pstmt, dbType);
							WFSUtil.DB_SetString(8, activityTAT.getSeconds(), pstmt, dbType);

							res = pstmt.executeUpdate();
							pstmt.close();

							if (res <= 0) {
								throw new WFSException(WFSError.WM_INVALID_PROCESS_DEFINITION, 0, WFSError.WF_TMP, WFSErrorMsg.getMessage(WFSError.WM_INVALID_PROCESS_DEFINITION), WFSErrorMsg.getMessage(0));
							}
						}

						int counter = 0;
						pstmt = con.prepareStatement(" Update ActivityTable  Set " + ( (actTAT != 0) && (actTAT != -1) ? "" : "ActivityTurnAroundTime = ?,") + " tatCalFlag = ? where ProcessDefId = ? and ActivityId = ?");
						//SrNo-6
						if (! ( (actTAT != 0) && (actTAT != -1))) {
							pstmt.setInt(++counter, durationId);
						}
						WFSUtil.DB_SetString(++counter, tatCalFlag, pstmt, dbType);
						pstmt.setInt(++counter, procDefId);
						pstmt.setInt(++counter, actId);

						res = pstmt.executeUpdate();
						pstmt.close();

						if (res >= 0) {
							if (addCnt++ == 0)
								tempAddList.append("<ActivityList>");
							tempAddList.append("<ActivityInfo>");
							tempAddList.append("<ActivityId>" + actId + "</ActivityId>");
							tempAddList.append("<ActivityName>" + actName + "</ActivityName>");
							tempAddList.append("<ActivityTATime>" + activityTAT.getXMLForHistory() + "</ActivityTATime>");	//Bugzilla Bug 5805
							/*for 7.0 , calendar feature
                                   /* Added by Varun Bhansaly on 08/12/2006 to provide support for calender feature */
							tempAddList.append("<ActivityTATCalFlag>" + tatCalFlag + "</ActivityTATCalFlag>");
							tempAddList.append("</ActivityInfo>");
						}

					}
					if (addCnt > 0) {
						tempAddList.append("</ActivityList>");
						WFSUtil.genAdminLog(engine, con, WFSConstant.WFL_ActivityTATime, procDefId, 0, null, user.getid(), user.getname(), 0, tempAddList.toString(), null, null);
						if (!lastModifiedTimeUpdated) {
							//query for updating lastmodifiedtime
							pstmt = con.prepareStatement("Update ProcessDefTable Set lastModifiedOn = " + WFSUtil.getDate(dbType) + " Where processDefId = ?");
							pstmt.setInt(1, procDefId);
							res = pstmt.executeUpdate();
							pstmt.close();
							lastModifiedTimeUpdated = true;
						}
					}
					tempXml.append("</FailedList>");
					WFTMSUtil.genRequestId(engine, con, WFSConstant.WFL_ProcessTATime, processName, "P", procDefId, actionComments, inputXML, user,procDefId);

					if (!con.getAutoCommit()) {
						con.commit();
						con.setAutoCommit(true);
					}
					//Update in cache of current Application Server
					if (lastModifiedTimeUpdated) {
						CachedObjectCollection.getReference().getCacheObject(con, engine, procDefId, WFSConstant.CACHE_CONST_WFDuration, "").setExpired(true);
					}
				}
			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if (mainCode == 0) {
				//outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WMSetTurnAroundTime"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(tempXml);
				outputXML.append(gen.closeOutputFile("WMSetTurnAroundTime"));
			}
		} catch (SQLException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0)
				if (e.getSQLState().equalsIgnoreCase("08S01"))
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
				else
					descr = e.getMessage();
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (WFSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = e.getMainErrorCode();
			subCode = e.getSubErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (JTSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		}  finally {
			try {
				if (!con.getAutoCommit()) {
					con.rollback();
					con.setAutoCommit(true);
				}
				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
			} catch (Exception e) {}
			try { //Bug WFS_6_004 - Statement closed in finally.
				if (stmt != null) {
					stmt.close();
					stmt = null;
				}
			} catch (Exception ignored) {}
			
		}
		if (mainCode != 0){
			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			outputXML.append(errorString);
	
		}
		return outputXML.toString();
	}

	//----------------------------------------------------------------------------------------------------
	//	Function Name 						:	WFGetProcessProperty
	//	Date Written (DD/MM/YYYY)			:	26/05/2002
	//	Author								:	Advid Parmar
	//	Input Parameters					:	Connection , XMLParser , XMLGenerator
	//	Output Parameters					:   none
	//	Return Values						:	String
	//	Description							:   Returns Property of Process specified
	//
	//----------------------------------------------------------------------------------------------------
	public String WFGetProcessProperty(Connection con, XMLParser parser,
			XMLGenerator gen) throws JTSException, WFSException {
		StringBuilder outputXML = new StringBuilder();
		PreparedStatement pstmt = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
		String engine = parser.getValueOf("EngineName");
		ResultSet rs = null;
		int dbType = ServerProperty.getReference().getDBType(engine);
		boolean debug = parser.getValueOf("DebugFlag", "N", true).equalsIgnoreCase("Y");
		String query = null;
		try {
			int sessionID = parser.getIntOf("SessionId", 0, false);
			char dataFlag = parser.getCharOf("DataFlag", 'N', true);
			int processdefid = parser.getIntOf("ProcessDefId", 0, false);
			String exeStr = "";
			int i = 0;
			WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
			int userID = 0;
			char pType = '\0';
			StringBuffer tempXml = new StringBuffer(100);
			if (user != null) {
				userID = user.getid();
				pType = user.gettype();
				Statement stmt = con.createStatement();
				String processName = null;
				rs = stmt.executeQuery(" Select ProcessName from ProcessDefTable " + WFSUtil.getTableLockHintStr(dbType)
						+ " where ProcessDefId = " + processdefid + WFSUtil.getQueryLockHintStr(dbType));
				if (rs.next()) {
					processName = rs.getString(1).trim();
					rs.close();
				} else {
					throw new WFSException(WFSError.WF_OPERATION_FAILED, WFSError.WM_INVALID_PROCESS_DEFINITION, WFSError.WF_TMP,
							WFSErrorMsg.getMessage(WFSError.WF_OPERATION_FAILED),
							WFSErrorMsg.getMessage(WFSError.WM_INVALID_PROCESS_DEFINITION));
				}
				if (stmt != null) {
					stmt.close();
					stmt = null;
				}
				StringBuffer tempStr = new StringBuffer(parser.toString());
				boolean rightsFlag = WFSUtil.checkRights(con, dbType, WFSConstant.CONST_OBJTYPE_PROCESS, processdefid, sessionID, WFSConstant.CONST_PROCESS_VIEW);
				parser.setInputXML(tempStr.toString());
				if (!rightsFlag) {
					mainCode = WFSError.WFS_NORIGHTS;
					subCode = WFSError.WM_SUCCESS;
					subject = WFSErrorMsg.getMessage(mainCode);
					errType = WFSError.WF_TMP;
				}
				if (mainCode == 0) {
					/////////removal of bug# 359
					//SrNo-6
					//Bug # 1716
					/*exeStr =
						" select  distinct processname,versionno, processstate, processturnaroundtime, processdeftable.TATCalFlag, "
						+ " activitytable.activityid, activitytable.activityname, "
						+ "	(select count(*) from queueview where queueview.processdefid=processdeftable.processdefid "
						+ " and queueview.activityid=activitytable.activityid) as NoofInstances  from  processdeftable, activitytable  "
						+ " where processdeftable.processdefid=activitytable.processdefid and processdeftable.processdefid= " + processdefid;*/
					
					exeStr =
						" select  distinct processname,versionno, processstate, processturnaroundtime, processdeftable.TATCalFlag, "
						+ " activitytable.activityid, activitytable.activityname, "
						+ "	(select count(*) from WFINSTRUMENTTABLE " + WFSUtil.getTableLockHintStr(dbType) + " where WFINSTRUMENTTABLE.processdefid=processdeftable.processdefid "
						+ " and WFINSTRUMENTTABLE.activityid=activitytable.activityid) as NoofInstances  from  processdeftable " + WFSUtil.getTableLockHintStr(dbType) + " , activitytable  " + WFSUtil.getTableLockHintStr(dbType)
						+ " where processdeftable.processdefid=activitytable.processdefid and processdeftable.processdefid= " + processdefid;
				
					/*	Changed By : Varun Bhansaly On 13/02/2007 for Bugzilla Id 54 to Provide Dirty Read Support for DB2 Database */
					pstmt = con.prepareStatement(exeStr + WFSUtil.getQueryLockHintStr(dbType));
					WFSUtil.jdbcExecute(null, sessionID, userID, exeStr, pstmt, null, debug, engine);			
					pstmt.execute();
					rs = pstmt.getResultSet();

					while (rs.next()) {
						if (i == 0) {
							tempXml.append(gen.writeValueOf("ProcessName", rs.getString(1)));
							tempXml.append(gen.writeValueOf("VersionNo", String.valueOf(rs.getFloat(2))));
							tempXml.append(gen.writeValueOf("ProcessState", rs.getString(3)));
							//SrNo-6
							//Bug # 1716
							int durationId = 0;
							durationId = rs.getInt("processturnaroundtime");
							if (durationId > 0) {
								HashMap map = (HashMap) CachedObjectCollection.getReference().getCacheObject(con, engine, processdefid, WFSConstant.CACHE_CONST_WFDuration, "").getData();
								WFDuration duration = (WFDuration) map.get(durationId + "");
								if (duration != null) {
									tempXml.append(gen.writeValueOf("ProcessTurnAroundTime", duration.toString()));
								}
							}
							tempXml.append(gen.writeValueOf("ProcessTATCalFlag", rs.getString(5))); // for calendar support
							tempXml.append("<ActivityList>");
						}
						tempXml.append("<ActivityInfo>");
						tempXml.append(gen.writeValueOf("ActivityId", String.valueOf(rs.getInt(6))));
						tempXml.append(gen.writeValueOf("ActivityName", rs.getString(7)));
						tempXml.append(gen.writeValueOf("NoofInstances", String.valueOf(rs.getInt(8))));
						tempXml.append("</ActivityInfo>");
						i++;
					}
					if (rs != null)
						rs.close();
					pstmt.close();

					tempXml.append("</ActivityList>");
					if (i == 0) {
						mainCode = WFSError.WM_NO_MORE_DATA;
						subCode = 0;
						subject = WFSErrorMsg.getMessage(mainCode);
						descr = WFSErrorMsg.getMessage(subCode);
						errType = WFSError.WF_TMP;
					}
				}
			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if (mainCode == 0) {
				//outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WFGetProcessProperty"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(tempXml);
				outputXML.append(gen.closeOutputFile("WFGetProcessProperty"));
			}
		} catch (SQLException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0) {
				if (e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
					+ ")";
				}
			} else {
				descr = e.getMessage();
			}
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (JTSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		}  finally {
			try {
				if (rs != null)
					rs.close();
				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
			} catch (Exception e) {}
			
		}
		if (mainCode != 0) {
			String errorString = WFSUtil.generalError("WFGetProcessProperty", engine, gen,mainCode, subCode,errType, subject,descr);
			outputXML.append(errorString);
		}
		return outputXML.toString();
	}

	//----------------------------------------------------------------------------------------------------
	//	Function Name 					:	WFGetProcessDefinition
	//	Date Written (DD/MM/YYYY)		:	26/05/2002
	//	Author							:	Advid Parmar
	//	Input Parameters				:	Connection , XMLParser , XMLGenerator
	//	Output Parameters				:   none
	//	Return Values					:	String
	//	Description						:   Returns Definiton details of Process
	//----------------------------------------------------------------------------------------------------
	public String WFGetProcessDefinition(Connection con, XMLParser parser,
			XMLGenerator gen) throws JTSException, WFSException {
		StringBuilder outputXML = new StringBuilder();
		PreparedStatement pstmt = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
		ResultSet rs1 = null;
                String engine = parser.getValueOf("EngineName");
		try {
			int sessionID = parser.getIntOf("SessionId", 0, false);
			char dataFlag = parser.getCharOf("DataFlag", 'N', true);
			int processdefid = parser.getIntOf("ProcessDefinitionId", 0, false);
			int activityid = parser.getIntOf("ActivityId", 0, true);
			String exeStr = "";
			String activitystr = "";
			
			int dbType = ServerProperty.getReference().getDBType(engine);
			int i = 0;

			WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
			int userID = 0;
			char pType = '\0';

			StringBuffer tempXml = new StringBuffer(100);
			if (user != null) {
				userID = user.getid();
				pType = user.gettype();

				Statement stmt = con.createStatement();
				String processName = null;
				rs1 = stmt.executeQuery("Select ProcessName from ProcessDefTable " + WFSUtil.getTableLockHintStr(dbType)
						+ " where ProcessDefId = " + processdefid + WFSUtil.getQueryLockHintStr(dbType));

				if (rs1.next()) {
					processName = rs1.getString(1).trim();
					rs1.close();
				} else {
					throw new WFSException(WFSError.WF_OPERATION_FAILED, WFSError.WM_INVALID_PROCESS_DEFINITION, WFSError.WF_TMP,
							WFSErrorMsg.getMessage(WFSError.WF_OPERATION_FAILED),
							WFSErrorMsg.getMessage(WFSError.WM_INVALID_PROCESS_DEFINITION));
				}
				if (stmt != null) {
					stmt.close();
					stmt = null;
				}

				StringBuffer tempStr = new StringBuffer(parser.toString());
				boolean rightsFlag = WFSUtil.checkRights(con, dbType, WFSConstant.CONST_OBJTYPE_PROCESS, processdefid, sessionID, WFSConstant.CONST_PROCESS_VIEW);
				parser.setInputXML(tempStr.toString());
				if (!rightsFlag) {
					mainCode = WFSError.WFS_NORIGHTS;
					subCode = WFSError.WM_SUCCESS;
					subject = WFSErrorMsg.getMessage(mainCode);
					errType = WFSError.WF_TMP;
				}

				if (mainCode == 0) {
					if (activityid != 0) {
						activitystr = " and acttable.activityid=" + activityid;

					}
					switch (dbType) {
					//SrNo-6
					// Tirupati Srivastava : changes made to make code compatible with postgreSQL
					//Bug # 1716
					case JTSConstant.JTS_DB2:
						exeStr = "select  distinct processname,versionno, regprefix, regsuffix, acttable.activityid,acttable.activityname, "
							+ " acttable.allowreassignment, acttable.activitytype,acttable.expiry, " + " (select count(*) from ruleconditiontable where ruleconditiontable.processdefid=processdeftable.processdefid and " + " ruleconditiontable.ruletype=" + WFSUtil.TO_STRING("E", true, dbType) + " and ruleconditiontable.activityid=acttable.activityid) as count1, " +
							" (select count(*) from ruleconditiontable where ruleconditiontable.processdefid=processdeftable.processdefid and ruleconditiontable.ruletype= " + WFSUtil.TO_STRING("X", true, dbType) + " and ruleconditiontable.activityid=acttable.activityid) as count2, " + " (select count(*) from streamdeftable where streamdeftable.processdefid=processdeftable.processdefid "
							+ " and streamdeftable.activityid=acttable.activityid) as count3, " + " ( select count(distinct(interfacetype)) from ActivityInterfaceAssocTable where ActivityInterfaceAssocTable.processdefid=processdeftable.processdefid and "
							+ " ActivityInterfaceAssocTable.activityid=acttable.activityid) as count4 "
							+ " from processdeftable LEFT OUTER JOIN activitytable as acttable "
							+ " on (processdeftable.processdefid=acttable.processdefid) "
							+ " where processdeftable.processdefid=" + processdefid + activitystr
							+ " order by processname "; //Bug # 1716
						break;
					default:
						exeStr = "select  distinct processname,versionno, regprefix, regsuffix, acttable.activityid,acttable.activityname, "
							+ " acttable.allowreassignment, acttable.activitytype,acttable.expiry, " + " (select count(*) from ruleconditiontable where ruleconditiontable.processdefid=processdeftable.processdefid and " + " ruleconditiontable.ruletype= " + WFSUtil.TO_STRING("E", true, dbType) + " and ruleconditiontable.activityid=acttable.activityid) as count1, " +
							" (select count(*) from ruleconditiontable where ruleconditiontable.processdefid=processdeftable.processdefid and ruleconditiontable.ruletype= " + WFSUtil.TO_STRING("X", true, dbType) + " and ruleconditiontable.activityid=acttable.activityid) as count2, " + " (select count(*) from streamdeftable where streamdeftable.processdefid=processdeftable.processdefid "
							+ " and streamdeftable.activityid=acttable.activityid) as count3, " + " ( select count(distinct(interfacetype)) from ActivityInterfaceAssocTable where ActivityInterfaceAssocTable.processdefid=processdeftable.processdefid and "
							+ " ActivityInterfaceAssocTable.activityid=acttable.activityid) as count4 "
							+ " from processdeftable "+ WFSUtil.getTableLockHintStr(dbType) +  " LEFT OUTER JOIN activitytable acttable "+ WFSUtil.getTableLockHintStr(dbType) +  " "
							+ " on (processdeftable.processdefid=acttable.processdefid) "
							+ " where processdeftable.processdefid=" + processdefid + activitystr
							+ " order by processname ";
					}
					pstmt = con.prepareStatement(exeStr);
					pstmt.execute();
					ResultSet rs = pstmt.getResultSet();

					while (rs.next()) {

						if (i == 0) {
							tempXml.append(gen.writeValueOf("ProcessName", rs.getString(1)));
							tempXml.append(gen.writeValueOf("VersionNo", rs.getString(2)));
							tempXml.append(gen.writeValueOf("RegisterationPrefix", rs.getString(3)));
							tempXml.append(gen.writeValueOf("RegisterationSuffix", rs.getString(4)));
							tempXml.append("<ActivityList>");
						}
						tempXml.append("<ActivityInfo>");
						tempXml.append(gen.writeValueOf("ActivityId", String.valueOf(rs.getInt(5))));
						tempXml.append(gen.writeValueOf("ActivityName", rs.getString(6)));
						tempXml.append(gen.writeValueOf("ReassignmentAllowed", rs.getString(7)));
						tempXml.append(gen.writeValueOf("ActivityType", rs.getString(8)));
						// --------------------------------------------------------------------------------------
						// Changed On  : 07/03/2005
						// Changed By  : Ruhi Hira
						// Description : SrNo-2, Omniflow 6.0, Feature: DynamicRuleModification,
						//					DataType for column Expiry changed.
						// --------------------------------------------------------------------------------------
						String durationIdStr = rs.getString(9);
						int durationId = 0;
						/** 17/01/2008, Bugzilla Bug 3488, expiry is String in database - Ruhi Hira */
						if (!rs.wasNull()&&!durationIdStr.equals("")) {
							durationId = Integer.parseInt(durationIdStr);
						}
						//                        int durationId = rs.getInt(9); /* Bugzilla Id 77, Check for null, 28/08/2006 - Ruhi Hira */
						//Bug # 1716
						if (durationId > 0) {
							HashMap map = (HashMap) CachedObjectCollection.getReference().getCacheObject(con, engine, processdefid, WFSConstant.CACHE_CONST_WFDuration, "").getData();
							WFDuration duration = (WFDuration) map.get(durationId + "");
							if (duration != null) {
								tempXml.append(gen.writeValueOf("ExpiryDuration", duration.toString()));
							}
						}
						tempXml.append(gen.writeValueOf("NoOfEntryRules", String.valueOf(rs.getInt(10))));
						tempXml.append(gen.writeValueOf("NoOfExitRules", String.valueOf(rs.getInt(11))));
						tempXml.append(gen.writeValueOf("NoOfStreams", String.valueOf(rs.getInt(12))));
						tempXml.append(gen.writeValueOf("NoOfInterfaces", String.valueOf(rs.getInt(13))));
						tempXml.append("</ActivityInfo>");
						i++;
					}
					if (rs != null)
						rs.close();
					pstmt.close();

					tempXml.append("</ActivityList>");
					if (i == 0) {
						mainCode = WFSError.WM_NO_MORE_DATA;
						subCode = 0;
						subject = WFSErrorMsg.getMessage(mainCode);
						descr = WFSErrorMsg.getMessage(subCode);
						errType = WFSError.WF_TMP;
					}
				}
			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if (mainCode == 0) {
			//	outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WFGetProcessDefinition"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(tempXml);
				outputXML.append(gen.closeOutputFile("WFGetProcessDefinition"));
			}
		} catch (SQLException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0) {
				if (e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
					+ ")";
				}
			} else {
				descr = e.getMessage();
			}
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (JTSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		}  finally {
			try {
				if (rs1 != null)
					rs1.close();
				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
			} catch (Exception e) {}
			
		}
		if (mainCode != 0) {
			String errorString = WFSUtil.generalError("WFGetProcessDefinition", engine, gen,mainCode, subCode,errType, subject,descr);
			outputXML.append(errorString);
		}
		return outputXML.toString();
	}

	//----------------------------------------------------------------------------------------------------
	//	Function Name 				:	WFGetProcessInfo
	//	Date Written (DD/MM/YYYY)		:	06/01/2004
	//	Author					:	Prashant Parashar
	//	Input Parameters			:	Connection , XMLParser , XMLGenerator
	//	Output Parameters			:       none
	//	Return Values				:	String
	//	Description				:       Returns Complete Definiton details of Process
	//----------------------------------------------------------------------------------------------------
	public String WFGetProcessInfo(Connection con, XMLParser parser,
			XMLGenerator gen) throws JTSException, WFSException {
		StringBuffer outputXML = new StringBuffer("");
		PreparedStatement pstmt = null;
		PreparedStatement pstmt3 = null;
		ResultSet rs3=null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
                String strEngine = parser.getValueOf("EngineName");
		char char21 = 21;
		String string21 = "" + char21;
		String externalGlobalFunction="";
		int count=0;
            String fProcessdefID;
            String forSystemMethods = "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,4001,4002";
            ArrayList<Integer> extMethodsList = new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 4001, 4002));
		try {
			int iSessionID = parser.getIntOf("SessionId", 0, true);
			int iProcessDefID = parser.getIntOf("ProcessDefinitionId", 0, false);
			
			int iDbType = ServerProperty.getReference().getDBType(strEngine);
			StringBuffer strBuffTempXML = new StringBuffer(1024 * 5);
			char omniServiceFlag = parser.getCharOf("OmniService", 'N', true);
			boolean isDocReq = parser.getValueOf("IsDocReq", "N", true).equalsIgnoreCase("Y");
			boolean dataFlag = parser.getValueOf("DataFlag", "Y", true).equalsIgnoreCase("Y");// by default return all the data
			WFDuration duration =null;
                        boolean extTableDataFlag = parser.getValueOf("ExtTableDataFlag", "N", true).equalsIgnoreCase("Y");
			/* 05/09/2007, SrNo-7, Synchronous routing of workitems - Ruhi Hira */
			WFParticipant objUser = null;
			if (omniServiceFlag == 'Y') {
				objUser = new WFParticipant(0, "System", 'P', "SERVER", Locale.getDefault().toString());
			} else {
				objUser = WFSUtil.WFCheckSession(con, iSessionID);
			}
			//            WFParticipant objUser = WFSUtil.WFCheckSession(con, iSessionID);

			if (objUser == null) {
				throw new WFSException(WFSError.WM_INVALID_SESSION_HANDLE, 0, WFSError.WF_TMP, WFSErrorMsg.getMessage(mainCode), WFSErrorMsg.getMessage(mainCode));
			}

			String exeStr = "";
			String activitystr = "";

			int iUserID = 0;
			char chParticipantType = '\0';
			int i = 0;

			iUserID = objUser.getid();
			chParticipantType = objUser.gettype();
			String processType=null;
			strBuffTempXML.append("\n<Process>\n");
			//get basic process details
			//SrNo-6
			//Bug # 1716
			/* 07/01/2008, Bugzilla Bug 3225, Nolock added to queries - Ruhi Hira */
			// Process Variant Support
			//Changes for Prdp Bug 56950 - Threshold Routing Count is introduced for the workitem to limit the indefinite routing of the workitem
			String strSQL = " SELECT ProcessDefId, VersionNo, ProcessName, ProcessState, RegPrefix, RegSuffix, " +
			" RegStartingNo, ProcessTurnAroundTime, RegSeqLength,ProcessType,ThresholdRoutingCount,OwnerEmailId FROM  processdeftable " + WFSUtil.getTableLockHintStr(iDbType) + " WHERE ProcessDefId = ?";
			
			pstmt = con.prepareStatement(strSQL);
			pstmt.setInt(1, iProcessDefID);
			pstmt.execute();
			ResultSet RS = pstmt.getResultSet();
			if (RS.next()) {
				
				int durationId = 0;
				//Bug # 1716
				durationId = RS.getInt("ProcessTurnAroundTime");
				if (durationId > 0) {
					HashMap map = (HashMap) CachedObjectCollection.getReference().getCacheObject(con, strEngine, iProcessDefID, WFSConstant.CACHE_CONST_WFDuration, "").getData();
					duration = (WFDuration) map.get(durationId + "");
				
				}
				processType=RS.getString("ProcessType");
				strBuffTempXML.append(gen.writeValueOf("ProcessDefId", RS.getString("ProcessDefId")));
				strBuffTempXML.append(gen.writeValueOf("VersionNo", RS.getString("VersionNo")));
				strBuffTempXML.append(gen.writeValueOf("ProcessName", RS.getString("ProcessName")));
				strBuffTempXML.append(gen.writeValueOf("ProcessState", RS.getString("ProcessState")));
				if(processType.equalsIgnoreCase("S")){
					strBuffTempXML.append(gen.writeValueOf("RegPrefix", RS.getString("RegPrefix")));
					strBuffTempXML.append(gen.writeValueOf("RegSuffix", RS.getString("RegSuffix")));
					strBuffTempXML.append(gen.writeValueOf("RegStartingNo", String.valueOf(RS.getInt("RegStartingNo"))));
					strBuffTempXML.append(gen.writeValueOf("RegSeqLength", String.valueOf(RS.getInt("RegSeqLength"))));
				//SrNo-6
				}else if(processType.equalsIgnoreCase("M")){
                    strBuffTempXML.append(gen.writeValueOf("RegSeqLength", String.valueOf(RS.getInt("RegSeqLength"))));
                }
				strBuffTempXML.append(gen.writeValueOf("ThresholdRoutingCount", String.valueOf(RS.getInt("ThresholdRoutingCount"))));
				strBuffTempXML.append(gen.writeValueOf("ProcessType",processType));
				String ownerEmailId = RS.getString("OwnerEmailId");
				if(ownerEmailId != null && !ownerEmailId.isEmpty()){
					strBuffTempXML.append("<OwnerEmailId>" + ownerEmailId + "</OwnerEmailId>");
				}else{
					strBuffTempXML.append("<OwnerEmailId></OwnerEmailId>");
				}
                                if (duration != null) {
					strBuffTempXML.append(gen.writeValueOf("ProcessTurnAroundTime", duration.toString()));
				}

			} else {
				throw new WFSException(WFSError.WM_INVALID_PROCESS_DEFINITION, 0, WFSError.WF_TMP, WFSErrorMsg.getMessage(mainCode), WFSErrorMsg.getMessage(mainCode));
			}
			if (RS != null) {
				RS.close();
				RS = null;
			}
			pstmt.close();
			pstmt = null; 
			
			
			if(dataFlag){
			// WFS_7.1_006
                            StringBuilder builder = new StringBuilder();
                            builder.append("<?xml version=\"1.0\"?><WFGetRoutingInfo_Input><Option>WFGetRoutingInfo</Option><SessionId>").append(iSessionID).append("</SessionId><EngineName>").append(strEngine).append("</EngineName></WFGetRoutingInfo_Input>");
                            XMLParser xParser = new XMLParser(builder.toString());
                            xParser.setInputXML(WFFindClass.getReference().execute("WFGetRoutingInfo", strEngine, con, xParser, gen));
                            if (xParser.getIntOf("MainCode", -1, true) == 0) {
                                strBuffTempXML.append(gen.writeValueOf("DMSSessionId", xParser.getValueOf("DMSSessionId", "", true)));
                            }
				strSQL = "Select CabinetName ,RouteFolderId ,ScratchFolderId ,WorkFlowFolderId ,CompletedFolderId , " +
				" DiscardFolderId  from ProcessDefTable a " + WFSUtil.getTableLockHintStr(iDbType) + " LEFT OUTER JOIN RouteFolderDefTable b " + WFSUtil.getTableLockHintStr(iDbType) + " ON a.ProcessDefId = b.ProcessDefId " +
				" where a.ProcessDefId = ? ";

				pstmt = con.prepareStatement(strSQL);
				pstmt.setInt(1, iProcessDefID);
				pstmt.execute();
				RS = pstmt.getResultSet();

				if (RS.next()) {
					strBuffTempXML.append("<ProcessFolders>");
					strBuffTempXML.append(gen.writeValueOf("CabinetName", RS.getString("CabinetName")));
					strBuffTempXML.append(gen.writeValueOf("RouteFolderId", RS.getString("RouteFolderId")));
					strBuffTempXML.append(gen.writeValueOf("ScratchFolderId", RS.getString("ScratchFolderId")));
					strBuffTempXML.append(gen.writeValueOf("WorkFlowFolderId", RS.getString("WorkFlowFolderId")));
					strBuffTempXML.append(gen.writeValueOf("CompletedFolderId", RS.getString("CompletedFolderId")));
					strBuffTempXML.append(gen.writeValueOf("DiscardFolderId", RS.getString("DiscardFolderId")));
					strBuffTempXML.append("</ProcessFolders>");
					strBuffTempXML.append("\n");
				}
				if (RS != null) {
					RS.close();
					RS = null;
				}
				pstmt.close();
				pstmt = null;

				//get extrenal tables
				//Process Variant Support
				strSQL = "Select DatabaseName ,DatabaseType ,UserId ,PWD ,TableName, ExtObjId, HostName, Service, Port ,HistoryTableName " +
				" FROM extdbconftable " + WFSUtil.getTableLockHintStr(iDbType) + " WHERE ProcessDefId = ? and ProcessVariantId=0 And ExtObjId = 1 ";

				pstmt = con.prepareStatement(strSQL);
				pstmt.setInt(1, iProcessDefID);
				pstmt.execute();
				RS = pstmt.getResultSet();

				strBuffTempXML.append("<ExternalTable>");

				if (RS.next()) {
					strBuffTempXML.append("\n");
					strBuffTempXML.append(gen.writeValueOf("DatabaseName", RS.getString("DatabaseName")));
					strBuffTempXML.append(gen.writeValueOf("DatabaseType", RS.getString("DatabaseType")));
					strBuffTempXML.append(gen.writeValueOf("UserId", RS.getString("UserId")));
					strBuffTempXML.append(gen.writeValueOf("Password", RS.getString("PWD")));
					String extTableName=RS.getString("TableName");
					strBuffTempXML.append(gen.writeValueOf("TableName", extTableName));
					
					//Checking external History Table
					String historyTableName=null;
					String query=null;
					if(iDbType == JTSConstant.JTS_MSSQL)
                    	query = "SELECT 1 FROM sysObjects WHERE NAME = '"+WFSUtil.TO_SANITIZE_STRING(extTableName, false)+"_History'";
                    else if(iDbType == JTSConstant.JTS_ORACLE)
                    	query = "select 1 from user_tables where upper(table_name) = Upper('"+WFSUtil.TO_SANITIZE_STRING(extTableName, false)+"_History')";
                    else if(iDbType == JTSConstant.JTS_POSTGRES)
                    	query = "select 1 from pg_class where upper(relname)=  Upper('"+WFSUtil.TO_SANITIZE_STRING(extTableName, false)+"_History')";
					
					pstmt3 = con.prepareStatement(query);
                    rs3 = pstmt3.executeQuery();
                    if(rs3 != null && rs3.next()){
                    	historyTableName = extTableName + "_History";
                    }else{
                    	historyTableName=RS.getString("HistoryTableName");
                    	if(historyTableName!=null){
                    		historyTableName=historyTableName.trim();
                    	}
                    }
                    if (rs3!= null) {
                    	rs3.close();
                    	rs3 = null;
    				}
                    if (pstmt3!= null) {
                    	pstmt3.close();
                    	pstmt3 = null;
    				}
					
					strBuffTempXML.append(gen.writeValueOf("HistoryTableName", historyTableName));
					strBuffTempXML.append(gen.writeValueOf("ExtObjId", RS.getString("ExtObjId")));
					strBuffTempXML.append(gen.writeValueOf("HostName", RS.getString("HostName")));
					strBuffTempXML.append(gen.writeValueOf("Service", RS.getString("Service")));
					strBuffTempXML.append(gen.writeValueOf("Port", RS.getString("Port")));
					strBuffTempXML.append("\n");
				}
				if (RS != null) {
					RS.close();
					RS = null;
				}
				pstmt.close();
				pstmt = null;

				//get recordmappings
				strSQL = "Select Rec1, Rec2, Rec3, Rec4, Rec5 " +
				" FROM recordmappingtable " + WFSUtil.getTableLockHintStr(iDbType) + " WHERE ProcessDefId = ? ";

				pstmt = con.prepareStatement(strSQL);
				pstmt.setInt(1, iProcessDefID);
				pstmt.execute();
				RS = pstmt.getResultSet();

				if (RS.next()) {
					strBuffTempXML.append(gen.writeValueOf("Rec1", RS.getString("Rec1")));
					strBuffTempXML.append(gen.writeValueOf("Rec2", RS.getString("Rec2")));
					strBuffTempXML.append(gen.writeValueOf("Rec3", RS.getString("Rec3")));
					strBuffTempXML.append(gen.writeValueOf("Rec4", RS.getString("Rec4")));
					strBuffTempXML.append(gen.writeValueOf("Rec5", RS.getString("Rec5")));
					strBuffTempXML.append("\n");
				}
				if (RS != null) {
					RS.close();
					RS = null;
				}
				pstmt.close();
				pstmt = null;
				strBuffTempXML.append("</ExternalTable>");
			}
			//get varmappings
			/*SrNo-13*/
			//Process Variant Support
			strSQL = "Select SystemDefinedName, UserDefinedName, VariableType, VariableScope, ExtObjId, DefaultValue, VariableId, Unbounded,VariableLength " +
			" FROM varmappingtable " + WFSUtil.getTableLockHintStr(iDbType) + " WHERE ProcessDefId = ? and ProcessVariantId=0";

			pstmt = con.prepareStatement(strSQL);
			pstmt.setInt(1, iProcessDefID);
			pstmt.execute();
			RS = pstmt.getResultSet();

			strBuffTempXML.append("\n<VariableMappings>");
			while (RS.next()) {
				strBuffTempXML.append("\n<VariableMapping>\n");
				strBuffTempXML.append(gen.writeValueOf("SystemDefinedName", RS.getString("SystemDefinedName")));
				strBuffTempXML.append(gen.writeValueOf("UserDefinedName", RS.getString("UserDefinedName")));
				strBuffTempXML.append(gen.writeValueOf("VariableType", RS.getString("VariableType")));
				strBuffTempXML.append(gen.writeValueOf("VariableScope", RS.getString("VariableScope")));
				strBuffTempXML.append(gen.writeValueOf("ExtObjId", RS.getString("ExtObjId")));
				strBuffTempXML.append(gen.writeValueOf("DefaultValue", RS.getString("DefaultValue")));
				strBuffTempXML.append(gen.writeValueOf("VariableId", RS.getString("VariableId"))); /*SrNo-13*/
				strBuffTempXML.append(gen.writeValueOf("Unbounded", RS.getString("Unbounded"))); /*SrNo-13*/
                                strBuffTempXML.append(gen.writeValueOf("FieldLength", RS.getString("VariableLength"))); 
				strBuffTempXML.append("\n</VariableMapping>");
			}

			strBuffTempXML.append("\n</VariableMappings>\n");
			if (RS != null) {
				RS.close();
				RS = null;
			}
			pstmt.close();
			pstmt = null;
                        
			if(dataFlag){
			/*SrNo-13*/
			//get data from typedeftable
			//Process Variant Support
			strSQL = "SELECT ParentTypeId, TypeFieldId, FieldName, WFType, TypeId, Unbounded FROM WFTypeDefTable "
				+ WFSUtil.getTableLockHintStr(iDbType) + " WHERE ProcessDefId = ? and ProcessVariantId=0 ORDER BY ParentTypeId, TypeFieldId ";
			pstmt = con.prepareStatement(strSQL);
			pstmt.setInt(1,iProcessDefID);
			pstmt.execute();
			RS = pstmt.getResultSet();
			strBuffTempXML.append("\n<UserDefinedTypeInfo>");
			while(RS.next()){
				strBuffTempXML.append("\n<UserDefinedType>\n");
				strBuffTempXML.append(gen.writeValueOf("ParentTypeId", RS.getString("ParentTypeId")));
				strBuffTempXML.append(gen.writeValueOf("TypeFieldId", RS.getString("TypeFieldId")));
				strBuffTempXML.append(gen.writeValueOf("FieldName", RS.getString("FieldName")));
				strBuffTempXML.append(gen.writeValueOf("WFType", RS.getString("WFType")));
				strBuffTempXML.append(gen.writeValueOf("TypeId", RS.getString("TypeId")));
				strBuffTempXML.append(gen.writeValueOf("Unbounded", RS.getString("Unbounded")));    
				strBuffTempXML.append("\n</UserDefinedType>");
			}
			strBuffTempXML.append("\n</UserDefinedTypeInfo>\n");
			if (RS != null) {
				RS.close();
				RS = null;
			}
			pstmt.close();
			pstmt = null;

			//get data from udtvarmappingtable
			//Process Variant Support
			strSQL = "SELECT VariableId, VarFieldId, TypeId, TypeFieldId, ParentVarFieldId FROM "
				+ " WFUDTVarMappingTable "+ WFSUtil.getTableLockHintStr(iDbType)+" WHERE ProcessDefId = ? and ProcessVariantId=0 ORDER BY VariableId, VarFieldId";
			pstmt = con.prepareStatement(strSQL);
			pstmt.setInt(1,iProcessDefID);
			pstmt.execute();
			RS = pstmt.getResultSet();
			strBuffTempXML.append("\n<UserDefinedVarInfo>");
			while(RS.next()){
				strBuffTempXML.append("\n<UserDefinedVar>\n");
				strBuffTempXML.append(gen.writeValueOf("VariableId", RS.getString("VariableId")));
				strBuffTempXML.append(gen.writeValueOf("VarFieldId", RS.getString("VarFieldId")));
				strBuffTempXML.append(gen.writeValueOf("TypeId", RS.getString("TypeId")));
				strBuffTempXML.append(gen.writeValueOf("TypeFieldId", RS.getString("TypeFieldId")));
				strBuffTempXML.append(gen.writeValueOf("ParentVarFieldId", RS.getString("ParentVarFieldId")));
				strBuffTempXML.append("\n</UserDefinedVar>");
			}
			strBuffTempXML.append("\n</UserDefinedVarInfo>\n");
			if (RS != null) {
				RS.close();
				RS = null;
			}
			pstmt.close();
			pstmt = null;


			//get exceptions
			strSQL = "Select ExceptionId, ExceptionName, Description " +
			" FROM exceptiondeftable " + WFSUtil.getTableLockHintStr(iDbType) + " WHERE ProcessDefId = ? order by ExceptionId";

			pstmt = con.prepareStatement(strSQL);
			pstmt.setInt(1, iProcessDefID);
			pstmt.execute();
			RS = pstmt.getResultSet();

			strBuffTempXML.append("\n<Exceptions>");
			while (RS.next()) {
				strBuffTempXML.append("\n<Exception>\n");
				strBuffTempXML.append(gen.writeValueOf("ExceptionId", RS.getString("ExceptionId")));
				strBuffTempXML.append(gen.writeValueOf("ExceptionName", RS.getString("ExceptionName")));
				strBuffTempXML.append(gen.writeValueOf("Description", RS.getString("Description")));
				strBuffTempXML.append("\n</Exception>");
			}

			strBuffTempXML.append("\n</Exceptions>\n");
			if (RS != null) {
				RS.close();
				RS = null;
			}
			pstmt.close();
			pstmt = null;

			//get Triggers Now
			Vector vectTriggers = new Vector();

			strSQL = "Select TriggerId, TriggerName, TriggerType, TriggerTypeName, Description" +
			" FROM triggerdeftable " + WFSUtil.getTableLockHintStr(iDbType) + " WHERE ProcessDefId = ? order by triggerId ";

			pstmt = con.prepareStatement(strSQL);
			pstmt.setInt(1, iProcessDefID);
			pstmt.execute();
			RS = pstmt.getResultSet();

			while (RS.next()) {
				trigger trig = new trigger();
				trig.iTriggerId = RS.getInt("TriggerId");
				trig.strTriggerName = RS.getString("TriggerName");
				trig.strTriggerType = RS.getString("TriggerType");
				trig.strTriggerTypeName = RS.getString("TriggerTypeName");
				trig.strDescription = RS.getString("Description");
				//        trig.strAssociatedTAId = RS.getString("AssociatedTAId");
				vectTriggers.add(trig);
			}
			if (RS != null) {
				RS.close();
				RS = null;
			}
			pstmt.close();
			pstmt = null;

			//now get trigger definitions and create XML for them
			strBuffTempXML.append("\n<Triggers>\n");

			for (int iCount = 0; iCount < vectTriggers.size(); ++iCount) {
				trigger trig = (trigger) vectTriggers.get(iCount);

				strBuffTempXML.append("\n<Trigger>\n");
				strBuffTempXML.append(gen.writeValueOf("TriggerId", String.valueOf(trig.iTriggerId)));
				strBuffTempXML.append(gen.writeValueOf("TriggerName", trig.strTriggerName));
				strBuffTempXML.append(gen.writeValueOf("TriggerType", trig.strTriggerType));
				strBuffTempXML.append(gen.writeValueOf("TriggerTypeName", trig.strTriggerTypeName));
				strBuffTempXML.append(gen.writeValueOf("Description", trig.strDescription));
				strBuffTempXML.append(gen.writeValueOf("AssociatedTAId", trig.strAssociatedTAId));
				strBuffTempXML.append("\n<Definition>\n");
				/*Changed by : Shilpi S
				 *Changed On: 07/08/2008
				 *Changed For: Complex Data type support in Mail Trigger*/
				if (trig.strTriggerType.trim().equalsIgnoreCase("M")) { //Mail
					strSQL = "Select Subject, FromUser, VariableIdFrom, VarFieldIdFrom, FromUserType, ExtObjIdFromUser, ToUser, VariableIdTo, VarFieldIdTo, ToType, ExtObjIdTo, CCUser, VariableIdCC, VarFieldIdCC, " +
					" CCType, ExtObjIdCC, Message, BCCUser, VariableIdBCC, VarFieldIdBCC, BCCType, ExtObjIdBCC, MailPriority, VariableIdMailPriority, VarFieldIdMailPriority, MailPriorityType, ExtObjIdMailPriority FROM mailtriggertable " + WFSUtil.getTableLockHintStr(iDbType) + " WHERE processDefId = ? AND TriggerId = ? ";

					pstmt = con.prepareStatement(strSQL);
					pstmt.setInt(1, iProcessDefID);
					pstmt.setInt(2, trig.iTriggerId);
					pstmt.execute();
					RS = pstmt.getResultSet();
					if (RS.next()) {
						strBuffTempXML.append(gen.writeValueOf("Subject", RS.getString("Subject")));
						strBuffTempXML.append(gen.writeValueOf("FromUser", RS.getString("FromUser")));
						strBuffTempXML.append(gen.writeValueOf("VariableIdFrom", String.valueOf(RS.getInt("VariableIdFrom"))));
						strBuffTempXML.append(gen.writeValueOf("VarFieldIdFrom", String.valueOf(RS.getInt("VarFieldIdFrom"))));
						strBuffTempXML.append(gen.writeValueOf("FromUserType", RS.getString("FromUserType")));
						strBuffTempXML.append(gen.writeValueOf("ExtObjIdFromUser", RS.getString("ExtObjIdFromUser")));
						strBuffTempXML.append(gen.writeValueOf("ToUser", RS.getString("ToUser")));
						strBuffTempXML.append(gen.writeValueOf("VariableIdTo", String.valueOf(RS.getInt("VariableIdTo"))));
						strBuffTempXML.append(gen.writeValueOf("VarFieldIdTo", String.valueOf(RS.getInt("VarFieldIdTo"))));
						strBuffTempXML.append(gen.writeValueOf("ToType", RS.getString("ToType")));
						strBuffTempXML.append(gen.writeValueOf("ExtObjIdTo", RS.getString("ExtObjIdTo")));
						strBuffTempXML.append(gen.writeValueOf("CCUser", RS.getString("CCUser")));
						strBuffTempXML.append(gen.writeValueOf("VariableIdCC", String.valueOf(RS.getInt("VariableIdCC"))));
						strBuffTempXML.append(gen.writeValueOf("VarFieldIdCC", String.valueOf(RS.getInt("VarFieldIdCC"))));
						strBuffTempXML.append(gen.writeValueOf("CCType", RS.getString("CCType")));
						strBuffTempXML.append(gen.writeValueOf("ExtObjIdCC", RS.getString("ExtObjIdCC")));
						strBuffTempXML.append(gen.writeValueOf("BCCUser", RS.getString("BCCUser")));
						strBuffTempXML.append(gen.writeValueOf("VariableIdBCC", String.valueOf(RS.getInt("VariableIdBCC"))));
						strBuffTempXML.append(gen.writeValueOf("VarFieldIdBCC", String.valueOf(RS.getInt("VarFieldIdBCC"))));
						strBuffTempXML.append(gen.writeValueOf("BCCType", RS.getString("BCCType")));
						strBuffTempXML.append(gen.writeValueOf("ExtObjIdBCC", RS.getString("ExtObjIdBCC")));
						strBuffTempXML.append(gen.writeValueOf("MailPriority", RS.getString("MailPriority")));
                        strBuffTempXML.append(gen.writeValueOf("VariableIdMailPriority", String.valueOf(RS.getInt("VariableIdMailPriority"))));
                        strBuffTempXML.append(gen.writeValueOf("VarFieldIdMailPriority", String.valueOf(RS.getInt("VarFieldIdMailPriority"))));
                        strBuffTempXML.append(gen.writeValueOf("MailPriorityType", RS.getString("MailPriorityType")));
                        strBuffTempXML.append(gen.writeValueOf("ExtObjIdMailPriority", RS.getString("ExtObjIdMailPriority")));

						//----------------------------------------------------------------------------
						// Changed By						: Ruhi Hira
						// Reason / Cause (Bug No if Any)	:
						// Change Description				: DataBase specific changes made for reading mailMessage
						//									  as mailMessage type in mssql is text
						//									  but in Oracle it is long .....
						//----------------------------------------------------------------------------

						strBuffTempXML.append("<Message>");
						//Coded for generalizing the code for all database servers.
						Object obj[] = WFSUtil.getBIGData(con, RS, "Message", iDbType, null);
						strBuffTempXML.append(obj[0]);
						strBuffTempXML.append("</Message>");
					}
					if (RS != null) {
						RS.close();
						RS = null;
					}
					pstmt.close();
					pstmt = null;
				} //end if mailtrig

				else if (trig.strTriggerType.trim().equalsIgnoreCase("D")) { //Data entry
					strSQL = "Select VariableName, Type, ExtObjId " +
					" FROM dataentrytriggertable " + WFSUtil.getTableLockHintStr(iDbType) + " WHERE processDefId = ? AND TriggerId = ? ";

					pstmt = con.prepareStatement(strSQL);
					pstmt.setInt(1, iProcessDefID);
					pstmt.setInt(2, trig.iTriggerId);
					pstmt.execute();
					RS = pstmt.getResultSet();
					if (RS.next()) {
						strBuffTempXML.append(gen.writeValueOf("VariableName", RS.getString("VariableName")));
						strBuffTempXML.append(gen.writeValueOf("Type", RS.getString("Type")));
						strBuffTempXML.append(gen.writeValueOf("ExtObjId", RS.getString("ExtObjId")));
					}
					if (RS != null) {
						RS.close();
						RS = null;
					}
					pstmt.close();
					pstmt = null;
				} //end if Dataentry trig
				/*Bug # 6982*/    
				else if (trig.strTriggerType.trim().equalsIgnoreCase("S") || trig.strTriggerType.trim().equalsIgnoreCase("C")) { //Set Data and Create Workitem
					if(trig.strTriggerType.trim().equalsIgnoreCase("C")){
						strSQL = "select WorkstepName, VariableId, VarFieldId, Type, GenerateSameParent "
							+ " from WFCreateChildWITable " + WFSUtil.getTableLockHintStr(iDbType) + " where processdefid = ? and triggerId = ? ";
						pstmt = con.prepareStatement(strSQL);
						pstmt.setInt(1, iProcessDefID);
						pstmt.setInt(2, trig.iTriggerId);
						pstmt.execute();
						RS = pstmt.getResultSet();
						strBuffTempXML.append("\n<CreateChildWIActivities>\n");
						while (RS.next()) {
							strBuffTempXML.append("\n<Activity>\n");
							strBuffTempXML.append(gen.writeValueOf("ActivityName", RS.getString("WorkstepName")));
							strBuffTempXML.append(gen.writeValueOf("VariableId", RS.getString("VariableId")));
							strBuffTempXML.append(gen.writeValueOf("VarFieldId", RS.getString("VarFieldId")));
							strBuffTempXML.append(gen.writeValueOf("VariableType", RS.getString("Type")));
							strBuffTempXML.append(gen.writeValueOf("GenerateSameParent", RS.getString("GenerateSameParent")));
							strBuffTempXML.append("\n</Activity>\n");
						}
						strBuffTempXML.append("\n</CreateChildWIActivities>\n");
						if (RS != null) {
							RS.close();
							RS = null;
						}
						pstmt.close();
						pstmt = null;						
					}
					strSQL = "Select Param1, Type1, ExtObjId1, VariableId_1, VarFieldId_1, Param2, Type2, ExtObjId2, VariableId_2, VarFieldId_2 " +
					" FROM datasettriggertable " + WFSUtil.getTableLockHintStr(iDbType) + " WHERE processDefId = ? AND TriggerId = ? ";

					pstmt = con.prepareStatement(strSQL);
					pstmt.setInt(1, iProcessDefID);
					pstmt.setInt(2, trig.iTriggerId);
					pstmt.execute();
					RS = pstmt.getResultSet();
					strBuffTempXML.append("\n<Attributes>\n");
					while (RS.next()) {
						strBuffTempXML.append("\n<Attribute>\n");
						strBuffTempXML.append(gen.writeValueOf("Param1", RS.getString("Param1")));
						strBuffTempXML.append(gen.writeValueOf("Type1", RS.getString("Type1")));
						strBuffTempXML.append(gen.writeValueOf("ExtObjId1", RS.getString("ExtObjId1")));
						strBuffTempXML.append(gen.writeValueOf("VariableId_1", RS.getString("VariableId_1")));
						strBuffTempXML.append(gen.writeValueOf("VarFieldId_1", RS.getString("VarFieldId_1")));
						strBuffTempXML.append(gen.writeValueOf("Param2", RS.getString("Param2")));
						strBuffTempXML.append(gen.writeValueOf("Type2", RS.getString("Type2")));
						strBuffTempXML.append(gen.writeValueOf("ExtObjId2", RS.getString("ExtObjId2")));
						strBuffTempXML.append(gen.writeValueOf("VariableId_2", RS.getString("VariableId_2")));
						strBuffTempXML.append(gen.writeValueOf("VarFieldId_2", RS.getString("VarFieldId_2")));
						strBuffTempXML.append("\n</Attribute>\n");
					}
					strBuffTempXML.append("\n</Attributes>\n");
					if (RS != null) {
						RS.close();
						RS = null;
					}
					pstmt.close();
					pstmt = null;
				} //end if set Data trig

				else if (trig.strTriggerType.trim().equalsIgnoreCase("X")) { //Exception
					strSQL = "Select ExceptionName, Attribute, RaiseViewComment, ExceptionId " +
					" FROM exceptiontriggertable " + WFSUtil.getTableLockHintStr(iDbType) + " WHERE processDefId = ? AND TriggerId = ? ";

					pstmt = con.prepareStatement(strSQL);
					pstmt.setInt(1, iProcessDefID);
					pstmt.setInt(2, trig.iTriggerId);
					pstmt.execute();
					RS = pstmt.getResultSet();
					if (RS.next()) {
						strBuffTempXML.append(gen.writeValueOf("ExceptionName", RS.getString("ExceptionName")));
						strBuffTempXML.append(gen.writeValueOf("Attribute", RS.getString("Attribute")));
						strBuffTempXML.append(gen.writeValueOf("RaiseViewComment", RS.getString("RaiseViewComment")));
						strBuffTempXML.append(gen.writeValueOf("ExceptionId", RS.getString("ExceptionId")));
					}
					if (RS != null) {
						RS.close();
						RS = null;
					}
					pstmt.close();
					pstmt = null;
				} //end Exception trig

				else if (trig.strTriggerType.trim().equalsIgnoreCase("E")) { //Execute App
					strSQL = "Select FunctionName, ArgList, HttpPath " +
					" FROM executetriggertable " + WFSUtil.getTableLockHintStr(iDbType) + " WHERE processDefId = ? AND TriggerId = ? ";

					pstmt = con.prepareStatement(strSQL);
					pstmt.setInt(1, iProcessDefID);
					pstmt.setInt(2, trig.iTriggerId);
					pstmt.execute();
					RS = pstmt.getResultSet();
					if (RS.next()) {
						strBuffTempXML.append(gen.writeValueOf("FunctionName", RS.getString("FunctionName")));
						strBuffTempXML.append(gen.writeValueOf("ArgList", RS.getString("ArgList")));
						strBuffTempXML.append(gen.writeValueOf("HttpPath", RS.getString("HttpPath")));
					}
					if (RS != null) {
						RS.close();
						RS = null;
					}
					pstmt.close();
					pstmt = null;
				} //end execute trig

				else if (trig.strTriggerType.trim().equalsIgnoreCase("G")) { //generate response
					strSQL = "Select FileName, ApplicationName, ArgList, GenDocType, format "
						+ " FROM generateresponsetable " + WFSUtil.getTableLockHintStr(iDbType) + ", TemplateDefinitionTable "  + WFSUtil.getTableLockHintStr(iDbType)
						+ " WHERE TemplateDefinitionTable.ProcessDefId = GenerateResponseTable.ProcessDefId and FileName = TemplateFileName "
						+  " AND TemplateDefinitionTable.processDefId = ? AND TriggerId = ? ";        
					pstmt = con.prepareStatement(strSQL);
					pstmt.setInt(1, iProcessDefID);
					pstmt.setInt(2, trig.iTriggerId);
					pstmt.execute();
					RS = pstmt.getResultSet();
					if (RS.next()) {
						strBuffTempXML.append(gen.writeValueOf("FileName", RS.getString("FileName")));
						strBuffTempXML.append(gen.writeValueOf("ApplicationName", RS.getString("ApplicationName")));
						strBuffTempXML.append(gen.writeValueOf("ArgList", RS.getString("ArgList")));
						strBuffTempXML.append(gen.writeValueOf("GenDocType", RS.getString("GenDocType")));
						strBuffTempXML.append(gen.writeValueOf("Format", RS.getString("format")));
					}
					if (RS != null) {
						RS.close();
						RS = null;
					}
					pstmt.close();
					pstmt = null;
				} //end generateresponse trig

				else if (trig.strTriggerType.trim().equalsIgnoreCase("L")) { //LaunchApp
					strSQL = "Select ApplicationName, ArgList " +
					" FROM launchapptriggertable " + WFSUtil.getTableLockHintStr(iDbType) + " WHERE processDefId = ? AND TriggerId = ? ";

					pstmt = con.prepareStatement(strSQL);
					pstmt.setInt(1, iProcessDefID);
					pstmt.setInt(2, trig.iTriggerId);
					pstmt.execute();
					RS = pstmt.getResultSet();
					if (RS.next()) {
						strBuffTempXML.append(gen.writeValueOf("ApplicationName", RS.getString("ApplicationName")));
						strBuffTempXML.append(gen.writeValueOf("ArgList", RS.getString("ArgList")));
					}
					if (RS != null) {
						RS.close();
						RS = null;
					}
					pstmt.close();
					pstmt = null;
				} //end LaunchApp trig

				else if (trig.strTriggerType.trim().equalsIgnoreCase("U")) { //custom
					strSQL = "Select ClassName, ExecutableClass, HttpPath " +
					" FROM triggerTypeDefTable " + WFSUtil.getTableLockHintStr(iDbType) + " WHERE processDefId = ? AND TypeName = ?";

					pstmt = con.prepareStatement(strSQL);
					pstmt.setInt(1, iProcessDefID);
					WFSUtil.DB_SetString(2, trig.strTriggerTypeName.trim(), pstmt, iDbType);
					pstmt.execute();
					RS = pstmt.getResultSet();
					if (RS.next()) {
						// --------------------------------------------------------------------------------------
						// Changed On  : 24/02/2005
						// Changed By  : Ruhi Hira
						// Description : SrNo-5, Column TypeName not selected in query.
						// --------------------------------------------------------------------------------------
						strBuffTempXML.append(gen.writeValueOf("ClassName", RS.getString("ClassName")));
						strBuffTempXML.append(gen.writeValueOf("ExecutableClass", RS.getString("ExecutableClass")));
						strBuffTempXML.append(gen.writeValueOf("HttpPath", RS.getString("HttpPath")));

						RS.close();
						RS = null;
						pstmt.close();
						pstmt = null;
					}

				} //end custom definition

				strBuffTempXML.append("\n</Definition>\n");
				strBuffTempXML.append("\n</Trigger>\n");
			} //end for elements of vector

			strBuffTempXML.append("\n</Triggers>\n");
			}
			//end of trigger definition---------------------------------------------
			//Get Activities
			/**
			 * Changed On  : 14/05/2007
			 * Changed By  : Ruhi Hira
			 * Description : Bugzilla Bug 690, delete on collect configuration
			 */
			strBuffTempXML.append("\n<Activities>\n");
			strSQL = "Select ActivityId, BlockId, ActivityType, ActivityName, Description, NeverExpireFlag, Expiry, ExpiryActivity, " +
			" TargetActivity, AllowReassignment, CollectNoOfInstances, PrimaryActivity, ExpireOnPrimaryFlag, TriggerId, " +
			" HoldExecutable, HoldTillVariable, ExtObjId, MainClientInterface, ServerInterface, " +
			" WebclientInterface, ActivityTurnAroundTime, AppExecutionFlag, AppExecutionValue, ExpiryOperator, TATCalFlag, ExpCalFlag, " +
			" DeleteOnCollect, associatedActivityId, activitysubtype FROM ActivityTable " + WFSUtil.getTableLockHintStr(iDbType) + " WHERE processDefId = ?  order By ActivityId";
			pstmt = con.prepareStatement(strSQL);
			pstmt.setInt(1, iProcessDefID);
			pstmt.execute();
			RS = pstmt.getResultSet();
			Vector vectList = new Vector();
			//Bug # 1716
			int expDurationId = 0;
			int actTATDurationId = 0;
                        int actSubType = 0;
			while (RS.next()) {
				Activity actv = new Activity();
				actv.iActivityId = RS.getInt("ActivityId");
				actv.iBlockId = RS.getInt("BlockId");
				actv.iActivityType = RS.getInt("ActivityType");
				actv.strActivityName = RS.getString("ActivityName");
				actv.strDescription = RS.getString("Description");
				actv.strNeverExpireFlag = RS.getString("NeverExpireFlag");
				// --------------------------------------------------------------------------------------
				// Changed On  : 07/03/2005
				// Changed By  : Ruhi Hira
				// Description : SrNo-2, Omniflow 6.0, Feature: DynamicRuleModification,
				//					DataType for column Expiry changed.
				// --------------------------------------------------------------------------------------
				//actv.strExpiry = RS.getString("Expiry");  //SrNo-6
				//Bug # 1716
				String strExpiry = RS.getString("Expiry");
				try {
					expDurationId = Integer.parseInt(strExpiry);
				} catch (NumberFormatException nexp) {
					expDurationId = 0;
				}
				HashMap map = (HashMap) CachedObjectCollection.getReference().getCacheObject(con, strEngine, iProcessDefID, WFSConstant.CACHE_CONST_WFDuration, "").getData();
				if (expDurationId > 0) {
					duration = (WFDuration) map.get(expDurationId + "");
					actv.expiryDuration = duration;
				} else {
					actv.expiryDuration = null;
				}
				actTATDurationId = RS.getInt("ActivityTurnAroundTime");
				if (actTATDurationId > 0) {
					duration = (WFDuration) map.get(actTATDurationId + "");
					actv.actTATDuration = duration;
				} else {
					actv.actTATDuration = null;
				}

				actv.strExpiryActivity = RS.getString("ExpiryActivity");
				actv.iTargetActivity = RS.getInt("TargetActivity");
				actv.strAllowReassignment = RS.getString("AllowReassignment");
				actv.iCollectNoOfInstances = RS.getInt("CollectNoOfInstances");
				actv.strPrimaryActivity = RS.getString("PrimaryActivity");
				actv.strExpireOnPrimaryFlag = RS.getString("ExpireOnPrimaryFlag");
				actv.iTriggerId = RS.getInt("TriggerId");
				actv.strHoldExecutable = RS.getString("HoldExecutable");
				actv.strHoldTillVariable = RS.getString("HoldTillVariable");
				actv.iExtObjId = RS.getInt("ExtObjId");
				actv.strMainClientInterface = RS.getString("MainClientInterface");
				actv.strServerInterface = RS.getString("ServerInterface");
				actv.strWebclientInterface = RS.getString("WebclientInterface");
				actv.strAppExecutionFlag = RS.getString("AppExecutionFlag");
				actv.strAppExecutionValue = RS.getString("AppExecutionValue");
				actv.iExpiryOperator = RS.getInt("ExpiryOperator");
				/* CalFlag returned - Bugzilla Bug 936, 24/05/2007 - Ruhi Hira */
				actv.tatCalFlag = RS.getString("TATCalFlag");
				actv.expCalFlag = RS.getString("ExpCalFlag");
				actv.deleteOnCollectFlag = RS.getString("DeleteOnCollect");
				actv.associatedActivityId = RS.getInt("associatedActivityId");
                                actSubType = RS.getInt("activitysubtype");

				vectList.add(actv);
			}
			if (RS != null) {
				RS.close();
				RS = null;
			}
			pstmt.close();
			pstmt = null;

			for (int iCount = 0; iCount < vectList.size(); ++iCount) {
				Activity actv = (Activity) vectList.get(iCount);

				strBuffTempXML.append("\n<Activity>\n");
				strBuffTempXML.append(gen.writeValueOf("ActivityId", String.valueOf(actv.iActivityId)));
				strBuffTempXML.append(gen.writeValueOf("BlockId", String.valueOf(actv.iBlockId)));
				strBuffTempXML.append(gen.writeValueOf("ActivityType", String.valueOf(actv.iActivityType)));
				strBuffTempXML.append(gen.writeValueOf("ActivityName", actv.strActivityName));
				strBuffTempXML.append(gen.writeValueOf("Description", actv.strDescription));
				strBuffTempXML.append(gen.writeValueOf("NeverExpireFlag", actv.strNeverExpireFlag));
				// --------------------------------------------------------------------------------------
				// Changed On  : 07/03/2005
				// Changed By  : Ruhi Hira
				// Description : SrNo-2, Omniflow 6.0, Feature: DynamicRuleModification,
				//					DataType for column Expiry changed.
				// --------------------------------------------------------------------------------------
				//SrNo-6
				//Bug # 1716
				if (actv.expiryDuration != null) {
					strBuffTempXML.append(gen.writeValueOf("ExpiryDuration", actv.expiryDuration.toString()));
				}
				strBuffTempXML.append(gen.writeValueOf("ExpiryActivity", actv.strExpiryActivity));
				strBuffTempXML.append(gen.writeValueOf("TargetActivity", String.valueOf(actv.iTargetActivity)));
				strBuffTempXML.append(gen.writeValueOf("AllowReassignment", actv.strAllowReassignment));
				strBuffTempXML.append(gen.writeValueOf("CollectNoOfInstances", String.valueOf(actv.iCollectNoOfInstances)));
				strBuffTempXML.append(gen.writeValueOf("PrimaryActivity", actv.strPrimaryActivity));
				// --------------------------------------------------------------------------------------
				// Changed On  : 24/02/2005
				// Changed By  : Ruhi Hira
				// Description : SrNo-1, Omniflow 6.0, Feature: MultipleIntroduction, Tag
				//					DefaultWorkIntroduction returned for default introduction workstep.
				// --------------------------------------------------------------------------------------
				if (actv.iActivityType == WFSConstant.ACT_INTRODUCTION
						&& actv.strPrimaryActivity != null
						&& actv.strPrimaryActivity.trim().equalsIgnoreCase("Y")) {
					strBuffTempXML.append(gen.writeValueOf("DefaultWorkIntroduction", "Y"));
				}
				strBuffTempXML.append(gen.writeValueOf("ExpireOnPrimaryFlag", actv.strExpireOnPrimaryFlag));
				strBuffTempXML.append(gen.writeValueOf("TriggerId", String.valueOf(actv.iTriggerId)));
				strBuffTempXML.append(gen.writeValueOf("HoldExecutable", actv.strHoldExecutable));
				strBuffTempXML.append(gen.writeValueOf("HoldTillVariable", actv.strHoldTillVariable));
				strBuffTempXML.append(gen.writeValueOf("ExtObjId", String.valueOf(actv.iExtObjId)));
				strBuffTempXML.append(gen.writeValueOf("MainClientInterface", actv.strMainClientInterface));
				strBuffTempXML.append(gen.writeValueOf("ServerInterface", actv.strServerInterface));
				strBuffTempXML.append(gen.writeValueOf("WebclientInterface", actv.strWebclientInterface));
				//SrNo-6
				//Bug # 1716
				if (actv.actTATDuration != null) {
					strBuffTempXML.append(gen.writeValueOf("ActivityTurnAroundTime", actv.actTATDuration.toString()));
				}

				strBuffTempXML.append(gen.writeValueOf("AppExecutionFlag", actv.strAppExecutionFlag));
				strBuffTempXML.append(gen.writeValueOf("AppExecutionValue", actv.strAppExecutionValue));
				strBuffTempXML.append(gen.writeValueOf("ExpiryOperator", String.valueOf(actv.iExpiryOperator)));
				strBuffTempXML.append(gen.writeValueOf("ActivityTatCalFlag", String.valueOf(actv.tatCalFlag)));
				strBuffTempXML.append(gen.writeValueOf("ExpCalFlag", String.valueOf(actv.expCalFlag)));
				strBuffTempXML.append(gen.writeValueOf("DeleteOnCollectFlag", String.valueOf(actv.deleteOnCollectFlag)));
				strBuffTempXML.append(gen.writeValueOf("AssociatedActivityId", String.valueOf(actv.associatedActivityId)));
                                strBuffTempXML.append(gen.writeValueOf("ActivitySubType", String.valueOf(actSubType)));
				
                                strSQL = "Select StreamId FROM StreamDefTable " + WFSUtil.getTableLockHintStr(iDbType) + " WHERE processDefId = ?  AND ActivityId = ? AND StreamName='Default'";
				pstmt = con.prepareStatement(strSQL);
				pstmt.setInt(1, iProcessDefID);
				pstmt.setInt(2, actv.iActivityId);
				pstmt.execute();
				RS = pstmt.getResultSet();

				if (RS.next()) {
					strBuffTempXML.append(gen.writeValueOf("DefaultStream", RS.getString(1)));
				}
				if (RS != null) {
					RS.close();
					RS = null;
				}
				pstmt.close();
				pstmt = null;
				// --------------------------------------------------------------------------------------
				// Changed On  : 24/02/2005
				// Changed By  : Ruhi Hira
				// Description : SrNo-4, Omniflow 6.0, Feature: ConditionalDistribute,
				//					Code commented for querying DistributeActivityTable, as not required.
				// --------------------------------------------------------------------------------------
				//Subprocess or work-exit
				if(dataFlag){
				if (actv.iActivityType == 18 || actv.iActivityType == 2) {

					//get from ImportedProcessDeftable
					strSQL = "Select ImportedProcessName, ImportedFieldName, FieldDataType, FieldType, VariableId, VarFieldId, DisplayName " +
					" FROM ImportedProcessDeftable " + WFSUtil.getTableLockHintStr(iDbType) +
					" WHERE processDefId = ?  AND ActivityId = ? "; /*SrNo-17*/
					pstmt = con.prepareStatement(strSQL);
					pstmt.setInt(1, iProcessDefID);
					pstmt.setInt(2, actv.iActivityId);
					pstmt.execute();
					RS = pstmt.getResultSet();

					strBuffTempXML.append("\n<SubProcessData>\n");
					strBuffTempXML.append("\n<ImportedProcessDefData>\n");

					while (RS.next()) {
						/*SrNo-17*/
						strBuffTempXML.append("\n<ImportedProcessDefinition>\n");
						strBuffTempXML.append(gen.writeValueOf("ImportedProcessName", RS.getString("ImportedProcessName")));
						strBuffTempXML.append(gen.writeValueOf("ImportedFieldName", RS.getString("ImportedFieldName")));
						strBuffTempXML.append(gen.writeValueOf("FieldDataType", RS.getString("FieldDataType")));
						strBuffTempXML.append(gen.writeValueOf("FieldType", RS.getString("FieldType")));
						strBuffTempXML.append(gen.writeValueOf("VariableId", RS.getString("VariableId")));
						strBuffTempXML.append(gen.writeValueOf("VarFieldId", RS.getString("VarFieldId")));
						strBuffTempXML.append(gen.writeValueOf("DisplayName", RS.getString("DisplayName")));
						strBuffTempXML.append("\n</ImportedProcessDefinition>\n");
					}
					strBuffTempXML.append("\n</ImportedProcessDefData>\n");

					//get InitiateWorkitemDefTable
					strBuffTempXML.append("\n<InitiateWorkitemData>\n");
					strSQL = "Select ImportedProcessName, ImportedFieldName, MappedFieldName, FieldType, MapType, ImportedVariableId, ImportedVarFieldId, MappedVariableId, MappedVarFieldId, DisplayName " +
					" FROM InitiateWorkitemDefTable " + WFSUtil.getTableLockHintStr(iDbType) +
					" WHERE processDefId = ?  AND ActivityId = ? "; /*SrNo-17*/
					pstmt = con.prepareStatement(strSQL);
					pstmt.setInt(1, iProcessDefID);
					pstmt.setInt(2, actv.iActivityId);
					pstmt.execute();
					RS = pstmt.getResultSet();
					while (RS.next()) {
						strBuffTempXML.append("\n<InitiateProcessDefinition>\n");
						strBuffTempXML.append(gen.writeValueOf("ImportedProcessName", RS.getString("ImportedProcessName")));
						strBuffTempXML.append(gen.writeValueOf("ImportedFieldName", RS.getString("ImportedFieldName")));
						strBuffTempXML.append(gen.writeValueOf("MappedFieldName", RS.getString("MappedFieldName")));
						strBuffTempXML.append(gen.writeValueOf("FieldType", RS.getString("FieldType")));
						strBuffTempXML.append(gen.writeValueOf("MapType", RS.getString("MapType")));
						/*SrNo-17*/
						strBuffTempXML.append(gen.writeValueOf("ImportedVariableId", RS.getString("ImportedVariableId")));
						strBuffTempXML.append(gen.writeValueOf("ImportedVarFieldId", RS.getString("ImportedVarFieldId")));
						strBuffTempXML.append(gen.writeValueOf("MappedVariableId", RS.getString("MappedVariableId")));
						strBuffTempXML.append(gen.writeValueOf("MappedVarFieldId", RS.getString("MappedVarFieldId")));
						strBuffTempXML.append(gen.writeValueOf("DisplayName", RS.getString("DisplayName")));
						strBuffTempXML.append("\n</InitiateProcessDefinition>\n");
					}
					strBuffTempXML.append("\n</InitiateWorkitemData>\n");
					strBuffTempXML.append("\n</SubProcessData>\n");
					if (RS != null) {
						RS.close();
						RS = null;
					}
					pstmt.close();
					pstmt = null;
				} //end if subprocess or work-exit
				//SrNo-11
				if (actv.iActivityType == WFSConstant.ACT_EXPORT) {
					strSQL = "SELECT TableName FROM WFExportTable " + WFSUtil.getTableLockHintStr(iDbType) + " Where ProcessDefID = ? AND ActivityID = ? ";
					pstmt = con.prepareStatement(strSQL);
					pstmt.setInt(1, iProcessDefID);
					pstmt.setInt(2, actv.iActivityId);
					pstmt.execute();
					RS = pstmt.getResultSet();
					strBuffTempXML.append("\n<ExportData>\n");
					if (RS.next()) {
						strBuffTempXML.append(gen.writeValueOf("TableName",
								RS.getString("TableName")));
					}
					if (RS != null) {
						RS.close();
						RS = null;
					}
					if (pstmt != null) {
						pstmt.close();
						pstmt = null;
					}
					//WFS_8.0_105
					strSQL = " SELECT FieldName, MappedFieldName, DocTypeDefId ,VariableId, VarFieldId,ExtMethodIndex,OrderId, ExportAllDocs" +
					" FROM WFDataMapTable " + WFSUtil.getTableLockHintStr(iDbType) + " " +
					" WHERE ProcessDefID = ? AND ActivityID = ?  ORDER BY OrderId ";
					pstmt = con.prepareStatement(strSQL);
					pstmt.setInt(1, iProcessDefID);
					pstmt.setInt(2, actv.iActivityId);
					pstmt.execute();
					RS = pstmt.getResultSet();
					while (RS.next()) {
						strBuffTempXML.append("\n<FieldMapping>\n");
						strBuffTempXML.append(gen.writeValueOf("FieldName",RS.getString("FieldName")));
						strBuffTempXML.append(gen.writeValueOf("MappedFieldName",RS.getString("MappedFieldName")));
						strBuffTempXML.append(gen.writeValueOf("VariableId",String.valueOf(RS.getInt("VariableId"))));
						strBuffTempXML.append(gen.writeValueOf("VarFieldId",String.valueOf(RS.getInt("VarFieldId"))));
						strBuffTempXML.append(gen.writeValueOf("DocTypeDefId",String.valueOf(RS.getInt("DocTypeDefId"))));
						//WFS_8.0_105
						strBuffTempXML.append(gen.writeValueOf("ExtMethodIndex",String.valueOf(RS.getInt("ExtMethodIndex"))));
						strBuffTempXML.append(gen.writeValueOf("RuleID",String.valueOf(RS.getInt("OrderId"))));
						strBuffTempXML.append(gen.writeValueOf("ExportAllDocs",RS.getString("ExportAllDocs")));
						strBuffTempXML.append("\n</FieldMapping>\n");
					}
					strBuffTempXML.append("\n</ExportData>\n");
					if (RS != null) {
						RS.close();
						RS = null;
					}
					if (pstmt != null) {
						pstmt.close();
						pstmt = null;
					}
				}

				//get rule conditions
				//WFS_8.0_104
				strSQL = "Select RuleType, RuleOrderId, RuleId, ConditionOrderId, Param1, Type1, " +
				" ExtObjId1, VariableId_1, VarFieldId_1, Param2, Type2, ExtObjId2, VariableId_2, VarFieldId_2, Operator, LogicalOp " +
				" FROM ruleconditiontable " + WFSUtil.getTableLockHintStr(iDbType) +
				" WHERE ProcessDefId = ?  AND ActivityId = ? " +
				" order by RuleType,RuleOrderID,RuleID,ConditionOrderID ASC"; //order by is important for creating correct XML

				pstmt = con.prepareStatement(strSQL);
				pstmt.setInt(1, iProcessDefID);
				pstmt.setInt(2, actv.iActivityId);
				pstmt.execute();
				RS = pstmt.getResultSet();

				Vector vectRuleList = new Vector();
				int iVectPosition = 0;

				while (RS.next()) {
					RuleCondition rule = new RuleCondition();
					rule.strRuleType = RS.getString("RuleType");
					rule.iRuleOrderId = RS.getInt("RuleOrderId");
					rule.iRuleId = RS.getInt("RuleId");
					rule.iConditionOrderId = RS.getInt("ConditionOrderId");
					rule.strParam1 = RS.getString("Param1");
					rule.strType1 = RS.getString("Type1");
					rule.iExtObjId1 = RS.getInt("ExtObjId1");
					rule.strVariableId_1 = RS.getString("VariableId_1");
					rule.strVarFieldId_1 = RS.getString("VarFieldId_1");
					rule.strParam2 = RS.getString("Param2");
					rule.strType2 = RS.getString("Type2");
					rule.iExtObjId2 = RS.getInt("ExtObjId2");
					rule.strVariableId_2 = RS.getString("VariableId_2");
					rule.strVarFieldId_2 = RS.getString("VarFieldId_2");
					rule.strOperator = RS.getString("Operator");
					rule.strLogicalOp = RS.getString("LogicalOp");
					vectRuleList.add(iVectPosition++, rule);
				}
				
				if (RS != null) {
					RS.close();
					RS = null;
				}
				pstmt.close();
				pstmt = null;

				int iPrevRuleId = -1;
				String strPrevRuleType = "";

				for (int iCount_1 = 0; iCount_1 < vectRuleList.size(); ++iCount_1) {
					RuleCondition rule = (RuleCondition) vectRuleList.get(iCount_1);
					if (rule.iRuleId != iPrevRuleId || !rule.strRuleType.equalsIgnoreCase(strPrevRuleType)) {
						if (iCount_1 == 0) {
							strBuffTempXML.append("\n<Rules>\n");
						} else {
							strBuffTempXML.append("\n</Conditions>\n");
							strBuffTempXML.append("\n</Rule>\n");
						}
						strBuffTempXML.append("\n<Rule>\n");

						strBuffTempXML.append("<Operations>\n");

						if (rule.strRuleType.trim().equalsIgnoreCase("S")) {
							strBuffTempXML.append("\n<Operation>\n");
							strBuffTempXML.append(gen.writeValueOf("OperationType", "STREAM"));
							strBuffTempXML.append(gen.writeValueOf("StreamId", String.valueOf(rule.iRuleId)));
							strBuffTempXML.append("\n</Operation>\n");
						} else { // end if stream rule
							//----------------------------------------------------------------------------
							// Changed By					 : Shilpi Srivastava
							// Reason / Cause (Bug No if Any): Calendar Support
							// Change Description			 : Query on ruleoperationtable modified for calendar support,
							//                                 a new column RuleCalFlag is added in select
							//----------------------------------------------------------------------------
							/*Changed By: Shilpi Srivastava
                             Changed On: 5th May 2008
                             Changed For: SrNo-12*/
							/*SrNo-13*/
							strSQL =
								"Select RuleType, RuleId, OperationType, Param1, Type1, ExtObjId1, VariableId_1, VarFieldId_1, " +
								" Param2, Type2, ExtObjId2, VariableId_2, VarFieldId_2, Param3, Type3, ExtObjId3, VariableId_3, VarFieldId_3, Operator, OperationOrderId, CommentFlag, RuleCalFlag ,FunctionType" +
								" FROM ruleoperationtable " + WFSUtil.getTableLockHintStr(iDbType) + " WHERE processDefId = ?  AND ActivityId = ? AND RuleId = ? AND RuleType =? ORDER BY OperationOrderId";
							pstmt = con.prepareStatement(strSQL);
							pstmt.setInt(1, iProcessDefID);
							pstmt.setInt(2, actv.iActivityId);
							pstmt.setInt(3, rule.iRuleId);
							WFSUtil.DB_SetString(4, rule.strRuleType, pstmt, iDbType);
							//Bug # 1716
							pstmt.execute();
							RS = pstmt.getResultSet();
							while (RS.next()) {
								strBuffTempXML.append("\n<Operation>\n");
								strBuffTempXML.append(gen.writeValueOf("RuleType", RS.getString("RuleType")));
								strBuffTempXML.append(gen.writeValueOf("RuleId", RS.getString("RuleId")));
								int operationType = RS.getInt("OperationType"); /* Bug # 3887 */
								strBuffTempXML.append(gen.writeValueOf("OperationType", RS.getString("OperationType")));
								strBuffTempXML.append(gen.writeValueOf("Param1", RS.getString("Param1")));
								strBuffTempXML.append(gen.writeValueOf("Type1", RS.getString("Type1")));
								strBuffTempXML.append(gen.writeValueOf("VariableId_1", RS.getString("VariableId_1")));
								strBuffTempXML.append(gen.writeValueOf("VarFieldId_1", RS.getString("VarFieldId_1")));
								strBuffTempXML.append(gen.writeValueOf("ExtObjId1", RS.getString("ExtObjId1")));
								strBuffTempXML.append(gen.writeValueOf("Param2", RS.getString("Param2")));
								strBuffTempXML.append(gen.writeValueOf("Type2", RS.getString("Type2")));
								strBuffTempXML.append(gen.writeValueOf("ExtObjId2", RS.getString("ExtObjId2")));
								strBuffTempXML.append(gen.writeValueOf("VariableId_2", RS.getString("VariableId_2")));
								strBuffTempXML.append(gen.writeValueOf("VarFieldId_2", RS.getString("VarFieldId_2")));

								String type3 = RS.getString("Type3");
								String param3 = RS.getString("Param3");
								/*Bug # 3887*/
                                                                //Reminder operationtype introduced in Hold Funcitonality like escalatetowithtrigger with Frequency to send notificaiton to 
                                                                //the user unless and untill the frequency count reaches zero.
								if ( (operationType == 24 || operationType == 26||operationType ==39) && param3 != null && type3 != null && !param3.equalsIgnoreCase("") && !type3.equalsIgnoreCase("")) { /* For Escalation*/ /*Bug 39079 */
									strBuffTempXML.append("<Param3>");
									param3 = param3.trim();
									int start1 = param3.indexOf("<Expression>");
									int durationID = -1;
									if (start1 >= 0) { /*it is expression , fetch durationid from it*/
										int end1 = param3.indexOf("</Expression>");
										int start2 = param3.indexOf("<Mode>");
										int end2 = param3.indexOf("</Mode>");
										String dId = param3.substring(start1 + 12, end1);
										durationID = Integer.parseInt(dId);
										String strMode = param3.substring(start2 + 6, end2);
										strBuffTempXML.append(gen.writeValueOf("Mode", strMode));
                                                                                strBuffTempXML.append("<RepeatEscalation>");
                                                                                if (param3.indexOf("<Repeat>") > 0) {
                                                                                    strBuffTempXML.append(param3.substring(param3.indexOf("<Repeat>"), param3.indexOf("</Repeat>") + 9));
									} else {
                                                                                    strBuffTempXML.append("<Repeat>N</Repeat>");
                                                                                }
                                                                                if (param3.indexOf("<Minutes>") > 0) {
                                                                                    strBuffTempXML.append(param3.substring(param3.indexOf("<Minutes>"), param3.indexOf("</Minutes>") + 10));
                                                                                } else {
                                                                                    strBuffTempXML.append("<Minutes>0</Minutes>");
                                                                                }
                                                                                strBuffTempXML.append("</RepeatEscalation>");
                                                                        } else {
										/*it was constant, so it is durationid*/
										durationID = Integer.parseInt(param3);
									}
                                                                        //To be processed for Reminder type operation
                                                                        if(operationType==39){
                                                                           int start3 = param3.indexOf("<Frequency>");
                                                                           int end3 = param3.indexOf("</Frequency>");
                                                                           String strFrequency = param3.substring(start3 + 11, end3); 
                                                                           strBuffTempXML.append(gen.writeValueOf("Frequency", strFrequency));
                                                                        }
									if (durationID > 0) {
										HashMap map = (HashMap) CachedObjectCollection.getReference().getCacheObject(con, strEngine, iProcessDefID, WFSConstant.CACHE_CONST_WFDuration, "").getData();
										duration = (WFDuration) map.get(durationID + "");
										if (duration != null) {
											strBuffTempXML.append(gen.writeValueOf("EscalationDuration", duration.toString()));
										}
									}
									strBuffTempXML.append("</Param3>");
								} else {
									strBuffTempXML.append(gen.writeValueOf("Param3", RS.getString("Param3")));
								}
								strBuffTempXML.append(gen.writeValueOf("Type3", RS.getString("Type3")));
								strBuffTempXML.append(gen.writeValueOf("ExtObjId3", RS.getString("ExtObjId3")));
								strBuffTempXML.append(gen.writeValueOf("VariableId_3", RS.getString("VariableId_3")));
								strBuffTempXML.append(gen.writeValueOf("VarFieldId_3", RS.getString("VarFieldId_3")));
								strBuffTempXML.append(gen.writeValueOf("Operator", RS.getString("Operator")));
								strBuffTempXML.append(gen.writeValueOf("OperationOrderId", RS.getString("OperationOrderId")));
								strBuffTempXML.append(gen.writeValueOf("CommentFlag", RS.getString("CommentFlag")));
								//chaged by shilpi for calendar support
								strBuffTempXML.append(gen.writeValueOf("RuleCalFlag", RS.getString("RuleCalFlag")));		
								strBuffTempXML.append(gen.writeValueOf("FunctionType", RS.getString("FunctionType")));
								strBuffTempXML.append("\n</Operation>");
								
								if(operationType==23||operationType==22){
									String functionType=RS.getString("FunctionType");
									String param="";
									if(operationType==22){
										param=RS.getString("Param1");
									}else{
										param=RS.getString("Param2");
									}
									try{
										int extId=Integer.parseInt(param);
										if("G".equalsIgnoreCase(functionType)||(extId>=WFSConstant.EXTERNAL_METHOD_START_INDEX&&extId<=WFSConstant.EXTERNAL_METHOD_END_INDEX)){
											if(count==0){
												externalGlobalFunction=param;
											}else{
												externalGlobalFunction=externalGlobalFunction+","+param;
											}
											count++;
										}
									}catch(Exception e){
										WFSUtil.printErr(strEngine, e);
									}
									
								}
							}
							if (RS != null) {						 // bug # 4159
								RS.close();
								RS = null;
							}
							if (pstmt != null) {
								pstmt.close();
								pstmt = null;
							}
						} //end else -- rules other than stream
						strBuffTempXML.append("\n</Operations>\n");
						strBuffTempXML.append("<Conditions>\n");
					}
					strBuffTempXML.append("<Condition>\n");
					strBuffTempXML.append(gen.writeValueOf("RuleType", rule.strRuleType));
					strBuffTempXML.append(gen.writeValueOf("RuleOrderId", String.valueOf(rule.iRuleOrderId)));
					strBuffTempXML.append(gen.writeValueOf("RuleId", String.valueOf(rule.iRuleId)));
					strBuffTempXML.append(gen.writeValueOf("ConditionOrderId", String.valueOf(rule.iConditionOrderId)));
					strBuffTempXML.append(gen.writeValueOf("Param1", rule.strParam1));
					strBuffTempXML.append(gen.writeValueOf("Type1", rule.strType1));
					strBuffTempXML.append(gen.writeValueOf("ExtObjId1", String.valueOf(rule.iExtObjId1)));
					strBuffTempXML.append(gen.writeValueOf("VariableId_1", rule.strVariableId_1));
					strBuffTempXML.append(gen.writeValueOf("VarFieldId_1", rule.strVarFieldId_1));

					strBuffTempXML.append(gen.writeValueOf("Param2", rule.strParam2));
					strBuffTempXML.append(gen.writeValueOf("Type2", rule.strType2));
					strBuffTempXML.append(gen.writeValueOf("ExtObjId2", String.valueOf(rule.iExtObjId2)));
					strBuffTempXML.append(gen.writeValueOf("VariableId_2", rule.strVariableId_2));
					strBuffTempXML.append(gen.writeValueOf("VarFieldId_2", rule.strVarFieldId_2));

					strBuffTempXML.append(gen.writeValueOf("Operator", rule.strOperator));
					strBuffTempXML.append(gen.writeValueOf("LogicalOp", rule.strLogicalOp));
					strBuffTempXML.append("\n</Condition>\n");
					iPrevRuleId = rule.iRuleId;
					strPrevRuleType = rule.strRuleType;
				}
				if (iPrevRuleId > 0) {
					strBuffTempXML.append("\n</Conditions>\n");
					strBuffTempXML.append("\n</Rule>\n");
					strBuffTempXML.append("\n</Rules>\n");
				}
				}
				strBuffTempXML.append("\n</Activity>\n");
			} //end for all activities in vector
			strBuffTempXML.append("\n</Activities>\n");

			// --------------------------------------------------------------------------------------
			// Changed On  : 28/11/2008
			// Changed By  : Shilpi Srivastava
			// Description : SrNo-19,  web service invocation from process server
			// --------------------------------------------------------------------------------------
			if(dataFlag){
			String forGlobalMethods = "( ";
			String forLocalMethods = "( ";
			ArrayList webServiceMethodIndexes = new ArrayList();
			boolean globalMethodFound = false;
			boolean localMethodFound = false;
			if(externalGlobalFunction!=null&&externalGlobalFunction.length()>0){
				forGlobalMethods=forGlobalMethods+externalGlobalFunction;
				globalMethodFound=true;
			}
			pstmt = con.prepareStatement("SELECT ActivityId, ExtMethodIndex, ProxyEnabled, TimeOutInterval, InvocationType, FunctionType, InputBuffer, OutputBuffer , OrderId " 
					+ " FROM WFWebServiceTable WHERE ProcessDefID = ?");
			pstmt.setInt(1, iProcessDefID);
			RS = pstmt.executeQuery();
			strBuffTempXML.append("<WebServiceActivityData>");
			if (RS != null) {
				while (RS.next()) {
					strBuffTempXML.append("<WebServiceActivityInfo>");
					int activityId = RS.getInt("ActivityId");
					int extMethodIndex = RS.getInt("ExtMethodIndex");
					strBuffTempXML.append(gen.writeValueOf("ActivityId", String.valueOf(activityId)));
					strBuffTempXML.append(gen.writeValueOf("ExtMethodIndex", String.valueOf(extMethodIndex)));
					strBuffTempXML.append(gen.writeValueOf("ProxyEnabled", RS.getString("ProxyEnabled")));
					strBuffTempXML.append(gen.writeValueOf("TimeOutInterval", RS.getString("TimeOutInterval")));
					strBuffTempXML.append(gen.writeValueOf("InvocationType", RS.getString("InvocationType")));
					String strFunctionType = RS.getString("FunctionType");      //  BugZilla ID 11012
					strBuffTempXML.append(gen.writeValueOf("FunctionType", strFunctionType));
					strBuffTempXML.append(gen.writeValueOf("OrderId", RS.getString("OrderId")));
					strBuffTempXML.append("<InputBuffer>");
					Object[] result = WFSUtil.getBIGData(con, RS, "InputBuffer", iDbType, DatabaseTransactionServer.charSet);
					strBuffTempXML.append((String) result[0]);
					strBuffTempXML.append("</InputBuffer>");

					strBuffTempXML.append("<OutputBuffer>");                    
					result = WFSUtil.getBIGData(con, RS, "OutputBuffer", iDbType, DatabaseTransactionServer.charSet);
					strBuffTempXML.append((String) result[0]);
					strBuffTempXML.append("</OutputBuffer>");                    

					char functionType = strFunctionType.charAt(0);
					if(functionType == 'G'){
						if(!globalMethodFound){
							forGlobalMethods += extMethodIndex + " ";
							globalMethodFound = true;
						}else {
							forGlobalMethods += ", "+ extMethodIndex + " ";
						}
					} else {
						if (!webServiceMethodIndexes.contains(String.valueOf(extMethodIndex))) {
							webServiceMethodIndexes.add(String.valueOf(extMethodIndex));
						}
						if (!localMethodFound) {
							forLocalMethods += extMethodIndex + " ";
							localMethodFound = true;
						} else {
							forLocalMethods += ", " + extMethodIndex + " ";
						}
					}
					strBuffTempXML.append("</WebServiceActivityInfo>");
				}
			}
			if(localMethodFound){
				forLocalMethods += " ) ";
			}
			if(globalMethodFound){
				forGlobalMethods += " ) "; 
			}
			strBuffTempXML.append("</WebServiceActivityData>");

			if (RS != null) {
				RS.close();
				RS = null;
			}
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
			// --------------------------------------------------------------------------------------
			// Changed On  : 22/04/2009
			// Changed By  : Shweta Tyagi
			// Description : SrNo- ,  SAP Method invokation 
			// --------------------------------------------------------------------------------------

			ArrayList sapMethodIndexes = new ArrayList();
			boolean sapMethodFound = false;
			String forSapMethods = "( ";
			//Changes for Bug 50574 --configurationID added for SAP
			pstmt = con.prepareStatement("SELECT ActivityId, ExtMethodIndex,ConfigurationId  FROM WFSAPAdapterAssocTable WHERE ProcessDefID = ?");
			pstmt.setInt(1, iProcessDefID);
			RS = pstmt.executeQuery();
			int configurationID = 0;
			strBuffTempXML.append("<SAPActivityData>");
			if (RS != null) {
				while (RS.next()) {
					strBuffTempXML.append("<SAPActivityInfo>");
					int activityId = RS.getInt("ActivityId");
					int extMethodIndex = RS.getInt("ExtMethodIndex");
                    configurationID  = RS.getInt("ConfigurationId");
					strBuffTempXML.append(gen.writeValueOf("ActivityId", String.valueOf(activityId)));
					strBuffTempXML.append(gen.writeValueOf("ExtMethodIndex", String.valueOf(extMethodIndex)));
                    strBuffTempXML.append(gen.writeValueOf("ConfigurationID", String.valueOf(configurationID)));
					if (!sapMethodIndexes.contains(String.valueOf(extMethodIndex))) {
						sapMethodIndexes.add(String.valueOf(extMethodIndex));
					}
					if (!sapMethodFound) {
						forSapMethods += extMethodIndex + " ";
						sapMethodFound = true;
					} else {
						forSapMethods += ", " + extMethodIndex + " ";
					}
					strBuffTempXML.append("</SAPActivityInfo>");
				}
			}
			if(sapMethodFound){
				forSapMethods += " ) "; 
			}
			strBuffTempXML.append("</SAPActivityData>");

			if (RS != null) {
				RS.close();
				RS = null;
			}
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
			if(globalMethodFound || localMethodFound || sapMethodFound){
				String strQuery = "SELECT ProcessDefId, DataStructureId, ExtMethodIndex, Name, Type, ParentIndex, Unbounded FROM " 
					+ " WFDataStructureTable WHERE ";
				if(globalMethodFound){
					strQuery += " ProcessDefID = 0 AND ExtMethodIndex IN " + forGlobalMethods + " "; //Bugzilla Bug 1788
				}
				if(localMethodFound){
					if(globalMethodFound){
						strQuery += " OR ";
					}
					strQuery += " ProcessDefID = " + iProcessDefID + " AND ExtMethodIndex IN " + forLocalMethods + " ";
				}
				if (sapMethodFound) {
					if (globalMethodFound || localMethodFound) {
						strQuery += " OR ";
					} 
					strQuery += " ProcessDefID = " + iProcessDefID + " AND ExtMethodIndex IN " + forSapMethods + " ";
				}
				strQuery += " order by ProcessDefID, ExtMethodIndex, DataStructureId ";

				pstmt = con.prepareStatement(strQuery);

				RS = pstmt.executeQuery();
				strBuffTempXML.append("<DataStructureEntries>");
				if (RS != null) {
					while (RS.next()) {
						strBuffTempXML.append("<DataStructureEntry>");
						strBuffTempXML.append(gen.writeValueOf("ProcessDefId", RS.getString("ProcessDefId")));
						strBuffTempXML.append(gen.writeValueOf("ExtMethodIndex", RS.getString("ExtMethodIndex")));
						strBuffTempXML.append(gen.writeValueOf("DataStructureId", RS.getString("DataStructureId")));
						strBuffTempXML.append(gen.writeValueOf("FieldName", RS.getString("Name")));
						strBuffTempXML.append(gen.writeValueOf("FieldType", RS.getString("Type")));
						strBuffTempXML.append(gen.writeValueOf("ParentIndex", RS.getString("ParentIndex")));
						strBuffTempXML.append(gen.writeValueOf("Unbounded", RS.getString("Unbounded")));
						strBuffTempXML.append("</DataStructureEntry>");
					}
				}
				strBuffTempXML.append("</DataStructureEntries>");
				if (RS != null) {
					RS.close();
					RS = null;
				}
				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
			}

			// --------------------------------------------------------------------------------------
			// Changed On  : 27/03/2008
			// Changed By  : Shweta Tyagi
			// Description : SrNo-14, Omniflow 7.2, Feature: SystemMethodExecution,
			//					Append Tags of External method type,name,parameter type,return type for System Methods
			//					associated with the process.
			// --------------------------------------------------------------------------------------
			// --------------------------------------------------------------------------------------
			// Changed On  : 28/11/2008
			// Changed By  : Shilpi S
			// Description : SrNo-19, web service invocation from process server
			// --------------------------------------------------------------------------------------
			strSQL = " Select A.ProcessDefId, ExtAppName, WSDLURL, UserId, PWD, ExtMethodIndex, ExtAppType, ExtMethodName, ReturnType, MappingFile "
				+ " From ExtMethodDefTable A " + WFSUtil.getTableLockHintStr(iDbType) + " LEFT OUTER JOIN WFWebserviceInfoTable B " + WFSUtil.getTableLockHintStr(iDbType)
				+ " ON (A.processdefid = B.processdefid AND A.searchcriteria = B.WSDLURLID) "
				+ " WHERE ( A.processDefId = " + iProcessDefID + " ";
			if (globalMethodFound) {
				strSQL += " AND ExtMethodIndex NOT IN " + forGlobalMethods + " ) OR ( A.ProcessDefID = 0 AND ExtMethodIndex IN " + forGlobalMethods + " ) OR (A.ProcessDefID = 0 AND A.ExtMethodIndex IN ( " + forSystemMethods + " ))"; //Bugzilla Bug 1788    
			}else {
				strSQL += " ) OR (A.ProcessDefID = 0 AND A.ExtMethodIndex IN ( " + forSystemMethods + " ))";
			}
			pstmt = con.prepareStatement(strSQL);
			int iCnt = 0;
			pstmt.execute();
			RS = pstmt.getResultSet();
			while (RS.next()) {
				iCnt++;
				if (iCnt == 1) {
					strBuffTempXML.append("\n<ExternalMethodInfoList>");
				}
                            if (extMethodsList.contains(RS.getInt("ExtMethodIndex"))) {
                                fProcessdefID = String.valueOf(iProcessDefID);
                            } else {
                                fProcessdefID = RS.getString("ProcessDefId");
                            }
				strBuffTempXML.append("\n<ExternalMethodInfo>");
				strBuffTempXML.append(gen.writeValueOf("ProcessDefId", fProcessdefID));
				strBuffTempXML.append(gen.writeValueOf("ExtMethodIndex", RS.getString("ExtMethodIndex")));
				strBuffTempXML.append(gen.writeValueOf("ExtAppType", RS.getString("ExtAppType")));
				strBuffTempXML.append(gen.writeValueOf("ExtMethodName", RS.getString("ExtMethodName")));
				strBuffTempXML.append(gen.writeValueOf("ReturnType", RS.getString("ReturnType")));
				strBuffTempXML.append(gen.writeValueOf("ExtAppName", RS.getString("ExtAppName")));
				strBuffTempXML.append(gen.writeValueOf("MappingFile", RS.getString("MappingFile")));
				strBuffTempXML.append(gen.writeValueOf("BasicAuthUser", RS.getString("UserId")));
				String p_wd = RS.getString("PWD");
				if(!(RS.wasNull()) && p_wd != null && !p_wd.trim().equalsIgnoreCase("")){
					p_wd = Utility.decode(p_wd);
				}
				strBuffTempXML.append(gen.writeValueOf("BasicAuthPassword", p_wd));
				String  WSDLPath = RS.getString("WSDLURL");
				if(!RS.wasNull()){
                                     WSDLPath = WFSUtil.resolveWSDLPath(WSDLPath, strEngine);

				}
				strBuffTempXML.append(gen.writeValueOf("WSDLLocation", WSDLPath));
				strBuffTempXML.append("\n</ExternalMethodInfo>");
			}
			if (iCnt > 0) {
				strBuffTempXML.append("\n</ExternalMethodInfoList>");
			}
			if (RS != null) {
				RS.close();
				RS = null;
			}
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
			// --------------------------------------------------------------------------------------
			// Changed On  : 28/03/2008
			// Changed By  : Shweta Tyagi
			// Description : SrNo-14, Omniflow 7.2, Feature: System Method Execution,
			//					Append tag for ParameterType for System/External Methods
			//					associated with the process.
			// --------------------------------------------------------------------------------------
			HashMap parameters = new HashMap();
			String paramType = null;
			int paramIndex = 0;
			int methodIndex = 0;
			String strSQL1 = "Select ProcessDefId,  ExtMethodIndex, ExtMethodParamIndex, ParameterType, ParameterName, ParameterOrder, DataStructureId, Unbounded, ParameterScope From ExtMethodParamDefTable " 
				+ WFSUtil.getTableLockHintStr(iDbType) + " Where ( processDefId = " + iProcessDefID + " ";
			if(globalMethodFound){
				strSQL1 += " AND ExtMethodIndex NOT IN "+ forGlobalMethods +" ) OR ( ProcessDefID = 0 AND ExtMethodIndex IN " + forGlobalMethods + " ) OR (ProcessDefID = 0 AND ExtMethodIndex IN ( " + forSystemMethods + " ))"; //Bugzilla Bug 1788    
			} else {
				strSQL1 += " ) OR (ProcessDefID = 0 AND ExtMethodIndex IN ( " + forSystemMethods + " ))";
			}
			//Bugzilla Bug 5985
			strSQL1 += " order by ParameterOrder" ;
			PreparedStatement pstmt1 = con.prepareStatement(strSQL1);
			pstmt1.execute();
			ResultSet RS1 = pstmt1.getResultSet();
			strBuffTempXML.append("\n<ExtMethodParamDefs>");
			while (RS1.next()) {
				methodIndex = RS1.getInt("ExtMethodIndex");
				paramIndex = RS1.getInt("ExtMethodParamIndex");
				paramType = RS1.getString("ParameterType");
				parameters.put(methodIndex + string21 + paramIndex, paramType);
				int processDefId = RS1.getInt("ProcessDefId");
				if (processDefId == 0 || webServiceMethodIndexes.contains(String.valueOf(methodIndex)) || sapMethodIndexes.contains(String.valueOf(methodIndex))) {
                                    if (extMethodsList.contains(RS1.getInt("ExtMethodIndex"))) {
                                        fProcessdefID = String.valueOf(iProcessDefID);
                                    } else {
                                        fProcessdefID = RS1.getString("ProcessDefId");
                                    }
					strBuffTempXML.append("\n<ExtMethodParamDef>");
					strBuffTempXML.append(gen.writeValueOf("ProcessDefId", fProcessdefID));
					strBuffTempXML.append(gen.writeValueOf("ExtMethodIndex", String.valueOf(methodIndex)));
					strBuffTempXML.append(gen.writeValueOf("ExtMethodParamIndex", String.valueOf(paramIndex)));
					strBuffTempXML.append(gen.writeValueOf("ParameterType", paramType));
					strBuffTempXML.append(gen.writeValueOf("ParameterName", RS1.getString("ParameterName")));
					strBuffTempXML.append(gen.writeValueOf("ParameterOrder", RS1.getString("ParameterOrder")));
					strBuffTempXML.append(gen.writeValueOf("DataStructureId", RS1.getString("DataStructureId")));
					strBuffTempXML.append(gen.writeValueOf("Unbounded", RS1.getString("Unbounded")));
					strBuffTempXML.append(gen.writeValueOf("ParameterScope", RS1.getString("ParameterScope")));
					strBuffTempXML.append("\n</ExtMethodParamDef>");
				}
			}
			strBuffTempXML.append("\n</ExtMethodParamDefs>");
			if (RS1 != null) {
				RS1.close();
				RS1 = null;
			}
			if (pstmt1 != null) {
				pstmt1.close();
				pstmt1 = null;
			}
			// --------------------------------------------------------------------------------------
			// Changed On  : 24/02/2005
			// Changed By  : Ruhi Hira
			// Description : SrNo-3, Omniflow 6.0, Feature: MethodExecution,
			//					Append mapping of External method parameter for External Methods
			//					associated with the process.
			// --------------------------------------------------------------------------------------
			strSQL = "Select ActivityId, RuleId, RuleOperationOrderId, MapType, ExtMethodIndex, ExtMethodParamIndex, " +
			" MappedField, MappedFieldType, DataStructureId, VariableId, VarFieldId From ExtMethodParamMappingTable " + WFSUtil.getTableLockHintStr(iDbType) + " Where processDefId = ? and ExtMethodIndex not in (" +
				"select ExtMethodIndex from EXTMETHODDEFTABLE where ExtAppType =  " + WFSUtil.TO_STRING("B", true, iDbType) +")" ;
			pstmt = con.prepareStatement(strSQL);
			pstmt.setInt(1, iProcessDefID);
			pstmt.execute();
			RS = pstmt.getResultSet();
			methodIndex = 0;
			paramIndex = 0;
			paramType = null;
			iCnt = 0;
			while (RS.next()) {
				iCnt++;
				if (iCnt == 1) {
					strBuffTempXML.append("\n<ExtMethodParamMappings>");
				}
				methodIndex = RS.getInt("ExtMethodIndex");
				paramIndex = RS.getInt("ExtMethodParamIndex");
				strBuffTempXML.append("\n<ExtMethodParamMapping>");
				strBuffTempXML.append(gen.writeValueOf("ActivityId", RS.getString("ActivityId")));
				strBuffTempXML.append(gen.writeValueOf("RuleId", RS.getString("RuleId")));
				strBuffTempXML.append(gen.writeValueOf("RuleOperationOrderId", RS.getString("RuleOperationOrderId")));
				strBuffTempXML.append(gen.writeValueOf("MapType", RS.getString("MapType")));
				strBuffTempXML.append(gen.writeValueOf("ExtMethodIndex", RS.getString("ExtMethodIndex")));
				strBuffTempXML.append(gen.writeValueOf("ExtMethodParamIndex", RS.getString("ExtMethodParamIndex")));
				strBuffTempXML.append(gen.writeValueOf("MappedField", RS.getString("MappedField")));
				strBuffTempXML.append(gen.writeValueOf("MappedFieldType", RS.getString("MappedFieldType")));
				paramType = (String) parameters.get(methodIndex + string21 + paramIndex);  //SrNo-14 system method execution 
				/*Bug #6888*/
				if (paramIndex == -998) {
					paramType = "3";
				} else if (paramIndex == -999) {
					paramType = "10";
				}
				strBuffTempXML.append(gen.writeValueOf("ParameterType", paramType));
				strBuffTempXML.append(gen.writeValueOf("VariableId", RS.getString("VariableId")));//Bug 5517
				strBuffTempXML.append(gen.writeValueOf("VarFieldId", RS.getString("VarFieldId")));//Bug 5517
				strBuffTempXML.append(gen.writeValueOf("DataStructureId", RS.getString("DataStructureId")));//Bug 5517
				strBuffTempXML.append("\n</ExtMethodParamMapping>");
			}
			if (iCnt > 0) {
				strBuffTempXML.append("\n</ExtMethodParamMappings>");
			}
			if (RS != null) {
				RS.close();
				RS = null;
			}
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}

			// --------------------------------------------------------------------------------------
			// Changed On  : 24/02/2005
			// Changed By  : Ruhi Hira
			// Description : SrNo-2, Omniflow 6.0, Feature: MethodExecution,
			//					Append Dynamic Constants associated with the process.
			// --------------------------------------------------------------------------------------
			strSQL = "Select constantName, constantValue, lastModifiedOn " +
			" From ConstantDefTable " + WFSUtil.getTableLockHintStr(iDbType) + " Where processDefId = ? ";
			pstmt = con.prepareStatement(strSQL);
			pstmt.setInt(1, iProcessDefID);
			pstmt.execute();
			RS = pstmt.getResultSet();
			iCnt = 0;
			while (RS.next()) {
				iCnt++;
				if (iCnt == 1) {
					strBuffTempXML.append("\n<DynamicConstants>");
				}
				strBuffTempXML.append("\n<DynamicConstant>");
				strBuffTempXML.append(gen.writeValueOf("ConstantName", RS.getString("ConstantName")));
				strBuffTempXML.append(gen.writeValueOf("ConstantValue", RS.getString("ConstantValue")));
				strBuffTempXML.append(gen.writeValueOf("LastModifiedOn", new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US).
						format(RS.getTimestamp("LastModifiedOn")).toString()));
				strBuffTempXML.append("\n</DynamicConstant>");
			}
			if (iCnt > 0) {
				strBuffTempXML.append("\n</DynamicConstants>");
			}
			if (RS != null) {
				RS.close();
				RS = null;
			}
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
                        
                        /* BRMS Changes Starts*/
                        
						boolean isFirstiteration = true;
                        PreparedStatement bpstmt = null;
                        PreparedStatement bpstmt2 = null;
                        PreparedStatement bpstmt3 = null;
                        ResultSet bRs = null;
                        ResultSet bRs2 = null;
                        ResultSet bRs3 = null;
                        String qStr = null;
                        //int brmsRuleSetId = 0;
                        int timeOutDuration = 0;
                        String wsdlPath = null;
                        String serverProtocol = null;
                        String serverHostName = null;
                        String serverPort = null;
                        String urlSuffix = null;
                        String ruleSetName = null;
                        String versionNo = null;
                        int extMethodIndex = 0;
                        String extMethodMappingFileFlag = null;
                        qStr = "select ActivityId from ACTIVITYTABLE "+WFSUtil.getTableLockHintStr(iDbType)+" where ProcessDefId = ? and ActivityType = 31 and ActivitySubType = 1";
                        
                        pstmt = con.prepareStatement(qStr);
                        pstmt.setInt(1, iProcessDefID); 
                        RS = pstmt.executeQuery();
                        int ActivityId = 0;
						String bUserId = null;
						String p_wd = null;
                        if(RS != null){
                            strBuffTempXML.append("<BRMSActivitiesInfo>");
                            while(RS.next()){                                
                                ActivityId = RS.getInt(1); 
                                strBuffTempXML.append("<BRMSExtData>");
                                strBuffTempXML.append(gen.writeValueOf("ActivityId", String.valueOf(ActivityId)));                                    
                                qStr = "Select ExtMethodIndex , TimeoutDuration ,Type from  WFBRMSActivityAssocTable where ProcessDefId = ? and  ActivityId = ? order by OrderId";
                                bpstmt = con.prepareStatement(qStr);
                                bpstmt.setInt(1, iProcessDefID);
                                bpstmt.setInt(2, ActivityId);
                                bRs = bpstmt.executeQuery();
                                while(bRs.next()){
									bUserId = null;
									p_wd = null;
                                    extMethodIndex = bRs.getInt(1);
                                    timeOutDuration = bRs.getInt(2);                                       
                                    boolean isBRMSREST="R".equalsIgnoreCase(bRs.getString(3));
                                    qStr = "Select ConfigName, a.ServerIdentifier, ServerHostName, ServerPort, ServerProtocol, URLSuffix, UserName, Password, ProxyEnabled, RuleSetName, VersionNo, InvocationMode ,RuleType,isEncrypted,RuleSetId, RESTServerHostName, RESTServerPort, RESTServerProtocol from WFBRMSConnectTable a, WFBRMSRuleSetInfo b where a.ServerIdentifier = b.ServerIdentifier and ExtMethodIndex = ?";

                                    bpstmt2 = con.prepareStatement(qStr);
                                    bpstmt2.setInt(1, extMethodIndex);

                                    bRs2 = bpstmt2.executeQuery();
                                    if (bRs2 != null && bRs2.next()) {
                                        serverProtocol = bRs2.getString("ServerProtocol");
                                        serverHostName = bRs2.getString("ServerHostName");
                                        serverPort = bRs2.getString("ServerPort");
                                        urlSuffix = bRs2.getString("URLSuffix");
                                        ruleSetName = bRs2.getString("RuleSetName");
                                        versionNo = bRs2.getString("VersionNo");
                                        bUserId = bRs2.getString("UserName");
                                        p_wd = bRs2.getString("Password");
                                        String restServerProtocol = bRs2.getString("RESTServerProtocol");
                                        String restServerHostName = bRs2.getString("RESTServerHostName");
                                        String restServerPort = bRs2.getString("RESTServerPort");
                                        if(isBRMSREST){
                                        	String isRuleFlow=bRs2.getString("RuleType");
                                        	if(isRuleFlow!=null&& "P".equalsIgnoreCase(isRuleFlow)){
                                        		isRuleFlow="N";
                                        	}else{
                                        		isRuleFlow="Y";
                                        	}
                                        	String isEncrypted=bRs2.getString("isEncrypted");
                                        	if(isEncrypted==null){
                                        		isEncrypted="N";
                                        	}
                                        	int ruleSetId=bRs2.getInt("RuleSetId");
                                        	wsdlPath = restServerProtocol + "://" + restServerHostName + ":" + restServerPort + "/brmsrest/rest/exec?versionNo=" +versionNo+"&rulesetName="+ ruleSetName + "&cabinetName=" +strEngine + "&isRuleFlow="+isRuleFlow+"&encrypted="+isEncrypted+"&rulePackageID="+ruleSetId;
                                        }
                                        else if(versionNo.equalsIgnoreCase("0.0")){
											wsdlPath = serverProtocol + "://" + serverHostName + ":" + serverPort + urlSuffix + "/" + ruleSetName + "_V_" + "WebService?wsdl" ;				
										}else {	
											wsdlPath = serverProtocol + "://" + serverHostName + ":" + serverPort + urlSuffix + "/" + ruleSetName + "_V"  + versionNo.replace(".", "_") + "WebService?wsdl" ;
										}
                                        strBuffTempXML.append("<ExtData>");
                                        
                                        strBuffTempXML.append("<WebServiceActivityData>");                                            
                                        strBuffTempXML.append(gen.writeValueOf("ExtMethodIndex", String.valueOf(extMethodIndex)));
                                        strBuffTempXML.append(gen.writeValueOf("ProxyEnabled", bRs2.getString("ProxyEnabled")));
                                        strBuffTempXML.append(gen.writeValueOf("TimeOutInterval", String.valueOf(timeOutDuration)));
                                        if(isBRMSREST){
                                        	strBuffTempXML.append(gen.writeValueOf("InvocationType", "R"));  
                                        }else{
                                        strBuffTempXML.append(gen.writeValueOf("InvocationType", "S"));                                            
                                        }
                                        strBuffTempXML.append(gen.writeValueOf("FunctionType", "L")); 
                                        strBuffTempXML.append("</WebServiceActivityData>");
                                        
                                        if (bRs2 != null) {
                                            bRs2.close();
                                            bRs2 = null;
                                        }
                                        if (bpstmt2 != null) {
                                            bpstmt2.close();
                                            bpstmt2 = null;
                                        }                                        
                                        
                                        bpstmt3 = con.prepareStatement("SELECT ExtAppName, " 
                                                + " ExtMethodName , ReturnType, MappingFile " + " FROM ExtMethodDefTable " 
						+ " WHERE ExtAppType =  " + WFSUtil.TO_STRING("B", true, iDbType)
						+ " AND ProcessDefID = 0 AND ExtMethodIndex = ? ");									 
                                            /*if (functionType == 'G') {
                                                    pstmt.setInt(1, 0);
                                            } else {
                                                    pstmt.setInt(1, procDefId);
                                            }*/
                                            bpstmt3.setInt(1, extMethodIndex);
                                            bRs3 = bpstmt3.executeQuery();
                                            if (bRs3 != null && bRs3.next()) {
                                                strBuffTempXML.append("<ExtMethodDef>");
                                                strBuffTempXML.append(gen.writeValueOf("ExtAppName", bRs3.getString("ExtAppName")));
                                                strBuffTempXML.append(gen.writeValueOf("ExtMethodName", bRs3.getString("ExtMethodName")));
                                                strBuffTempXML.append(gen.writeValueOf("ReturnType", bRs3.getString("ReturnType")));
                                                extMethodMappingFileFlag = bRs3.getString("MappingFile");
                                                strBuffTempXML.append(gen.writeValueOf("MappingFileFlag", extMethodMappingFileFlag));	
                                                strBuffTempXML.append(gen.writeValueOf("WSDLLocation", wsdlPath));
                                                strBuffTempXML.append("<UserCredential>");
                                                //String bUserId = bRs3.getString("UserId");											
                                                if(bUserId != null){
                                                    //String pwd = bRs3.getString("PWD");
                                                    //String securityFlag=rs.getString("SecurityFLAG");
                                                     //if(securityFlag!=null && securityFlag.equalsIgnoreCase("Y"))
                                                    //	pwd = Utility.decode(pwd);
                                                    strBuffTempXML.append(gen.writeValueOf("BasicAuthUser", bUserId));
                                                    strBuffTempXML.append(gen.writeValueOf("BasicAuthPassword", p_wd));
                                                }                                        
                                                strBuffTempXML.append("</UserCredential>");

                                                strBuffTempXML.append("</ExtMethodDef>");
                                                if (bRs3 != null) {
                                                    bRs3.close();
                                                    bRs3 = null;
                                                }
                                                if (bpstmt3 != null) {
                                                    bpstmt3.close();
                                                    bpstmt3 = null;
                                                }
                                            }  
                                            
                                            
                                            
                                            
                                        bpstmt3 = con.prepareStatement("SELECT ExtMethodParamIndex, ParameterName, ParameterType, ParameterOrder," + " DataStructureId, Unbounded, ParameterScope FROM ExtMethodParamDefTable WHERE ProcessDefID = 0 AND ExtMethodIndex = ? " + " ORDER BY ParameterOrder ");
                                        /*if (functionType == 'G') {
                                                pstmt.setInt(1, 0);
                                        } else {
                                                pstmt.setInt(1, procDefId);
                                        }*/
                                        bpstmt3.setInt(1, extMethodIndex);
                                        bRs3 = bpstmt3.executeQuery();

                                        strBuffTempXML.append("<ExtMethodParamDefs>");
                                        while (bRs3 != null && bRs3.next()) {
                                            strBuffTempXML.append("<ExtMethodParamDef>");
                                            strBuffTempXML.append(gen.writeValueOf("ExtMethodParamIndex", bRs3.getString("ExtMethodParamIndex")));
                                            strBuffTempXML.append(gen.writeValueOf("ParameterName", bRs3.getString("ParameterName")));
                                            strBuffTempXML.append(gen.writeValueOf("ParameterType", bRs3.getString("ParameterType")));
                                            strBuffTempXML.append(gen.writeValueOf("ParameterOrder", bRs3.getString("ParameterOrder")));
                                            strBuffTempXML.append(gen.writeValueOf("DataStructureId", bRs3.getString("DataStructureId")));
                                            strBuffTempXML.append(gen.writeValueOf("Unbounded", bRs3.getString("Unbounded")));
                                            strBuffTempXML.append(gen.writeValueOf("ParameterScope", bRs3.getString("ParameterScope")));
                                            strBuffTempXML.append("</ExtMethodParamDef>");
                                        }
                                        strBuffTempXML.append("</ExtMethodParamDefs>");
                                        if (bRs3 != null) {
                                            bRs3.close();
                                            bRs3 = null;
                                        }
                                        if (bpstmt3 != null) {
                                            bpstmt3.close();
                                            bpstmt3 = null;
                                        }    
                                        
                                        bpstmt3 = con.prepareStatement("SELECT MapType, ExtMethodParamIndex, MappedField, MappedFieldType, " + " DataStructureId, VariableId, VarFieldId FROM ExtMethodParamMappingTable WHERE ProcessDefID = ? " + " AND ActivityId = ? AND ExtMethodIndex = ? AND RuleId = 0 AND RuleOperationOrderId = 0 ");
                                        bpstmt3.setInt(1, iProcessDefID);
                                        bpstmt3.setInt(2, ActivityId);
                                        bpstmt3.setInt(3, extMethodIndex);
                                        bRs3 = bpstmt3.executeQuery();												
                                        strBuffTempXML.append("<ExtMethodParamMappings>");
                                        while (bRs3 != null && bRs3.next()) {
                                            strBuffTempXML.append("<ExtMethodParamMapping>");
                                            strBuffTempXML.append(gen.writeValueOf("MapType", bRs3.getString("MapType")));
                                            strBuffTempXML.append(gen.writeValueOf("ExtMethodParamIndex", bRs3.getString("ExtMethodParamIndex")));
                                            strBuffTempXML.append(gen.writeValueOf("MappedField", bRs3.getString("MappedField")));
                                            strBuffTempXML.append(gen.writeValueOf("MappedFieldType", bRs3.getString("MappedFieldType")));
                                            strBuffTempXML.append(gen.writeValueOf("DataStructureId", bRs3.getString("DataStructureId")));
                                            strBuffTempXML.append(gen.writeValueOf("VariableId", bRs3.getString("VariableId")));
                                            strBuffTempXML.append(gen.writeValueOf("VarFieldId", bRs3.getString("VarFieldId")));
                                            strBuffTempXML.append("</ExtMethodParamMapping>");
                                        }
                                        strBuffTempXML.append("</ExtMethodParamMappings>");
                                        if (bRs3 != null) {
                                            bRs3.close();
                                            bRs3 = null;
                                        }
                                        if (pstmt != null) {
                                            bpstmt3.close();
                                            bpstmt3 = null;
                                        }
                                        
                                        bpstmt3 = con.prepareStatement("SELECT DataStructureId, Name, Type, ParentIndex, Unbounded FROM " + " WFDataStructureTable WHERE ProcessDefID = 0 " + " AND ExtMethodIndex = ? order by ProcessDefID, ExtMethodIndex, DataStructureId");                                                        
                                        /*if(functionType == 'G'){
                                                pstmt.setInt(1, 0);
                                        }else{
                                                pstmt.setInt(1, procDefId);    
                                        }*/
                                        bpstmt3.setInt(1, extMethodIndex);
                                        bRs3 = bpstmt3.executeQuery();
                                        strBuffTempXML.append("<DataStructureEntries>");                                                     

                                        while (bRs3 != null && bRs3.next()) {
                                            strBuffTempXML.append("<DataStructureEntry>");
                                            strBuffTempXML.append(gen.writeValueOf("DataStructureId", bRs3.getString("DataStructureId")));
                                            strBuffTempXML.append(gen.writeValueOf("FieldName", bRs3.getString("Name")));
                                            strBuffTempXML.append(gen.writeValueOf("FieldType", bRs3.getString("Type")));
                                            strBuffTempXML.append(gen.writeValueOf("ParentIndex", bRs3.getString("ParentIndex")));
                                            strBuffTempXML.append(gen.writeValueOf("Unbounded", bRs3.getString("Unbounded")));
                                            strBuffTempXML.append("</DataStructureEntry>");
                                        }                                                       
                                        strBuffTempXML.append("</DataStructureEntries>");
                                        if (bRs3 != null) {
                                            bRs3.close();
                                            bRs3 = null;
                                        }
                                        if (bpstmt3 != null) {
                                            bpstmt3.close();
                                            bpstmt3 = null;
                                        } 

                                        strBuffTempXML.append("</ExtData>");
                                     }
                                    
                                 }    
                                strBuffTempXML.append("</BRMSExtData>");  
                            }
                            strBuffTempXML.append("</BRMSActivitiesInfo>");
                        }
                        
                        /* BRMS Changes End*/
                        
                        /* REST SERVICE Changes Starts*/
                        
                       
                        bpstmt = null;
                        bpstmt2 = null;
                        bpstmt3 = null;
                        bRs = null;
                        bRs2 = null;
                        bRs3 = null;
                        qStr = null;
                        //int brmsRuleSetId = 0;
                         timeOutDuration = 0;
                        
                         extMethodIndex = 0;
                         extMethodMappingFileFlag = null;
                        qStr = "select ActivityId from ACTIVITYTABLE "+WFSUtil.getTableLockHintStr(iDbType)+" where ProcessDefId = ? and ActivityType = 40 ";
                        
                        pstmt = con.prepareStatement(qStr);
                        pstmt.setInt(1, iProcessDefID); 
                        RS = pstmt.executeQuery();
                        ActivityId = 0;
                        boolean isGlobal = false;
                        String processDefIdStr = "";
                        if(RS != null){
                            strBuffTempXML.append("<RestActivitiesInfo>");
                            while(RS.next()){                                
                                ActivityId = RS.getInt(1); 
                                strBuffTempXML.append("<RestExtData>");
                                strBuffTempXML.append(gen.writeValueOf("ActivityId", String.valueOf(ActivityId)));                                    
                                qStr = "Select ExtMethodIndex , TimeoutDuration from  WFRestActivityAssocTable where ProcessDefId = ? and  ActivityId = ? order by OrderId";
                                bpstmt = con.prepareStatement(qStr);
                                bpstmt.setInt(1, iProcessDefID);
                                bpstmt.setInt(2, ActivityId);
                                bRs = bpstmt.executeQuery();
                                String baseURI = "";
                                String resourcePath = "";
                                while(bRs.next()){
                                    extMethodIndex = bRs.getInt(1);
                                    timeOutDuration = bRs.getInt(2);                                       
                                    
                                    qStr  = "Select * from WFRestServiceInfoTable where ResourceId = ? and ProcessDefId = 0";
                                    bpstmt2 = con.prepareStatement(qStr);
                                    bpstmt2.setInt(1, extMethodIndex);
                                    bRs2 = bpstmt2.executeQuery();
                                    if (bRs2 != null && bRs2.next()) {
                                            isGlobal = true;
                                            processDefIdStr = " And ProcessDefId = 0 ";
                                            //It is assumed that the resource is global and does not have any other entry
                                    }else{
                                        isGlobal = false;
                                        processDefIdStr = " And ProcessDefId = "+iProcessDefID;
                                    }
                                    if (bRs2 != null) {
                                           bRs2.close();
                                           bRs2 = null;
                                    }
                                    if (bpstmt2 != null) {
                                        bpstmt2.close();
                                        bpstmt2 = null;
                                    }
                                    qStr = "Select ProcessDefId,ResourceId,BaseURI,ResourcePath,ResponseType,ContentType,OperationType,AuthenticationType"
                                                + ",AuthUser,AuthPassword,AuthenticationDetails,AuthToken,ProxyEnabled,SecurityFlag"
                                                +" from WFRestServiceInfoTable  " + WFSUtil.getTableLockHintStr(iDbType) + " Where"
                                                + " ResourceId = ? "+processDefIdStr;
                                    bpstmt2 = con.prepareStatement(qStr);
                                   
                                    bpstmt2.setInt(1, extMethodIndex);
                                    bRs2 = bpstmt2.executeQuery();
                                    strBuffTempXML.append("<ExtData>");
                                        if (bRs2 != null && bRs2.next()) {
                                            
                                            strBuffTempXML.append("<WebServiceActivityData>");                                            
                                            strBuffTempXML.append(gen.writeValueOf("ExtMethodIndex", String.valueOf(extMethodIndex)));
                                            strBuffTempXML.append(gen.writeValueOf("ProxyEnabled", bRs2.getString("ProxyEnabled")));
                                            strBuffTempXML.append(gen.writeValueOf("TimeOutInterval", String.valueOf(timeOutDuration)));
                                            strBuffTempXML.append(gen.writeValueOf("InvocationType", "R"));                                            
                                            strBuffTempXML.append(gen.writeValueOf("FunctionType", "L")); 
                                            baseURI =  bRs2.getString("BaseURI");
                                            resourcePath =  bRs2.getString("ResourcePath");
                                            String uri=baseURI;
                                            if(resourcePath!=null&&!resourcePath.isEmpty()){
                                            	uri=uri+resourcePath;
                                            }
                                            strBuffTempXML.append(gen.writeValueOf("ResourcePath",uri));
                                            strBuffTempXML.append(gen.writeValueOf("ResponseType",bRs2.getString("ResponseType")));
                                            strBuffTempXML.append(gen.writeValueOf("ContentType",bRs2.getString("ContentType")));
                                            strBuffTempXML.append(gen.writeValueOf("OperationType",bRs2.getString("OperationType")));
                                            strBuffTempXML.append(gen.writeValueOf("AuthenticationType",bRs2.getString("AuthenticationType")));
                                            strBuffTempXML.append(gen.writeValueOf("AuthUser",bRs2.getString("AuthUser")));
                                            strBuffTempXML.append(gen.writeValueOf("AuthPassword",bRs2.getString("AuthPassword")));
                                            strBuffTempXML.append(bRs2.getString("AuthenticationDetails"));
                                            strBuffTempXML.append(gen.writeValueOf("AuthToken",bRs2.getString("AuthToken")));
                                            //strBuffTempXML.append(gen.writeValueOf("AuthField3",bRs2.getString("AuthField3")));
                                            strBuffTempXML.append(gen.writeValueOf("SecurityFlag",bRs2.getString("SecurityFlag")));
                                            strBuffTempXML.append("</WebServiceActivityData>");  
                                            
                                             if (bRs2 != null) {
                                                bRs2.close();
                                                bRs2 = null;
                                            }
                                            if (bpstmt2 != null) {
                                                bpstmt2.close();
                                                bpstmt2 = null;
                                            }
                                                                                 
                                        
                                        bpstmt3 = con.prepareStatement("SELECT ExtAppName, " 
                                                + " ExtMethodName , ReturnType, MappingFile ,IsBRMSService " + " FROM ExtMethodDefTable " 
						+ " WHERE ExtAppType =  " + WFSUtil.TO_STRING("R", true, iDbType)
						+ " AND  ExtMethodIndex = ? "+processDefIdStr);									 
                                            /*if (functionType == 'G') {
                                                    pstmt.setInt(1, 0);
                                            } else {
                                                    pstmt.setInt(1, procDefId);
                                            }*/
                                            
                                            bpstmt3.setInt(1, extMethodIndex);
                                            bRs3 = bpstmt3.executeQuery();
                                            if (bRs3 != null && bRs3.next()) {
                                                strBuffTempXML.append("<ExtMethodDef>");
                                                strBuffTempXML.append(gen.writeValueOf("ExtAppName", bRs3.getString("ExtAppName")));
                                                strBuffTempXML.append(gen.writeValueOf("ExtMethodName", bRs3.getString("ExtMethodName")));
                                                strBuffTempXML.append(gen.writeValueOf("ReturnType", bRs3.getString("ReturnType")));
                                                extMethodMappingFileFlag = bRs3.getString("MappingFile");
                                                strBuffTempXML.append(gen.writeValueOf("MappingFileFlag", extMethodMappingFileFlag));	
                                                strBuffTempXML.append(gen.writeValueOf("IsBRMSService", bRs3.getString("IsBRMSService")));
                                                strBuffTempXML.append("</ExtMethodDef>");
                                                if (bRs3 != null) {
                                                    bRs3.close();
                                                    bRs3 = null;
                                                }
                                                if (bpstmt3 != null) {
                                                    bpstmt3.close();
                                                    bpstmt3 = null;
                                                }
                                            }  
                                            
                                            
                                            
                                            
                                        bpstmt3 = con.prepareStatement("SELECT ExtMethodParamIndex, ParameterName, ParameterType, ParameterOrder," + " DataStructureId, Unbounded, ParameterScope FROM ExtMethodParamDefTable WHERE  ExtMethodIndex = ? "+processDefIdStr+" And Unbounded IN ('N','Y')" + " ORDER BY ParameterOrder ");
                                        /*if (functionType == 'G') {
                                                pstmt.setInt(1, 0);
                                        } else {
                                                pstmt.setInt(1, procDefId);
                                        }*/
                                       
                                        bpstmt3.setInt(1, extMethodIndex);
                                        bRs3 = bpstmt3.executeQuery();

                                        strBuffTempXML.append("<ExtMethodParamDefs>");
                                        while (bRs3 != null && bRs3.next()) {
                                            strBuffTempXML.append("<ExtMethodParamDef>");
                                            strBuffTempXML.append(gen.writeValueOf("ExtMethodParamIndex", bRs3.getString("ExtMethodParamIndex")));
                                            strBuffTempXML.append(gen.writeValueOf("ParameterName", bRs3.getString("ParameterName")));
                                            strBuffTempXML.append(gen.writeValueOf("ParameterType", bRs3.getString("ParameterType")));
                                            strBuffTempXML.append(gen.writeValueOf("ParameterOrder", bRs3.getString("ParameterOrder")));
                                            strBuffTempXML.append(gen.writeValueOf("DataStructureId", bRs3.getString("DataStructureId")));
                                            strBuffTempXML.append(gen.writeValueOf("Unbounded", bRs3.getString("Unbounded")));
                                            strBuffTempXML.append(gen.writeValueOf("ParameterScope", bRs3.getString("ParameterScope")));
                                            strBuffTempXML.append("</ExtMethodParamDef>");
                                        }
                                        strBuffTempXML.append("</ExtMethodParamDefs>");
                                        if (bRs3 != null) {
                                            bRs3.close();
                                            bRs3 = null;
                                        }
                                        if (bpstmt3 != null) {
                                            bpstmt3.close();
                                            bpstmt3 = null;
                                        }    
                                        
                                        bpstmt3 = con.prepareStatement("SELECT MapType, ExtMethodParamIndex, MappedField, MappedFieldType, " + " DataStructureId, VariableId, VarFieldId FROM ExtMethodParamMappingTable WHERE  ActivityId = ? AND ExtMethodIndex = ? And ProcessDefId = ? AND RuleId = 0 AND RuleOperationOrderId = 0 ");
                                      
                                        bpstmt3.setInt(1, ActivityId);
                                        bpstmt3.setInt(2, extMethodIndex);
                                        bpstmt3.setInt(3, iProcessDefID);
                                        bRs3 = bpstmt3.executeQuery();												
                                        strBuffTempXML.append("<ExtMethodParamMappings>");
                                        while (bRs3 != null && bRs3.next()) {
                                            strBuffTempXML.append("<ExtMethodParamMapping>");
                                            strBuffTempXML.append(gen.writeValueOf("MapType", bRs3.getString("MapType")));
                                            strBuffTempXML.append(gen.writeValueOf("ExtMethodParamIndex", bRs3.getString("ExtMethodParamIndex")));
                                            strBuffTempXML.append(gen.writeValueOf("MappedField", bRs3.getString("MappedField")));
                                            strBuffTempXML.append(gen.writeValueOf("MappedFieldType", bRs3.getString("MappedFieldType")));
                                            strBuffTempXML.append(gen.writeValueOf("DataStructureId", bRs3.getString("DataStructureId")));
                                            strBuffTempXML.append(gen.writeValueOf("VariableId", bRs3.getString("VariableId")));
                                            strBuffTempXML.append(gen.writeValueOf("VarFieldId", bRs3.getString("VarFieldId")));
                                            strBuffTempXML.append("</ExtMethodParamMapping>");
                                        }
                                        strBuffTempXML.append("</ExtMethodParamMappings>");
                                        if (bRs3 != null) {
                                            bRs3.close();
                                            bRs3 = null;
                                        }
                                        if (pstmt != null) {
                                            bpstmt3.close();
                                            bpstmt3 = null;
                                        }
                                        
                                        bpstmt3 = con.prepareStatement("SELECT DataStructureId, Name, Type, ParentIndex, Unbounded FROM " + " WFDataStructureTable WHERE  ExtMethodIndex = ? "+processDefIdStr+" order by ProcessDefID, ExtMethodIndex, DataStructureId");                                                        
                                        /*if(functionType == 'G'){
                                                pstmt.setInt(1, 0);
                                        }else{
                                                pstmt.setInt(1, procDefId);    
                                        }*/
                                       
                                        bpstmt3.setInt(1, extMethodIndex);
                                        bRs3 = bpstmt3.executeQuery();
                                        strBuffTempXML.append("<DataStructureEntries>");                                                     

                                        while (bRs3 != null && bRs3.next()) {
                                            strBuffTempXML.append("<DataStructureEntry>");
                                            strBuffTempXML.append(gen.writeValueOf("DataStructureId", bRs3.getString("DataStructureId")));
                                            strBuffTempXML.append(gen.writeValueOf("FieldName", bRs3.getString("Name")));
                                            strBuffTempXML.append(gen.writeValueOf("FieldType", bRs3.getString("Type")));
                                            strBuffTempXML.append(gen.writeValueOf("ParentIndex", bRs3.getString("ParentIndex")));
                                            strBuffTempXML.append(gen.writeValueOf("Unbounded", bRs3.getString("Unbounded")));
                                            strBuffTempXML.append("</DataStructureEntry>");
                                        }                                                       
                                        strBuffTempXML.append("</DataStructureEntries>");
                                        if (bRs3 != null) {
                                            bRs3.close();
                                            bRs3 = null;
                                        }
                                        if (bpstmt3 != null) {
                                            bpstmt3.close();
                                            bpstmt3 = null;
                                        } 

                                        strBuffTempXML.append("</ExtData>");
                                     }
                                    
                                 }    
                                strBuffTempXML.append("</RestExtData>");  
                            }
                            strBuffTempXML.append("</RestActivitiesInfo>");
                        }
                        
                        /* REST SERVICE Changes End*/
                        
                        
                        /* DATA EXHANGE Changes Starts here*/
                        qStr = "select ActivityId from ACTIVITYTABLE "+WFSUtil.getTableLockHintStr(iDbType)+" where ProcessDefId = ? and ActivityType = 34 ";
                        pstmt = con.prepareStatement(qStr);
                        pstmt.setInt(1, iProcessDefID); 
                        RS = pstmt.executeQuery();
                        ActivityId = 0;
                        String emptyMappedColumnCheck = "";
                        if(iDbType == JTSConstant.JTS_MSSQL || iDbType == JTSConstant.JTS_POSTGRES){
                        	emptyMappedColumnCheck = " AND VarName IS NOT NULL AND LTRIM(RTRIM(VarName)) != '' AND ColumnName IS NOT NULL AND LTRIM(RTRIM(ColumnName)) != '' ";
                        }
                        else if(iDbType == JTSConstant.JTS_ORACLE) {
                        	emptyMappedColumnCheck = " AND VarName IS NOT NULL AND LENGTH(TRIM(VarName)) != 0 AND ColumnName IS NOT NULL AND LENGTH(TRIM(ColumnName)) != 0 ";
                        }
                        strBuffTempXML.append("<DataExchangeActivitiesInfo>");
                        while(RS.next()){
                        	ActivityId = RS.getInt(1);
                            strBuffTempXML.append("<DataExchangeActivityInfo>");
                        	strBuffTempXML.append(gen.writeValueOf("ActivityId", String.valueOf(ActivityId)));
                            strBuffTempXML.append("<DXActivityInfo>");
                            //Get Data Source information.
                        	/*PreparedStatement dsPstmt = null;
                        	ResultSet res = null;
                            int configId = -1;
                            String isolateFlagStr = "Y";
                        	String queryString = "select ConfigurationID, IsolateFlag from WFDBDetails " + WFSUtil.getTableLockHintStr(iDbType) + " where ProcessDefId = ? "
                        					+ " and ActivityId = ?";
                            dsPstmt = con.prepareStatement(queryString);
                            dsPstmt.setInt(1, iProcessDefID);
                            dsPstmt.setInt(2, ActivityId);
                            res = dsPstmt.executeQuery();
                            if(res.next()){
                            	configId = res.getInt("ConfigurationID");
                            	isolateFlagStr = res.getString("IsolateFlag");
                            }
                            if(res != null){
                            	res.close();
                            	res = null;
                            }
                            if(dsPstmt != null){
                            	dsPstmt.close();
                            	dsPstmt = null;
                            }
                            
                            if(configId > 0){
                            	queryString = "select CT.ConfigurationID, CT.ConfigName, CT.DBType, CT.HostName, CT.Port, CT.ServiceName, CT.DBName, CT.UserName, CT.Password "
                            			+ " from ServerDetailsTable CT " + WFSUtil.getTableLockHintStr(iDbType) + " where CT.configurationid = ? AND CT.ServerType = ?";
                                dsPstmt = con.prepareStatement(queryString);
                                dsPstmt.setInt(1, configId);
                                dsPstmt.setInt(2, 1);
                                res = dsPstmt.executeQuery();
                                strBuffTempXML.append("<DataSource>");
                                if(res.next()){
                                	strBuffTempXML.append(gen.writeValueOf("ConfigurationID", configId+""));
                                	strBuffTempXML.append(gen.writeValueOf("ConfigurationName", res.getString("ConfigName")));
                                	strBuffTempXML.append(gen.writeValueOf("DBType", res.getString("DBType")));
                                    strBuffTempXML.append(gen.writeValueOf("HostName", res.getString("HostName")));                                        
                                    strBuffTempXML.append(gen.writeValueOf("Port", res.getString("Port")));                                        
                                    strBuffTempXML.append(gen.writeValueOf("ServiceName", res.getString("ServiceName")));
                                    strBuffTempXML.append(gen.writeValueOf("CabinetName", res.getString("DBName")));
                                    strBuffTempXML.append(gen.writeValueOf("UserName", res.getString("UserName")));
                                    strBuffTempXML.append(gen.writeValueOf("Password", res.getString("Password")));
                                }
                                strBuffTempXML.append(gen.writeValueOf("IsolateFlag", isolateFlagStr));
                                strBuffTempXML.append("</DataSource>");
                                if(res != null){
                                	res.close();
                                	res = null;
                                }
                                if(dsPstmt != null){
                                	dsPstmt.close();
                                	dsPstmt = null;
                                }
                            }else{
                            	strBuffTempXML.append("<DataSource>");
                            	strBuffTempXML.append(gen.writeValueOf("ConfigurationID", configId+""));
                                strBuffTempXML.append(gen.writeValueOf("IsolateFlag", isolateFlagStr));
                                strBuffTempXML.append("</DataSource>");
                            }
                            
                            //Individual Rule details.
                            queryString = "select RuleId, RuleOrderId, RuleType, RuleName, RuleTypeId, Param1, Type1, ExtObjID1, VariableId_1, VarFieldId_1, "
                            		+ " Param2, Type2, ExtObjID2, VariableId_2, VarFieldId_2, Param3, Type3, ExtObjID3, VariableId_3, VarFieldId_3, Operator, "
                            		+ " LogicalOp, IndentLevel from WFRuleFlowData " + WFSUtil.getTableLockHintStr(iDbType) + " where ProcessDefId = ? and ActivityId = ? order By RuleOrderId Asc";
                            dsPstmt = con.prepareStatement(queryString);
                            dsPstmt.setInt(1, iProcessDefID);
                            dsPstmt.setInt(2, ActivityId);
                            res = dsPstmt.executeQuery();
                            strBuffTempXML.append("<RuleRows>");
                            while(res.next()){
                                strBuffTempXML.append("<RuleRow>");
                                strBuffTempXML.append(gen.writeValueOf("RuleId", res.getString("RuleId")));
                                strBuffTempXML.append(gen.writeValueOf("RuleOrderId", res.getString("RuleOrderId")));                                        
                                strBuffTempXML.append(gen.writeValueOf("RuleType", res.getString("RuleType")));                                        
                                strBuffTempXML.append(gen.writeValueOf("RuleName", res.getString("RuleName")));
                                strBuffTempXML.append(gen.writeValueOf("RuleTypeId", res.getString("RuleTypeId")));
                                strBuffTempXML.append(gen.writeValueOf("Param1", res.getString("Param1")));
                                strBuffTempXML.append(gen.writeValueOf("Type1", res.getString("Type1")));
                                strBuffTempXML.append(gen.writeValueOf("ExtObjID1", res.getString("ExtObjID1")));
                                strBuffTempXML.append(gen.writeValueOf("VariableId_1", res.getString("VariableId_1")));
                                strBuffTempXML.append(gen.writeValueOf("VarFieldId_1", res.getString("VarFieldId_1")));                                        
                                strBuffTempXML.append(gen.writeValueOf("Param2", res.getString("Param2")));                                        
                                strBuffTempXML.append(gen.writeValueOf("Type2", res.getString("Type2")));
                                strBuffTempXML.append(gen.writeValueOf("ExtObjID2", res.getString("ExtObjID2")));
                                strBuffTempXML.append(gen.writeValueOf("VariableId_2", res.getString("VariableId_2")));
                                strBuffTempXML.append(gen.writeValueOf("VarFieldId_2", res.getString("VarFieldId_2")));
                                strBuffTempXML.append(gen.writeValueOf("Param3", res.getString("Param3")));
                                strBuffTempXML.append(gen.writeValueOf("Type3", res.getString("Type3")));
                                strBuffTempXML.append(gen.writeValueOf("ExtObjID3", res.getString("ExtObjID3")));                                        
                                strBuffTempXML.append(gen.writeValueOf("VariableId_3", res.getString("VariableId_3")));                                        
                                strBuffTempXML.append(gen.writeValueOf("VarFieldId_3", res.getString("VarFieldId_3")));
                                strBuffTempXML.append(gen.writeValueOf("Operator", res.getString("Operator")));
                                strBuffTempXML.append(gen.writeValueOf("LogicalOp", res.getString("LogicalOp")));
                                strBuffTempXML.append(gen.writeValueOf("IndentLevel", res.getString("IndentLevel")));
                                strBuffTempXML.append("</RuleRow>");
                            }
                            strBuffTempXML.append("</RuleRows>");
                            if(res != null){
                            	res.close();
                            	res = null;
                            }
                            if(dsPstmt != null){
                            	dsPstmt.close();
                            	dsPstmt = null;
                            }
                            
                            //Get Rule OPeration Type Details
                            queryString = "select RuleId, RuleTypeId from WFRuleFlowData " + WFSUtil.getTableLockHintStr(iDbType) + " where ProcessDefId = ? and ActivityId = ? AND RuleTypeId IN (1001, 1002, 1003)";
                            dsPstmt = con.prepareStatement(queryString);
                            dsPstmt.setInt(1, iProcessDefID);
                            dsPstmt.setInt(2, ActivityId);
                            res = dsPstmt.executeQuery();
                            strBuffTempXML.append("<Operations>");
                            while(res.next()){
                            	int ruleId = res.getInt("RuleId");
                            	int ruletypeId = res.getInt("RuleTypeId");
                                String tableName = "";
                                strBuffTempXML.append("<Operation>");
                            	strBuffTempXML.append(gen.writeValueOf("RuleId", ruleId + ""));
                                strBuffTempXML.append(gen.writeValueOf("RuleTypeId", ruletypeId + ""));
                                
                            	if(ruletypeId == WFSConstant.INSERT_RULE){
                            		PreparedStatement iPstmt = con.prepareCall("select EntityName, OrderId, ColumnName, ColumnType, Nullable, VarName, varType, VarId, VarFieldId, ExtObjId "
                            				+ " from WFTableMappingDetails " + WFSUtil.getTableLockHintStr(iDbType) + " where ProcessDefId = ? AND ActivityId = ? AND RuleId = ?" + emptyMappedColumnCheck);
                            		iPstmt.setInt(1, iProcessDefID);
                            		iPstmt.setInt(2, ActivityId);
                            		iPstmt.setInt(3, ruleId);
                            		ResultSet iRes = iPstmt.executeQuery();
                            		strBuffTempXML.append("<InsertMap>");
                            		while(iRes.next()){
                            			tableName = iRes.getString("EntityName");
                                		strBuffTempXML.append("<Column>");
                            			strBuffTempXML.append(gen.writeValueOf("OrderId", iRes.getString("OrderId")));
                            			strBuffTempXML.append(gen.writeValueOf("ColumnName", iRes.getString("ColumnName")));
                            			strBuffTempXML.append(gen.writeValueOf("ColumnType", iRes.getString("ColumnType")));
                            			strBuffTempXML.append(gen.writeValueOf("VariableName", iRes.getString("VarName")));
                            			strBuffTempXML.append(gen.writeValueOf("VariableId", iRes.getString("VarId")));
                            			strBuffTempXML.append(gen.writeValueOf("VarFieldId", iRes.getString("VarFieldId")));
                            			strBuffTempXML.append(gen.writeValueOf("VariableType", iRes.getString("varType")));
                            			strBuffTempXML.append(gen.writeValueOf("ExtObjId", iRes.getString("ExtObjId")));
                            			strBuffTempXML.append(gen.writeValueOf("Nullable", iRes.getString("Nullable")));
                            			strBuffTempXML.append("</Column>");
                            		}
                            		strBuffTempXML.append("</InsertMap>");
                        			strBuffTempXML.append(gen.writeValueOf("TableName", tableName));
                                    if(iRes != null){
                                    	iRes.close();
                                    	iRes = null;
                                    }
                                    if(iPstmt != null){
                                    	iPstmt.close();
                                    	iPstmt = null;
                                    }
                            	}
                            	if(ruletypeId == WFSConstant.UPDATE_RULE){
                            		//Set part
                            		PreparedStatement iPstmt = con.prepareCall("select EntityName, OrderId, ColumnName, Nullable, "
                            				+ " VarName, varType, VarId, VarFieldId, ExtObjId, Type, VarName1, varType1, VarId1, VarFieldId1, ExtObjId1, Type1, "
                            				+ " Operator, ColumnType from WFTableMappingDetails " + WFSUtil.getTableLockHintStr(iDbType) + " where ProcessDefId = ? AND ActivityId = ? "
                            				+ " AND RuleId = ?  AND OperationType = 'E' " + emptyMappedColumnCheck);
                            		iPstmt.setInt(1, iProcessDefID);
                            		iPstmt.setInt(2, ActivityId);
                            		iPstmt.setInt(3, ruleId);
                            		ResultSet iRes = iPstmt.executeQuery();
                            		strBuffTempXML.append("<SetMap>");
                            		while(iRes.next()){
                            			tableName = iRes.getString("EntityName");
                                		strBuffTempXML.append("<Column>");
                            			strBuffTempXML.append(gen.writeValueOf("OrderId", iRes.getString("OrderId")));
                            			strBuffTempXML.append(gen.writeValueOf("ColumnName", iRes.getString("ColumnName")));
                            			strBuffTempXML.append(gen.writeValueOf("ColumnType", iRes.getString("ColumnType")));
                            			strBuffTempXML.append(gen.writeValueOf("VariableName", iRes.getString("VarName")));
                            			strBuffTempXML.append(gen.writeValueOf("VariableId", iRes.getString("VarId")));
                            			strBuffTempXML.append(gen.writeValueOf("VarFieldId", iRes.getString("VarFieldId")));
                            			strBuffTempXML.append(gen.writeValueOf("VariableType", iRes.getString("varType")));
                            			strBuffTempXML.append(gen.writeValueOf("ExtObjId", iRes.getString("ExtObjId")));
                            			strBuffTempXML.append(gen.writeValueOf("Type", iRes.getString("Type")));
                            			strBuffTempXML.append(gen.writeValueOf("VariableName1", iRes.getString("VarName1")));
                            			strBuffTempXML.append(gen.writeValueOf("VariableId1", iRes.getString("VarId1")));
                            			strBuffTempXML.append(gen.writeValueOf("VarFieldId1", iRes.getString("VarFieldId1")));
                            			strBuffTempXML.append(gen.writeValueOf("VariableType1", iRes.getString("varType1")));
                            			strBuffTempXML.append(gen.writeValueOf("ExtObjId1", iRes.getString("ExtObjId1")));
                            			strBuffTempXML.append(gen.writeValueOf("Type1", iRes.getString("Type1")));
                            			strBuffTempXML.append(gen.writeValueOf("Operator", iRes.getString("Operator")));
                            			strBuffTempXML.append(gen.writeValueOf("Nullable", iRes.getString("Nullable")));
                            			strBuffTempXML.append("</Column>");
                            		}
                            		strBuffTempXML.append("</SetMap>");
                        			strBuffTempXML.append(gen.writeValueOf("TableName", tableName));
                                    if(iRes != null){
                                    	iRes.close();
                                    	iRes = null;
                                    }
                                    if(iPstmt != null){
                                    	iPstmt.close();
                                    	iPstmt = null;
                                    }
                                    
                                    //Filter part
                            		iPstmt = con.prepareCall("select OrderId, ColumnName, VarName, VarType, ExtObjId, VarId, VarFieldId, Operator, LogicalOperator "
                        					+ " from WFTableFilterDetails " + WFSUtil.getTableLockHintStr(iDbType) + " Where ProcessDefId = ? AND ActivityId = ? "
                        					+ " AND RuleId = ? ");
	                        		iPstmt.setInt(1, iProcessDefID);
	                        		iPstmt.setInt(2, ActivityId);
	                        		iPstmt.setInt(3, ruleId);
	                        		iRes = iPstmt.executeQuery();
	                        		strBuffTempXML.append("<FilterMap>");
	                        		while(iRes.next()){
	                        			strBuffTempXML.append("<Column>");
	                        			strBuffTempXML.append(gen.writeValueOf("OrderId", iRes.getString("OrderId")));
	                        			strBuffTempXML.append(gen.writeValueOf("EntityName", tableName));
	                        			strBuffTempXML.append(gen.writeValueOf("ColumnName", iRes.getString("ColumnName")));
	                        			strBuffTempXML.append(gen.writeValueOf("VariableName", iRes.getString("VarName")));
	                        			strBuffTempXML.append(gen.writeValueOf("VariableId", iRes.getString("VarId")));
	                        			strBuffTempXML.append(gen.writeValueOf("VarFieldId", iRes.getString("VarFieldId")));
	                        			strBuffTempXML.append(gen.writeValueOf("VariableType", iRes.getString("varType")));
	                        			strBuffTempXML.append(gen.writeValueOf("ExtObjId", iRes.getString("ExtObjId")));
	                        			strBuffTempXML.append(gen.writeValueOf("Operator", iRes.getString("Operator")));
	                        			strBuffTempXML.append(gen.writeValueOf("LogicalOperator", iRes.getString("LogicalOperator")));
	                        			strBuffTempXML.append("</Column>");
	                        		}
	                        		strBuffTempXML.append("</FilterMap>");
                                    if(iRes != null){
                                    	iRes.close();
                                    	iRes = null;
                                    }
                                    if(iPstmt != null){
                                    	iPstmt.close();
                                    	iPstmt = null;
                                    }
                            	}
                            	if(ruletypeId == WFSConstant.RETRIEVE_RULE){
                            		//Select part
                            		PreparedStatement iPstmt = con.prepareCall("select OrderId, EntityName, ColumnName, ColumnType, Nullable, VarName, varType, VarId, VarFieldId, ExtObjId "
                            				+ " from WFTableMappingDetails " + WFSUtil.getTableLockHintStr(iDbType) + " where ProcessDefId = ? AND ActivityId = ? AND RuleId = ?" + emptyMappedColumnCheck);
                            		iPstmt.setInt(1, iProcessDefID);
                            		iPstmt.setInt(2, ActivityId);
                            		iPstmt.setInt(3, ruleId);
                            		ResultSet iRes = iPstmt.executeQuery();
                            		strBuffTempXML.append("<SelectMap>");
                            		while(iRes.next()){
                                		strBuffTempXML.append("<Column>");
                            			strBuffTempXML.append(gen.writeValueOf("OrderId", iRes.getString("OrderId")));
                            			strBuffTempXML.append(gen.writeValueOf("ColumnName", iRes.getString("ColumnName")));
                            			strBuffTempXML.append(gen.writeValueOf("ColumnType", iRes.getString("ColumnType")));
                            			strBuffTempXML.append(gen.writeValueOf("VariableName", iRes.getString("VarName")));
                            			strBuffTempXML.append(gen.writeValueOf("VariableId", iRes.getString("VarId")));
                            			strBuffTempXML.append(gen.writeValueOf("VarFieldId", iRes.getString("VarFieldId")));
                            			strBuffTempXML.append(gen.writeValueOf("VariableType", iRes.getString("varType")));
                            			strBuffTempXML.append(gen.writeValueOf("ExtObjId", iRes.getString("ExtObjId")));
                            			strBuffTempXML.append(gen.writeValueOf("Nullable", iRes.getString("Nullable")));
                            			strBuffTempXML.append(gen.writeValueOf("EntityName", iRes.getString("EntityName")));
                            			strBuffTempXML.append("</Column>");
                            		}
                            		strBuffTempXML.append("</SelectMap>");
                                    if(iRes != null){
                                    	iRes.close();
                                    	iRes = null;
                                    }
                                    if(iPstmt != null){
                                    	iPstmt.close();
                                    	iPstmt = null;
                                    }
                                    
                                    //Filter part
                            		iPstmt = con.prepareCall("select TF.OrderId, TF.ColumnName, TF.VarName, TF.VarType, TF.ExtObjId, TF.VarId, TF.VarFieldId, "
                            				+ " TF.Operator, TF.LogicalOperator, TD.EntityName from WFTableFilterDetails TF " + WFSUtil.getTableLockHintStr(iDbType)
                            				+ ", WFTableDetails TD " + WFSUtil.getTableLockHintStr(iDbType) + " Where TF.ProcessDefId = TD.ProcessDefId "
                            				+ " AND TF.ActivityId = TD.ActivityId AND TF.RuleId = TD.RuleId AND TF.EntityId = TD.EntityId "
                            				+ " AND TF.ProcessDefId = ? AND TF.ActivityId = ? AND TF.RuleId = ? ");
                            		iPstmt.setInt(1, iProcessDefID);
                            		iPstmt.setInt(2, ActivityId);
                            		iPstmt.setInt(3, ruleId);
                            		iRes = iPstmt.executeQuery();
                            		strBuffTempXML.append("<FilterMap>");
                            		while(iRes.next()){
                                		strBuffTempXML.append("<Column>");
                            			strBuffTempXML.append(gen.writeValueOf("OrderId", iRes.getString("OrderId")));
                            			strBuffTempXML.append(gen.writeValueOf("ColumnName", iRes.getString("ColumnName")));
                            			strBuffTempXML.append(gen.writeValueOf("EntityName", iRes.getString("EntityName")));
                            			strBuffTempXML.append(gen.writeValueOf("VariableName", iRes.getString("VarName")));
                            			strBuffTempXML.append(gen.writeValueOf("VariableId", iRes.getString("VarId")));
                            			strBuffTempXML.append(gen.writeValueOf("VarFieldId", iRes.getString("VarFieldId")));
                            			strBuffTempXML.append(gen.writeValueOf("VariableType", iRes.getString("varType")));
                            			strBuffTempXML.append(gen.writeValueOf("ExtObjId", iRes.getString("ExtObjId")));
                            			strBuffTempXML.append(gen.writeValueOf("Operator", iRes.getString("Operator")));
                            			strBuffTempXML.append(gen.writeValueOf("LogicalOperator", iRes.getString("LogicalOperator")));
                            			strBuffTempXML.append("</Column>");
                            		}
                            		strBuffTempXML.append("</FilterMap>");
                                    if(iRes != null){
                                    	iRes.close();
                                    	iRes = null;
                                    }
                                    if(iPstmt != null){
                                    	iPstmt.close();
                                    	iPstmt = null;
                                    }
                                    
                                    //Join Part
                                    //Step1 : Get the table map details-
                                    tableName = "";
                                    Map<Integer, String> tableMap = new HashMap<Integer, String>();
                            		iPstmt = con.prepareCall("select EntityId, EntityName from WFTableDetails " + WFSUtil.getTableLockHintStr(iDbType) 
                            			+ " where ProcessDefId = ? AND ActivityId = ? AND RuleId = ?" );
                            		iPstmt.setInt(1, iProcessDefID);
                            		iPstmt.setInt(2, ActivityId);
                            		iPstmt.setInt(3, ruleId);
                            		iRes = iPstmt.executeQuery();
                            		while(iRes.next()){
                            			int entityId = iRes.getInt("EntityId");
                            			String entityName = iRes.getString("EntityName");
                            			tableName = entityName;
                            			tableMap.put(entityId, entityName);
                            		}
                                    if(iRes != null){
                                    	iRes.close();
                                    	iRes = null;
                                    }
                                    if(iPstmt != null){
                                    	iPstmt.close();
                                    	iPstmt = null;
                                    }
                                    strBuffTempXML.append(gen.writeValueOf("TableName", tableName));
                                    
                                    //Step2 : Get the join details
                            		iPstmt = con.prepareCall("select EntityId_1, ColumnName_1, EntityId_2, ColumnName_2, JoinType from WFTableJoinDetails " 
                            				+ WFSUtil.getTableLockHintStr(iDbType) + " where  ProcessDefId = ? and ActivityId = ? AND RuleId = ? order by EntityId_1, EntityId_2" );
                            		iPstmt.setInt(1, iProcessDefID);
                            		iPstmt.setInt(2, ActivityId);
                            		iPstmt.setInt(3, ruleId);
                            		iRes = iPstmt.executeQuery();
                            		int prevEntityId_1 = 0;
                            		int prevEntityId_2 = 0;
                            		strBuffTempXML.append("<JoinMap>");
                            		int joinCount = 0;
                            		while(iRes.next()){
                            			joinCount++;
                            			int currEntityId_1 = iRes.getInt("EntityId_1");
                            			int currEntityId_2 = iRes.getInt("EntityId_2");
                            			
                            			if(prevEntityId_1 == 0 && prevEntityId_2 == 0){
                            				strBuffTempXML.append("<Join>");
                            				strBuffTempXML.append("<Table1>" + tableMap.get(currEntityId_1) + "</Table1>");
                            				strBuffTempXML.append("<Table2>" + tableMap.get(currEntityId_2) + "</Table2>");
                            				strBuffTempXML.append(gen.writeValueOf("JoinType", iRes.getString("JoinType")));
                            				strBuffTempXML.append("<JoinColumns>");
                            			}
                            			else if(prevEntityId_1 != currEntityId_1 || prevEntityId_2 != currEntityId_2){
                            				strBuffTempXML.append("</JoinColumns>");
                            				strBuffTempXML.append("</Join>");
                            				strBuffTempXML.append("<Join>");
                            				strBuffTempXML.append("<Table1>" + tableMap.get(currEntityId_1) + "</Table1>");
                            				strBuffTempXML.append("<Table2>" + tableMap.get(currEntityId_2) + "</Table2>");
                            				strBuffTempXML.append(gen.writeValueOf("JoinType", iRes.getString("JoinType")));
                            				strBuffTempXML.append("<JoinColumns>");
                            			}
                        				strBuffTempXML.append("<Column>");
                        				strBuffTempXML.append(gen.writeValueOf("TableName1", tableMap.get(currEntityId_1)));
                        				strBuffTempXML.append(gen.writeValueOf("ColumnName1", iRes.getString("ColumnName_1")));
                        				strBuffTempXML.append(gen.writeValueOf("TableName2", tableMap.get(currEntityId_2)));
                        				strBuffTempXML.append(gen.writeValueOf("ColumnName2", iRes.getString("ColumnName_2")));
                        				strBuffTempXML.append("</Column>");
                        				
                        				prevEntityId_1 = currEntityId_1;
                        				prevEntityId_2 = currEntityId_2;
                            		}
                            		if(joinCount > 0){
                        				strBuffTempXML.append("</JoinColumns>");
                        				strBuffTempXML.append("</Join>");
                            		}
                            		strBuffTempXML.append("</JoinMap>");
                                    if(iRes != null){
                                    	iRes.close();
                                    	iRes = null;
                                    }
                                    if(iPstmt != null){
                                    	iPstmt.close();
                                    	iPstmt = null;
                                    }
                            	}
                                strBuffTempXML.append("</Operation>");
                            }
                            if(res != null){
                            	res.close();
                            	res = null;
                            }
                            if(dsPstmt != null){
                            	dsPstmt.close();
                            	dsPstmt = null;
                            }
                            strBuffTempXML.append("</Operations>");*/

                            //Get Data Source information.
                        	PreparedStatement dsPstmt = null;
                        	ResultSet res = null;
                            String configTypeStr="";
                            int configId = -1;
                            String isolateFlagStr = "Y";
                        	String queryString = "select ConfigurationID, IsolateFlag,ConfigType from WFDEActivityTable " + WFSUtil.getTableLockHintStr(iDbType) + " where ProcessDefId = ? "
                        					+ " and ActivityId = ?";
                            dsPstmt = con.prepareStatement(queryString);
                            dsPstmt.setInt(1, iProcessDefID);
                            dsPstmt.setInt(2, ActivityId);
                            res = dsPstmt.executeQuery();
                            if(res.next()){
                            	configId = res.getInt("ConfigurationID");
                            	isolateFlagStr = res.getString("IsolateFlag");
                            	configTypeStr = res.getString("ConfigType");
                            }
                            if(res != null){
                            	res.close();
                            	res = null;
                            }
                            if(dsPstmt != null){
                            	dsPstmt.close();
                            	dsPstmt = null;
                            }
                            
                            if(configId > 0){
                            	queryString = "select ConfigName "+ " from WFDEConfigTable " + WFSUtil.getTableLockHintStr(iDbType) + " where ProcessDefId = ? AND ActivityId = ? ";
                                dsPstmt = con.prepareStatement(queryString);
                                dsPstmt.setInt(1, iProcessDefID);
                                dsPstmt.setInt(2, ActivityId);
                                //dsPstmt.setInt(2, 1);
                                res = dsPstmt.executeQuery();
                                strBuffTempXML.append("<DataSource>");
                                /*if(res.next()){
                                    tempXml.append(gen.writeValueOf("ConfigurationID", configId+""));
                                    tempXml.append(gen.writeValueOf("ConfigurationName", res.getString("ConfigName")));
                                    tempXml.append(gen.writeValueOf("DBType", res.getString("DBType")));
                                    tempXml.append(gen.writeValueOf("HostName", res.getString("HostName")));                                        
                                    tempXml.append(gen.writeValueOf("Port", res.getString("Port")));                                        
                                    tempXml.append(gen.writeValueOf("ServiceName", res.getString("ServiceName")));
                                    tempXml.append(gen.writeValueOf("CabinetName", res.getString("DBName")));
                                    tempXml.append(gen.writeValueOf("UserName", res.getString("UserName")));
                                    tempXml.append(gen.writeValueOf("Password", res.getString("Password")));
                                }*/
                                if(res.next())
                                {
                                	strBuffTempXML.append(gen.writeValueOf("ConfigurationID", configId+""));
                                	strBuffTempXML.append(gen.writeValueOf("DataSourceName",res.getString("ConfigName")));
                                }
                                strBuffTempXML.append(gen.writeValueOf("IsolateFlag", isolateFlagStr));
                                strBuffTempXML.append("</DataSource>");
                                if(res != null){
                                	res.close();
                                	res = null;
                                }
                                if(dsPstmt != null){
                                	dsPstmt.close();
                                	dsPstmt = null;
                                }	
                            }else{
                            	strBuffTempXML.append("<DataSource>");
                                strBuffTempXML.append(gen.writeValueOf("ConfigurationID", configId+""));
                                strBuffTempXML.append(gen.writeValueOf("IsolateFlag", isolateFlagStr));
                                strBuffTempXML.append("</DataSource>");
                            }
                            //Individual Rule details.
                            /*queryString = "select RuleId, RuleOrderId, RuleType, RuleName, RuleTypeId, Param1, Type1, ExtObjID1, VariableId_1, VarFieldId_1, "
                            		+ " Param2, Type2, ExtObjID2, VariableId_2, VarFieldId_2, Param3, Type3, ExtObjID3, VariableId_3, VarFieldId_3, Operator, "
                            		+ " LogicalOp, IndentLevel from WFRuleFlowData " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessDefId = ? and ActivityId = ? order By RuleOrderId Asc";
                            dsPstmt = con.prepareStatement(queryString);
                            dsPstmt.setInt(1, procDefId);
                            dsPstmt.setInt(2, ActivityId);
                            res = dsPstmt.executeQuery();
                            tempXml.append("<RuleRows>");
                            while(res.next()){
                                tempXml.append("<RuleRow>");
                                tempXml.append(gen.writeValueOf("RuleId", res.getString("RuleId")));
                                tempXml.append(gen.writeValueOf("RuleOrderId", res.getString("RuleOrderId")));                                        
                                tempXml.append(gen.writeValueOf("RuleType", res.getString("RuleType")));                                        
                                tempXml.append(gen.writeValueOf("RuleName", res.getString("RuleName")));
                                tempXml.append(gen.writeValueOf("RuleTypeId", res.getString("RuleTypeId")));
                                tempXml.append(gen.writeValueOf("Param1", res.getString("Param1")));
                                tempXml.append(gen.writeValueOf("Type1", res.getString("Type1")));
                                tempXml.append(gen.writeValueOf("ExtObjID1", res.getString("ExtObjID1")));
                                tempXml.append(gen.writeValueOf("VariableId_1", res.getString("VariableId_1")));
                                tempXml.append(gen.writeValueOf("VarFieldId_1", res.getString("VarFieldId_1")));                                        
                                tempXml.append(gen.writeValueOf("Param2", res.getString("Param2")));                                        
                                tempXml.append(gen.writeValueOf("Type2", res.getString("Type2")));
                                tempXml.append(gen.writeValueOf("ExtObjID2", res.getString("ExtObjID2")));
                                tempXml.append(gen.writeValueOf("VariableId_2", res.getString("VariableId_2")));
                                tempXml.append(gen.writeValueOf("VarFieldId_2", res.getString("VarFieldId_2")));
                                tempXml.append(gen.writeValueOf("Param3", res.getString("Param3")));
                                tempXml.append(gen.writeValueOf("Type3", res.getString("Type3")));
                                tempXml.append(gen.writeValueOf("ExtObjID3", res.getString("ExtObjID3")));                                        
                                tempXml.append(gen.writeValueOf("VariableId_3", res.getString("VariableId_3")));                                        
                                tempXml.append(gen.writeValueOf("VarFieldId_3", res.getString("VarFieldId_3")));
                                tempXml.append(gen.writeValueOf("Operator", res.getString("Operator")));
                                tempXml.append(gen.writeValueOf("LogicalOp", res.getString("LogicalOp")));
                                tempXml.append(gen.writeValueOf("IndentLevel", res.getString("IndentLevel")));
                                tempXml.append("</RuleRow>");
                            }
                            tempXml.append("</RuleRows>");
                            if(res != null){
                            	res.close();
                            	res = null;
                            }
                            if(dsPstmt != null){
                            	dsPstmt.close();
                            	dsPstmt = null;
                            }*/
                            
                            //Get Rule OPeration Type Details
                            queryString = "select distinct(exchangeId) from WFDETableMappingDetails " + WFSUtil.getTableLockHintStr(iDbType) + " where ProcessDefId = ? and ActivityId = ? ";
                            dsPstmt = con.prepareStatement(queryString);
                            dsPstmt.setInt(1, iProcessDefID);
                            dsPstmt.setInt(2, ActivityId);
                            res = dsPstmt.executeQuery();
                            strBuffTempXML.append("<Operations>");
                            while(res.next()){
                            	int exchangeId = res.getInt("exchangeId");
                            	//int ruletypeId = res.getInt("RuleTypeId");
                            	String updateIfExist="";
                            	String dxVarType="";
                                String tableName = "";
                                String rowCountVariableId = "";
                                strBuffTempXML.append("<Operation>");
                            	//tempXml.append(gen.writeValueOf("RuleId", ruleId + ""));
                                //tempXml.append(gen.writeValueOf("RuleTypeId", ruletypeId + ""));
                                strBuffTempXML.append(gen.writeValueOf("exchangeId", exchangeId+""));
                                strBuffTempXML.append(gen.writeValueOf("configTypeStr", configTypeStr));
                                
                            	if(configTypeStr.equalsIgnoreCase(WFSConstant.EXPORT_OPERATION)/*WFSConstant.INSERT_RULE*/){
                            		PreparedStatement iPstmt = con.prepareCall("select EntityName, OrderId,VariableType, ColumnName,ColumnType, RowCountVariableId,FilterString,EntityType, Nullable, VarName, varType, VarId, VarFieldId, ExtObjId,updateIfExist "
                            				+ " from WFDETableMappingDetails " + WFSUtil.getTableLockHintStr(iDbType) + " where ProcessDefId = ? AND ActivityId = ? AND exchangeId = ?" + emptyMappedColumnCheck);
                            		iPstmt.setInt(1, iProcessDefID);
                            		iPstmt.setInt(2, ActivityId);
                            		iPstmt.setInt(3, exchangeId);
                            		ResultSet iRes = iPstmt.executeQuery();
                            		strBuffTempXML.append("<InsertMap>");
                            		while(iRes.next()){
                            			//tableName = iRes.getString("EntityName");
                            			rowCountVariableId = iRes.getString("RowCountVariableId");
                            			updateIfExist = iRes.getString("updateIfExist");
                            			dxVarType = iRes.getString("VariableType");
                            			strBuffTempXML.append("<Column>");
                            			strBuffTempXML.append(gen.writeValueOf("EntityName", iRes.getString("EntityName")));	                                			                                      		
                                		strBuffTempXML.append(gen.writeValueOf("OrderId", iRes.getString("OrderId")));
                            			strBuffTempXML.append(gen.writeValueOf("ColumnName", iRes.getString("ColumnName")));
                            			strBuffTempXML.append(gen.writeValueOf("FilterString", iRes.getString("FilterString")));
                            			strBuffTempXML.append(gen.writeValueOf("EntityType", iRes.getString("EntityType")));
                               			strBuffTempXML.append(gen.writeValueOf("ColumnType", iRes.getString("ColumnType")));
                            			strBuffTempXML.append(gen.writeValueOf("VariableName", iRes.getString("VarName")));
                            			strBuffTempXML.append(gen.writeValueOf("VariableId", iRes.getString("VarId")));
                            			strBuffTempXML.append(gen.writeValueOf("VarFieldId", iRes.getString("VarFieldId")));
                            			strBuffTempXML.append(gen.writeValueOf("VariableType", iRes.getString("varType")));
                            			strBuffTempXML.append(gen.writeValueOf("ExtObjId", iRes.getString("ExtObjId")));
                            			strBuffTempXML.append(gen.writeValueOf("Nullable", iRes.getString("Nullable")));
                            			strBuffTempXML.append("</Column>");
                            		}
                            		strBuffTempXML.append("</InsertMap>");
                        			//tempXml.append(gen.writeValueOf("TableName", tableName));
                            		strBuffTempXML.append(gen.writeValueOf("RowCountVariableId",rowCountVariableId ));
                        			
                            		strBuffTempXML.append(gen.writeValueOf("updateIfExist", updateIfExist));
                            		strBuffTempXML.append(gen.writeValueOf("dxVarType", dxVarType));
                                    if(iRes != null){
                                    	iRes.close();
                                    	iRes = null;
                                    }
                                    if(iPstmt != null){
                                    	iPstmt.close();
                                    	iPstmt = null;
                                    }
                                    
                                    //Relation Part
                                    iPstmt = con.prepareCall("select EntityName,EntityColumnName,ComplexTableName,RelationColumnName,ColumnType "
                            					+ " from WFDETableRelationdetails " + WFSUtil.getTableLockHintStr(iDbType) + " Where ProcessDefId = ? AND ActivityId = ? "
                            					+ " AND exchangeId = ? ");
                            		iPstmt.setInt(1, iProcessDefID);
                            		iPstmt.setInt(2, ActivityId);
                            		iPstmt.setInt(3, exchangeId);
                            		iRes = iPstmt.executeQuery();
                            		strBuffTempXML.append("<RelationMap>");
                            		while(iRes.next()){
                            			strBuffTempXML.append("<Column>");
                                		strBuffTempXML.append(gen.writeValueOf("EntityName", iRes.getString("EntityName")));
                            			strBuffTempXML.append(gen.writeValueOf("EntityColumnName", iRes.getString("EntityColumnName")));
                            			strBuffTempXML.append(gen.writeValueOf("ComplexTableName", iRes.getString("ComplexTableName")));
                            			strBuffTempXML.append(gen.writeValueOf("RelationColumnName", iRes.getString("RelationColumnName")));
                            			strBuffTempXML.append(gen.writeValueOf("ColumnType", iRes.getString("ColumnType")));
                            			strBuffTempXML.append("</Column>");
                            		}
                            		strBuffTempXML.append("</RelationMap>");
                                    if(iRes != null){
                                    	iRes.close();
                                    	iRes = null;
                                    }
                                    if(iPstmt != null){
                                    	iPstmt.close();
                                    	iPstmt = null;
                                    }
                            	}
                            	/*if(ruletypeId == WFSConstant.UPDATE_RULE){
                            		//Set part
                            		PreparedStatement iPstmt = con.prepareCall("select EntityName, OrderId, ColumnName, Nullable, "
                            				+ " VarName, varType, VarId, VarFieldId, ExtObjId, Type, VarName1, varType1, VarId1, VarFieldId1, ExtObjId1, Type1, "
                            				+ " Operator, ColumnType from WFTableMappingDetails " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessDefId = ? "
                            				+ " AND ActivityId = ? AND RuleId = ? AND OperationType = 'E' " + emptyMappedColumnCheck);
                            		iPstmt.setInt(1, procDefId);
                            		iPstmt.setInt(2, ActivityId);
                            		iPstmt.setInt(3, ruleId);
                            		ResultSet iRes = iPstmt.executeQuery();
                            		tempXml.append("<SetMap>");
                            		while(iRes.next()){
                            			tableName = iRes.getString("EntityName");
                                		tempXml.append("<Column>");
                            			tempXml.append(gen.writeValueOf("OrderId", iRes.getString("OrderId")));
                            			tempXml.append(gen.writeValueOf("ColumnName", iRes.getString("ColumnName")));
                            			tempXml.append(gen.writeValueOf("ColumnType", iRes.getString("ColumnType")));
                            			tempXml.append(gen.writeValueOf("VariableName", iRes.getString("VarName")));
                            			tempXml.append(gen.writeValueOf("VariableId", iRes.getString("VarId")));
                            			tempXml.append(gen.writeValueOf("VarFieldId", iRes.getString("VarFieldId")));
                            			tempXml.append(gen.writeValueOf("VariableType", iRes.getString("varType")));
                            			tempXml.append(gen.writeValueOf("ExtObjId", iRes.getString("ExtObjId")));
                            			tempXml.append(gen.writeValueOf("Type", iRes.getString("Type")));
                            			tempXml.append(gen.writeValueOf("VariableName1", iRes.getString("VarName1")));
                            			tempXml.append(gen.writeValueOf("VariableId1", iRes.getString("VarId1")));
                            			tempXml.append(gen.writeValueOf("VarFieldId1", iRes.getString("VarFieldId1")));
                            			tempXml.append(gen.writeValueOf("VariableType1", iRes.getString("varType1")));
                            			tempXml.append(gen.writeValueOf("ExtObjId1", iRes.getString("ExtObjId1")));
                            			tempXml.append(gen.writeValueOf("Type1", iRes.getString("Type1")));
                            			tempXml.append(gen.writeValueOf("Operator", iRes.getString("Operator")));
                            			tempXml.append(gen.writeValueOf("Nullable", iRes.getString("Nullable")));
                            			tempXml.append("</Column>");
                            		}
                            		tempXml.append("</SetMap>");
                        			tempXml.append(gen.writeValueOf("TableName", tableName));
                                    if(iRes != null){
                                    	iRes.close();
                                    	iRes = null;
                                    }
                                    if(iPstmt != null){
                                    	iPstmt.close();
                                    	iPstmt = null;
                                    }
                                    
                                    //Filter part
                            		iPstmt = con.prepareCall("select OrderId, ColumnName, VarName, VarType, ExtObjId, VarId, VarFieldId, Operator, LogicalOperator "
                            					+ " from WFTableFilterDetails " + WFSUtil.getTableLockHintStr(dbType) + " Where ProcessDefId = ? AND ActivityId = ? "
                            					+ " AND RuleId = ? ");
                            		iPstmt.setInt(1, procDefId);
                            		iPstmt.setInt(2, ActivityId);
                            		iPstmt.setInt(3, ruleId);
                            		iRes = iPstmt.executeQuery();
                            		tempXml.append("<FilterMap>");
                            		while(iRes.next()){
                                		tempXml.append("<Column>");
                            			tempXml.append(gen.writeValueOf("OrderId", iRes.getString("OrderId")));
                            			tempXml.append(gen.writeValueOf("EntityName", tableName));
                            			tempXml.append(gen.writeValueOf("ColumnName", iRes.getString("ColumnName")));
                            			tempXml.append(gen.writeValueOf("VariableName", iRes.getString("VarName")));
                            			tempXml.append(gen.writeValueOf("VariableId", iRes.getString("VarId")));
                            			tempXml.append(gen.writeValueOf("VarFieldId", iRes.getString("VarFieldId")));
                            			tempXml.append(gen.writeValueOf("VariableType", iRes.getString("varType")));
                            			tempXml.append(gen.writeValueOf("ExtObjId", iRes.getString("ExtObjId")));
                            			tempXml.append(gen.writeValueOf("Operator", iRes.getString("Operator")));
                            			tempXml.append(gen.writeValueOf("LogicalOperator", iRes.getString("LogicalOperator")));
                            			tempXml.append("</Column>");
                            		}
                            		tempXml.append("</FilterMap>");
                                    if(iRes != null){
                                    	iRes.close();
                                    	iRes = null;
                                    }
                                    if(iPstmt != null){
                                    	iPstmt.close();
                                    	iPstmt = null;
                                    }
                            	}*/
                            	if(configTypeStr.equalsIgnoreCase(WFSConstant.IMPORT_OPERATION) /*WFSConstant.RETRIEVE_RULE*/){
                            		//Select part
                            		PreparedStatement iPstmt = con.prepareCall("select EntityName, OrderId,VariableType, ColumnName,ColumnType, RowCountVariableId,FilterString,EntityType, Nullable, VarName, varType, VarId, VarFieldId, ExtObjId,updateIfExist "
                            				+ " from WFDETableMappingDetails " + WFSUtil.getTableLockHintStr(iDbType) + " where ProcessDefId = ? AND ActivityId = ? AND exchangeId = ?" + emptyMappedColumnCheck);
                            		iPstmt.setInt(1, iProcessDefID);
                            		iPstmt.setInt(2, ActivityId);
                            		iPstmt.setInt(3, exchangeId);
                            		ResultSet iRes = iPstmt.executeQuery();
                            		strBuffTempXML.append("<SelectMap>");
                            		while(iRes.next()){
                            			//tableName = iRes.getString("EntityName");
                            			rowCountVariableId = iRes.getString("RowCountVariableId");
                            			updateIfExist = iRes.getString("updateIfExist");
                            			dxVarType = iRes.getString("VariableType");
                            			strBuffTempXML.append("<Column>");
                            			strBuffTempXML.append(gen.writeValueOf("EntityName", iRes.getString("EntityName")));	                                			                                      		
                                		strBuffTempXML.append(gen.writeValueOf("OrderId", iRes.getString("OrderId")));
                            			strBuffTempXML.append(gen.writeValueOf("ColumnName", iRes.getString("ColumnName")));
                            			strBuffTempXML.append(gen.writeValueOf("FilterString", iRes.getString("FilterString")));
                            			strBuffTempXML.append(gen.writeValueOf("EntityType", iRes.getString("EntityType")));
                               			strBuffTempXML.append(gen.writeValueOf("ColumnType", iRes.getString("ColumnType")));
                            			strBuffTempXML.append(gen.writeValueOf("VariableName", iRes.getString("VarName")));
                            			strBuffTempXML.append(gen.writeValueOf("VariableId", iRes.getString("VarId")));
                            			strBuffTempXML.append(gen.writeValueOf("VarFieldId", iRes.getString("VarFieldId")));
                            			strBuffTempXML.append(gen.writeValueOf("VariableType", iRes.getString("varType")));
                            			strBuffTempXML.append(gen.writeValueOf("ExtObjId", iRes.getString("ExtObjId")));
                            			strBuffTempXML.append(gen.writeValueOf("Nullable", iRes.getString("Nullable")));
                            			strBuffTempXML.append("</Column>");
                            		}
                            		strBuffTempXML.append("</SelectMap>");
                            		strBuffTempXML.append(gen.writeValueOf("RowCountVariableId",rowCountVariableId ));                                			
                                    strBuffTempXML.append(gen.writeValueOf("updateIfExist", updateIfExist));
                            		strBuffTempXML.append(gen.writeValueOf("dxVarType", dxVarType));
                                    if(iRes != null){
                                    	iRes.close();
                                    	iRes = null;
                                    }
                                    if(iPstmt != null){
                                    	iPstmt.close();
                                    	iPstmt = null;
                                    }
                                    /*
                                    //Filter part
                            		iPstmt = con.prepareCall("select TF.OrderId, TF.ColumnName, TF.VarName, TF.VarType, TF.ExtObjId, TF.VarId, TF.VarFieldId, "
                            				+ " TF.Operator, TF.LogicalOperator, TD.EntityName from WFTableFilterDetails TF " + WFSUtil.getTableLockHintStr(dbType)
                            				+ ", WFTableDetails TD " + WFSUtil.getTableLockHintStr(dbType) + " Where TF.ProcessDefId = TD.ProcessDefId "
                            				+ " AND TF.ActivityId = TD.ActivityId AND TF.RuleId = TD.RuleId AND TF.OrderId = TD.OrderId AND TF.EntityId = TD.EntityId "
                            				+ " AND TF.ProcessDefId = ? AND TF.ActivityId = ? AND TF.RuleId = ? ");
                            		iPstmt.setInt(1, procDefId);
                            		iPstmt.setInt(2, ActivityId);
                            		iPstmt.setInt(3, exchangeId);
                            		iRes = iPstmt.executeQuery();
                            		tempXml.append("<FilterMap>");
                            		while(iRes.next()){
                                		tempXml.append("<Column>");
                            			tempXml.append(gen.writeValueOf("OrderId", iRes.getString("OrderId")));
                            			tempXml.append(gen.writeValueOf("ColumnName", iRes.getString("ColumnName")));
                            			tempXml.append(gen.writeValueOf("EntityName", iRes.getString("EntityName")));
                            			tempXml.append(gen.writeValueOf("VariableName", iRes.getString("VarName")));
                            			tempXml.append(gen.writeValueOf("VariableId", iRes.getString("VarId")));
                            			tempXml.append(gen.writeValueOf("VarFieldId", iRes.getString("VarFieldId")));
                            			tempXml.append(gen.writeValueOf("VariableType", iRes.getString("varType")));
                            			tempXml.append(gen.writeValueOf("ExtObjId", iRes.getString("ExtObjId")));
                            			tempXml.append(gen.writeValueOf("Operator", iRes.getString("Operator")));
                            			tempXml.append(gen.writeValueOf("LogicalOperator", iRes.getString("LogicalOperator")));
                            			tempXml.append("</Column>");
                            		}
                            		tempXml.append("</FilterMap>");
                                    if(iRes != null){
                                    	iRes.close();
                                    	iRes = null;
                                    }
                                    if(iPstmt != null){
                                    	iPstmt.close();
                                    	iPstmt = null;
                                    }
                                    
                                    //Join Part
                                    //Step1 : Get the table map details-
                                    tableName = "";
                                    Map<Integer, String> tableMap = new HashMap<Integer, String>();
                            		iPstmt = con.prepareCall("select EntityId, EntityName from WFTableDetails " + WFSUtil.getTableLockHintStr(dbType) 
                            			+ " where ProcessDefId = ? AND ActivityId = ? AND RuleId = ?" );
                            		iPstmt.setInt(1, procDefId);
                            		iPstmt.setInt(2, ActivityId);
                            		iPstmt.setInt(3, exchangeId);
                            		iRes = iPstmt.executeQuery();
                            		while(iRes.next()){
                            			int entityId = iRes.getInt("EntityId");
                            			String entityName = iRes.getString("EntityName");
                            			tableName = entityName;
                            			tableMap.put(entityId, entityName);
                            		}
                                    if(iRes != null){
                                    	iRes.close();
                                    	iRes = null;
                                    }
                                    if(iPstmt != null){
                                    	iPstmt.close();
                                    	iPstmt = null;
                                    }
                                    tempXml.append(gen.writeValueOf("TableName", tableName));
                                    
                                    //Step2 : Get the join details
                            		iPstmt = con.prepareCall("select EntityId_1, ColumnName_1, EntityId_2, ColumnName_2, JoinType from WFTableJoinDetails " 
                            				+ WFSUtil.getTableLockHintStr(dbType) + " where  ProcessDefId = ? and ActivityId = ? AND RuleId = ? order by EntityId_1, EntityId_2" );
                            		iPstmt.setInt(1, procDefId);
                            		iPstmt.setInt(2, ActivityId);
                            		iPstmt.setInt(3, exchangeId);
                            		iRes = iPstmt.executeQuery();
                            		int prevEntityId_1 = 0;
                            		int prevEntityId_2 = 0;
                            		tempXml.append("<JoinMap>");
                            		int joinCount = 0;
                            		while(iRes.next()){
                            			joinCount++;
                            			int currEntityId_1 = iRes.getInt("EntityId_1");
                            			int currEntityId_2 = iRes.getInt("EntityId_2");
                            			
                            			if(prevEntityId_1 == 0 && prevEntityId_2 == 0){
                            				tempXml.append("<Join>");
                            				tempXml.append("<Table1>" + tableMap.get(currEntityId_1) + "</Table1>");
                            				tempXml.append("<Table2>" + tableMap.get(currEntityId_2) + "</Table2>");
                            				tempXml.append(gen.writeValueOf("JoinType", iRes.getString("JoinType")));
                            				tempXml.append("<JoinColumns>");
                            			}
                            			else if(prevEntityId_1 != currEntityId_1 || prevEntityId_2 != currEntityId_2){
                            				tempXml.append("</JoinColumns>");
                            				tempXml.append("</Join>");
                            				tempXml.append("<Join>");
                            				tempXml.append("<Table1>" + tableMap.get(currEntityId_1) + "</Table1>");
                            				tempXml.append("<Table2>" + tableMap.get(currEntityId_2) + "</Table2>");
                            				tempXml.append(gen.writeValueOf("JoinType", iRes.getString("JoinType")));
                            				tempXml.append("<JoinColumns>");
                            			}
                        				tempXml.append("<Column>");
                        				tempXml.append(gen.writeValueOf("TableName1", tableMap.get(currEntityId_1)));
                        				tempXml.append(gen.writeValueOf("ColumnName1", iRes.getString("ColumnName_1")));
                        				tempXml.append(gen.writeValueOf("TableName2", tableMap.get(currEntityId_2)));
                        				tempXml.append(gen.writeValueOf("ColumnName2", iRes.getString("ColumnName_2")));
                        				tempXml.append("</Column>");
                        				
                        				prevEntityId_1 = currEntityId_1;
                        				prevEntityId_2 = currEntityId_2;
                            		}
                            		if(joinCount > 0){
                        				tempXml.append("</JoinColumns>");
                        				tempXml.append("</Join>");
                            		}
                            		tempXml.append("</JoinMap>");
                                    if(iRes != null){
                                    	iRes.close();
                                    	iRes = null;
                                    }
                                    if(iPstmt != null){
                                    	iPstmt.close();
                                    	iPstmt = null;
                                    }
                                    */
                                    //Relation Part
                                    iPstmt = con.prepareCall("select EntityName,EntityColumnName,ComplexTableName,RelationColumnName,ColumnType "
                            					+ " from WFDETableRelationdetails " + WFSUtil.getTableLockHintStr(iDbType) + " Where ProcessDefId = ? AND ActivityId = ? "
                            					+ " AND exchangeId = ? AND RelationType = ? ");
                            		iPstmt.setInt(1, iProcessDefID);
                            		iPstmt.setInt(2, ActivityId);
                            		iPstmt.setInt(3, exchangeId);
                            		iPstmt.setString(4,"P");
                            		iRes = iPstmt.executeQuery();
                            		strBuffTempXML.append("<RelationMap>");
                            		while(iRes.next()){
                            			strBuffTempXML.append("<Column>");
                                		strBuffTempXML.append(gen.writeValueOf("EntityName", iRes.getString("EntityName")));
                            			strBuffTempXML.append(gen.writeValueOf("EntityColumnName", iRes.getString("EntityColumnName")));
                            			strBuffTempXML.append(gen.writeValueOf("ComplexTableName", iRes.getString("ComplexTableName")));
                            			strBuffTempXML.append(gen.writeValueOf("RelationColumnName", iRes.getString("RelationColumnName")));
                            			strBuffTempXML.append(gen.writeValueOf("ColumnType", iRes.getString("ColumnType")));
                            			strBuffTempXML.append("</Column>");
                            		}
                            		strBuffTempXML.append("</RelationMap>");
                                    if(iRes != null){
                                    	iRes.close();
                                    	iRes = null;
                                    }
                                    if(iPstmt != null){
                                    	iPstmt.close();
                                    	iPstmt = null;
                                    }
                            	}
                            	strBuffTempXML.append("</Operation>");
                            }
                            if(res != null){
                            	res.close();
                            	res = null;
                            }
                            if(dsPstmt != null){
                            	dsPstmt.close();
                            	dsPstmt = null;
                            }
                            strBuffTempXML.append("</Operations>");
                        
                            strBuffTempXML.append("</DXActivityInfo>");
                            strBuffTempXML.append("</DataExchangeActivityInfo>");
                        }
                        strBuffTempXML.append("</DataExchangeActivitiesInfo>");
                        if(RS != null){
                        	RS.close();
                        	RS = null;
                        }
                        if(pstmt != null){
                        	pstmt.close();
                        	pstmt = null;
                        }
                        /* DATA EXHANGE Changes Ends here*/
                        
                        // Changes Starts for Bug Id 44375 
                            if(extTableDataFlag) {
                                strBuffTempXML.append("<ExtTableDetails>"); 
                                bpstmt = null;
                                bRs = null;
                                pstmt = con.prepareStatement("select DatabaseName, DatabaseType, UserId, PWD, TABLEName, ExtObjID, HostName, Service, Port, SecurityFlag, SortingColumn, ProcessVariantId from EXTDBCONFTABLE where ProcessDefId = ? and ProcessVariantId = 0");
                                pstmt.setInt(1, iProcessDefID);
                                RS = pstmt.executeQuery();
                                while(RS != null && RS.next()){
                                     strBuffTempXML.append("<ExtTableDetail>");
                                     strBuffTempXML.append(gen.writeValueOf("DatabaseName", RS.getString("DatabaseName")));
                                     strBuffTempXML.append(gen.writeValueOf("DatabaseType", RS.getString("DatabaseType")));
                                     strBuffTempXML.append(gen.writeValueOf("UserId", RS.getString("UserId")));
                                     strBuffTempXML.append(gen.writeValueOf("PWD", RS.getString("PWD")));
                                     strBuffTempXML.append(gen.writeValueOf("TABLEName", RS.getString("TABLEName"))); 
                                     int extObjId = RS.getInt("ExtObjID");
                                     strBuffTempXML.append(gen.writeValueOf("ExtObjID", String.valueOf(extObjId)));
                                     strBuffTempXML.append(gen.writeValueOf("HostName", RS.getString("HostName")));
                                     strBuffTempXML.append(gen.writeValueOf("Service", RS.getString("Service")));
                                     strBuffTempXML.append(gen.writeValueOf("Port", RS.getString("Port")));
                                     strBuffTempXML.append(gen.writeValueOf("SecurityFlag", RS.getString("SecurityFlag")));
                                     strBuffTempXML.append(gen.writeValueOf("SortingColumn", RS.getString("SortingColumn")));
                                     strBuffTempXML.append(gen.writeValueOf("ProcessVariantId", RS.getString("ProcessVariantId")));
                                     strBuffTempXML.append("<FieldDetails>");                                    
                                     
                                     bpstmt = con.prepareStatement("select FieldName, FieldType, FieldLength, DefaultValue, Attribute, VarPrecision from EXTDBFIELDDEFINITIONTABLE where ProcessDefId = ? and ExtObjID = ? ");
                                     bpstmt.setInt(1, iProcessDefID);
                                     bpstmt.setInt(2, extObjId);
                                     bRs = bpstmt.executeQuery(); 
                                     while(bRs != null && bRs.next()){
                                         strBuffTempXML.append("<FieldDetail>");
                                         strBuffTempXML.append(gen.writeValueOf("FieldName", bRs.getString("FieldName")));
                                         strBuffTempXML.append(gen.writeValueOf("FieldType", bRs.getString("FieldType")));
                                         strBuffTempXML.append(gen.writeValueOf("FieldLength", bRs.getString("FieldLength")));
                                         strBuffTempXML.append(gen.writeValueOf("DefaultValue", bRs.getString("DefaultValue")));
                                         strBuffTempXML.append(gen.writeValueOf("Attribute", bRs.getString("Attribute")));
                                         strBuffTempXML.append(gen.writeValueOf("VarPrecision", bRs.getString("VarPrecision")));
                                         strBuffTempXML.append(gen.writeValueOf("ExtObjId", String.valueOf(extObjId)));
                                         strBuffTempXML.append("</FieldDetail>");                                          
                                     }                                 
                                     
                                     strBuffTempXML.append("</FieldDetails>");
                                     strBuffTempXML.append("</ExtTableDetail>");

                                }
                                strBuffTempXML.append("</ExtTableDetails>");
                            }
                        }
			strBuffTempXML.append("\n</Process>\n");
			if(dataFlag){
			//Added by Ahsan Javed for getCalendarData --Started
			strBuffTempXML.append("<CalendarData>\n");
			pstmt = con.prepareStatement(" SELECT calId, calType, activityId FROM WFCalendarAssocTable " + WFSUtil.getTableLockHintStr(iDbType) + " WHERE processdefid = ? order by calId, calType");
			pstmt.setInt(1, iProcessDefID);
			pstmt.execute();
			RS = pstmt.getResultSet();
			HashMap tempMap = new HashMap();
			ArrayList assocList = null;
			String tempActivityId = null;
			String key = null;
			int tempPId = 0;
			int tempCalId = 0;
			String tempCalType = null;
			while (RS.next()) {
				tempCalId = RS.getInt("calId");
				tempCalType = RS.getString("calType");
				tempActivityId = RS.getString("activityId");
				if (tempCalType.equalsIgnoreCase("L")) {
					tempPId = iProcessDefID;
				} else {
					tempPId = 0;
				}
				key = tempCalId + string21 + tempPId;
				assocList = (ArrayList) tempMap.get(key);
				if (assocList == null) {
					assocList = new ArrayList();
					tempMap.put(key, assocList);
				}
				assocList.add(tempActivityId);
			}
			if (RS != null) {
				RS.close();
				RS = null;
			}
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
			/*WFS_8.0_026 will have to return all calendars defined in a process 
			 , whether or not they are asociated*/
			pstmt = con.prepareStatement(" SELECT calId  FROM WFCalDefTable " + WFSUtil.getTableLockHintStr(iDbType) + " WHERE processdefid = ? order by calId");
			pstmt.setInt(1, iProcessDefID);
			pstmt.execute();
			RS = pstmt.getResultSet();
			while(RS.next()){
				tempCalId = RS.getInt("calId");
				key = tempCalId + string21 + iProcessDefID;
				if (!tempMap.containsKey(key)) {
					ArrayList actvId = new ArrayList();
					actvId.add("-1");
					tempMap.put(key, actvId);
				}
			}
			if (RS != null) {
				RS.close();
				RS = null;
			}
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
                        
                        /* will have to return all calendars defined globally, whether or not they are asociated*/
                        pstmt = con.prepareStatement(" SELECT calId  FROM WFCalDefTable " + WFSUtil.getTableLockHintStr(iDbType) + " WHERE processdefid = ? order by calId");
                        pstmt.setInt(1, 0);
                        pstmt.execute();
                        RS = pstmt.getResultSet();
                        while (RS.next()) {
                            tempCalId = RS.getInt("calId");
                            key = tempCalId + string21 + 0;
                            if (!tempMap.containsKey(key)) {
                                ArrayList actvId = new ArrayList();
                                actvId.add("-1");
                                tempMap.put(key, actvId);
                            }
                        }
                        if (RS != null) {
                            RS.close();
                            RS = null;
                        }
                        if (pstmt != null) {
                            pstmt.close();
                            pstmt = null;
                        }

			Map.Entry entry = null;
			for (Iterator itr = tempMap.entrySet().iterator(); itr.hasNext(); ) {
				entry = (Map.Entry) itr.next();
				key = (String) entry.getKey();
				strBuffTempXML.append("<Calendar>\n");
				/** Bugzilla Bug 944, Duplicate data returned from API, 24/05/2007 - Ruhi Hira */
				tempCalId = Integer.parseInt(key.substring(0, key.indexOf(string21)));
				tempPId = Integer.parseInt(key.substring(key.indexOf(string21) + 1));
				strBuffTempXML.append(WFSUtil.getCalendarData(con, "N", gen, tempPId, tempCalId));
				assocList = (ArrayList) entry.getValue();
				strBuffTempXML.append("<Associations>\n");
				for (Iterator itr1 = assocList.iterator(); itr1.hasNext(); ) {
					tempActivityId = (String) itr1.next();
					strBuffTempXML.append("<Association>\n");
					strBuffTempXML.append("<ActivityId>");
					strBuffTempXML.append(tempActivityId);
					strBuffTempXML.append("</ActivityId>\n");
					strBuffTempXML.append("<CalendarType>");
					if (tempPId == 0) {
						strBuffTempXML.append("G");
					} else {
						strBuffTempXML.append("L");
					}
					strBuffTempXML.append("</CalendarType>\n");
					strBuffTempXML.append("</Association>\n");
				}
				strBuffTempXML.append("</Associations>\n");
				strBuffTempXML.append("</Calendar>\n");
			}
			strBuffTempXML.append("</CalendarData>\n");
			}
			if(isDocReq){
                strBuffTempXML.append("<DocumentTypes>\n");
                pstmt = con.prepareStatement("SELECT distinct DocId , DocName FROM DOCUMENTTYPEDEFTABLE WHERE ProcessDefId = ?  "
                        + "AND ProcessVariantId = 0 ORDER BY DocName ASC");//SrNo-2

                pstmt.setInt(1, iProcessDefID);
                RS = pstmt.executeQuery();
                while(RS.next()){
                    strBuffTempXML.append("<DocumentType>\n");
                    strBuffTempXML.append(gen.writeValueOf("DocIndex", String.valueOf(RS.getInt("DocId"))));
                    strBuffTempXML.append(gen.writeValueOf("DocName", RS.getString("DocName").replace("&", "&amp;")));
                    strBuffTempXML.append("</DocumentType>\n");
                }
                strBuffTempXML.append("</DocumentTypes>\n");
                String docIdStr = "";

                HashMap docDataClassMapping = (HashMap)CachedObjectCollection.getReference().getCacheObject(con, strEngine, iProcessDefID , WFSConstant.CACHE_CONST_DocumentDefinition, "0").getData();
                strBuffTempXML.append("<DocumentAssociation>\n");    
                            for (int iCount = 0; iCount < vectList.size(); ++iCount) {
								Activity actv = (Activity) vectList.get(iCount);
                                strBuffTempXML.append("<Activity>\n");   
                                int activityId = actv.iActivityId;
                                strBuffTempXML.append(gen.writeValueOf("ActivityId", String.valueOf(activityId)));
                                 pstmt = con.prepareStatement("SELECT distinct DocId , DocName , Attribute , Param1 , Type1 , ExtObjId1 , VariableId_1,"
                                        + " VarFieldId_1, Param2 , Type2 , ExtObjId2, VariableId_2, VarFieldId_2 "
                                        + "FROM DOCUMENTTYPEDEFTABLE A , ACTIVITYINTERFACEASSOCTABLE c  LEFT OUTER JOIN  SCANACTIONSTABLE B "
                                        + "ON C.ProcessDefId = B.ProcessDefID AND InterfaceElementId = B.DocTypeId AND c.ActivityId = B.ActivityId "
                                        + "WHERE c.ActivityId = ?  AND c.ProcessDefId = ?  AND c.ProcessDefId = A.ProcessDefId  AND c.InterfaceType = 'D' "
                                        + "AND InterfaceElementId = DocId and C.ProcessVariantId = A.ProcessVariantId AND A.ProcessVariantId = 0 "
                                        + "ORDER BY DocName ASC");//SrNo-2

                                pstmt.setInt(1, activityId);
                                pstmt.setInt(2, iProcessDefID);
                                pstmt.execute();
                                RS = pstmt.getResultSet();
                                strBuffTempXML.append("<DocumentTypes>\n");
                                int docid = 0;
                                int docid_old = 0;
                                boolean docTypeFlag = false;
                                while (RS.next()) {
                                    docTypeFlag = true;
                                    docid = RS.getInt("DocId");
                                    String docName = RS.getString("DocName");
                                    if (docid != docid_old) {
                                        if (docid_old != 0) {
                                            strBuffTempXML.append("</ScanActions>\n");
                                            strBuffTempXML.append("</DocumentType>\n");
                                        }
                                        docid_old = docid;
                                        docIdStr = String.valueOf(docid);//WFS_8.0_115
                                        strBuffTempXML.append("<DocumentType>\n");
                                        strBuffTempXML.append(gen.writeValueOf("DocumentTypeDefIndex", docIdStr));
                                        strBuffTempXML.append(gen.writeValueOf("DocumentTypeDefName", RS.getString(2).replace("&", "&amp;")));
                                        strBuffTempXML.append(gen.writeValueOf("Attribute", RS.getString(3)));
                                        if (docDataClassMapping.containsKey(docName.toUpperCase())) {
                                            strBuffTempXML.append(((WFDocDataClassMapping)docDataClassMapping.get(docName.toUpperCase())).getXML());
                                        }
                                        strBuffTempXML.append("<ScanActions>\n");
                                     }
                                     String str = RS.getString(4);
                                     if (!RS.wasNull()) {
                                        strBuffTempXML.append("<ScanAction>\n");
                                        strBuffTempXML.append(gen.writeValueOf("Parameter1", str));
                                        strBuffTempXML.append(gen.writeValueOf("Type1", RS.getString(5)));
                                        strBuffTempXML.append(gen.writeValueOf("ExternalObjectId1", RS.getString(6)));
                                        strBuffTempXML.append(gen.writeValueOf("VariableId1", RS.getString(7)));//SrNo-2

                                        strBuffTempXML.append(gen.writeValueOf("VarFieldId1", RS.getString(8)));//SrNo-2

                                        strBuffTempXML.append(gen.writeValueOf("Parameter2", RS.getString(9)));
                                        strBuffTempXML.append(gen.writeValueOf("Type2", RS.getString(10)));
                                        strBuffTempXML.append(gen.writeValueOf("ExternalObjectId2", RS.getString(11)));
                                        strBuffTempXML.append(gen.writeValueOf("VariableId2", RS.getString(12)));//SrNo-2

                                        strBuffTempXML.append(gen.writeValueOf("VarFieldId2", RS.getString(13)));//SrNo-2

                                        strBuffTempXML.append("</ScanAction>\n");
                                      }
                                }
                                if(docTypeFlag){
                                    strBuffTempXML.append("</ScanActions>\n");
                                    strBuffTempXML.append("</DocumentType>\n");
                                }
                                strBuffTempXML.append("</DocumentTypes>\n");
                                strBuffTempXML.append("</Activity>\n");    
                        }
                        strBuffTempXML.append("</DocumentAssociation>\n");
                    }
			//Added by Ahsan Javed for getCalendarData --Ended
			outputXML = new StringBuffer(500);
			outputXML.append(gen.createOutputFile("WFGetProcessInfo"));
			outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
			outputXML.append("<CacheTime>");
			//Changed by Ashish on 03/06/2005 for CacheTime related changes
			outputXML.append(new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US).format(CachedObjectCollection.getReference().getProcessLastModifiedTime(con, strEngine, iProcessDefID)));
			outputXML.append("</CacheTime>");
			outputXML.append(strBuffTempXML);
			outputXML.append(gen.closeOutputFile("WFGetProcessInfo"));
		} catch (SQLException e) { //end try
			WFSUtil.printErr(strEngine,"", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0) {
				if (e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
					+ ")";
				}
			} else {
				descr = e.getMessage();
			}
		} catch (NumberFormatException e) {
			WFSUtil.printErr(strEngine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(strEngine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (WFSException e) {
			mainCode = 0; // to avoid throw in finally.
			throw e;
		} catch (JTSException e) {
			WFSUtil.printErr(strEngine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(strEngine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		}  finally {
			try {
				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
			} catch (Exception e) { //end try
			/* ...ignore... */}
			try {
				if (rs3 != null) {
					rs3.close();
					rs3 = null;
				}
			} catch (Exception e) { //end try
			/* ...ignore... */}
			try {
				if (pstmt3 != null) {
					pstmt3.close();
					pstmt3 = null;
				}
			} catch (Exception e) { //end try
			/* ...ignore... */}
			
			//return output XML
		}
		if (mainCode != 0) {
			throw new WFSException(mainCode, subCode, errType, subject, descr);
		}//end finnally
		return outputXML.toString();
	} //end of method WFGetProcessInfo

	//----------------------------------------------------------------------------------------------------
	//	Function Name 				:	WFGetDynamicConstants
	//	Date Written (DD/MM/YYYY)	:	24/02/2005
	//	Author						:	Ruhi Hira
	//	Input Parameters			:	Connection, XMLParser, XMLGenerator
	//  Output Parameters			:	None
	//	Return Values				:	String
	//	Description					:   Returns the list of all dynamic constants.
	//  Change Details				:   SrNo-2, Dynamic Rule Modification, New API Added.
	//----------------------------------------------------------------------------------------------------
	public String WFGetDynamicConstants(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
		StringBuffer outputXML = new StringBuffer("");
		Statement stmt = null;
		ResultSet rs = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
                String engine = parser.getValueOf("EngineName", "", false);
		try {
			int sessionID = parser.getIntOf("SessionId", 0, true);
			
			int dbType = ServerProperty.getReference().getDBType(engine);
			char omniServiceFlag = parser.getCharOf("OmniService", 'N', true);
			StringBuffer tempXml = new StringBuffer(50);
			StringBuffer queryStr = null;
			/*This API will be called by SAP Inovker Utility in Synchronus Mode*/
			WFParticipant participant = null;
			/* Checking for validity of session.
             User type can be 'U' as well as 'P', as Process Server will make this call
             when dynamic constant cache will expire.
			 */
			if (omniServiceFlag == 'Y') {
				participant = new WFParticipant(0, "System", 'P', "SERVER", Locale.getDefault().toString());
			} else {
				participant = WMUser.WFCheckUpdateSession(con, sessionID, dbType);
			}
			if (participant != null) {
				if (participant.gettype() == 'U' || participant.gettype() == 'P') {
					int processDefinitionId = parser.getIntOf("ProcessDefinitionId", 0, true);
					String processName = parser.getValueOf("ProcessName", "", true);
					String sortOrder = parser.getValueOf("SortOrder", "A", true);
					int orderBy = 1; // parser.getIntOf("OrderBy", 1, true); /*Order By support removed from API ... */
					String lastValue = parser.getValueOf("LastValue", null, true); /* ConstantName, if OrderBy is 1; LastModifiedOn, if 2 */
					int noOfRecordsToFetch = parser.getIntOf("NoOfRecordsToFetch", ServerProperty.getReference().getBatchSize(), true);
					if (noOfRecordsToFetch > ServerProperty.getReference().getBatchSize() || noOfRecordsToFetch <= 0) //Added by Ahsan Javed for getBatchSize
						noOfRecordsToFetch = ServerProperty.getReference().getBatchSize();
					String countFlag = parser.getValueOf("CountFlag", "N", true);
					String sortStr = null;
					String opStr = null;
					String orderStr = null;
					int totalCount = 0;
					int retrievedCount = 0;
					String processName_temp = null;
					int processDefId = 0;
					int versionNo = 0;
					String constantName = null;
					String constantValue = null;
					java.util.Date lastModifiedOn = null;
					stmt = con.createStatement();
					/* Extracting processDefId, if only name is given in input, and validating the input. */
					if (processDefinitionId == 0 && (processName != null || !processName.equals(""))) {
						/*rs = stmt.executeQuery("Select max(processDefId) processDefId >From ProcessDefTable Where Upper(RTrim(processName)) = " +
                                               WFSConstant.WF_VARCHARPREFIX + processName.trim().toUpperCase() + "'");*/
						// Tirupati Srivastava : changes made to make code compatible with postgreSQL
						// Tirupati Srivastava    BUG ID 1798
						rs = stmt.executeQuery("Select max(processDefId) as processDefId From ProcessDefTable " + WFSUtil.getTableLockHintStr(dbType) + " Where " + WFSUtil.TO_STRING("processName", false, dbType) + " = " + WFSUtil.TO_STRING(WFSUtil.TO_STRING(processName.trim(), true, dbType), false, dbType));

						if (rs.next()) {
							processDefinitionId = rs.getInt("processDefId");
						} else {
							mainCode = WFSError.WF_OPERATION_FAILED;
							subCode = WFSError.WM_INVALID_PROCESS_DEFINITION;
							subject = WFSErrorMsg.getMessage(mainCode);
							descr = WFSErrorMsg.getMessage(subCode);
							errType = WFSError.WF_TMP;
						}
						rs.close();
						rs = null;
					} else if (processDefinitionId > 0) {
						rs = stmt.executeQuery("Select processDefId From ProcessDefTable " + WFSUtil.getTableLockHintStr(dbType) + " Where processDefId = " + processDefinitionId);
						if (!rs.next()) {
							mainCode = WFSError.WF_OPERATION_FAILED;
							subCode = WFSError.WM_INVALID_PROCESS_DEFINITION;
							subject = WFSErrorMsg.getMessage(mainCode);
							descr = WFSErrorMsg.getMessage(subCode);
							errType = WFSError.WF_TMP;
						}
						rs.close();
						rs = null;
					} else {
						mainCode = WFSError.WF_OPERATION_FAILED;
						subCode = WFSError.WM_INVALID_PROCESS_DEFINITION;
						subject = WFSErrorMsg.getMessage(mainCode);
						descr = WFSErrorMsg.getMessage(subCode);
						errType = WFSError.WF_TMP;
					}
					if (mainCode == 0) {
						queryStr = new StringBuffer(100);
						if (sortOrder.equalsIgnoreCase("D")) {
							sortStr = " DESC ";
							opStr = " < ";
						} else {
							sortStr = " ASC ";
							opStr = " > ";
						}
						if (orderBy == 2) {
							orderStr = " ConstantDefTable.lastModifiedOn ";
						} else {
							orderStr = " ConstantDefTable.constantName ";
						}
						queryStr.append(" Select * From (Select " + WFSUtil.getFetchPrefixStr(dbType, noOfRecordsToFetch + 1));
						// Tirupati Srivastava : changes made to make code compatible with postgreSQL
						queryStr.append(" ConstantDefTable.processDefId as processDefId, ProcessDefTable.processName as processName,");
						queryStr.append(" ProcessDefTable.versionNo as versionNo, ConstantDefTable.constantName as constantName,");
						queryStr.append(" ConstantDefTable.constantValue as constantValue, ConstantDefTable.lastModifiedOn as lastModifiedOn");
						queryStr.append(" From ConstantDefTable " + WFSUtil.getTableLockHintStr(dbType) + ", ProcessDefTable "+ WFSUtil.getTableLockHintStr(dbType));
						queryStr.append(" Where ConstantDefTable.processDefId = ProcessDefTable.processDefId ");
						queryStr.append(" And ProcessDefTable.processDefId = ");
						queryStr.append(processDefinitionId);
						if (lastValue != null && lastValue.trim().length() > 0) {
							queryStr.append(" And ");
							queryStr.append(orderStr);
							queryStr.append(opStr);
							if (orderBy == 2) {
								queryStr.append(WFSUtil.TO_DATE(lastValue, true, dbType));
							} else {
								queryStr.append(WFSUtil.TO_STRING(lastValue, true, dbType));
							}
						}
						queryStr.append(" Order By ");
						queryStr.append(" ConstantDefTable.processDefId ");
						queryStr.append(sortStr);
						queryStr.append(", ");
						queryStr.append(orderStr);
						queryStr.append(sortStr);
						queryStr.append(" ) TempTab ");
						queryStr.append(WFSUtil.getFetchSuffixStr(dbType, noOfRecordsToFetch + 1, WFSConstant.QUERY_STR_WHERE));
						rs = stmt.executeQuery(queryStr.toString());
						while (rs.next()) {
							if (retrievedCount < noOfRecordsToFetch) {
								retrievedCount++;
								processDefId = rs.getInt("processDefId");
								processName_temp = rs.getString("processName");
								versionNo = rs.getInt("versionNo");
								constantName = rs.getString("constantName");
								constantValue = rs.getString("constantValue");
								lastModifiedOn = rs.getTimestamp("lastModifiedOn");
								if (totalCount == 0) {
									tempXml.append(gen.writeValueOf("ProcessDefinitionId", processDefId + ""));
									tempXml.append(gen.writeValueOf("ProcessName", processName_temp));
									tempXml.append(gen.writeValueOf("ProcessVersion", versionNo + ""));
									tempXml.append("\n<DynamicConstants>");
								}
								tempXml.append("\n<DynamicConstant>\n");
								tempXml.append(gen.writeValueOf("ConstantName", constantName));
								tempXml.append(gen.writeValueOf("ConstantValue", constantValue));
								tempXml.append(gen.writeValueOf("LastModifiedOn", new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US).
										format(lastModifiedOn)).toString());
								tempXml.append("\n</DynamicConstant>");
							}
							totalCount++;
						}
						if (retrievedCount == 0) {
							mainCode = WFSError.WM_NO_MORE_DATA;
							subject = WFSErrorMsg.getMessage(mainCode);
							errType = WFSError.WF_TMP;
						} else {
							tempXml.append("\n</DynamicConstants>");
						}
						tempXml.append(gen.writeValueOf("RetrievedCount", "" + retrievedCount));
						tempXml.append(gen.writeValueOf("TotalCount", "" + totalCount));
						if (rs != null) {
							rs.close();
							rs = null;
						}
						if (stmt != null) {
							stmt.close();
							stmt = null;
						}
					} // end of if block, checking for maincode
				} else { // end of if block checking for participanttype
					mainCode = WFSError.WM_NO_MORE_DATA;
					subCode = WFSError.WFS_NORIGHTS;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}
			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if (mainCode == 0) {
				outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WFGetDynamicConstants"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(tempXml);
				outputXML.append(gen.closeOutputFile("WFGetDynamicConstants"));
			}
		} catch (SQLException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0) {
				if (e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
				}
			} else {
				descr = e.getMessage();
			}
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (WFSException e) {
			mainCode = 0;
			throw e;
		} catch (JTSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (stmt != null) {
					stmt.close();
					stmt = null;
				}
			} catch (Exception ignored) {}
			
		}
		if (mainCode != 0) {
			throw new WFSException(mainCode, subCode, errType, subject, descr);
		}
		/* End of finally */
		return outputXML.toString();
	}

	//----------------------------------------------------------------------------------------------------
	//	Function Name 				:	WFSetDynamicConstants
	//	Date Written (DD/MM/YYYY)	:	24/02/2005
	//	Author						:	Ruhi Hira
	//	Input Parameters			:	Connection, XMLParser, XMLGenerator
	//	Output Parameters			:	None.
	//	Return Values				:	String
	//	Description					:   Sets the dynamic constants given in input.
	//  Change Details				:	SrNo-2, DynamicRuleModification, New API added.
	//----------------------------------------------------------------------------------------------------
	public String WFSetDynamicConstants(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {

		StringBuffer outputXML = new StringBuffer("");
		Statement stmt = null;
		ResultSet rs = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
		XMLParser inputXML = new XMLParser();
		inputXML.setInputXML(parser.toString());
        String engine = parser.getValueOf("EngineName");
		int processDefinitionId=0;
		try {
			int sessionID = parser.getIntOf("SessionId", 0, false);
			
			int dbType = ServerProperty.getReference().getDBType(engine);
			StringBuffer queryStr = null;
			StringBuffer fieldName = new StringBuffer(50);
			String actionComments = parser.getValueOf("ActionComments", "", true);

			/*
             Checking for validity of session.
             Only user with type 'U' will make this call.
			 */
			WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);

			if (participant != null) {
				if (participant.gettype() == 'U') {
				    processDefinitionId = parser.getIntOf("ProcessDefinitionId", 0, false);

					/* Check for validation of process */
					String processName = null;
					stmt = con.createStatement();

					rs = stmt.executeQuery("Select processName From ProcessDefTable " + WFSUtil.getTableLockHintStr(dbType) + " Where processDefId = " + processDefinitionId);
					if (rs != null && rs.next()) {
						processName = rs.getString("processName").trim();
					} else {
						mainCode = WFSError.WFS_OPERATION_SET_DYNAMIC_CONST_FAILED;
						subCode = WFSError.WM_INVALID_PROCESS_DEFINITION;
						subject = WFSErrorMsg.getMessage(mainCode);
						descr = WFSErrorMsg.getMessage(subCode);
						errType = WFSError.WF_TMP;
					}
					if (rs != null) {
						rs.close();
						rs = null;
					}
					stmt.close();
					stmt = con.createStatement();
					if (mainCode == 0) {
						/* To check for modifiable rights on process. */
						StringBuffer tempStr = new StringBuffer(parser.toString());
						boolean rightsFlag = WFSUtil.checkRights(con, dbType, WFSConstant.CONST_OBJTYPE_PROCESS, processDefinitionId, sessionID, WFSConstant.CONST_PROCESS_MODIFY); 
						parser.setInputXML(tempStr.toString());

						if (rightsFlag) {
							int startIndex = 0;
							int endIndex = 0;
							String strConstantName = null;
							String strConstantValue = null;
							int noOfFields = parser.getNoOfFields("DynamicConstant");

							for (int i = 0; i < noOfFields; i++) {

								startIndex = parser.getStartIndex("DynamicConstant", endIndex, Integer.MAX_VALUE);
								endIndex = parser.getEndIndex("DynamicConstant", startIndex, Integer.MAX_VALUE);
								strConstantName = parser.getValueOf("ConstantName", startIndex, endIndex).trim();
								strConstantValue = parser.getValueOf("ConstantValue", startIndex, endIndex).trim();

								queryStr = new StringBuffer(50);
								queryStr.append("Update ConstantDefTable Set ConstantValue = ");
								if (strConstantValue.equals("")) {
									queryStr.append(" null ");
								} else { // Tirupati Srivastava : changes made to make code compatible with postgreSQL
									//queryStr.append(WFSConstant.WF_VARCHARPREFIX + strConstantValue + "'");
									queryStr.append(WFSUtil.TO_STRING(strConstantValue, true, dbType));
								}
								queryStr.append(", lastModifiedOn = ");
								queryStr.append(WFSUtil.getDate(dbType));
								//queryStr.append(" Where Upper(RTRIM(constantName)) = ");
								queryStr.append(" Where " + WFSUtil.TO_STRING("constantName", false, dbType) + " = ");
								//queryStr.append(WFSConstant.WF_VARCHARPREFIX + strConstantName.toUpperCase());
								queryStr.append(WFSUtil.TO_STRING(WFSUtil.TO_STRING(strConstantName, true, dbType), false, dbType));
								queryStr.append(" AND processDefId = ");
								queryStr.append(processDefinitionId);

								stmt.addBatch(queryStr.toString());

								/* To generate Message to be inserted into MessageTable. */
								if (i == 0) {
									fieldName.append("<DynamicConstants>");
									stmt.addBatch("Update ProcessDefTable Set lastModifiedOn = "
											+ WFSUtil.getDate(dbType)
											+ " Where processDefId = "
											+ processDefinitionId);
								}

								fieldName.append("<DynamicConstant>");
								fieldName.append("<Name>");
								fieldName.append(strConstantName);
								fieldName.append("</Name>");
								fieldName.append("<Value>");
								fieldName.append(strConstantValue);
								fieldName.append("</Value>");
								fieldName.append("</DynamicConstant>");

							}

							if (noOfFields <= 0) {
								mainCode = WFSError.WFS_OPERATION_SET_DYNAMIC_CONST_FAILED;
								subCode = WFSError.WF_ELEMENT_MISSING;
								subject = WFSErrorMsg.getMessage(mainCode);
								descr = WFSErrorMsg.getMessage(subCode);
								errType = WFSError.WF_TMP;
							} else {
								fieldName.append("</DynamicConstants>");
								if (con.getAutoCommit()) {
									con.setAutoCommit(false);
								}
								int[] res = stmt.executeBatch();
								for (int i = 0; i < res.length; i++) {
									if (res[i] <= 0) {
										if (!con.getAutoCommit()) {
											con.rollback();
											con.setAutoCommit(true);
										}
										if (res[i] == 0) {
											mainCode = WFSError.WFS_OPERATION_SET_DYNAMIC_CONST_FAILED;
											subCode = WFSError.WFS_ERR_NO_CONST_DEF_FOR_PROCESS;
											subject = WFSErrorMsg.getMessage(mainCode);
											descr = WFSErrorMsg.getMessage(subCode);
											errType = WFSError.WF_TMP;
										} else {
											mainCode = WFSError.WFS_OPERATION_SET_DYNAMIC_CONST_FAILED;
											subCode = WFSError.WFS_INV_PRM;
											subject = WFSErrorMsg.getMessage(mainCode);
											descr = WFSErrorMsg.getMessage(subCode);
											errType = WFSError.WF_TMP;
										}
										break;
									}
								}
								try {
									if (stmt != null) {
										stmt.clearBatch();
										stmt.close();
										stmt = null;
									}
								} catch (Exception ignored) {}
								if (mainCode == 0) {
									WFSUtil.genAdminLog(engine, con, WFSConstant.WFL_Constant_Updated, processDefinitionId, 0, null, participant.getid(), participant.getname().trim(), 0, fieldName.toString(), null, null);
									WFTMSUtil.genRequestId(engine, con, WFSConstant.WFL_Constant_Updated, processName, "P", processDefinitionId, actionComments, inputXML, participant,processDefinitionId);
									if (!con.getAutoCommit()) {
										con.commit();
										con.setAutoCommit(true);
									}
								}
							}
						} else {
							mainCode = WFSError.WFS_OPERATION_SET_DYNAMIC_CONST_FAILED;
							subCode = WFSError.WFS_NORIGHTS;
							subject = WFSErrorMsg.getMessage(mainCode);
							errType = WFSError.WF_TMP;
							descr = WFSErrorMsg.getMessage(subCode);
						}
					} // end of if block checking for mainCode
				} else {
					mainCode = WFSError.WFS_OPERATION_SET_DYNAMIC_CONST_FAILED;
					subCode = WFSError.WFS_NORIGHTS;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}
			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if (mainCode == 0) {
				CachedObjectCollection.getReference().expireProcessCache(engine, processDefinitionId);
				outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WFSetDynamicConstants"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(gen.closeOutputFile("WFSetDynamicConstants"));
			}
		} catch (SQLException e) { // end of try
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0) {
				if (e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
				}
			} else {
				descr = e.getMessage();
			}
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (WFSException e) {
			mainCode = 0;
			throw e;
		} catch (JTSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		}  finally {
			try {
				if (!con.getAutoCommit()) {
					con.rollback();
					con.setAutoCommit(true);
				}
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (stmt != null) {
					stmt.clearBatch();
					stmt.close();
					stmt = null;
				}
			} catch (Exception ignored) {}
			
		}
		if (mainCode != 0) {
			throw new WFSException(mainCode, subCode, errType, subject, descr);
		}
		return outputXML.toString();
	}

	/* Tirupati Srivastava : inserting two API's for quicksearch feature */

	//----------------------------------------------------------------------------------------------------
	//	Function Name 				:	WFSetQuickSearchVariables
	//	Date Written (DD/MM/YYYY)	:	20/08/2007
	//	Author						:	Tirupati Swaroop Srivastava
	//	Input Parameters			:	Connection , XMLParser , XMLGenerator
	//	Output Parameters			:   none
	//	Return Values				:	String (output xml)
	//	Description					:   Implementation of Setting/Deleting the variables , Reads the Option and Operation from the
	//									input xml and sets/Deletes the variable data to/from the Database and returns the output xml
	//									Rewritten
	//----------------------------------------------------------------------------------------------------

	public String WFSetQuickSearchVariables(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
		StringBuffer outputXML = new StringBuffer("");
		StringBuffer failedList = null;
		PreparedStatement pstmtInsert = null; /* 12/11/2007 : Tirupati Srivastava - changed stmt to pstmt (BUG ID 1717) */
		PreparedStatement pstmtDelete = null;
		PreparedStatement pstmtSelect = null;
		ResultSet rs=null;
		PreparedStatement pstmt = null;        
        ResultSet irs = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
		XMLParser inputXML = new XMLParser();
		inputXML.setInputXML(parser.toString());
        String engine = parser.getValueOf("EngineName");
	    char char21 = 21;
		String string21 = "" + char21;
		HashMap<String,String> processNameAndDefIDMap = new HashMap<String,String>();
		try {
			int sessionID = parser.getIntOf("SessionId", 0, false);
			
			failedList = new StringBuffer(500);
			String actionComments = parser.getValueOf("ActionComments", "", true);
			boolean isArtifactMigrationCase = parser.getValueOf("ArtificationMigration", "N", true).equalsIgnoreCase("Y");
			int dbType = ServerProperty.getReference().getDBType(engine);
			WFParticipant user = WFSUtil.WFCheckSession(con, sessionID); // checking for session validity
			if (user != null) {
				int start = parser.getStartIndex("SearchVariables", 0, Integer.MAX_VALUE); // extracting info abt SearchVariables
				int deadend = parser.getEndIndex("SearchVariables", start, Integer.MAX_VALUE);
				int noOfAtt = parser.getNoOfFields("SearchVariable", start, deadend);
				int end = 0;
				String processDefId = "";
				String variableName = "";
				String tempStr = "";
				String aliasName = "";
				String searchFlag = "";
				char operation = '\0';
				int tempInt = 0;
				String processName = "";
				String exeStr = ""; 
				WMAttribute wfAttribute = null;//WFS_8.0_146
				HashMap attribMap = null;//WFS_8.0_146
				/* 12/11/2007 : Tirupati Srivastava - changed stmt to pstmt (BUG ID 1717) */
				pstmtInsert = con.prepareStatement("INSERT INTO WFQUICKSEARCHTABLE (PROCESSDEFID,VARIABLENAME,ALIAS,SEARCHALLVERSION) VALUES ( ?, ?, ?, ? )"); // Inserting SearchVariable into the table
				pstmtDelete = con.prepareStatement(" DELETE FROM WFQUICKSEARCHTABLE WHERE  PROCESSDEFID = ? AND ALIAS = ? "); // Deleting SearchVariable From The Table

				if (con.getAutoCommit()) { // setting autocommit false if its true
					con.setAutoCommit(false);
				}

				for (int i = 0; i < noOfAtt; i++) {
					start = parser.getStartIndex("SearchVariable", end, deadend); // parsing info specific to each SearchVariable
					end = parser.getEndIndex("SearchVariable", start, deadend);
					aliasName = parser.getValueOf("Alias", start, end);
					if(isArtifactMigrationCase)
					{
						boolean deleteQuickSearchVar = false;
						processName = parser.getValueOf("ProcessName", start, end);
						if(processNameAndDefIDMap.containsKey(processName))
						{
							processDefId = processNameAndDefIDMap.get(processName);
						}
						else
						{
							exeStr = "select ProcessDefId from ProcessDefTable "+ WFSUtil.getTableLockHintStr(dbType) + " where ProcessName = ? order by VersionNo desc ";
							pstmt = con.prepareStatement(exeStr);
							WFSUtil.DB_SetString(1, processName, pstmt, dbType);
							pstmt.execute();
							irs = pstmt.getResultSet();
							if (irs.next()) {
								processDefId = String.valueOf(irs.getInt(1));
								processNameAndDefIDMap.put(processName,processDefId);
								deleteQuickSearchVar = true;
							}
							else
							{
								failedList.append("<AliasDetails>");
								failedList.append(gen.writeValueOf("Alias", aliasName));
								failedList.append(gen.writeValueOf("Reason", WFSErrorMsg.getMessage(WFSError.WF_INVALID_PROCESS_NAME)));
								failedList.append("</AliasDetails>");
								continue;
							}
							
							 if(irs!=null){
								 irs.close();
								 irs= null;
							 }
							 if(pstmt!=null){
								 pstmt.close();
								 pstmt = null;
							 }
						}
						if(deleteQuickSearchVar)
						{
						pstmt = con.prepareStatement(" DELETE FROM WFQUICKSEARCHTABLE WHERE  PROCESSDEFID = ? ");//Deleting all quick search variable for a process
						pstmt.setInt(1, Integer.parseInt(processDefId));
						pstmt.execute();
						
						 if(pstmt!=null){
							 pstmt.close();
							 pstmt = null;
						 }
						}
						tempStr = "I";
					}
					else
					{
					processDefId = parser.getValueOf("ProcessDefinitionID", start, end);
					tempStr = parser.getValueOf("Operation", start, end);
					}
					variableName = parser.getValueOf("Name", start, end);
					searchFlag = parser.getValueOf("SearchAllVersion", start, end);
					tempInt = Integer.parseInt(processDefId);
					StringBuffer tempXml = new StringBuffer(100);

					if (tempStr != null && tempStr.length() > 0) {
						operation = tempStr.charAt(0);
					}
					// Changes for Bug 102446 - UT Defect Starts here
					// Check for whether provided variable in varlist is declared as search variable or not in Target environment.
					if(isArtifactMigrationCase)
					{
						pstmt = con.prepareStatement(" SELECT * FROM WFSearchVariableTable "+ WFSUtil.getTableLockHintStr(dbType) + " WHERE  PROCESSDEFID = ?  and FIELDNAME = ? and SCOPE = ?");
						pstmt.setInt(1, Integer.parseInt(processDefId));
						pstmt.setString(2, variableName);
						pstmt.setString(3, "C");
						pstmt.execute();
						irs = pstmt.getResultSet();
						if (!irs.next()) {
							failedList.append("<AliasDetails>");
							failedList.append(gen.writeValueOf("Alias", aliasName));
							failedList.append(gen.writeValueOf("Reason", WFSErrorMsg.getMessage(WFSError.WF_SEARCH_VARIABLE_NOT_DEFINED)));
							failedList.append("</AliasDetails>");
							continue;
						}
						
						 if(irs!=null){
							 irs.close();
							 irs= null;
						 }
						 if(pstmt!=null){
							 pstmt.close();
							 pstmt = null;
						 }
					}
					// Changes for Bug 102446 - UT Defect Ends here

					int resultDelete = 0;
					int resultAdd = 0;
					boolean aliasExistFlag=false;
					/*WFS_8.0_146*/
					WFAttributedef attribs = (WFAttributedef) CachedObjectCollection.getReference().getCacheObject(con, engine.toUpperCase(), tempInt, WFSConstant.CACHE_CONST_Attribute, "0" + string21 + "0").getData();
					attribMap = attribs.getAttribMap();
					wfAttribute = (WMAttribute) attribMap.get(variableName.toUpperCase());
					switch (operation) { // executing Switch Case to handle Insert/Delete Operation
					case 'I': /* 12/11/2007 : Tirupati Srivastava - changed stmt to pstmt (BUG ID 1717) */
						try {
							pstmtSelect=con.prepareStatement("Select Alias from WFQUICKSEARCHTABLE ");
							rs=pstmtSelect.executeQuery();
							while(rs.next()){
								if(rs.getString("Alias").equalsIgnoreCase(aliasName)){
									aliasExistFlag=true;
									failedList.append("<AliasDetails>");
									failedList.append(gen.writeValueOf("Alias", aliasName));
									failedList.append(gen.writeValueOf("Reason", WFSErrorMsg.getMessage(WFSError.WF_ALIAS_ALREADY_EXISTS)));
									failedList.append("</AliasDetails>");
									break;
								}
							}
							rs.close();
							pstmtSelect.close();
							if(aliasExistFlag==false){
							pstmtInsert.setInt(1, tempInt);
							pstmtInsert.setString(2, wfAttribute.name);/*WFS_8.0_146*/
							pstmtInsert.setString(3, aliasName);
							pstmtInsert.setString(4, searchFlag);
							resultAdd = pstmtInsert.executeUpdate();
							}
						} catch (Exception e) {
							failedList.append("<AliasDetails>");
							failedList.append(gen.writeValueOf("Alias", aliasName));
							failedList.append(gen.writeValueOf("Reason", WFSErrorMsg.getMessage(WFSError.WF_ALIAS_ALREADY_EXISTS)));
							failedList.append("</AliasDetails>");
						}
						break;

					case 'D':
						pstmtDelete.setInt(1, tempInt);
						pstmtDelete.setString(2, aliasName);
						resultDelete = pstmtDelete.executeUpdate();
						break;
					default:

						/* do nothing */
						break;
					}

					if (operation == 'D') {
						if (resultDelete == 0) {
							failedList.append(gen.writeValueOf("Alias", aliasName));
						} else { // Tirupati Srivastava : work for ActionId for Setting quicksearchVariable
							tempXml.append("<variableName>" + variableName + "</variableName>");
							tempXml.append("<aliasName>" + aliasName + "</aliasName>");
							//Bug 38003 - History is not generated for operation 'Delete Variable in Quick Search Manangement' in Audit log
							tempXml.append("<SearchAllVersion>" + searchFlag + "</SearchAllVersion>");
							WFSUtil.genAdminLog(engine, con, WFSConstant.WFL_Delete_QuickSearchVariable, tempInt, 0, null, user.getid(), user.getname().trim(), 0, tempXml.toString(), null, null);
						}
					}

					if (operation == 'I' && resultAdd > 0) {
						tempXml.append("<variableName>" + variableName + "</variableName>");
						tempXml.append("<aliasName>" + aliasName + "</aliasName>");
						//Bug 38002 - History is not generated for operation 'Add Variable in Quick Search     Manangement' in Audit log
						tempXml.append("<SearchAllVersion>" + searchFlag + "</SearchAllVersion>");
						WFSUtil.genAdminLog(engine, con, WFSConstant.WFL_Add_QuickSearchVariable, tempInt, 0, null, user.getid(), user.getname().trim(), 0, tempXml.toString(), null, null);
					}
				}
				WFTMSUtil.genRequestId(engine, con, WFSConstant.WFL_Add_QuickSearchVariable, "", "P", 0, actionComments, inputXML, user,tempInt);

				if(pstmtInsert!=null){
					pstmtInsert.close();
				}
				pstmtInsert = null;
				pstmtDelete.close();
				pstmtDelete = null;

				if (!con.getAutoCommit()) { // commiting and setting autocommit true
					con.commit();
					con.setAutoCommit(true);
				}

			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if (mainCode == 0) {
				outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WFSetQuickSearchVariables"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				if (failedList.length() > 0) {
					outputXML.append("<FailedList>");
					outputXML.append(failedList);
					outputXML.append("</FailedList>");
				}
				outputXML.append(gen.closeOutputFile("WFSetQuickSearchVariables"));
			}
		} catch (SQLException e) { // throwing exceptions
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0) {
				if (e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
				}
			} else {
				descr = e.getMessage();
			}
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (JTSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} finally {
			try {
				if (!con.getAutoCommit()) { // rollback
					con.rollback();
					con.setAutoCommit(true);
				}
			} catch (Exception ignored) {}
			try {
				if (pstmtInsert != null) { // checking preparedStatement object and closing it if it is open
					pstmtInsert.close(); /* 12/11/2007 : Tirupati Srivastava - changed stmt to pstmt (BUG ID 1717) */
					pstmtInsert = null;
				}
			} catch (Exception ignored) {}

			try {
				if (pstmtDelete != null) { // checking preparedStatement object and closing it if it is open
					pstmtDelete.close();
					pstmtDelete = null;
				}
			} catch (Exception ignored) {}
			try {
				if (pstmtSelect != null) { // checking preparedStatement object and closing it if it is open
					pstmtSelect.close();
					pstmtSelect = null;
				}
			} catch (Exception ignored) {}
			try {
				if (pstmt != null) { // checking preparedStatement object and closing it if it is open
					pstmt.close();
					pstmt = null;
				}
			} catch (Exception ignored) {}
			try {
				if (irs != null) { // checking preparedStatement object and closing it if it is open
					irs.close();
					irs = null;
				}
			} catch (Exception ignored) {}

			
		}
		if (mainCode != 0) {
			throw new WFSException(mainCode, subCode, errType, subject, descr);
		}
		return outputXML.toString();
	}

	//----------------------------------------------------------------------------------------------------
	//	Function Name 				:	WFGetQuickSearchVariables
	//	Date Written (DD/MM/YYYY)	:	21/08/2007
	//	Author						:	Tirupati Swaroop Srivastava
	//	Input Parameters			:	Connection , XMLParser , XMLGenerator
	//	Output Parameters			:   none
	//	Return Values				:	String (output xml)
	//	Description					:   Implementation of Getting the variables , Reads the Option from the input xml and gets the
	//									variable data from the Database and returns the output xml Rewritten
	//----------------------------------------------------------------------------------------------------

	public String WFGetQuickSearchVariables(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
		StringBuffer outputXML = new StringBuffer("");
		PreparedStatement pstmt = null;
		Statement stmt = null; //WFS_7.1_026
		ResultSet rs = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
        String engine = parser.getValueOf("EngineName");
		char char21 = 21;
		String string21 = "" + char21;
		String locale = "en_US";
        String scope = "";
		
		try {
			int sessionID = parser.getIntOf("SessionId", 0, false);
			int count = 0;
			char pdaFlag = parser.getCharOf("PDAFlag", 'N', true);
			String enableMultiLingual = parser.getValueOf("EnableMultiLingual", "N", true);	
			boolean pmMode = parser.getValueOf("OpenMode", "WD", true).equalsIgnoreCase("PM");
			if(pmMode){
				enableMultiLingual="N";
			}
			StringBuffer tempXml = new StringBuffer(500);
			int dbType = ServerProperty.getReference().getDBType(engine);
			WFParticipant user = WFSUtil.WFCheckSession(con, sessionID); // checking for session validity
			if (user != null) {
				scope = user.getscope();
                if(!scope.equalsIgnoreCase("ADMIN"))
                    locale = user.getlocale();
							
			int processDefinitionID = parser.getIntOf("ProcessDefinitionID", 0, true); //parsing xml tags
				String processName = parser.getValueOf("ProcessName");
				String inputRights = parser.getValueOf("RightFlag", "000000", true);
				WMAttribute wfAttribute = null; // declaring variables used
				HashMap attribMap = null;
				StringBuffer queryStr = new StringBuffer(200);
								queryStr.append(" SELECT WFQUICKSEARCHTABLE.PROCESSDEFID, VERSIONNO, PROCESSNAME, "
						+ "VARIABLENAME, ALIAS, SEARCHALLVERSION, USERDEFINEDNAME,WFQUICKSEARCHTABLE.VARIABLEID FROM PROCESSDEFTABLE "+ WFSUtil.getTableLockHintStr(dbType) + " , "
						+ "WFQUICKSEARCHTABLE "+ WFSUtil.getTableLockHintStr(dbType) + ", VARMAPPINGTABLE " + WFSUtil.getTableLockHintStr(dbType) + " WHERE PROCESSDEFTABLE.PROCESSDEFID "
						+ "= WFQUICKSEARCHTABLE.PROCESSDEFID AND WFQUICKSEARCHTABLE.PROCESSDEFID = "
						+ "VARMAPPINGTABLE.PROCESSDEFID AND WFQUICKSEARCHTABLE.VARIABLENAME = "
						+ "VARMAPPINGTABLE.SYSTEMDEFINEDNAME ");
				// Tirupati Srivastava : changes made to make code compatible with postgreSQL
				if (processDefinitionID > 0) { // Case 1 : when only ProcessDefinitionID is given
					queryStr.append(" AND WFQUICKSEARCHTABLE.PROCESSDEFID = ?");
					if(!((locale != null && !locale.equalsIgnoreCase("en-us")) && enableMultiLingual.equalsIgnoreCase("Y"))) {
						queryStr.append(" ORDER BY " + WFSUtil.TO_STRING("ALIAS", false, dbType));
					}
					pstmt = con.prepareStatement(queryStr.toString());					pstmt.setInt(1, processDefinitionID);
					rs = pstmt.executeQuery(); // Generating Resultset
				} else if (!processName.equals("")) { // Case 2 : when only ProcessName is given
					queryStr.append(" AND " + WFSUtil.TO_STRING("PROCESSNAME", false, dbType) + " = " + WFSUtil.TO_STRING("?", false, dbType) );
					if(!((locale != null && !locale.equalsIgnoreCase("en-us")) && enableMultiLingual.equalsIgnoreCase("Y"))) {
						queryStr.append(" ORDER BY " + WFSUtil.TO_STRING("ALIAS", false, dbType));
					}

					pstmt = con.prepareStatement(queryStr.toString());
					pstmt.setString(1, processName);
					rs = pstmt.executeQuery(); // Generating Resultset
				} else { //Case 3 : when none of them is given

					//WFS_7.1_026
					stmt = con.createStatement();
					StringBuffer strBuff = new StringBuffer(100);
					strBuff.append("<?xml version=\"1.0\"?>");
					strBuff.append("<WMGetProcessList_Input>");		
					strBuff.append("<Option>WMGetProcessList</Option><EngineName>");
					strBuff.append(engine);
					strBuff.append("</EngineName><SessionID>");
					strBuff.append(sessionID);
					strBuff.append("</SessionID><DataFlag>N</DataFlag>");
					strBuff.append("<PDAFlag>").append(pdaFlag).append("</PDAFlag>");
					strBuff.append("<LatestVersionFlag>N</LatestVersionFlag>");
					strBuff.append("<RightFlag>").append(inputRights).append("</RightFlag>");
					strBuff.append("<BatchInfo><NoOfRecordsToFetch>9999</NoOfRecordsToFetch></BatchInfo>");
					strBuff.append("</WMGetProcessList_Input>");
					parser.setInputXML(strBuff.toString());
					String output = WMGetProcessList(con,parser,gen);
					parser.setInputXML(output);
					int startIndex = -1 ;
					int endIndex =-1 ;
					int noOfInstances = -1 ;
					String processDefinitionId ="";
					String processDefStr ="";
					startIndex = parser.getStartIndex("ProcessList", 0, Integer.MAX_VALUE);
					endIndex = parser.getEndIndex("ProcessList", 0, Integer.MAX_VALUE);
					noOfInstances = parser.getNoOfFields("ProcessInfo", startIndex, endIndex);
					for (int i = 0; i < noOfInstances; i++) {
						if (i == 0) 
							startIndex = parser.getStartIndex("ProcessInfo", startIndex, Integer.MAX_VALUE);
						else
						{
							startIndex = parser.getStartIndex("ProcessInfo", endIndex, Integer.MAX_VALUE);
							processDefStr += ",";
						}

						endIndex = parser.getEndIndex("ProcessInfo", startIndex, Integer.MAX_VALUE);
						processDefinitionId = parser.getValueOf("ID", startIndex, endIndex);
						processDefStr +=  processDefinitionId;
					}
					if(processDefStr.length() >0)
						queryStr.append(" AND WFQUICKSEARCHTABLE.PROCESSDEFID IN ( "+WFSUtil.TO_SANITIZE_STRING(processDefStr.trim(), false)+" )");
					if(!((locale != null && !locale.equalsIgnoreCase("en-us")) && enableMultiLingual.equalsIgnoreCase("Y"))) {
						queryStr.append(" ORDER BY " + WFSUtil.TO_STRING("ALIAS", false, dbType));
					}
					if((locale != null && !locale.equalsIgnoreCase("en-us")) && enableMultiLingual.equalsIgnoreCase("Y")) {
						StringBuffer multiLingualQuery = new StringBuffer();
						multiLingualQuery.append("Select A.*, B.EntityName from (");
						multiLingualQuery.append(queryStr);
						
						multiLingualQuery.append(" )A Left outer join  WFMultiLingualTable B on A.VARIABLEID = B.EntityId and B.EntityType = 7");
						multiLingualQuery.append("  and B.LOCALE = '" + WFSUtil.TO_SANITIZE_STRING(locale, true)  + "' ORDER BY UPPER(ALIAS)");
						rs = stmt.executeQuery(multiLingualQuery.toString());

					}else {
						rs = stmt.executeQuery(queryStr.toString());
					}	
				}	                
				tempXml.append("<SearchVariables>"); // generating xml with quicksearch variables
				while (rs != null && rs.next()) {
					count++;
					tempXml.append("<SearchVariable>");
					tempXml.append(gen.writeValueOf("ProcessName", rs.getString("PROCESSNAME")));
					tempXml.append(gen.writeValueOf("ProcessDefinationId", Integer.toString(rs.getInt("PROCESSDEFID"))));
					tempXml.append(gen.writeValueOf("ProcessVersion", Integer.toString(rs.getInt("VERSIONNO"))));
					tempXml.append(gen.writeValueOf("Name", rs.getString("USERDEFINEDNAME")));
					tempXml.append(gen.writeValueOf("Alias", rs.getString("ALIAS")));
					if((locale != null && !locale.equalsIgnoreCase("en-us")) && enableMultiLingual.equalsIgnoreCase("Y")) {
						tempXml.append(gen.writeValueOf("EntityName", rs.getString("EntityName")));

					}
					tempXml.append(gen.writeValueOf("SearchAllVersion", rs.getString("SEARCHALLVERSION")));
					tempXml.append(gen.writeValueOf("VariableId", rs.getString("VariableId")));
					WFAttributedef attribs = (WFAttributedef) CachedObjectCollection.getReference().getCacheObject(con, engine.toUpperCase(), rs.getInt("PROCESSDEFID"), WFSConstant.CACHE_CONST_Attribute, "0" + string21 + "0").getData();
					attribMap = attribs.getAttribMap(); // For deriving length and type from cache
					wfAttribute = (WMAttribute) attribMap.get(rs.getString("USERDEFINEDNAME").toUpperCase());
					tempXml.append(gen.writeValueOf("Type", Integer.toString(wfAttribute.type)));
					tempXml.append(gen.writeValueOf("Length", Integer.toString(wfAttribute.length)));
					if (wfAttribute.type == WFSConstant.WF_FLT) {
						tempXml.append(gen.writeValueOf("Precision", wfAttribute.precision + ""));
					}
					tempXml.append("</SearchVariable>");
				}
				tempXml.append("</SearchVariables>");
				if(rs != null)	 
				{
					rs.close();
					rs = null;
				}
				if(pstmt != null)
				{
					pstmt.close();
					pstmt = null;
				}
				if(stmt != null) //WFS_7.1_026
				{
					stmt.close();
					stmt = null;
				}
				
				if (count == 0) {
					mainCode = WFSError.WM_NO_MORE_DATA;
					subCode = 0;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}

			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if (mainCode == 0) { // generating output xml
				outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WFGetQuickSearchVariables"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(tempXml);
				outputXML.append(gen.closeOutputFile("WFGetQuickSearchVariables"));
			}
		} catch (SQLException e) { // throwing exceptions
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0) {
				if (e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
				}
			} else {
				descr = e.getMessage();
			}
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (WFSException e) { //WFS_7.1_032
			mainCode = e.getMainErrorCode();
			subCode = e.getSubErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = e.getTypeOfError();
			descr = e.getErrorDescription();
		} catch (JTSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} finally {
			try {
				if (rs != null) { // checking resultset object and closing it if it is open
					rs.close();
					rs = null;
				}
			} catch (Exception ignored) {}
			try {
				if (pstmt != null) { // checking prepared statement object and closing it if it is open
					pstmt.close();
					pstmt = null;
				}
				if (stmt != null) {	//WFS_7.1_026
					stmt.close();
					stmt = null;
				}
			} catch (Exception ignored) {}

			
		}
		if (mainCode != 0) {
			throw new WFSException(mainCode, subCode, errType, subject, descr);
		}
		return outputXML.toString();
	}

	//----------------------------------------------------------------------------------------------------
	//	Function Name 				:	getMaxDurationId
	//	Date Written (DD/MM/YYYY)	:	02/01/2008
	//	Author						:	Ashish Mangla
	//	Input Parameters			:	Connection , processDefId , dbType
	//	Output Parameters			:   none
	//	Return Values				:	int
	//	Description					:   returns the Max durationId for the given processDefId
	//----------------------------------------------------------------------------------------------------
	private int getMaxDurationId(Connection con, int processDefId, int dbType) throws Exception {
		Statement stmt = null;
		ResultSet rs = null;
		int durationId = 0;

		try {
			stmt = con.createStatement();
			/* to lock the required row to handle concurrency */
			rs = stmt.executeQuery(" SELECT durationId FROM WFDurationTable "
					+ WFSUtil.getLockPrefixStr(dbType)
					+ " WHERE durationId = (SELECT "
					+ WFSUtil.isnull("max(durationId)", "0", dbType)
					+ " FROM WFDurationTable "
					+ " WHERE processdefid = " + processDefId + ") "
					+ " AND processdefid = " + processDefId + " "
					+ WFSUtil.getLockSuffixStr(dbType));
			if (rs.next()) {
				durationId = rs.getInt("durationId");
			}
			if (rs != null) {
				rs.close();
				rs = null;
			}
			stmt.close();
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
					stmt = null;
				}
			} catch (SQLException ignored) {}
		}
		return durationId;
	}

	//----------------------------------------------------------------------------------------------------
	//	Function Name 				:	getMaxTriggerId
	//	Date Written (DD/MM/YYYY)	:	19/09/2017
	//	Author						:	Ambuj Tripathi
	//	Input Parameters			:	Connection , processDefId , dbType
	//	Output Parameters			:   TriggerID
	//	Return Values				:	int
	//	Description					:   returns the Max triggerId for the given processDefId
	//----------------------------------------------------------------------------------------------------
	private int getMaxTriggerId(Connection con, int processDefId, int dbType) throws Exception {
		Statement stmt = null;
		ResultSet rs = null;
		int triggerId = 0;

		try {
			stmt = con.createStatement();
			/* to lock the required row to handle concurrency */
			rs = stmt.executeQuery(" SELECT TriggerID FROM MailTriggerTable "
					+ WFSUtil.getLockPrefixStr(dbType)
					+ " WHERE TriggerID = (SELECT "
					+ WFSUtil.isnull("max(TriggerID)", "0", dbType)
					+ " FROM MailTriggerTable "
					+ " WHERE processdefid = " + processDefId + ") "
					+ " AND processdefid = " + processDefId + " "
					+ WFSUtil.getLockSuffixStr(dbType));
			if (rs.next()) {
				triggerId = rs.getInt("TriggerID");
			}
			if (rs != null) {
				rs.close();
				rs = null;
			}
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
					stmt = null;
				}
			} catch (SQLException ignored) {}
		}
		return triggerId;
	}
	
	//----------------------------------------------------------------------------------------------------
	//	Function Name 				:	WFGetExtInterfaceRules
	//	Date Written (DD/MM/YYYY)	:	02/09/2009
	//	Author						:	Saurabh Kamal
	//	Input Parameters			:	Connection , XMLParser , XMLGenerator
	//	Output Parameters			:   none
	//	Return Values				:	String
	//	Description					:   Returns Rules information on External Interfaces
	//----------------------------------------------------------------------------------------------------
	public String WFGetExtInterfaceRules(Connection con, XMLParser parser,
			XMLGenerator gen) throws JTSException, WFSException {
		StringBuffer outputXML = new StringBuffer("");
		PreparedStatement pstmt = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
		ResultSet rs = null;
		ArrayList<String> aList = null;
        String strEngine = parser.getValueOf("EngineName");
		char char21 = 21;
		String string21 = "" + char21;
		try{
			int iSessionID = parser.getIntOf("SessionId", 0, false);
			int iProcessDefID = parser.getIntOf("ProcessDefinitionId", 0, true);
			
			int iDbType = ServerProperty.getReference().getDBType(strEngine);
			String processName = parser.getValueOf("ProcessName", "", true);
			StringBuffer strBuffTempXML = new StringBuffer(1024 * 5);
			WFParticipant user = WFSUtil.WFCheckSession(con, iSessionID);
			String cachedProcessName = null;			
			if(user != null){
				if(iProcessDefID == 0){
					pstmt = con.prepareStatement("SELECT ProcessDefId from processdeftable " + WFSUtil.getTableLockHintStr(iDbType) + " where processname = ?  order by VersionNo");
					WFSUtil.DB_SetString(1, processName, pstmt, iDbType);
					pstmt.execute();
					rs = pstmt.getResultSet();
					if(rs != null){
						while(rs.next()){
							iProcessDefID = rs.getInt(1);
						}
						if (rs != null) {						
							rs.close();
							rs = null;
						}
					}				
					if (pstmt != null) {
						pstmt.close();
						pstmt = null;
					}
				}
				cachedProcessName = CachedObjectCollection.getReference().getProcessName(con, strEngine, iProcessDefID);
				if(iProcessDefID != 0 && cachedProcessName != null && !cachedProcessName.equalsIgnoreCase("")){
					String sqlQuery = "Select Distinct B.InterfaceType, B.InterfaceElementId, A.RuleId, A.RuleOrderID, ConditionOrderID, Param1, Type1, ExtObjId1, VariableId_1, VarFieldId_1, " 
						+" Operator, Param2, Type2, ExtObjId2, VariableId_2, VarFieldId_2, LogicalOp "					
						+" From WFExtInterfaceConditionTable A, WFExtInterfaceOperationTable B" + WFSUtil.getTableLockHintStr(iDbType) +  
						" where A.RuleId = B.RuleId and"  
						+" A.Interfacetype = B.InterfaceType and A.ProcessDefId = B.ProcessDefId and A.processdefid = ? order by A.RuleId, B.InterfaceType, ConditionOrderID ";
					pstmt = con.prepareStatement(sqlQuery);
					pstmt.setInt(1, iProcessDefID);
					pstmt.execute();
					rs = pstmt.getResultSet();			
					strBuffTempXML.append("<Rules>\n");
					int lastRuleId = 0;
					int lastCondOrderId = 0;
					int lastRuleOrderId = 0;
					int currRuleId = 0;
					int currCondOrderId = 0;
					int currRuleOrderId = 0;
					String interfaceProp = null;//cachetime
					int resultRowCount = 0;	
					String lastInterfaceType = null;
					String currInterfaceType = null;
					while(rs.next()){
						currRuleId = Integer.parseInt(rs.getString("RuleId"));
						currCondOrderId = Integer.parseInt(rs.getString("ConditionOrderID"));
						currRuleOrderId = Integer.parseInt(rs.getString("RuleOrderID"));
						currInterfaceType = rs.getString("InterfaceType");
						interfaceProp = rs.getString("InterfaceType")+string21+rs.getString("InterfaceElementId");				
						if(lastInterfaceType != null && (currRuleId != lastRuleId || !currInterfaceType.equalsIgnoreCase(lastInterfaceType))){
							strBuffTempXML.append("</RuleConditions>\n");
							strBuffTempXML.append("<ExtInterfaces>\n");					
							strBuffTempXML.append(WFSUtil.CreateXMLExtInterface(aList,gen));
							strBuffTempXML.append("</ExtInterfaces>\n");
							strBuffTempXML.append("</Rule>\n");
						}
						if(currRuleId != lastRuleId || !currInterfaceType.equalsIgnoreCase(lastInterfaceType)){
							aList = new ArrayList<String>();
							strBuffTempXML.append("<Rule>\n");
							strBuffTempXML.append("<RuleConditions>\n");
						}
						boolean ruleCondition = currRuleId != lastRuleId || !currInterfaceType.equalsIgnoreCase(lastInterfaceType) || currCondOrderId != lastCondOrderId || currRuleOrderId != lastRuleOrderId  ;
						if(ruleCondition){
							strBuffTempXML.append("\n<RuleCondition>\n");
							strBuffTempXML.append(gen.writeValueOf("RuleId", rs.getString("RuleId")));
							strBuffTempXML.append(gen.writeValueOf("RuleOrderID", rs.getString("RuleOrderID")));
							strBuffTempXML.append(gen.writeValueOf("ConditionOrderID", rs.getString("ConditionOrderID")));							
							strBuffTempXML.append(gen.writeValueOf("Param1", rs.getString("Param1")));
							strBuffTempXML.append(gen.writeValueOf("Type1", rs.getString("Type1")));
							strBuffTempXML.append(gen.writeValueOf("ExtObjId1", rs.getString("ExtObjId1")));
							strBuffTempXML.append(gen.writeValueOf("VariableId_1", rs.getString("VariableId_1")));
							strBuffTempXML.append(gen.writeValueOf("VarFieldId_1", rs.getString("VarFieldId_1")));
							strBuffTempXML.append(gen.writeValueOf("Operator", rs.getString("Operator")));
							strBuffTempXML.append(gen.writeValueOf("Param2", rs.getString("Param2")));
							strBuffTempXML.append(gen.writeValueOf("Type2", rs.getString("Type2")));
							strBuffTempXML.append(gen.writeValueOf("ExtObjId2", rs.getString("ExtObjId2")));
							strBuffTempXML.append(gen.writeValueOf("VariableId_2", rs.getString("VariableId_2")));
							strBuffTempXML.append(gen.writeValueOf("VarFieldId_2", rs.getString("VarFieldId_2")));
							strBuffTempXML.append(gen.writeValueOf("LogicalOp", rs.getString("LogicalOp")));
							strBuffTempXML.append("\n</RuleCondition>\n");
						}									
						if(!aList.contains(interfaceProp)){
							aList.add(interfaceProp);
						}				
						lastRuleId = currRuleId;
						lastCondOrderId = currCondOrderId;
						lastRuleOrderId = currRuleOrderId;
						lastInterfaceType = currInterfaceType;
						resultRowCount++;
					}
					if(resultRowCount == 0){						
						mainCode = WFSError.WM_NO_MORE_DATA;
						subCode = 0;
						subject = WFSErrorMsg.getMessage(mainCode);
						descr = WFSErrorMsg.getMessage(subCode);
						errType = WFSError.WF_TMP;
					}
					strBuffTempXML.append("</RuleConditions>\n");
					strBuffTempXML.append("<ExtInterfaces>\n");
					if(aList != null){
						strBuffTempXML.append(WFSUtil.CreateXMLExtInterface(aList,gen));
					}
					strBuffTempXML.append("</ExtInterfaces>\n");
					strBuffTempXML.append("</Rule>\n");
					strBuffTempXML.append("</Rules>\n");					
				}else{
					mainCode = WFSError.WM_INVALID_PROCESS_DEFINITION;
					subCode = 0;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}
				if (rs != null) {						 
					rs.close();
					rs = null;
				}
				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
			}else{
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;				
			}
			if(mainCode == 0){
				outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WFGetExtInterfaceRules"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append("<CacheTime>");            
				outputXML.append(new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US).format(CachedObjectCollection.getReference().getProcessLastModifiedTime(con, strEngine, iProcessDefID)));
				outputXML.append("</CacheTime>");
				outputXML.append(strBuffTempXML);
				outputXML.append(gen.closeOutputFile("WFGetExtInterfaceRules"));	
			}
		} catch (SQLException e) { //end try
			WFSUtil.printErr(strEngine,"", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0) {
				if (e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
					+ ")";
				}
			} else {
				descr = e.getMessage();
			}
		} catch (NumberFormatException e) {
			WFSUtil.printErr(strEngine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(strEngine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (WFSException e) {
			mainCode = 0; // to avoid throw in finally.
			throw e;
		} catch (JTSException e) {
			WFSUtil.printErr(strEngine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(strEngine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} finally {
			try {
				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
			} catch (Exception e) { //end try
			/* ...ignore... */}
			
			//return output XML
		}
		if (mainCode != 0) {
			throw new WFSException(mainCode, subCode, errType, subject, descr);
		}
		return outputXML.toString();
	}

	//----------------------------------------------------------------------------------------------------
	//	Function Name 				:	WFSetExportPurgeCriteria
	//	Date Written (DD/MM/YYYY)	:	06/11/2009
	//	Author						:	Nishant Kumar Singh
	//	Input Parameters			:	Connection , XMLParser , XMLGenerator
	//	Output Parameters			:   none
	//	Return Values				:	String
	//	Description					:   Setting Purge criteria 
	//----------------------------------------------------------------------------------------------------
	public String WFSetExportPurgeCriteria(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
		int mainCode            =  0;
		int subCode             =  0;
		String descr            =  null;
		String subject          =  null;
		StringBuffer outputXML = new StringBuffer("");
		String errType          =  WFSError.WF_TMP;
		PreparedStatement pstmt =  null;
		Statement stmt		    =  null;
		ResultSet rs            = null;
		int processDefId		= 0;
        String engine     =   parser.getValueOf("EngineName");
		int actionid            = 0;
        String strProcessDefIds = null;
		try  
		{
			int sessionID     =   parser.getIntOf("SessionId", 0, false);
			
			int dbType        =   ServerProperty.getReference().getDBType(engine);
			WFParticipant ps  =   WFSUtil.WFCheckSession(con, sessionID);
			if(ps != null)  
			{
				char operation            =   parser.getCharOf("Operation", '\0', false);
				strProcessDefIds   =   parser.getValueOf("ProcessDefId", "", false);
				if(strProcessDefIds.indexOf(",")==-1)
					processDefId              =   parser.getIntOf("ProcessDefId", -1, false);			
				String objectName			=	parser.getValueOf("ObjectName", "", true);
				String exportFlag			=   parser.getValueOf("ExportFlag", "N", true);		
				String purgeData          =   parser.getValueOf("Data", "", true);
				if(con.getAutoCommit())
				{
					con.setAutoCommit(false);
				}
				switch (operation)
				{
				case 'I':
					stmt = con.createStatement();
					rs   = stmt.executeQuery(" Select ProcessDefID, ObjectName from wfpurgecriteriatable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessDefID = " +processDefId+" OR ObjectName = "+WFSUtil.TO_STRING(objectName, true, dbType));
					if(rs.next()) 
					{
						mainCode = WFSError.WF_OPERATION_FAILED;
						subCode  = WFSError.WM_CRITERIA_ALR_EXST;
						subject  = WFSErrorMsg.getMessage(mainCode);
						errType  = WFSError.WF_TMP;
						descr    =  WFSErrorMsg.getMessage(subCode);
						rs.close();
						rs = null;
					}
					else 
					{			
						rs.close();
						rs = null;
						if (dbType == JTSConstant.JTS_ORACLE)
						{
							stmt.execute("Insert into wfpurgecriteriatable (ProcessDefID, ObjectName, ExportFlag, Data) values(" +processDefId+ "," + WFSUtil.TO_STRING(objectName.trim(),true,dbType) + "," + WFSUtil.TO_STRING(exportFlag,true,dbType) + ",EMPTY_CLOB())");
							rs = stmt.executeQuery("Select data From wfpurgecriteriatable Where ProcessDefID = "+processDefId+ " FOR UPDATE");
							if(rs != null && rs.next())
							{
                                                            Object object = rs.getObject("data");
                                                            if (object instanceof oracle.sql.CLOB) {
                                                                oracle.sql.CLOB dataClob = (oracle.sql.CLOB)object;
                                                                if(!rs.wasNull())
                                                                {
                                                                    java.io.Writer dataWriter = dataClob.getCharacterOutputStream();
                                                                    dataWriter.write(purgeData.toString().toCharArray());
                                                                    dataWriter.close();
                                                                    rs.close();
                                                                    rs = null;
                                                                }
                                                            }
                                                            else {
									try {
										weblogic.jdbc.vendor.oracle.OracleThinClob dataClob = (weblogic.jdbc.vendor.oracle.OracleThinClob) rs
												.getClob("data");
                                                                if (!rs.wasNull()) {
                                                                    java.io.Writer dataWriter = dataClob.getCharacterOutputStream();
                                                                    dataWriter.write(purgeData.toCharArray());
                                                                    dataWriter.close();
                                                                    rs.close();
                                                                    rs = null;
                                                                }
									} catch (NoClassDefFoundError e) {
										if (!rs.wasNull()) {
											java.io.Writer dataWriter = (java.io.Writer) object.getClass()
													.getMethod("getCharacterOutputStream", (Class[]) null)
													.invoke(object, (Object[]) null);
											dataWriter.write(purgeData.toCharArray());
											dataWriter.close();
											rs.close();
											rs = null;
                                                            }
                                                        }
								}
                                                        }
							stmt.close();
							stmt = null;
						}
						else
						{
							pstmt = con.prepareStatement("Insert into wfpurgecriteriatable (ProcessDefID, ObjectName, ExportFlag, Data) values(?,?,?,?)");
							pstmt.setInt(1, processDefId);
							WFSUtil.DB_SetString(2, objectName.trim() , pstmt , dbType);
							WFSUtil.DB_SetString(3, exportFlag , pstmt , dbType);
							pstmt.setCharacterStream(4, new java.io.StringReader(purgeData.toString()), purgeData.toString().length());
							pstmt.executeUpdate();
							pstmt.close();
							pstmt = null;
						}
					}
					actionid = WFSConstant.WFL_AddPurgeCriteria;
					break;
				case 'U':
					if(dbType == JTSConstant.JTS_ORACLE)
					{
						stmt = con.createStatement();
						stmt.execute("Update wfpurgecriteriatable Set ObjectName="+WFSUtil.TO_STRING(objectName, true, dbType)+" , ExportFlag="+WFSUtil.TO_STRING(exportFlag, true, dbType)+ ", Data= EMPTY_CLOB() where ProcessDefID = " +processDefId);
						rs = stmt.executeQuery("Select data From wfpurgecriteriatable Where ProcessDefID = " +processDefId+ " FOR UPDATE");
						if(rs != null && rs.next())
						{
                                                    Object object = rs.getObject("data");
                                                    if (object instanceof oracle.sql.CLOB) {
                                                        oracle.sql.CLOB dataClob1 = (oracle.sql.CLOB)object;
                                                        if(!rs.wasNull())
                                                        {
                                                            java.io.Writer dataWriter = dataClob1.getCharacterOutputStream();
                                                            dataWriter.write(purgeData.toString().toCharArray());
                                                            dataWriter.close();
                                                            rs.close();
                                                            rs = null;
                                                        }
                                                    }
                                                    else {
                    									try {
                    										weblogic.jdbc.vendor.oracle.OracleThinClob dataClob = (weblogic.jdbc.vendor.oracle.OracleThinClob) rs
                    												.getClob("data");
                                                        if (!rs.wasNull()) {
                                                            java.io.Writer dataWriter = dataClob.getCharacterOutputStream();
                                                            dataWriter.write(purgeData.toCharArray());
                                                            dataWriter.close();
                                                            rs.close();
                                                            rs = null;
                                                        }
                    									} catch (NoClassDefFoundError e) {
                    										if (!rs.wasNull()) {
                    											java.io.Writer dataWriter = (java.io.Writer) object.getClass()
                    													.getMethod("getCharacterOutputStream", (Class[]) null)
                    													.invoke(object, (Object[]) null);
                    											dataWriter.write(purgeData.toCharArray());
                    											dataWriter.close();
                    											rs.close();
                    											rs = null;
                                                    }
                                                }
                    								}
                                                }
						stmt.close();
						stmt = null;
					}
					else
					{
						pstmt = con.prepareStatement("Update wfpurgecriteriatable Set ObjectName= ?, ExportFlag= ?, Data= ? where ProcessDefID = ?");
						WFSUtil.DB_SetString(1, objectName.trim() , pstmt , dbType);
						WFSUtil.DB_SetString(2, exportFlag , pstmt , dbType);
						pstmt.setCharacterStream(3, new java.io.StringReader(purgeData.toString()), purgeData.toString().length());
						pstmt.setInt(4, processDefId);;
						pstmt.executeUpdate();
						pstmt.close();
						pstmt = null;
					}
					actionid = WFSConstant.WFL_ModifyPurgeCriteria;
					break;
				case 'D':
					pstmt = con.prepareStatement("Delete from wfpurgecriteriatable where ProcessDefID in(" +strProcessDefIds+ ")");
					pstmt.execute();
					pstmt.close();
					actionid = WFSConstant.WFL_DeletePurgeCriteria;
					break;
				}
				if(!con.getAutoCommit())
				{
					con.commit();
					con.setAutoCommit(true);
				}
			}			
			else 
			{
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if(mainCode == 0)
			{
				WFSUtil.genAdminLog(engine, con, actionid, processDefId, 0, null, ps.getid(), ps.getname(), 0, strProcessDefIds, null, null);
				outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WFSetExportPurgeCriteria"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(gen.closeOutputFile("WFSetExportPurgeCriteria"));
			}
		}
		catch(SQLException e)
		{
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if(e.getErrorCode() == 0) {
				if(e.getSQLState().equalsIgnoreCase("08S01")) 
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
			} 
			else 
				descr = e.getMessage();
		}
		catch(NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} 
		catch(NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		}
		catch(Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} 
		catch(Error e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} 
		finally {
			try {
				if(rs != null){
					rs.close();
					rs = null;
				}
				if(pstmt != null) {
					pstmt.close();
					pstmt= null;    
				}
				if(stmt != null) {
					stmt.close();
					stmt = null;
				}
			} 
			catch(Exception e) {}
			   
		}
		if(mainCode != 0) {
			throw new WFSException(mainCode, subCode, errType, subject, descr);
		} 
		return outputXML.toString();
	}
	//----------------------------------------------------------------------------------------------------
	//	Function Name 				:	WFGetExportPurgeCriteria
	//	Date Written (DD/MM/YYYY)	:	06/11/2009
	//	Author						:	Preeti Awasthi
	//	Input Parameters			:	Connection , XMLParser , XMLGenerator
	//	Output Parameters			:   output XML
	//	Return Values				:	String
	//	Description					:   Get the purge criteria 
	//----------------------------------------------------------------------------------------------------
	public String WFGetExportPurgeCriteria(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
		int mainCode            = 0;
		int subCode             = 0;
		ResultSet rs            = null;
		String descr            = null;
		String subject          = null;
		StringBuffer outputXML = new StringBuffer("");
		String errType          = WFSError.WF_TMP;
		Statement stmt		    = null;
		String strQuery         = "";
		StringBuffer tempXml    = new StringBuffer(100);
                String engine     = parser.getValueOf("EngineName");
        String userLocale = "";
		try 
		{
			int sessionID     = parser.getIntOf("SessionId", 0, false);
			userLocale = parser.getValueOf("Locale", "", true);
			int dbType        = ServerProperty.getReference().getDBType(engine);
			WFParticipant ps  = WFSUtil.WFCheckSession(con, sessionID);
			String objectName = parser.getValueOf("ObjectName", "", true);
			int processDefId  = parser.getIntOf("ProcessDefId", -1, true);
			String filterStr = "";
                         Object object=null;
			if(ps != null) 
			{
				if(objectName == "" &&  processDefId == -1)
				{
					strQuery = "select ObjectName, ExportFlag, processdeftable.ProcessName,  processdeftable.VersionNo, wfpurgecriteriatable.ProcessDefId ";
					strQuery += "from wfpurgecriteriatable " + WFSUtil.getTableLockHintStr(dbType) + ", processdeftable " + WFSUtil.getTableLockHintStr(dbType);
					strQuery += " where wfpurgecriteriatable.processdefid = processdeftable.processdefid " ;
				}
				else
				{
					if(objectName != "" )
						filterStr = " And objectName = "+WFSUtil.TO_STRING(objectName, true, dbType);
					if(processDefId != -1)
						filterStr += " And wfpurgecriteriatable.processDefID = "+processDefId;

					strQuery = "select  ObjectName, ExportFlag, processdeftable.ProcessName, wfpurgecriteriatable.ProcessDefId, processdeftable.VersionNo,";
					strQuery += " Data from wfpurgecriteriatable " + WFSUtil.getTableLockHintStr(dbType) + ", processdeftable " + WFSUtil.getTableLockHintStr(dbType);
					strQuery +=" where wfpurgecriteriatable.processdefid = processdeftable.processdefid "+filterStr;
				}
				stmt = con.createStatement();
				rs   = stmt.executeQuery(strQuery);
				if(objectName == "" &&  processDefId == -1)
				{ 
					int count = 0;
					tempXml.append("<List>");
					while(rs.next())
					{ 
						tempXml.append("<ObjectList>\n");
						tempXml.append(gen.writeValueOf("ObjectName", rs.getString(1)));
						tempXml.append(gen.writeValueOf("ExportFlag", rs.getString(2)));
						tempXml.append(gen.writeValueOf("ProcessName", rs.getString(3)));
						tempXml.append(gen.writeValueOf("Version", String.valueOf(rs.getFloat(4))));
						tempXml.append(gen.writeValueOf("ProcessDefId", String.valueOf(rs.getInt(5))));
						tempXml.append("</ObjectList>\n");	
						count++;
					}
					tempXml.append("</List>");
					if(count == 0)
					{
						mainCode = WFSError.WM_NO_MORE_DATA;
						subCode  = 0;
						subject  = WFSErrorMsg.getMessage(mainCode, userLocale);
					}					
				}
				else
				{
					StringBuffer sData = new StringBuffer(100);
					java.io.Reader reader = null;
					oracle.sql.CLOB messageObj = null;
					if(rs.next())
					{
						tempXml.append(gen.writeValueOf("ObjectName", rs.getString(1)));
						tempXml.append(gen.writeValueOf("ExportFlag", rs.getString(2)));
						tempXml.append(gen.writeValueOf("ProcessName", rs.getString(3)));
						tempXml.append(gen.writeValueOf("ProcessDefId", String.valueOf(rs.getInt(4))));
						tempXml.append(gen.writeValueOf("Version", String.valueOf(rs.getFloat(5))));
						if(dbType == JTSConstant.JTS_ORACLE)
						{
							object = rs.getObject(6);
                                                        if (object instanceof oracle.sql.CLOB) {
                                                            messageObj = ((oracle.sql.CLOB)rs.getObject(6));
                                                            reader = messageObj.getCharacterStream();
                                                        }
                                                        else {                                                          
                                                            weblogic.jdbc.wrapper.ResultSet wlsResultSet = (weblogic.jdbc.wrapper.ResultSet)rs;
                                                            OracleResultSet oracleResultSet = (OracleResultSet)wlsResultSet.getVendorObj();   
                                                            CLOB clob = oracleResultSet.getCLOB("data");
                                                            reader  = clob.getCharacterStream();
                                                        }
						}						
						else
							reader = rs.getCharacterStream(6);
						char[] chArr = new char[2048];
						int size = reader.read(chArr, 0, 2048);
						while(size > 0)
						{
							sData.append(new String(chArr, 0, size));
							size = reader.read(chArr, 0, 2048);
						}
						reader.close();
						tempXml.append(gen.writeValueOf("Data", sData.toString()));
					}
					else
					{
						mainCode =  WFSError.WM_NO_MORE_DATA;
						subCode  = 0;
						subject  = WFSErrorMsg.getMessage(mainCode, userLocale);
					}
				}
				if (stmt != null)
					stmt.close();
				if (rs != null)
					rs.close();			
			}
			else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode  = 0;
				subject  = WFSErrorMsg.getMessage(mainCode, userLocale);
				descr    = WFSErrorMsg.getMessage(subCode, userLocale);
				errType  = WFSError.WF_TMP;
			}
			if(mainCode == 0) {
				outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WFGetExportPurgeCriteria"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(tempXml);
				outputXML.append(gen.closeOutputFile("WFGetExportPurgeCriteria"));
			}	 
		}
		catch(SQLException e) {  
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_INVALID_PROCESS_DEFINITION;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode, userLocale);
			errType = WFSError.WF_FAT;
			if(e.getErrorCode() == 0) {
				if(e.getSQLState().equalsIgnoreCase("08S01")) 
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()+ ")";
			} 
			else
				descr = e.getMessage();
		} catch(NumberFormatException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode, userLocale);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode, userLocale);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode, userLocale);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(Error e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode, userLocale);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} 
		finally {
			try {
				if(rs != null) {
					rs.close();
					rs = null;    
				}	
				if(stmt != null) {
					stmt.close();
					stmt= null;    
				}
			} catch(Exception e) {}
			
		}
		if(mainCode != 0) 
			throw new WFSException(mainCode, subCode, errType, subject, descr);
		return outputXML.toString();
	}


	/*----------------------------------------------------------------------------------------------------
//	Function Name 				:	WFGetWorkdeskLayout
//	Date Written (DD/MM/YYYY)	:	18/07/2012
//	Author						:	Shweta Singhal
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:   none
//	Return Values				:	String
//	Description					:   Get Workdesk Layout defined for provided processdefid and activityid.
//----------------------------------------------------------------------------------------------------*/

	public String WFGetWorkdeskLayout(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {

		StringBuffer outputXML = new StringBuffer(500);
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
		StringBuffer tempXML = new StringBuffer(100);
		try{
			int sessionID = parser.getIntOf("SessionId", 0, false);
			String engine = parser.getValueOf("EngineName");
			int processDefId = parser.getIntOf("ProcessDefId", 0, false);
			int activityId = parser.getIntOf("ActivityId", 0, true);
			int taskId = parser.getIntOf("TaskId", 0, true);
			int dbType = ServerProperty.getReference().getDBType(engine);
			WFParticipant user = WFSUtil.WFCheckSession(con, sessionID); // checking for session validity
			String layout = "";
			if(user != null){
				pstmt = con.prepareStatement("select WSLayoutDefinition from WFWorkdeskLayoutTable " + WFSUtil.getTableLockHintStr(dbType) + " where processdefid =? and activityid =? and taskid = ?");
				pstmt.setInt(1, processDefId);
				pstmt.setInt(2, activityId);
				pstmt.setInt(3, taskId);
				rs = pstmt.executeQuery();
				if(rs.next()){
					layout = rs.getString(1);
				}else {
					pstmt.setInt(1, processDefId);
					pstmt.setInt(2, 0);
					rs = pstmt.executeQuery();
					if(rs.next()){
						layout = rs.getString(1);
					}
				}
				tempXML.append("<WSLayoutDefinition>"+layout+"</WSLayoutDefinition>");
				if(rs != null){
					rs.close();
					rs = null;
				}
				if(pstmt != null){
					pstmt.close();
					pstmt = null;
				}
				tempXML.append("<Interfaces>");
				if(activityId == 0){
					pstmt = con.prepareStatement("select InterfaceName from PROCESS_INTERFACETABLE where processdefid =? ");
					pstmt.setInt(1, processDefId);
					rs = pstmt.executeQuery();
					while(rs.next()){
						String interfaceName = rs.getString(1);
						if(((!interfaceName.equalsIgnoreCase("Task")) && (taskId==0))||(taskId>0)){
						tempXML.append("<Interface>");
						tempXML.append(gen.writeValueOf("Name", interfaceName));
						tempXML.append("</Interface>");
						}
					}
				}else{
					pstmt = con.prepareStatement("select distinct(InterfaceName) from activityassociationtable A, process_interfacetable B where A.DefinitionId = B.InterfaceId AND A.processdefid = B.processdefid AND A.processdefid = ? and ActivityId = ? ");
					pstmt.setInt(1, processDefId);
					pstmt.setInt(2, activityId);
					rs = pstmt.executeQuery();
					while(rs.next()){
						tempXML.append("<Interface>");
						tempXML.append(gen.writeValueOf("Name", rs.getString(1)));
						tempXML.append("</Interface>");
					}
				}
				tempXML.append("</Interfaces>");
			}else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if(mainCode == 0) {
				outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WFGetWorkdeskLayout"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(tempXML);
				outputXML.append(gen.closeOutputFile("WFGetWorkdeskLayout"));
			}

		} catch(SQLException e) {
			WFSUtil.printErr("", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if(e.getErrorCode() == 0) {
				if(e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
					+ ")";
				}
			} else {
				descr = e.getMessage();
			}
		} catch(NumberFormatException e) {
			WFSUtil.printErr("", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(NullPointerException e) {
			WFSUtil.printErr("", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(JTSException e) {
			WFSUtil.printErr("", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch(Exception e) {
			WFSUtil.printErr("", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(Error e) {
			WFSUtil.printErr("", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} finally {
			try {
				if(pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
				if(rs != null) {
					rs.close();
					rs = null;
				}
			} catch(Exception e) {
				//e.printStackTrace();
				WFSUtil.printErr("", e);
			}
			
		}
		if(mainCode != 0) {
			throw new WFSException(mainCode, subCode, errType, subject, descr);
		}
		return outputXML.toString();
	}

	/*----------------------------------------------------------------------------------------------------
//	Function Name 				:	WFSetWorkdeskLayout
//	Date Written (DD/MM/YYYY)	:	18/07/2012
//	Author						:	Shweta Singhal
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:   none
//	Return Values				:	String
//	Description					:   Set Workdesk Layout for provided processdefid and activityid.
//----------------------------------------------------------------------------------------------------*/

	public String WFSetWorkdeskLayout(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
		StringBuffer outputXML = new StringBuffer(500);
		PreparedStatement pstmt = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
		try{
			int sessionID = parser.getIntOf("SessionId", 0, false);
			String engine = parser.getValueOf("EngineName");
			int processDefId = parser.getIntOf("ProcessDefId", 0, false);
			int activityId = parser.getIntOf("ActivityId", 0, false);
			int taskId = parser.getIntOf("TaskId",0,true);
			String wsLayoutDefinition = parser.getValueOf("WSLayoutDefinition", "", false);
			int dbType = ServerProperty.getReference().getDBType(engine);
			WFParticipant user = WFSUtil.WFCheckSession(con, sessionID); // checking for session validity
			int rowUpdatecount = 0;
			if(user != null ){

				pstmt = con.prepareStatement("update WFWorkdeskLayoutTable set WSLayoutDefinition = ? where Processdefid = ? and activityid = ? and taskid = ?");
				WFSUtil.DB_SetString(1, wsLayoutDefinition,pstmt,dbType);
				pstmt.setInt(2, processDefId);
				pstmt.setInt(3, activityId);
				pstmt.setInt(4, taskId);
				rowUpdatecount = pstmt.executeUpdate();
				if(pstmt != null){
					pstmt.close();
					pstmt = null;
				}
				if(rowUpdatecount == 0){
					pstmt = con.prepareStatement("Insert into WFWorkdeskLayoutTable (ProcessDefId, ActivityId, WSLayoutDefinition,TaskId) Values (?, ?, ?, ?)");
					pstmt.setInt(1, processDefId);
					pstmt.setInt(2, activityId);
					WFSUtil.DB_SetString(3, wsLayoutDefinition,pstmt,dbType);
					pstmt.setInt(4, taskId);
					pstmt.execute();
				}
				if(pstmt != null){
					pstmt.close();
					pstmt = null;
				}
				/*Kahkeshan Bug 37959 fixed Positioning of layout is not showing while we set the Preview 2nd time*/
				pstmt = con.prepareStatement("update ProcessDefTable set lastModifiedOn= "+WFSUtil.getDate(dbType)+"  where processdefid = ? ");
				pstmt.setInt(1, processDefId);
				pstmt.execute();

				if(pstmt != null){
					pstmt.close();
					pstmt = null;
				}
			}else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if(mainCode == 0) {
				outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WFSetWorkdeskLayout"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(gen.closeOutputFile("WFSetWorkdeskLayout"));
			}
		} catch(SQLException e) {
			WFSUtil.printErr("", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if(e.getErrorCode() == 0) {
				if(e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
					+ ")";
				}
			} else {
				descr = e.getMessage();
			}
		} catch(NumberFormatException e) {
			WFSUtil.printErr("", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(NullPointerException e) {
			WFSUtil.printErr("", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(JTSException e) {
			WFSUtil.printErr("", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch(Exception e) {
			WFSUtil.printErr("", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(Error e) {
			WFSUtil.printErr("", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} finally {
			try {
				if(pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
			} catch(Exception e) {}
			
		}
		if(mainCode != 0) {
			throw new WFSException(mainCode, subCode, errType, subject, descr);
		}
		return outputXML.toString();
	}
	
	/*----------------------------------------------------------------------------------------------------
//	Function Name 				:	WFGetProcessVariantList
//	Date Written (DD/MM/YYYY)	:	22/04/2013
//	Author						:		Mohnish Chopra
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:   none
//	Return Values				:	String
//	Description					:   Gets the variant list for a processDefId.
//----------------------------------------------------------------------------------------------------*/

    public String WFGetProcessVariantList(Connection con, XMLParser parser,XMLGenerator gen) throws JTSException, WFSException  {
    	StringBuffer outputXML = new StringBuffer("");
            int mainCode = 0;
            int subCode = 0;
            PreparedStatement pstmt = null;
            ResultSet rs = null;
            String descr = null;
            String subject = null;
            String errType = WFSError.WF_TMP;
            String processType=null;
            String engine = parser.getValueOf("EngineName");
            try {
                int sessionID = parser.getIntOf("SessionId", 0, false);
                
                int processDefId = parser.getIntOf("ProcessDefId", 0, false);
                int noOfRecToFetch = parser.getIntOf("NoOfRecordsToFetch", ServerProperty.getReference().getBatchSize(), true);
                String filterString = parser.getValueOf("Filter");
                boolean sortOrder = parser.getValueOf("SortOrder").startsWith("D");
                String lastValue = parser.getValueOf("LastValue", "", true);
                int dbType = ServerProperty.getReference().getDBType(engine);
                StringBuffer tempXml = new StringBuffer(100);
                WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
                if (participant != null) {
                    //Select to check if the process type is Generic or Variant 
                    pstmt = con.prepareStatement("Select ProcessType from ProcessDefTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessDefId = ?");
                    pstmt.setInt(1,processDefId);
                    pstmt.execute();
                    rs = pstmt.getResultSet();
                    //Condition to check if the process exists
                    if(rs.next()){
                        processType=rs.getString(1);
                        // If process type is Multi variant
                        if(processType.equalsIgnoreCase("M")){
                        	if (rs != null) {
                        		rs.close();
                        		rs = null;
                        	}
                            if(pstmt!=null){
                            pstmt.close();
                            pstmt = null;
                            }
                            StringBuffer queryStr = new StringBuffer(500);
                            StringBuffer filterStr = new StringBuffer(500);
                            int toFetch = noOfRecToFetch+1;
                            queryStr.append("Select * from ( ");
                            //Select to get ProcessVariantId , ProcessVariantName, Description for ProcessDefId 
                            //pstmt= con.prepareStatement("Select " + WFSUtil.getFetchPrefixStr(dbType, toFetch) + " ProcessVariantId,ProcessVariantName,ProcessVariantState,Description, Label from WFProcessVariantDefTable where ProcessDefId = ? order by ProcessVariantName ");
                            queryStr.append("Select " + WFSUtil.getFetchPrefixStr(dbType, toFetch) + " ProcessVariantId,ProcessVariantName,ProcessVariantState,Description, Label from WFProcessVariantDefTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessDefId = ? ");
                                    
                            if(lastValue != null && !lastValue.equals("")){
                                if(sortOrder)
                                    filterStr.append(" AND ProcessVariantName < " + WFSUtil.TO_STRING(lastValue.trim(), true, dbType));
                                else
                                    filterStr.append( " AND ProcessVariantName > " + WFSUtil.TO_STRING(lastValue.trim(), true, dbType));
                            }
                            
                            filterStr.append(" Order By ProcessVariantName");
                            filterStr.append((sortOrder) ? " DESC " : " ASC ");
                            
                            queryStr.append(filterStr);	
                            queryStr.append(" ) QueryVariant where 1 = 1 ");
                            queryStr.append(WFSUtil.getFetchSuffixStr(dbType, noOfRecToFetch + 1, " AND "));
                            
                            WFSUtil.printOut(engine,"Query>>"+queryStr.toString());
                            pstmt  = con.prepareStatement(queryStr.toString());
                            pstmt.setInt(1, processDefId);
                            pstmt.execute();
                            rs = pstmt.getResultSet();
                            int retCount = 0;
                            int totalCount = 0;
                            tempXml.append("\n<ProcessVariantList>\n");
                            String tempStringId=null;
                            int tempId =0;
                            /*
                             * Cursor of resultset is already at first row because of
                             * previous if condition, therefore using do while.
                             */
                            while(retCount < noOfRecToFetch && rs.next()){
                                tempXml.append("\n<VariantInfo>\n");
                                tempId=rs.getInt("ProcessVariantId");
                                tempStringId=String.valueOf(tempId);
                                tempXml.append(gen.writeValueOf("VariantId",tempStringId));
                                tempXml.append(gen.writeValueOf("VariantCode", rs.getString("ProcessVariantName")));
                                tempXml.append(gen.writeValueOf("VariantName", rs.getString("Label")));
                                tempXml.append(gen.writeValueOf("VariantState", rs.getString("ProcessVariantState")));
                                tempXml.append(gen.writeValueOf("Description", rs.getString("Description")));
                                tempXml.append("\n</VariantInfo>\n");
                                retCount++;
                                totalCount++;
                            }
                            if(rs.next())
                                totalCount++;
                            //In case No variants exists
                            if(retCount == 0){
                                mainCode = WFSError.WF_NO_VARIANTS_EXISTS;
                                subCode = 0;
                                subject = WFSErrorMsg.getMessage(mainCode);
                                descr =   WFSErrorMsg.getMessage(subCode);
                                errType = WFSError.WF_TMP;
                            }

                            tempXml.append("\n</ProcessVariantList>\n");
                            tempXml.append(gen.writeValueOf("RetrievedCount", String.valueOf(retCount)));
                            tempXml.append(gen.writeValueOf("TotalCount", String.valueOf(totalCount)));

					}
					// In case process type is 'S'
					else {

						mainCode = WFSError.WF_PROCESS_TYPE_GENERIC;
						subCode = 0;
						subject = WFSErrorMsg.getMessage(mainCode);
						descr =   WFSErrorMsg.getMessage(subCode);
						errType = WFSError.WF_TMP;


					}
				}
				// In case processDefId was invalid
				else {
					mainCode = WFSError.WF_INVALID_PROCESS_DEFINITION;
					subCode = 0;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr =   WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;

				}

			}
			//In case session gets invalid
			else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			//wrapping tempXml in outputXml
			if (mainCode == 0) {
				outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WFGetProcessVariantList"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(tempXml);
				outputXML.append(gen.closeOutputFile("WFGetProcessVariantList"));
			}

		}
		catch (SQLException e) { 
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0) {
				if (e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
					+ ")";
				}
			} else {
				descr = e.getMessage();
			}
		} catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		}	
          finally {
			try {
				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
			} catch (Exception e) {

				WFSUtil.printErr(engine,"", e);
			}
			try{
				if (rs != null) {
					rs.close();
					rs = null;
				}
			}
			catch (Exception e) {

				WFSUtil.printErr(engine,"", e);
			}
			
		}
          if (mainCode != 0)
				throw new WFSException(mainCode, subCode, errType, subject, descr);
		return outputXML.toString();

	}
	
	/*----------------------------------------------------------------------------------------------------
//	Function Name 				:	WFDeleteProcessVariant
//	Date Written (DD/MM/YYYY)	:	09/04/2013
//	Author						:	Mohnish Chopra
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:   none
//	Return Values				:	String
//	Description					:   Deletes the process variant 
//----------------------------------------------------------------------------------------------------*/

	public String WFDeleteProcessVariant(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
		StringBuffer outputXML = new StringBuffer("");
		int mainCode = 0;
		int subCode = 0;
		PreparedStatement pstmt = null;
                PreparedStatement pstmt1 = null;
                Statement stmt = null;
                ResultSet rs = null;
                ResultSet rs1 = null;
		String descr = null;
		String subject = null;
        String label=null; 
		String errType = WFSError.WF_TMP;
                String engine = parser.getValueOf("EngineName");
		try {
			int sessionID = parser.getIntOf("SessionId", 0, false);
			
			int count=0;
			int variantId = parser.getIntOf("VariantId", 0, false);
			int dbType = ServerProperty.getReference().getDBType(engine);
			StringBuffer tempXml = new StringBuffer(100);
			WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
			ArrayList arrAuditList = new ArrayList();
                        //Checking whether the session is valid
                        if (participant != null) {
                            int userID = participant.getid();
                            String userName = participant.getname();
				int startIndex = 0;
				int endIndex = 0;
				String strVarId= null;
				int varId= 0;
                                 /* Algo

                        Select count(*) from WFInstrumentTable where ProcessVariantId = ?
                        If count is 0 then check
                        Select count(*) from QueueHistoryTable where ProcessVariantId = ?


                        If count is > 0 either in WFInstrumentTable OR in QueueHistoryTable

                        Return with error - Variant cannot be Deleted as processInstances found
                        for this Variant in system.
                     */
                                String strQry  = " Select 1 from WFInstrumentTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessVariantId = ? ";
                                pstmt  = con.prepareStatement(strQry);
                                pstmt.setInt(1,variantId);
                                rs= pstmt.executeQuery();
                                if(rs.next()){
                                      mainCode = WFSError.WFS_TransactionDataExists;
                                      subCode = WFSError.WFS_TransactionDataExists;
                                      subject = WFSErrorMsg.getMessage(mainCode);
                                      descr = WFSErrorMsg.getMessage(subCode);
                                      errType = WFSError.WF_TMP;
                                 }else{
                                    String strQryQue  = " Select 1 from QueueHistoryTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessVariantId = ? ";
                                    pstmt1  = con.prepareStatement(strQryQue);
                                    pstmt1.setInt(1,variantId);
                                    rs1= pstmt.executeQuery();
                                    if(rs1.next()){
                                        mainCode = WFSError.WFS_TransactionDataExists;
                                        subCode = WFSError.WFS_TransactionDataExists;
                                        subject = WFSErrorMsg.getMessage(mainCode);
                                        descr = WFSErrorMsg.getMessage(subCode);
                                        errType = WFSError.WF_TMP;
                                   }else{
                                         if(rs != null){
                                            rs.close();
                                            rs = null;
                                        }
                                        if(pstmt != null){
                                            pstmt.close();
                                            pstmt = null;
                                        }
                                        if(rs1 != null){
                                            rs1.close();
                                            rs1 = null;
                                        }
                                        if(pstmt1 != null){
                                            pstmt1.close();
                                            pstmt1 = null;
                                        }
                                 
                                    if(con.getAutoCommit())
                                        con.setAutoCommit(false);
                                pstmt = con.prepareStatement("Select ProcessVariantName, ProcessDefId, Label from WFProcessVariantDefTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessVariantId=?");
				pstmt.setInt(1,variantId);
                                rs = pstmt.executeQuery();
                                String procVarName = null;
                                int procId = 0;
                                if(rs.next()){
                                    procVarName = rs.getString("ProcessVariantName");
                                    procId = rs.getInt("ProcessDefId");
									label=rs.getString("Label");
                                }
                                pstmt = con.prepareStatement("Select tableName from EXTDBCONFTABLE " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessVariantId=?");
				pstmt.setInt(1,variantId);
                                rs = pstmt.executeQuery();
                                String tableName = null;
                                if(rs.next())
                                    tableName = rs.getString("tableName");
				pstmt = con.prepareStatement("Delete from WFProcessVariantDefTable where ProcessVariantId=?");
				pstmt.setInt(1,variantId);
				count= pstmt.executeUpdate();
                                stmt = con.createStatement();
                                /* Removing the dependecy from WF_DelProcVariantTrigger tigger
                                 Sajid Khan - 30 April 2014
                                 */
                                stmt.addBatch("Delete From ACTIVITYASSOCIATIONTABLE where ProcessVariantId = "+variantId+"");
                                stmt.addBatch("Delete From VARMAPPINGTABLE where ProcessVariantId = "+variantId+"");
                                stmt.addBatch("Delete From WFUDTVarMappingTable where ProcessVariantId = "+variantId+"");
                                stmt.addBatch("Delete From EXTDBCONFTABLE where ProcessVariantId = "+variantId+"");
                                stmt.addBatch("Delete From DOCUMENTTYPEDEFTABLE where ProcessVariantId = "+variantId+"");
                                stmt.addBatch("Delete From WFTYPEDEFTABLE where ProcessVariantId = "+variantId+"");
                                stmt.addBatch("Delete From WFTYPEDESCTABLE where ProcessVariantId = "+variantId+"");
                                stmt.addBatch("Delete From WFVARRELATIONTABLE where ProcessVariantId = "+variantId+"");
                                stmt.addBatch("Delete From ACTIVITYINTERFACEASSOCTABLE where ProcessVariantId = "+variantId+"");

				//In case no variants got deleted
				if(count==0){
					mainCode = WFSError.WF_NO_VARIANTS_EXISTS;
					subCode = 0;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr =   WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}else{
                                   
                                    pstmt = con.prepareStatement("DROP TABLE "+WFSUtil.TO_SANITIZE_STRING(tableName, false)+" ");
									//WFSUtil.printOut("variant table deleted for variant>>"+variantId+" and tableName>>"+ tableName);
                                    pstmt.execute();
                             /* Removing the dependecy from WF_DelProcVariantTrigger tigger
                                 Sajid Khan - 30 April 2014
                             */
                                    stmt.executeBatch();
                                }
                                arrAuditList.add(new WFAdminLogValue(variantId, label, 0, null, null, null, null, null, null, null, WFSConstant.WFL_DelVariant, procId, 0, null, userID, userName, 0, null, null));
								
								pstmt = con.prepareStatement("Update ProcessDefTable Set lastModifiedOn = " + WFSUtil.getDate(dbType) + " Where processDefId = ?");
								pstmt.setInt(1, procId);
								pstmt.execute();
								pstmt.close();
											
                                if(!con.getAutoCommit()){
                                    con.commit();
                                    con.setAutoCommit(true);
                                }
                            }//No Transaction Data Exists for this varaint.[QueueHistoryTable]
                          }//No Transaction Data Exists for this varaint.[WFInstrumentTable]
                        }
			// For invalid session
			else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			//Generating Output XML
			if (mainCode == 0) {
                            WFSUtil.genAdminLogExt(con, engine, arrAuditList);
				outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WFDeleteProcessVariant"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(gen.closeOutputFile("WFDeleteProcessVariant"));
			}

		}
		catch (SQLException e) { 
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0) {
				if (e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
					+ ")";
				}
			} else {
				descr = e.getMessage();
			}
		}catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		}finally {
                    try{
                        if(!con.getAutoCommit()){
                            con.rollback();
                            con.setAutoCommit(true);
                        }
                    } catch(Exception ignored){
                        WFSUtil.printErr(engine,"", ignored);
                    }
                    try {
                        if (pstmt != null) {
                            pstmt.close();
                            pstmt = null;
                        }
                    } catch (Exception e) {
                         WFSUtil.printErr(engine,"", e);
                    }
                    
                    }
		if (mainCode != 0)
            throw new WFSException(mainCode, subCode, errType, subject, descr);
		return outputXML.toString();
	}

	/*----------------------------------------------------------------------------------------------------
//	Function Name 				:	WFGetProcessVariantInfo
//	Date Written (DD/MM/YYYY)	:	06/05/2013
//	Author						:	Mohnish Chopra
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:   none
//	Return Values				:	String
//	Description					:   Gets the process variant Info 
//----------------------------------------------------------------------------------------------------*/

	public String WFGetProcessVariantInfo(Connection con, XMLParser parser,
			XMLGenerator gen) throws JTSException, WFSException {

		StringBuffer outputXML = new StringBuffer("");
		int mainCode = 0;
		int subCode = 0;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
                ResultSet rs1 = null;
		String descr = null;
		String subject = null;
		String errType = WFSError.WF_TMP;
                String engine = parser.getValueOf("EngineName");
				String option = parser.getValueOf("Option", "", false);

		try {

			int sessionID = parser.getIntOf("SessionId", 0, false);
			
			int count=0;
			int variantId = parser.getIntOf("VariantId", 0, false);
			int dbType = ServerProperty.getReference().getDBType(engine);
			StringBuffer tempXml = new StringBuffer();
			WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);

			HashMap<String,String> variantInfo =new HashMap<String,String>();
			//Checking whether the session is valid
			if (participant != null) {
				int startIndex = 0;
				int endIndex = 0;
				String strVarId= null;
				int varId= 0;
                
				pstmt = con.prepareStatement("SELECT ProcessVariantName, ProcessVariantState, RegPrefix, RegSuffix, RegStartingNo,Label, Description, ProcessDefId from WFProcessVariantDefTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessVariantId=?");
				pstmt.setInt(1,variantId);
				pstmt.execute();
				rs=pstmt.getResultSet();
				//In case no variants got deleted
				if(!rs.next()){
					mainCode = WFSError.WF_NO_VARIANTS_EXISTS;
					subCode = 0;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr =   WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}
				else{
                    int procDefId = rs.getInt("ProcessDefId");
					tempXml.append(gen.writeValueOf("VariantCode",  rs.getString("ProcessVariantName")));
					tempXml.append(gen.writeValueOf("VariantName", rs.getString("Label")));
					tempXml.append(gen.writeValueOf("Description", rs.getString("Description")));
					tempXml.append(gen.writeValueOf("RegPrefix", rs.getString("RegPrefix")));
					tempXml.append(gen.writeValueOf("StartSeqNumber", String.valueOf(rs.getInt("RegStartingNo"))));
					tempXml.append(gen.writeValueOf("RegSuffix",  rs.getString("RegSuffix")));
					tempXml.append(gen.writeValueOf("VariantState",  rs.getString("ProcessVariantState")));

					//Creating Fields tag now
					if(pstmt!=null){
						pstmt.close();
						pstmt=null;
					}
					if(	rs!=null){
						rs.close();
						rs=null;
					}
                    
                    pstmt=con.prepareStatement("Select ActivityId, Columns, Width1, Width2, Width3 from WFVariantFormTable a "
                            + "left outer join ACTIVITYINTERFACEASSOCTABLE b on a.processdefid = b.ProcessDefId and "
                            + "a.processvariantid = b.processvariantid and a.formextid = b.InterfaceElementId "
                            + "where a.ProcessVariantId = ? and interfacetype = ?");
					pstmt.setInt(1,variantId);
                    WFSUtil.DB_SetString(2, "F", pstmt, dbType);
                    pstmt.execute();
					rs=pstmt.getResultSet();
                    if(rs.next()){ 
						HashMap<String,String> layoutMap=new HashMap<String,String>();
						Document doc = WFXMLUtil.createDocument();
						Element root = WFXMLUtil.createRootElement(doc, "Layout");
//						do{
//                            layoutMap.put("activityId",String.valueOf(rs.getInt("ActivityId")));
//                            layoutMap.put("columns",String.valueOf(rs.getInt("Columns")));
//                            layoutMap.put("width1",String.valueOf(rs.getInt("Width1")));
//                            layoutMap.put("width2",String.valueOf(rs.getInt("Width2")));
//                            layoutMap.put("width3",String.valueOf(rs.getInt("Width3")));
//
//                            String eleName = "FormLayout";
//                            Element formEle = WFXMLUtil.createElement(root, doc, eleName);
//                            WFXMLUtil.createAttriElement(layoutMap, formEle);
//                            layoutMap=new HashMap<String,String>();
//                        }
//						while(rs.next());
	//Bug 43303- mulutiple layout issue.
//                        do{
                            layoutMap.put("activityId",String.valueOf(0));
                            layoutMap.put("columns",String.valueOf(rs.getInt("Columns")));
                            layoutMap.put("width1",String.valueOf(rs.getInt("Width1")));
                            layoutMap.put("width2",String.valueOf(rs.getInt("Width2")));
                            layoutMap.put("width3",String.valueOf(rs.getInt("Width3")));

                            String eleName = "FormLayout";
                            Element formEle = WFXMLUtil.createElement(root, doc, eleName);
                            WFXMLUtil.createAttriElement(layoutMap, formEle);
                            layoutMap=new HashMap<String,String>();
//                        }while(rs.next());
						String formXMLPart =  WFXMLUtil.getXmlStringforDOMDocument(doc);
						tempXml.append(formXMLPart);
					}
                    
					//pstmt=con.prepareStatement("select distinct A.FieldName FieldName, A.WFType WFType, B.FieldLength FieldLength from WFTypeDefTable A left outer join WFUDTVarMappingTable B on B.ProcessDefId = A.ProcessDefId and A.FieldName = B.MappedObjectName and A.processVariantId = B.ProcessVariantId where  B.ProcessVariantId = ? and B.MappedObjectType = ?");
                    pstmt=con.prepareStatement("select a.MappedObjectName FieldName, b.Type WFType, a.fieldlength FieldLength, a.DefaultValue DefaultValue, a.varprecision VarPrecision, "
                            + "b.methodname MethodName, b.picklistinfo PickListInfo, b.controltype Controltype from WFVariantFieldInfoTable b left outer join WFUDTVarMappingTable a "
                            + "on a.ProcessDefId = b.ProcessDefId and a.ProcessVariantId = b.ProcessVariantId and a.VariableId = b.VariableId and a.VarFieldId = b.VarFieldId "
                            + "where a.ProcessVariantId = ?");
					pstmt.setInt(1,variantId);
					//pstmt.setString(2,"C");
					pstmt.execute();
					rs=pstmt.getResultSet();
					if(rs.next()){ 
						HashMap<String,String> fieldsInfoMap=new HashMap<String,String>();

						Document doc = WFXMLUtil.createDocument();
						Element root = WFXMLUtil.createRootElement(doc, "Fields");
						do{
							String fieldName=rs.getString("FieldName");
							if(!(fieldName.equalsIgnoreCase("ProcessInstanceId")||fieldName.equalsIgnoreCase("WorkItemId"))){
								fieldsInfoMap.put("name",fieldName);
								fieldsInfoMap.put("type",String.valueOf(rs.getInt("WFType")));
								fieldsInfoMap.put("length",String.valueOf(rs.getInt("FieldLength")));
                                fieldsInfoMap.put("precision",String.valueOf(rs.getInt("VarPrecision")));
                                fieldsInfoMap.put("defaultValue",rs.getString("DefaultValue"));
								fieldsInfoMap.put("methodName",rs.getString("MethodName"));
                                fieldsInfoMap.put("pickListInfo",rs.getString("PickListInfo"));
                                fieldsInfoMap.put("controlType",String.valueOf(rs.getInt("Controltype")));
                                
                                String eleName = "Field";
								Element fieldEle = WFXMLUtil.createElement(root, doc, eleName);
								WFXMLUtil.createAttriElement(fieldsInfoMap, fieldEle);
								fieldsInfoMap=new HashMap<String,String>();
							}
						}
						while(rs.next());
						String fieldXMLPart =  WFXMLUtil.getXmlStringforDOMDocument(doc);
						tempXml.append(fieldXMLPart);
					}
					//Creating xml for FormBuffer
					if(	rs!=null){
						rs.close();
						rs=null;
					}
//					String statement= "select FormBuffer from WFForm_Table where  processVariantId=?"; 
//					
//					pstmt= con.prepareStatement(statement);
//					pstmt.setInt(1,variantId);
//					pstmt.execute();
//					rs= pstmt.getResultSet();
//					
//					if(rs.next()){
//						Clob object= rs.getClob(1);
//						String formBufferString = object.getSubString(1, (int) object.length());
//						tempXml.append(gen.writeValueOf("FormBuffer",formBufferString));
//
//
//					}
//					if(	rs!=null){
//						rs.close();
//						rs=null;
//					}
                                        
                                        //Creating xml for template buffer
					
					/*pstmt=con.prepareStatement("select Locale,TemplateBuffer from TemplateMultilanguageTable where ProcessVariantId=?");
					pstmt.setInt(1,variantId);
					pstmt.execute();
					rs=pstmt.getResultSet();
					if(rs.next()){
						HashMap<String,String> templateInfoMap=new HashMap<String,String>();

						Document doc = WFXMLUtil.createDocument();
						Element root = WFXMLUtil.createRootElement(doc, "TemplateBuffer");
						do{
							templateInfoMap.put("locale",rs.getString("Locale"));
							String eleName = "Template";
							Clob clob=rs.getClob("TemplateBuffer");
							String templateBufferString = clob.getSubString(1, (int) clob.length());
							templateInfoMap.put("buffer",templateBufferString);
							Element fieldEle = WFXMLUtil.createElement(root, doc, eleName);
							WFXMLUtil.createAttriElement(templateInfoMap, fieldEle);
							templateInfoMap=new HashMap<String,String>();
						}
						while(rs.next());
						String templateXMLPart =  WFXMLUtil.getXmlStringforDOMDocument(doc);
						tempXml.append(templateXMLPart);
					}
					
					
					//creating XML for Document
					
                                         */
//                                        if(rs!=null){
//                                            rs.close();
//                                            rs=null;
//					}
					pstmt=con.prepareStatement("select DocId, DocName from DOCUMENTTYPEDEFTABLE WHERE ProcessVariantId=?");
					pstmt.setInt(1,variantId);
					pstmt.execute();
					rs=pstmt.getResultSet();
					if(rs.next()){
						HashMap<String,String> docInfoMap=new HashMap<String,String>();

						Document doc = WFXMLUtil.createDocument();
						Element root = WFXMLUtil.createRootElement(doc, "DocumentTypes");
						do{
							docInfoMap.put("id",rs.getString("DocId"));
							docInfoMap.put("name",rs.getString("DocName"));
							String eleName = "DocumentType";
							Element fieldEle = WFXMLUtil.createElement(root, doc, eleName);
							WFXMLUtil.createAttriElement(docInfoMap, fieldEle);
							docInfoMap=new HashMap<String,String>();
						}
						while(rs.next());
						String docXMLPart =  WFXMLUtil.getXmlStringforDOMDocument(doc);
						tempXml.append(docXMLPart);
					}
					//Creating Associations --Field and doc associations
					Document doc = WFXMLUtil.createDocument();
					Element root = WFXMLUtil.createRootElement(doc, "Associations");
					if(	rs!=null){
						rs.close();
						rs=null;
					}
					// Creating field association
					//pstmt=con.prepareStatement("Select ActivityId, Attribute from ActivityAssociationTable where ProcessVariantId=? and EXTObjId=?");
                    pstmt=con.prepareStatement("Select ActivityId, VariableId,VarFieldId, enable,editable,visible, mandatory mandatory "
                            + "from WFVariantFieldAssociationTable B where ProcessVariantId=?");
					pstmt.setInt(1,variantId);
					//pstmt.setInt(2,1);
					pstmt.execute();
					rs=pstmt.getResultSet();
					if(rs.next()){
						HashMap<String,String> fieldAssocInfoMap=new HashMap<String,String>();
						Element fieldAssocNode = WFXMLUtil.createElement(root,doc, "FieldAssociation");
//						do{
//
//							String actId=((Integer)rs.getInt("ActivityId")).toString();
//							String attribute = rs.getString("Attribute");
//
//							fieldAssocInfoMap.put("id",actId);
//							fieldAssocInfoMap.put("authorization",attribute );
//							String eleName = "Activity";
//							Element fieldEle = WFXMLUtil.createElement(fieldAssocNode, doc, eleName);
//							WFXMLUtil.createAttriElement(fieldAssocInfoMap, fieldEle);
//							fieldAssocInfoMap=new HashMap<String,String>();
//						}
//						while(rs.next());
                        int previousActivityId=0;
						Element actElement = null;
                        PreparedStatement pstmt1= null;
						do{
							int actId=rs.getInt("ActivityId");
                            int variableId = rs.getInt("VariableId");
                            int varFieldId = rs.getInt("VarFieldId");
                            if((actId!=previousActivityId)||(previousActivityId==0)){
								fieldAssocInfoMap.put("id",String.valueOf(actId));
								String eleName = "Activity";
								actElement = WFXMLUtil.createElement(fieldAssocNode, doc, eleName);
								WFXMLUtil.createAttriElement(fieldAssocInfoMap, actElement);
								fieldAssocInfoMap=new HashMap<String,String>();
							}
                            fieldAssocInfoMap.put("FieldName","");
                            fieldAssocInfoMap.put("enable",rs.getString("enable"));
                            fieldAssocInfoMap.put("editable",rs.getString("editable"));
                            fieldAssocInfoMap.put("visible",rs.getString("visible"));
                            fieldAssocInfoMap.put("mandatory",rs.getString("mandatory"));
                            
                            if(varFieldId >0){
                                pstmt1=con.prepareStatement("Select MappedObjectName as FieldName from WFUDTVarMappingTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessVariantId = ? and VariableId = ? and VarFieldId = ? and MappedObjectType =? ");
                                pstmt1.setInt(1,variantId);
                                pstmt1.setInt(2,variableId);
                                pstmt1.setInt(3,varFieldId);
                                WFSUtil.DB_SetString(4, "C", pstmt1, dbType);
                                fieldAssocInfoMap.put("varType","I");
                            }else{
                                pstmt1=con.prepareStatement("Select UserDefinedName as FieldName from VarMappingTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessDefId = ? and VariableId = ? and ProcessVariantId = 0");
                                pstmt1.setInt(1,procDefId);
                                pstmt1.setInt(2,variableId);
                                fieldAssocInfoMap.put("varType","U");
                            }
                            rs1 = pstmt1.executeQuery();
                            String fieldName = null;
                            if(rs1.next())
                                fieldName = rs1.getString("FieldName");
                            if(rs1 != null){
                                rs1.close();
                                rs1 = null;
                            }
							fieldAssocInfoMap.put("FieldName",fieldName);
							Element fieldElement = WFXMLUtil.createElement(actElement , doc, "FieldInfo");
							WFXMLUtil.createAttriElement(fieldAssocInfoMap,fieldElement);
							previousActivityId=actId;
							fieldAssocInfoMap=new HashMap<String,String>();
						}
						while(rs.next());
                        String fieldAssocXMLPart =  WFXMLUtil.getXmlStringforDOMDocument(doc);
					}

					//Creating document Association
					if(rs!=null){
						rs.close();
						rs=null;
					}
                                        if(dbType!=JTSConstant.JTS_POSTGRES)
                                                pstmt=con.prepareStatement("SELECT a.ActivityId ActivityId,a.Attribute Attribute,b.DocName DocName FROM" +
                                                                " ActivityInterfaceAssocTable a " + WFSUtil.getTableLockHintStr(dbType) + ", DocumentTypeDefTable b " + WFSUtil.getTableLockHintStr(dbType) + " where" +
                                                                " a.interfaceelementid= b.docid and a.processvariantid=? and" +
                                                " a.processvariantid=b.processvariantid and a.interfacetype=? order by a.ActivityId");
                                        else
                                             pstmt=con.prepareStatement("SELECT a.ActivityId AS ActivityId,a.Attribute AS Attribute,b.DocName As DocName FROM" +
                                                                " ActivityInterfaceAssocTable a " + WFSUtil.getTableLockHintStr(dbType) + ", DocumentTypeDefTable b " + WFSUtil.getTableLockHintStr(dbType) + " where" +
                                                                " a.interfaceelementid= b.docid and a.processvariantid=? and" +
                                                " a.processvariantid=b.processvariantid and a.interfacetype=? order by a.ActivityId");
					pstmt.setInt(1,variantId);
					pstmt.setString(2,"D");
					pstmt.execute();
					rs=pstmt.getResultSet();
					if(rs.next()){
						HashMap<String,String> docAssocInfoMap=new HashMap<String,String>();

						Element docAssocNode = WFXMLUtil.createElement(root,doc, "DocumentAssociation");
						int previousActivityId=0;
						Element actElement = null;
						do{
							int actId=rs.getInt("ActivityId");
							String authCode = rs.getString("Attribute");
							WFSUtil.printOut(engine,"Attribute:"+authCode);
							String docName = rs.getString("DocName");
							WFSUtil.printOut(engine,"Doc name:"+docName);
							if((actId!=previousActivityId)||(previousActivityId==0)){
								docAssocInfoMap.put("id",String.valueOf(actId));
								String eleName = "Activity";
								actElement = WFXMLUtil.createElement(docAssocNode, doc, eleName);
								WFXMLUtil.createAttriElement(docAssocInfoMap, actElement);
								docAssocInfoMap=new HashMap<String,String>();
							}
							docAssocInfoMap.put("DocName", docName);
							docAssocInfoMap.put("authorization", authCode);
							Element docElement = WFXMLUtil.createElement(actElement , doc, "DocInfo");
							WFXMLUtil.createAttriElement(docAssocInfoMap,docElement);
							previousActivityId=actId;
							docAssocInfoMap=new HashMap<String,String>();
						}
						while(rs.next());
					}
                    String assocXMLPart =  WFXMLUtil.getXmlStringforDOMDocument(doc);
					tempXml.append(assocXMLPart);
                    
                    pstmt=con.prepareStatement("SELECT ActivityId,VariableId, VarFieldId,LanguageType,CodeSnippet,FieldListener,ObjectForListener, FunctionName FROM WFVariantFormListenerTable " + WFSUtil.getTableLockHintStr(dbType) + " where processvariantid=? order by ActivityId");
					pstmt.setInt(1,variantId);
					//pstmt.setString(2,"D");
					pstmt.execute();
					rs=pstmt.getResultSet();
					if(rs.next()){
						HashMap<String,String> listenerAssocInfoMap=new HashMap<String,String>();
						doc = WFXMLUtil.createDocument();
                        root = WFXMLUtil.createRootElement(doc, "Listener");
						//Element listenerAssocNode = WFXMLUtil.createElement(root,doc, "Listener");
						Element actElement = null;
                        int varFieldId = 0;
                        do{
							int actId=rs.getInt("ActivityId");
                            
                            String object = null;
							listenerAssocInfoMap.put("id",String.valueOf(actId));
							listenerAssocInfoMap.put("language",rs.getString("LanguageType"));
							listenerAssocInfoMap.put("functionName",rs.getString("FunctionName"));
                            listenerAssocInfoMap.put("codeSnippet",rs.getString("CodeSnippet"));
							listenerAssocInfoMap.put("fieldlistener",String.valueOf(rs.getInt("FieldListener")));
							object = rs.getString("ObjectForListener");
							listenerAssocInfoMap.put("object",object);
							if("C".equalsIgnoreCase(object)){
								varId = rs.getInt("VariableId");
								varFieldId = rs.getInt("VarFieldId");
                                if(varId>0){
                                    if(varFieldId >0){
                                        pstmt = con.prepareStatement("select b.MappedObjectName FieldName, 'WFUDTVarMappingTable' tablename from WFVariantFormListenerTable a "
                                                + "left outer join WFUDTVarMappingTable b on a.ProcessVariantId = b.ProcessVariantId and a.VariableId = b.VariableId "
                                                + "and a.VarFieldId = b.VarFieldId where a.ProcessVariantId = ? and a.VariableId = ? and a.VarFieldId = ?");
                                        pstmt.setInt(1,variantId);
                                        pstmt.setInt(2,varId);
                                        pstmt.setInt(3,varFieldId);
                                    }else{
                                        pstmt = con.prepareStatement("select distinct b.UserDefinedName FieldName, 'VarMappingTable' tablename from WFVariantFormListenerTable a left outer join "
                                                + "VARMAPPINGTABLE b on a.ProcessDefId= b.ProcessDefId and a.VariableId = b.VariableId "
                                                + "where a.ProcessDefId = ? and a.VariableId = ? ");
                                        pstmt.setInt(1,procDefId);
                                        pstmt.setInt(2,varId);
                                    }
                                    rs1 = pstmt.executeQuery();
                                    if(rs1.next()){
                                        listenerAssocInfoMap.put("name",rs1.getString("FieldName"));
                                        if("VarMappingTable".equalsIgnoreCase(rs1.getString("tablename")))
                                            listenerAssocInfoMap.put("varType","U");// User defined Queue Variable
                                        else
                                            listenerAssocInfoMap.put("varType","I");//Variant specific variable
                                    }
                                    if(rs1 != null){
                                        rs1.close();
                                        rs1 = null;
                                    }
                                }
							}
							String eleName = "Activity";
							actElement = WFXMLUtil.createElement(root, doc, eleName);
							WFXMLUtil.createAttriElement(listenerAssocInfoMap, actElement);
							listenerAssocInfoMap=new HashMap<String,String>();
						}
						while(rs.next());
						assocXMLPart =  WFXMLUtil.getXmlStringforDOMDocument(doc);
						tempXml.append(assocXMLPart);
					}
				}
			}
			// For invalid session
			else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			//Generating Output XML
			if (mainCode == 0) {
				outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WFGetProcessVariantInfo"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(tempXml);
				outputXML.append(gen.closeOutputFile("WFGetProcessVariantInfo"));
			}
		}
		catch (SQLException e) { 
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0) {
				if (e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
					+ ")";
				}
			} else {
				descr = e.getMessage();
			}
		} 
		catch (NullPointerException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} 
		catch (JTSException e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} 
		catch (Exception e) {
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} 
		finally {
			try {
				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
			} catch (Exception e) {

				WFSUtil.printErr(engine,"", e);
			}
            try {
				if (rs1 != null) {
					rs1.close();
					rs1 = null;
				}
			} catch (Exception e) {

				WFSUtil.printErr(engine,"", e);
			}
			try{
				if (rs != null) {
					rs.close();
					rs = null;
				}
			}
			catch (Exception e) {

				WFSUtil.printErr(engine,"", e);
			}
			
		}
		if (mainCode != 0){
            String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			return errorString;

		}
		return outputXML.toString();

	}

	/*----------------------------------------------------------------------------------------------------
//	Function Name 				:	WFCreateProcessVariant
//	Date Written (DD/MM/YYYY)	:	06/05/2013
//	Author						:	Mohnish Chopra
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:   none
//	Return Values				:	String
//	Description					:   Create Process Variant for a given Process 
//----------------------------------------------------------------------------------------------------*/

	public String WFCreateProcessVariant(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
		StringBuffer outputXML = new StringBuffer(500);
		PreparedStatement pstmt = null;
		PreparedStatement tempPstmt=null;
        Statement stmt = null;
		ResultSet rs = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
		int variantId = 0;
		int variableId=58; //initialized for Complex variable specific to a variant for VarmappingTable
		int extObjId=2; // //initialized for Complex variable specific to a variant for VarmappingTable
		/* 
		 * typeDefQueriesList : Used to hold individual queries to insert FIELDS(Fields includes 
		 * ProcessInstanceId and WorkItemId) for a variant into WFTypeDefTable 
		 * 
		 */
		ArrayList<PreparedStatement> typeDefQueriesList =new ArrayList<PreparedStatement>();
		ArrayList<PreparedStatement> udtVarMappingQueriesList =new ArrayList<PreparedStatement>();
		ArrayList<PreparedStatement> fieldInfoQueriesList = new ArrayList<PreparedStatement>();
		String option = null;			
		StringBuffer queryTemp= new StringBuffer();
		String engine = null;
        engine = parser.getValueOf("EngineName", "", false);
		char char21 = 21;
		String string21 = "" + char21;		
		try{
			int sessionID = parser.getIntOf("SessionId", 0, false);
			
			option = parser.getValueOf("Option", "", false);				
			int dbType = ServerProperty.getReference().getDBType(engine);
			int processDefId = parser.getIntOf("ProcessDefId", 0, false);
			String variantName = parser.getValueOf("VariantCode", "", false);
			String complexName = "data_"+variantName;
			String tableName = "WFPV_" + variantName;
			String processType;
			String label = null;
			WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
			int count =2;//count mantained for insertion into WFTypeDefTable
			int fieldcount = 0;//fieldId count maintained for insertion in WFVariantFieldInfoTable
			HashMap<String,String> fieldIdNameMapping = new HashMap<String,String>();
            HashMap<String,Integer> docIdNameMapping = new HashMap<String,Integer>();
			ArrayList arrAuditList = new ArrayList();
            PreparedStatement pstmt2 = null;
            String tempRegPrefix = parser.getValueOf("RegPrefix", "", false);
            String tempRegSuffix = parser.getValueOf("RegSuffix", "", false);
            ResultSet rs2 = null;
			if(participant != null){	
				pstmt = con.prepareStatement("Select ProcessVariantName from WFProcessVariantDefTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessVariantName = ? ");
               //Bug 43313
				pstmt2 = con.prepareStatement("Select RegPrefix from WFProcessVariantDefTable " + WFSUtil.getTableLockHintStr(dbType) + " where RegPrefix = ? and RegSuffix = ?  UNION ALL Select RegPrefix from ProcessDefTable " + WFSUtil.getTableLockHintStr(dbType) + "  where RegPrefix = ? and RegSuffix = ? ");
				//pstmt.setString(1,variantName);
				WFSUtil.DB_SetString(1, variantName, pstmt, dbType);                                
				pstmt.execute();
				rs = pstmt.getResultSet();
                WFSUtil.DB_SetString(1, tempRegPrefix, pstmt2, dbType);
                WFSUtil.DB_SetString(2, tempRegSuffix, pstmt2, dbType);
                WFSUtil.DB_SetString(3, tempRegPrefix, pstmt2, dbType);
                WFSUtil.DB_SetString(4, tempRegSuffix, pstmt2, dbType);
                rs2 = pstmt2.executeQuery();
				if(rs.next()){
					mainCode = WFSError.WF_OPERATION_FAILED;
					subCode = WFSError.WF_VARIANT_ALREADY_EXISTS;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}else if(rs2.next()) {
                                        mainCode = WFSError.WF_OPERATION_FAILED;
					subCode = WFSError.WF_REGSEQ_ALREADY_EXISTS;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
                                }else{
					int userID = participant.getid();
					String userName = participant.getname();
					if (con.getAutoCommit())
						con.setAutoCommit(false);
					pstmt = con.prepareStatement("Select ProcessType from ProcessDefTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessDefId = ?");
					pstmt.setInt(1,processDefId);
					pstmt.execute();
					rs = pstmt.getResultSet();
					if(rs.next()){
						WFSUtil.printOut(engine,"Inside 1");
						processType=rs.getString(1);
						// If process type is Multi variant
						if("M".equalsIgnoreCase(processType)){		
							WFSUtil.printOut(engine,"Inside 2");
							if (rs != null) {
								rs.close();
								rs = null;
							}
							if(pstmt!=null){
								pstmt.close();
								pstmt=null;
							}
                                        
							if(variantName.length() <= 25){
								WFSUtil.printOut(engine,"Inside 3");
								Pattern pattern = Pattern.compile("[$&!%^*(){}<>+,:;=?@#|]");
								Matcher matcher = pattern.matcher(tableName);
								//match and give error If invalid
								String statement = null;
								String desc = parser.getValueOf("Description", "", true);
								String regPrefix = parser.getValueOf("RegPrefix", "", false);
								int seqNo = parser.getIntOf("StartSeqNumber", 0, false);
								String regSuffix = parser.getValueOf("RegSuffix", "", false);
							    label = parser.getValueOf("VariantName", "", false);
								String curDate = WFSUtil.getDate(dbType);
								if (!matcher.find()){
									if (dbType == JTSConstant.JTS_MSSQL) {
										statement= "insert into WFProcessVariantDefTable (ProcessDefId,ProcessVariantName,ProcessVariantState,"
												+ "RegPrefix, RegSuffix, RegStartingNo, Label, Description, CreatedOn,CreatedBy, "
												+ "LastModifiedOn, LastModifiedBy) values (?,?,?,?,?,?,?,?,?,?,?,?)";
									}else if(dbType == JTSConstant.JTS_ORACLE || dbType == JTSConstant.JTS_POSTGRES ){
										variantId =Integer.parseInt(WFSUtil.nextVal(con, "PROCESSVARIANTID", dbType));
										WFSUtil.printOut(engine,"variantId in case of Oracle>>"+variantId);
										statement= "insert into WFProcessVariantDefTable (ProcessDefId,ProcessVariantName,ProcessVariantState,"
												+ "RegPrefix, RegSuffix, RegStartingNo, Label, Description, CreatedOn,CreatedBy,"
												+ " LastModifiedOn, LastModifiedBy,ProcessVariantId) values (?,?,?,?,?,?,?,?,?,?,?,?,?)";	
									}
									pstmt= con.prepareStatement(statement);
									pstmt.setInt(1, processDefId);
									WFSUtil.DB_SetString(2, variantName, pstmt, dbType);
									WFSUtil.DB_SetString(3, "Disabled", pstmt, dbType);
									WFSUtil.DB_SetString(4, regPrefix, pstmt, dbType);
									WFSUtil.DB_SetString(5, regSuffix, pstmt, dbType);
									pstmt.setInt(6, seqNo);
									WFSUtil.DB_SetString(7, label, pstmt, dbType);
									WFSUtil.DB_SetString(8, desc, pstmt, dbType);
									Date date = new Date();
									long time = date.getTime();
									pstmt.setDate(9,new java.sql.Date(time));
									WFSUtil.DB_SetString(10, userName, pstmt, dbType);
									pstmt.setDate(11,new java.sql.Date(time));
									WFSUtil.DB_SetString(12, userName, pstmt, dbType);
									if(dbType != JTSConstant.JTS_MSSQL){
										WFSUtil.printOut(engine,"INSIDE 13TH PARAMETER");
										pstmt.setInt(13, variantId);
									}
									WFSUtil.printOut(engine,"Before first insert");
									pstmt.execute();
									if(dbType == JTSConstant.JTS_MSSQL){
										pstmt = con.prepareStatement("Select @@IDENTITY");
										rs = pstmt.executeQuery();
										if(rs != null && rs.next()) {
											variantId = rs.getInt(1);
											rs.close();
										}
									}
									if (rs != null) {
										rs.close();
										rs = null;
									}
									if(pstmt!=null){
										pstmt.close();
										pstmt=null;
									}
									WFSUtil.printOut(engine,"VariantId>>"+variantId);
									/*
									 * tempPstmt: preparedStatement identifier that  will insert
									 * fields(parsed from input xml and two additional fields i.e 
									 * ProcessInstanceId and WorkItemId) into wftypedeftable.
									 * All tempPstmt's will be added in arrayList :typeDefQueriesList
									 * which will be later on traversed to insert each element into  
									 * wftypedeftable table
									 *  
									 */
                                    pstmt = con.prepareStatement("select Max(variableid) as VariableId,Max(extobjid) as ExtObjId from VarMappingTable where processdefid=? and extobjid>?");
									pstmt.setInt(1,processDefId);
									pstmt.setInt(2,1);
									pstmt.execute();
									rs=pstmt.getResultSet();
									if(rs.next()){
										variableId=rs.getInt("VariableId");
										extObjId=rs.getInt("ExtObjId");
										variableId++;
										extObjId++;
										if((variableId==1)&&(extObjId==1)){
											variableId=58; // initializing with default values
											extObjId=2;
										}
									}
									if (rs != null) {
										rs.close();
										rs = null;
									}
												
									for(int i=0;i<2;i++){
										tempPstmt=con.prepareStatement("insert into wftypedeftable(processdefid,parenttypeid,typefieldid,fieldname,wftype,typeid,unbounded,extensiontypeid,processvariantid) values(?,?,?,?,?,?,?,?,?)");
										tempPstmt.setInt(1,processDefId);
										tempPstmt.setInt(2,1);
										tempPstmt.setInt(3,i+1);
										WFSUtil.DB_SetString(4, i==0?"ProcessInstanceId":"WorkItemId", tempPstmt, dbType);
										tempPstmt.setInt(5,i==0?WFSConstant.WF_STR:WFSConstant.WF_INT);
										tempPstmt.setInt(6,0);
										WFSUtil.DB_SetString(7,"N" , tempPstmt, dbType);
										tempPstmt.setInt(8,0);
										tempPstmt.setInt(9,variantId);
										typeDefQueriesList.add(tempPstmt);
									}
									/*
									 * tempPstmt: preparedStatement identifier that  will insert
									 * fields(parsed from input xml and two additional fields i.e 
									 * ProcessInstanceId and WorkItemId) into WFUDTVarMappingTable.
									 * All tempPstmt's will be added in arrayList :udtVarMappingQueriesList
									 * which will be later on traversed to insert each element into  
									 * WFUDTVarMappingTable table
									 *  
									 */
									for(int j=0;j<3;j++){
										tempPstmt=con.prepareStatement("insert into WFUDTVarMappingTable(ProcessDefId," +
														"VariableId,VarFieldId,TypeId,TypeFieldId,ParentVarFieldId," +
										"MappedObjectName,ExtObjId,MappedObjectType,FieldLength,VarPrecision,RelationId,ProcessVariantId)	VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)");
										tempPstmt.setInt(1,processDefId);
										tempPstmt.setInt(2,variableId);
										tempPstmt.setInt(3,j+1);
										tempPstmt.setInt(4,1);
										tempPstmt.setInt(5,j);
										tempPstmt.setInt(6,j==0?0:1);
										WFSUtil.DB_SetString(7,j==0?tableName:(j==1?"ProcessInstanceId":"WorkItemId") , tempPstmt, dbType);
										//tempPstmt.setString(7,j==0?tableName:(j==1?"ProcessInstanceId":"WorkItemId"));
										tempPstmt.setInt(8,extObjId);
										WFSUtil.DB_SetString(9,j==0?"T":"C" , tempPstmt, dbType);
										//tempPstmt.setString(9,j==0?"T":"C");
										tempPstmt.setInt(10,j==0?0:(j==1?63:2));
										tempPstmt.setInt(11,0);
										tempPstmt.setInt(12,j==0?1:0);
										tempPstmt.setInt(13,variantId);
										udtVarMappingQueriesList.add(tempPstmt);
									}
									
									String st = null;
									if(dbType == JTSConstant.JTS_MSSQL)
										st = "select variableid,userdefinedname from VARMAPPINGTABLE " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessDefId =? and LEN(UserDefinedName)>0 and VariableId<27";
									else if(dbType == JTSConstant.JTS_ORACLE || dbType == JTSConstant.JTS_POSTGRES)
										st = "select variableid,userdefinedname from VARMAPPINGTABLE " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessDefId =? and LENGTH(UserDefinedName)>0 and VariableId<27";
									tempPstmt=con.prepareStatement(st);
									tempPstmt.setInt(1,processDefId);
									rs = tempPstmt.executeQuery();
									while(rs.next()){
										fieldIdNameMapping.put(rs.getString(2),String.valueOf(rs.getInt(1)+string21+"0"));
									}
								
									StringBuffer createQueryString=new StringBuffer();
									createQueryString.append("(ProcessInstanceId ");
									createQueryString.append(WFSUtil.getNVARCHARType(dbType)).append("(63),");
									createQueryString.append("WorkItemId INT");
                                    
									HashMap<Integer, String> actMap = new HashMap();
									pstmt = con.prepareStatement("SELECT ActivityId, ActivityName FROM ActivityTable " + WFSUtil.getTableLockHintStr(dbType) + " where processdefid = ? ");
									pstmt.setInt(1,processDefId);
									pstmt.execute();
									rs=pstmt.getResultSet();
									while(rs.next()){
										actMap.put(rs.getInt("ActivityId"), rs.getString("ActivityName"));
									}
									if (rs != null) {
										rs.close();
										rs = null;
									}
									
                                    pstmt = con.prepareStatement("SELECT InterfaceId, InterfaceName FROM PROCESS_INTERFACETABLE " + WFSUtil.getTableLockHintStr(dbType) + " where processdefid = ? and InterfaceName in (?,?)");
									pstmt.setInt(1,processDefId);
                                    WFSUtil.DB_SetString(2, WFSConstant.EXT_INT_FORMEXT_NAME, pstmt, dbType);
									WFSUtil.DB_SetString(3, WFSConstant.EXT_INT_DOCUMENT_NAME, pstmt, dbType);
                                    pstmt.execute();
									rs=pstmt.getResultSet();
                                    int formInterfaceId = 0;
                                    int docInterfaceId = 0;
                                    String interfaceName = "";
									while(rs.next()){
                                        interfaceName = rs.getString("InterfaceName");
                                        if("FormExtView".equalsIgnoreCase(interfaceName))
                                            formInterfaceId=rs.getInt("InterfaceId");
                                        else
                                            docInterfaceId = rs.getInt("InterfaceId");
									}
									if (rs != null) {
										rs.close();
										rs = null;
									}
                                    
                                    String formField = "Y,0,930,10275,15360";
                                    String layoutXML = parser.getValueOf("Layout","",true);
                                    int formExtid = 0;
                                    boolean formActivityAssocFlag = false;
									String actName = null;
									if((layoutXML!=null)||(!(layoutXML.equals("")))){
										WFSUtil.printOut(engine,"Inside fieldTYpe");
										layoutXML= "<Layout>" + layoutXML +"</Layout>";
										HashMap<String,String> layoutMap= new HashMap<String,String>(); 
										Document layoutDoc = WFXMLUtil.createDocument(layoutXML);
                                        NodeList nList = layoutDoc.getElementsByTagName("FormLayout");
                                        for (int temp = 0; temp < nList.getLength(); temp++) {
                                            Node nNode = nList.item(temp);
                                            String nodeName = nNode.getNodeName();
                                            NamedNodeMap attrs = nNode.getAttributes();
                                            for (int j = 0; j < attrs.getLength(); j++) {
                                                Attr attribute = (Attr) attrs.item(j);
                                                String attributeName = attribute.getName();
                                                String attributeVal = attribute.getValue();
                                                layoutMap.put(attributeName, attributeVal);
                                            }
                                            int actId = 0;
                                            int noColumns = 0;
                                            int width1 = 0;
                                            int width2 = 0;
                                            int width3 = 0;
                                            actId = Integer.parseInt(layoutMap.get("activityId"));
                                            noColumns = Integer.parseInt(layoutMap.get("columns"));
                                            width1 = Integer.parseInt(layoutMap.get("width1"));
                                            width2 = Integer.parseInt(layoutMap.get("width2"));
                                            width3 = Integer.parseInt(layoutMap.get("width3"));
                                            
                                            if (dbType != JTSConstant.JTS_MSSQL) {
                                                formExtid =Integer.parseInt(WFSUtil.nextVal(con, "FormExtId", dbType));
                                            }
                                            if (dbType == JTSConstant.JTS_MSSQL) {
                                                st = "insert into WFVariantFormTable (processdefid,ProcessVariantId,Columns,Width1,Width2,Width3) values("+processDefId+","+variantId+","+noColumns+","+width1+","+width2+","+width3+")";
                                            }else if (dbType == JTSConstant.JTS_ORACLE || dbType == JTSConstant.JTS_POSTGRES) {
                                                st = "insert into WFVariantFormTable (processdefid,ProcessVariantId,Columns,Width1,Width2,Width3,FormExtId) values ("+processDefId+","+variantId+","+noColumns+","+width1+","+width2+","+width3+", "+formExtid+")";
                                            }
                                             stmt = con.createStatement(); 
                                             stmt.execute(st);
                                           //tempPstmt.execute();
                                           if(dbType == JTSConstant.JTS_MSSQL){
                                                stmt.execute("Select @@IDENTITY");
                                                rs = stmt.getResultSet();
                                                if(rs != null && rs.next()) {
                                                    formExtid = rs.getInt(1);
                                                    rs.close();
                                                }
                                            }
                                            
                                            if(actId != 0){
                                                tempPstmt=con.prepareStatement("insert into ActivityAssociationTable (Processdefid,ProcessVariantId,ActivityId, DefinitionId, DefinitionType,AccessFlag,FieldName, Attribute, ExtObjId, VariableId) values(?,?,?,?,?,?,?,?,?,?)");
                                                tempPstmt.setInt(1,processDefId);
                                                tempPstmt.setInt(2,variantId);
                                                tempPstmt.setInt(3,actId);
                                                tempPstmt.setInt(4,formInterfaceId);
                                                WFSUtil.DB_SetString(5, "F", tempPstmt, dbType);
                                                WFSUtil.DB_SetString(6, "", tempPstmt, dbType);
                                                WFSUtil.DB_SetString(7, formField, tempPstmt, dbType);
                                                WFSUtil.DB_SetString(8, "", tempPstmt, dbType);
                                                tempPstmt.setInt(9,0);
                                                tempPstmt.setInt(10,0);
                                                tempPstmt.execute();
                                                
                                                tempPstmt=con.prepareStatement("insert into ActivityInterfaceAssocTable (Processdefid,ProcessVariantId,ActivityId, ActivityName, InterfaceElementId,InterfaceType,Attribute, TriggerName) values(?,?,?,?,?,?,?,?)");
												tempPstmt.setInt(1,processDefId);
												tempPstmt.setInt(2,variantId);
												tempPstmt.setInt(3,actId);
												actName = actMap.get(actId);
												WFSUtil.DB_SetString(4, actName, tempPstmt, dbType);
												tempPstmt.setInt(5,formExtid);
												WFSUtil.DB_SetString(6, "F", tempPstmt, dbType);
												WFSUtil.DB_SetString(7, "", tempPstmt, dbType);
												WFSUtil.DB_SetString(8, "", tempPstmt, dbType);
                                                tempPstmt.execute();
                                            }else{
                                                if(!formActivityAssocFlag){
                                                    Iterator itr = actMap.keySet().iterator();
													while (itr.hasNext()) {
                                                        actId = (Integer) itr.next();
														actName = actMap.get(actId);
                                                        tempPstmt=con.prepareStatement("insert into ActivityAssociationTable (Processdefid,ProcessVariantId,ActivityId, DefinitionId, DefinitionType,AccessFlag,FieldName, Attribute, ExtObjId, VariableId) values(?,?,?,?,?,?,?,?,?,?)");
                                                        tempPstmt.setInt(1,processDefId);
                                                        tempPstmt.setInt(2,variantId);
                                                        tempPstmt.setInt(3,actId);
                                                        tempPstmt.setInt(4,formInterfaceId);
                                                        WFSUtil.DB_SetString(5, "N", tempPstmt, dbType);
                                                        WFSUtil.DB_SetString(6, "", tempPstmt, dbType);
                                                        WFSUtil.DB_SetString(7, formField, tempPstmt, dbType);
                                                        WFSUtil.DB_SetString(8, "", tempPstmt, dbType);
                                                        tempPstmt.setInt(9,0);
                                                        tempPstmt.setInt(10,0);
                                                        tempPstmt.execute();
                                                        
                                                        tempPstmt=con.prepareStatement("insert into ActivityInterfaceAssocTable (Processdefid,ProcessVariantId,ActivityId, ActivityName, InterfaceElementId,InterfaceType,Attribute, TriggerName) values(?,?,?,?,?,?,?,?)");
                                                        tempPstmt.setInt(1,processDefId);
                                                        tempPstmt.setInt(2,variantId);
                                                        tempPstmt.setInt(3,actId);
                                                        WFSUtil.DB_SetString(4, actName, tempPstmt, dbType);
                                                        tempPstmt.setInt(5,formExtid);
                                                        WFSUtil.DB_SetString(6, "F", tempPstmt, dbType);
                                                        WFSUtil.DB_SetString(7, "", tempPstmt, dbType);
                                                        WFSUtil.DB_SetString(8, "", tempPstmt, dbType);
                                                        tempPstmt.execute();
                                                    }
                                                    formActivityAssocFlag = true;
                                                }
                                            }
                                            layoutMap = new HashMap();   
                                        }
                                    }
                                    
                                    String fieldXML = parser.getValueOf("Fields","",true);
									if((fieldXML!=null)||(!(fieldXML.equals("")))){
										WFSUtil.printOut(engine,"Inside fieldTYpe");
										// To convert fieldXML into well formed XML required for DOM parsing
										fieldXML= "<Fields>" + fieldXML +"</Fields>";
										HashMap<String,String> fieldsMap= new HashMap<String,String>(); 
										Document fieldDoc = WFXMLUtil.createDocument(fieldXML);
										Node node = fieldDoc.getFirstChild();
										NodeList fieldNodeList = WFXMLUtil.getChildListByName(node, "Field");
										int tempCount=3;
										//For loop to traverse each field one by one.
										for (int temp = 0; temp < fieldNodeList.getLength(); temp++) {
											createQueryString.append(",");
											Node nNode = fieldNodeList.item(temp);
											String nodeName = nNode.getNodeName();
											NamedNodeMap attrs = nNode.getAttributes();
											for (int j = 0; j < attrs.getLength(); j++) {
												Attr attribute = (Attr) attrs.item(j);
												String attributeName = attribute.getName();
												String attributeVal = attribute.getValue();
												fieldsMap.put(attributeName, attributeVal);
											}
											int length;
											String fieldName= fieldsMap.get("name");
											if(fieldsMap.containsKey("length")){
												length=Integer.parseInt(fieldsMap.get("length"));
											}else{
												length=0;
											}
											//String unbounded = "N";
											createQueryString.append(fieldName).append(" ");

											int type=Integer.parseInt(fieldsMap.get("type"));
											createQueryString.append(WFSUtil.getDBDataTypeForWFType(type,dbType,fieldName));
											if(type == WFSConstant.WF_STR)
												createQueryString.append("(").append(length).append(")");
											int precision = 0;	
											if(type == WFSConstant.WF_FLT)	
												precision = Integer.parseInt(fieldsMap.get("precision"));
											
											String defaultVal = fieldsMap.get("defaultValue");

                         	                   if(defaultVal != null || !defaultVal.equals("")){
                                                       /*if(type == WFSConstant.WF_BOOLEAN){
                                                       }else */ 
												   if(type == WFSConstant.WF_SHORT_DAT){
													createQueryString.append(" DEFAULT "+WFSUtil.TO_SHORT_DATE(defaultVal, true, dbType)+" ");
												   }else if(type == WFSConstant.WF_DAT){
													createQueryString.append(" DEFAULT "+WFSUtil.TO_DATE(defaultVal, true, dbType)+" ");
												   }else{
	                                               createQueryString.append(" DEFAULT "+WFSUtil.TO_STRING(defaultVal, true, dbType)+" ");
                                                       }
                                                   }
											String method = fieldsMap.get("methodName");
											String pickListInfo = fieldsMap.get("pickListInfo");
											int controlType = Integer.parseInt(fieldsMap.get("controlType"));
											
											tempPstmt=con.prepareStatement("insert into wftypedeftable (processdefid,parenttypeid,typefieldid,fieldname,wftype,typeid,unbounded,extensiontypeid,processvariantid) values(?,?,?,?,?,?,?,?,?)");
											tempPstmt.setInt(1,processDefId);
											tempPstmt.setInt(2,1);
											tempPstmt.setInt(3,++count);
											WFSUtil.DB_SetString(4,fieldName, tempPstmt, dbType);
											//tempPstmt.setString(4,fieldName);
											tempPstmt.setInt(5,type);
											tempPstmt.setInt(6,0);
											WFSUtil.DB_SetString(7,"N", tempPstmt, dbType);
											//tempPstmt.setString(7,unbounded);
											tempPstmt.setInt(8,0);
											tempPstmt.setInt(9,variantId);
											typeDefQueriesList.add(tempPstmt);

											tempPstmt=con.prepareStatement("insert into WFUDTVarMappingTable(ProcessDefId," +
															"VariableId,VarFieldId,TypeId,TypeFieldId,ParentVarFieldId," +"MappedObjectName,ExtObjId,MappedObjectType,FieldLength,VarPrecision,RelationId,ProcessVariantId,DefaultValue)	VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
											tempPstmt.setInt(1,processDefId);
											tempPstmt.setInt(2,variableId);
											tempPstmt.setInt(3,count+1);
											tempPstmt.setInt(4,1);
											tempPstmt.setInt(5,tempCount++);
											tempPstmt.setInt(6,1);
											WFSUtil.DB_SetString(7,fieldName, tempPstmt, dbType);
											//tempPstmt.setString(7,fieldName);
											tempPstmt.setInt(8,extObjId);
											WFSUtil.DB_SetString(9,"C", tempPstmt, dbType);
											//tempPstmt.setString(9,"C");
											tempPstmt.setInt(10,length);
											tempPstmt.setInt(11,precision);
											tempPstmt.setInt(12,0);
											tempPstmt.setInt(13,variantId);
											WFSUtil.DB_SetString(14,defaultVal, tempPstmt, dbType);
											udtVarMappingQueriesList.add(tempPstmt);
											
											tempPstmt=con.prepareStatement("insert into WFVariantFieldInfoTable(processdefid,ProcessVariantId,FieldId,VariableId,VarFieldId, Type,Length,DefaultValue,Methodname,PickListInfo, ControlType) values(?,?,?,?,?,?,?,?,?,?,?)");
											tempPstmt.setInt(1,processDefId);
											tempPstmt.setInt(2,variantId);
											tempPstmt.setInt(3,++fieldcount);
											tempPstmt.setInt(4,variableId);
                                            int varFieldId = count+1;
											tempPstmt.setInt(5,varFieldId);
											//WFSUtil.DB_SetString(4,fieldName, tempPstmt, dbType);
											//tempPstmt.setString(4,fieldName);
											tempPstmt.setInt(6,type);
											tempPstmt.setInt(7,length);
											//WFSUtil.DB_SetString(7,"N", tempPstmt, dbType);
											tempPstmt.setString(8,defaultVal);
											tempPstmt.setString(9,method);
											tempPstmt.setString(10,pickListInfo);
											tempPstmt.setInt(11,controlType);
											fieldInfoQueriesList.add(tempPstmt);
											fieldIdNameMapping.put(fieldName,String.valueOf(variableId+string21+varFieldId));
											fieldsMap=new HashMap();
										}

										statement= "insert into extdbconftable (processdefid, databasename, databasetype, tablename, extobjid,port,ProcessVariantId) values(?,?,?,?,?,?,?)";	
										pstmt= con.prepareStatement(statement);
										pstmt.setInt(1, processDefId);
										WFSUtil.DB_SetString(2,"online", pstmt, dbType);
										WFSUtil.DB_SetString(3,"local", pstmt, dbType);
										WFSUtil.DB_SetString(4,tableName, pstmt, dbType);
										pstmt.setInt(5, extObjId);
										pstmt.setInt(6, 0);
										pstmt.setInt(7,variantId);
										pstmt.execute();

										if(pstmt!=null){
											pstmt.close();
											pstmt=null;
										}

										//st= "insert into varmappingtable (processdefid, variableid, systemdefinedname, userdefinedname, variabletype, variablescope, extobjid, varprecision, unbounded) Values (processdefid,58,data_variantName,data_variantName,11,'I',2,0,'N')";
										statement= "insert into varmappingtable (processdefid, variableid, systemdefinedname, userdefinedname, variabletype, variablescope, extobjid, varprecision, unbounded,processvariantid) Values (?,?,?,?,?,?,?,?,?,?)";
										pstmt= con.prepareStatement(statement);
										pstmt.setInt(1, processDefId);
										pstmt.setInt(2,variableId);
										WFSUtil.DB_SetString(3,complexName, pstmt, dbType);
										WFSUtil.DB_SetString(4,complexName, pstmt, dbType);
										pstmt.setInt(5,11);
										WFSUtil.DB_SetString(6,"I", pstmt, dbType);
										//pstmt.setString(6,"I");								
										pstmt.setInt(7,extObjId);
										pstmt.setInt(8,0);
										WFSUtil.DB_SetString(9,"N", pstmt, dbType);
										//pstmt.setString(9,"N");
										pstmt.setInt(10,variantId);
										pstmt.execute();
										if(pstmt!=null){
											pstmt.close();
											pstmt=null;
										}
										//Inserting into WFTypeDefTable
										Iterator<PreparedStatement> typeDefQueryIterator = typeDefQueriesList.iterator();
										while(typeDefQueryIterator.hasNext()){
											PreparedStatement ps = typeDefQueryIterator.next();
											ps.execute();
										}

										//inserting into WFUDTVarMappingTable
										Iterator<PreparedStatement> udtVarMappingQueryiterator = udtVarMappingQueriesList.iterator();
										while(udtVarMappingQueryiterator.hasNext()){
											PreparedStatement ps = udtVarMappingQueryiterator.next();
											ps.execute();
										}
										
										//inserting into WFVariantFieldInfoTable
										Iterator<PreparedStatement> fieldInfoQueryIterator = fieldInfoQueriesList.iterator();
										while(fieldInfoQueryIterator.hasNext()){
											PreparedStatement ps = fieldInfoQueryIterator.next();
											ps.execute();
										}
										if(tempPstmt!=null){
											tempPstmt.close();
											tempPstmt=null;
										}

										statement= "insert into wftypedesctable(processdefid, typeid, typename, extensiontypeid, processvariantid) values(?,?,?,?,?)";
										pstmt= con.prepareStatement(statement);
										pstmt.setInt(1, processDefId);
										pstmt.setInt(2,1);
										WFSUtil.DB_SetString(3,complexName, pstmt, dbType);
										pstmt.setInt(4,-1);
										pstmt.setInt(5,variantId);
										pstmt.execute();
										if(pstmt!=null){
											pstmt.close();
											pstmt=null;
										}

										//ProcessInstanceId and WorkItemId will act as Foreign key in complex table
										for(int i=0;i<2;i++){
											statement= "insert into WFVarRelationTable(ProcessDefId,RelationId,OrderId,ParentObject,Foreignkey,FautoGen,ChildObject,Refkey,RautoGen,ProcessVariantId)" +
											"values(?,?,?,?,?,?,?,?,?,?)";
											pstmt= con.prepareStatement(statement);
											pstmt.setInt(1, processDefId);
											pstmt.setInt(2,1);
											pstmt.setInt(3,1+i);
											WFSUtil.DB_SetString(4,"WFInstrumentTable", pstmt, dbType);
											WFSUtil.DB_SetString(5,i==0?"ProcessInstanceId":"WorkItemId", pstmt, dbType);
											WFSUtil.DB_SetString(6,"N", pstmt, dbType);
											WFSUtil.DB_SetString(7,tableName, pstmt, dbType);
											WFSUtil.DB_SetString(8,i==0?"ProcessInstanceId":"WorkItemId", pstmt, dbType);
											WFSUtil.DB_SetString(9,"N", pstmt, dbType);
											pstmt.setInt(10,variantId);
											pstmt.execute();
											if(pstmt!=null){
												pstmt.close();
												pstmt=null;
											}
										}
									}
									WFSUtil.printOut(engine,"After fieldTYpe");

								//Parsing document types
								String docXML = parser.getValueOf("DocumentTypes","",true);
                                Iterator itr = actMap.keySet().iterator();
                                int actId = 0;
                                String docField = "Y,0,915,7305,7005";
                                while (itr.hasNext()) {
                                    actId = (Integer) itr.next();
                                    actName = actMap.get(actId);
                                    tempPstmt=con.prepareStatement("insert into ActivityAssociationTable (Processdefid,ProcessVariantId,ActivityId, DefinitionId, DefinitionType,AccessFlag,FieldName, Attribute, ExtObjId, VariableId) values(?,?,?,?,?,?,?,?,?,?)");
                                    tempPstmt.setInt(1,processDefId);
                                    tempPstmt.setInt(2,variantId);
                                    tempPstmt.setInt(3,actId);
                                    tempPstmt.setInt(4,docInterfaceId);
                                    WFSUtil.DB_SetString(5, "N", tempPstmt, dbType);
                                    WFSUtil.DB_SetString(6, "", tempPstmt, dbType);
                                    WFSUtil.DB_SetString(7, docField, tempPstmt, dbType);
                                    WFSUtil.DB_SetString(8, "", tempPstmt, dbType);
                                    tempPstmt.setInt(9,0);
                                    tempPstmt.setInt(10,0);
                                    tempPstmt.execute();
                                }
								if((docXML!=null)||(!(docXML.equals("")))){
									WFSUtil.printOut(engine,"Inside DocumentTypes 1");
									docXML ="<DocumentTypes>" +docXML + "</DocumentTypes>";
									Document dTypeDoc = WFXMLUtil.createDocument(docXML);
									Node docNode = dTypeDoc.getFirstChild();
									NodeList documentNodeList = WFXMLUtil.getChildListByName(docNode , "DocumentType");
									HashMap docHashMap = new HashMap();
									for (int temp = 0; temp < documentNodeList.getLength(); temp++) {
										Node nNode = documentNodeList.item(temp);
										String nodeName = nNode.getNodeName();
										NamedNodeMap attrs = nNode.getAttributes();
										for (int j = 0; j < attrs.getLength(); j++) {
											Attr attribute = (Attr) attrs.item(j);
											String attributeName = attribute.getName();
											String attributeVal = attribute.getValue();
											docHashMap.put(attributeName, attributeVal);
										}
										int docId=temp+1;
										String docName=(String)docHashMap.get("name");
										statement="Insert into DocumentTypeDefTable(ProcessDefId,DocId,DocName,ProcessVariantId) values (?,?,?,?)";
										pstmt= con.prepareStatement(statement);
										pstmt.setInt(1,processDefId);
										pstmt.setInt(2,docId);
										WFSUtil.DB_SetString(3,docName,pstmt , dbType);
										//pstmt.setString(3,docName);
										pstmt.setInt(4,variantId);
										pstmt.execute();
										if(pstmt!=null){
											pstmt.close();
											pstmt=null;
										}
										docIdNameMapping.put(docName,docId);
										docHashMap=new HashMap();
									}
								}
								WFSUtil.printOut(engine,"After DocumentType ");
								String assocXML = parser.getValueOf("Association","",true);
                                boolean variantFlag = false;
								if((assocXML!=null)||(!(assocXML.equals("")))){
									WFSUtil.printOut(engine,"Inside Association ");
									assocXML = "<Association>"+assocXML+ "</Association>";
									HashMap fieldAssocMap= new HashMap(); 
									Document assocDoc = WFXMLUtil.createDocument(assocXML);
									//HashMap docAssocMap= new HashMap(); 
									//String authCode = "O";
									NodeList fieldNodeList = assocDoc.getElementsByTagName("FieldAssociation");
									if(fieldNodeList!=null && fieldNodeList.getLength()>0){
										
										statement="insert into ACTIVITYASSOCIATIONTABLE(ProcessDefId,ActivityId,DefinitionType,FieldName,VariableId, ProcessVariantId,"
                                                                        + "DefinitionId,Attribute,ExtObjID)" +								"VALUES(?,?,?,?,?,?,?,?,?)";

										String fieldAssocStatement = "Insert into WFVariantFieldAssociationTable (ProcessDefid, ProcessVariantId, VariableId, VarFieldId, ActivityId, Enable, Editable, Visible, Mandatory) values (?,?,?,?,?,?,?,?,?)";
								
										WFSUtil.printOut(engine,"Inside FieldAssociation ");
										HashMap<String,String> activityAttributesMap= new HashMap<String,String>();
										Node fieldAssoc =(Node) fieldNodeList.item(0);
										NodeList activities= fieldAssoc.getChildNodes();
										String fieldName;
                                        int varId = 0;
                                        int varFieldId = 0;
                                        int prevActId =0;
										for (int k = 0; k< activities.getLength(); k++) {
											Node nNode = activities.item(k);
											if(nNode instanceof Element && nNode.hasAttributes()){
												Element ele = (Element) nNode;
												actId = Integer.parseInt(ele.getAttribute("id"));
												NodeList activityfields = ele.getChildNodes();
												for (int t = 0; t < activityfields.getLength(); t++) {
													Node mNode = activityfields.item(t);
													//fieldName = mNode.getNodeName();
                                                    String tempSt = null;
													int index = 0;                                                 
													Element e = null;
													NamedNodeMap attrs = mNode.getAttributes();
													for(int j = 0; j < attrs.getLength(); j++) {
														if(j == 0){
															Attr attribute = (Attr) attrs.item(j);
															String attributeName = attribute.getName();
															String attributeVal = attribute.getValue();
															fieldName = attributeVal;
															tempSt = fieldIdNameMapping.get(fieldName);
															index =tempSt.indexOf(string21);
															varId = Integer.parseInt(tempSt.substring(0, index));
															varFieldId = Integer.parseInt(tempSt.substring(index+1));
															e = (Element)nNode;
													
														} else {
															Attr attribute = (Attr) attrs.item(j);
															String attributeName = attribute.getName();
															String attributeVal = attribute.getValue();
															activityAttributesMap.put(attributeName, attributeVal); 
														}
													} 
													String enable =(String)activityAttributesMap.get("enable");
													String editable =(String)activityAttributesMap.get("editable");
													String visible =(String)activityAttributesMap.get("visible");
													String mandatory =(String)activityAttributesMap.get("mandatory");
													String varType =(String)activityAttributesMap.get("varType");
													
													PreparedStatement ps=con.prepareStatement(fieldAssocStatement);
													ps.setInt(1,processDefId);
													ps.setInt(2,variantId);
													ps.setInt(3,varId);
                                                    ps.setInt(4, varFieldId);
													ps.setInt(5,actId);
													WFSUtil.DB_SetString(6,enable,ps , dbType);
													WFSUtil.DB_SetString(7,editable,ps , dbType);
													WFSUtil.DB_SetString(8,visible,ps , dbType);
													WFSUtil.DB_SetString(9,mandatory,ps , dbType);
													ps.execute();
                                                    WFSUtil.printOut(engine,"Insert into WFVariantFieldAssociationTable (ProcessDefid, ProcessVariantId, VariableId, VarFieldId, ActivityId, Enable, Editable, Visible, Mandatory) "
                                                            + "values ("+processDefId+","+variantId+","+varId+","+varFieldId+","+actId+","+enable+","+editable+","+visible+","+mandatory+")");
													if(ps!=null){
														ps.close();
														ps=null;
													}
													if("I".equalsIgnoreCase(varType)){
                                                        ps=con.prepareStatement(statement);
                                                        ps.setInt(1,processDefId);
                                                        ps.setInt(2,actId);
                                                        WFSUtil.DB_SetString(3,"I",ps , dbType);
                                                        WFSUtil.DB_SetString(4,complexName,ps, dbType);
                                                        ps.setInt(5,variableId);
                                                        ps.setInt(6,variantId);
                                                        ps.setInt(7,3);
                                                        WFSUtil.DB_SetString(8,"O",ps, dbType);
                                                        ps.setInt(9,1);

                                                        if(!variantFlag || (prevActId !=actId))
                                                            ps.execute();
                                                        if(ps!=null){
                                                            ps.close();
                                                            ps=null;
                                                        }
                                                        variantFlag = true;
                                                        prevActId = actId;
                                                    }
													activityAttributesMap=new HashMap<String,String>();
												}
											}
										}
									}
//									int leng = fieldNodeList.getLength();
//									if(fieldNodeList!=null && fieldNodeList.getLength()>0){
//										WFSUtil.printOut("inside null 1 doubt");
//										Element fieldAssocElement = (Element) fieldNodeList.item(0);
//										NodeList fieldActivities =fieldAssocElement.getElementsByTagName("Activity");
//										//Parsing Field Tags
//										String authCode= "O";
//										for(int k=0;k<fieldActivities.getLength();k++){
//											WFSUtil.printOut("Inside FieldAssociation ");
//											Node nNodefield = fieldActivities.item(k);
//											NamedNodeMap attrs = nNodefield.getAttributes();
//											for (int j = 0; j < attrs.getLength(); j++) {
//												Attr attribute = (Attr) attrs.item(j);
//												String attributeName = attribute.getName();
//												String attributeVal = attribute.getValue();
//												fieldAssocMap.put(attributeName, attributeVal);
//											}
//											//String authCode=(String)fieldAssocMap.get("authorization");
//											int activityId=Integer.parseInt((String)fieldAssocMap.get("id"));
//											PreparedStatement ps=con.prepareStatement(statement);
//											ps.setInt(1,processDefId);
//											ps.setInt(2,activityId);
//											WFSUtil.DB_SetString(3,"I",ps , dbType);
//											//ps.setString(3,"I");
//											ps.setInt(4,3);
//											WFSUtil.DB_SetString(5,complexName,ps, dbType);
//											WFSUtil.DB_SetString(6,authCode,ps, dbType);
//											//ps.setString(5,complexName);
//											//ps.setString(6,authCode);
//											ps.setInt(7,1);
//											//ps.setInt(8,58);
//											ps.setInt(8,variableId);
//											ps.setInt(9,variantId);
//											ps.execute();
//											if(ps!=null){
//												ps.close();
//												ps=null;
//											}
//											fieldAssocMap=new HashMap();
//										}
//										WFSUtil.printOut("After FieldAssociation ");
//																						
//									}
									NodeList docAssocNodeList = (NodeList) assocDoc.getElementsByTagName("DocumentAssociation");
									if(docAssocNodeList!=null && docAssocNodeList.getLength()>0){
										st="insert into ACTIVITYINTERFACEASSOCTABLE(ProcessDefId,ActivityId," +
										"ActivityName,InterfaceElementId,InterfaceType,Attribute,ProcessVariantId) " +
										"values (?,?,?,?,?,?,?)";
										
										WFSUtil.printOut(engine,"Inside DocumentAssociation ");
										HashMap<String,String> activityAttributesMap= new HashMap<String,String>();
										Node docAssoc =(Node) docAssocNodeList.item(0);
										NodeList activities= docAssoc.getChildNodes();
										String docName;
										for (int k = 0; k< activities.getLength(); k++) {
											Node nNode = activities.item(k);
											if(nNode instanceof Element && nNode.hasAttributes()){
												Element ele = (Element) nNode;
												actId = Integer.parseInt(ele.getAttribute("id"));
												//GET USING SELECT 
												PreparedStatement temp= con.prepareStatement("Select ActivityName from ActivityTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessDefId = ? and ActivityId=?");
												temp.setInt(1,processDefId);
												temp.setInt(2,actId);
												temp.execute();
												rs = temp.getResultSet();
												//Condition to check if the process exists
												String activityName=null;
												if(rs.next()){
													activityName=rs.getString(1);
												}
											
												if(temp!=null){
													temp.close();
													temp=null;
												}
												if(rs!=null){
													rs.close();
													rs=null;
												}
												NodeList activityfields = ele.getChildNodes();
												for (int t = 0; t < activityfields.getLength(); t++) {
													Node mNode = activityfields.item(t);
													//docName = mNode.getNodeName();
													int docId = 0;
													Element e = (Element)nNode;
													NamedNodeMap attrs = mNode.getAttributes();
													for(int j = 0; j < attrs.getLength(); j++) {
														Attr attribute = (Attr) attrs.item(j);
														String attributeName = attribute.getName();
														String attributeVal = attribute.getValue();
														if("docName".equalsIgnoreCase(attributeName)){
															docName =  attributeVal ;
															docId = docIdNameMapping.get(docName);	
														} else { 
															activityAttributesMap.put(attributeName, attributeVal);
														}										
														 
													} 
													String authCode =(String)activityAttributesMap.get("authorization");
													PreparedStatement ps=con.prepareStatement(st);
													ps.setInt(1, processDefId);
													ps.setInt(2,actId);
													WFSUtil.DB_SetString(3,activityName,ps , dbType);
													//ps.setString(3,activityName);
													ps.setInt(4,docId);
													WFSUtil.DB_SetString(5,"D",ps , dbType);
													WFSUtil.DB_SetString(6,authCode,ps , dbType);
													//ps.setString(5,"D");
													//ps.setString(6,authCode);
													ps.setInt(7,variantId);
													ps.execute();
													if(ps!=null){
														ps.close();
														ps=null;
													}
													activityAttributesMap=new HashMap<String,String>();
												}
											}
										}
									}
								}	
                            /*		      NodeList docAssocNodeList = assocDoc.getElementsByTagName("DocumentAssociation");
                                                    Element docAssocElement = (Element) docAssocNodeList.item(0);
                                                    NodeList docActivities =docAssocElement.getElementsByTagName("Activity");

                                                 for(int k=0;k<docActivities.getLength();k++){
                                                      Node nNodeDoc = docActivities.item(k);
                                                      NamedNodeMap attrs = nNodeDoc.getAttributes();
                                                      for (int j = 0; j < attrs.getLength(); j++) {
                                                                            Attr attribute = (Attr) attrs.item(j);
                                                                            String attributeName = attribute.getName();
                                                                            String attributeVal = attribute.getValue();
                                                                            System.out.println(attributeName + " -----  "+ attributeVal);
                                                                            docAssocMap.put(attributeName, attributeVal);
                                                                    }
                                                            int activityId=(Integer)docAssocMap.get("id");
                                                            //GET USING SELECT 
                                                            PreparedStatement temp= con.prepareStatement("Select ActivityName from ActivityTable where ProcessDefId = ? and ActivityId=?");
                                                            temp.setInt(1,processDefId);
                                                            temp.setInt(2,activityId);
                                                            temp.execute();
                                                                    rs = pstmt.getResultSet();
                                                                    //Condition to check if the process exists
                                                                    String activityName="";
                                                                    if(rs.next()){
                                                                     activityName=rs.getString(1);
                                                                    }
                                                                    if(temp!=null){
                                                                            temp.close();
                                                                            temp=null;
                                                                    }
                                                                    if(rs!=null){
                                                                            rs.close();
                                                                            rs=null;
                                                                    }

                                                            int docId=docIdNameMapping.get(docName);
                                                            String authCode =(String)docAssocMap.get("authorization");
                                                                    PreparedStatement ps=con.prepareStatement(st);
                                                                    ps.setInt(1, processDefId);
                                                                    ps.setInt(2,activityId);
                                                                    WFSUtil.DB_SetString(3,activityName,ps , dbType);
                                                                    //ps.setString(3,activityName);
                                                                    ps.setInt(4,docId);
                                                                    WFSUtil.DB_SetString(5,"D",ps , dbType);
                                                                    WFSUtil.DB_SetString(6,authCode,ps , dbType);
                                                                    //ps.setString(5,"D");
                                                                    //ps.setString(6,authCode);
                                                                    ps.setInt(7,variantId);
                                                                    ps.execute();
                                                                    if(ps!=null){
                                                                            ps.close();
                                                                            ps=null;
                                                                    }

                                                                    docAssocMap=new HashMap();

                                    }
                                                     */

                                            String userAssocXML = parser.getValueOf("UserAssociation","",true);
											userAssocXML = "<UserAssociation>"+userAssocXML+"</UserAssociation>";
                                            if(!(userAssocXML.equals("")) ||(userAssocXML!=null)){
                                                Document userDoc = WFXMLUtil.createDocument(userAssocXML);
                                                NodeList nList = userDoc.getElementsByTagName("Queue");
                                                int queueId = 0;
                                                HashMap<String,String> queueUserAssocMap= new HashMap<String,String>();
                                                for (int k = 0; k< nList.getLength(); k++) {
                                                    Node nNode = nList.item(k);
                                                    if(nNode instanceof Element && nNode.hasAttributes()){
                                                        Element ele = (Element) nNode;
                                                        queueId = Integer.parseInt(ele.getAttribute("id"));
                                                        NodeList field = ele.getChildNodes();
                                                        for (int t = 0; t < field.getLength(); t++) {
                                                            Node mNode = field.item(t);
                                                            //System.out.println("node name>>"+ mNode.getNodeName());
                                                            Element e = (Element)nNode;
                                                            NamedNodeMap attrs = mNode.getAttributes();
                                                            for (int j = 0; j < attrs.getLength(); j++) {
                                                                Attr attribute = (Attr) attrs.item(j);
                                                                String attributeName = attribute.getName();
                                                                String attributeVal = attribute.getValue();
                                                                queueUserAssocMap.put(attributeName,attributeVal);
                                                            }
                                                            stmt= con.createStatement();
                                                            String queryFilterResult="";
                                                            int userId=Integer.parseInt(queueUserAssocMap.get("id"));
                                                            int associationType=Integer.parseInt(queueUserAssocMap.get("associationType"));
                                                            String queryFilter =(String) queueUserAssocMap.get("queueFilter");
                                                            boolean updateFlag=false;
                                                            boolean appendFlag=false;
                                                            PreparedStatement temp= con.prepareStatement("Select QueryFilter from QueueUserTable " + WFSUtil.getTableLockHintStr(dbType) + " where QueueId = ? and UserId=? and AssociationType = ? ");
                                                            temp.setInt(1,queueId);
                                                            temp.setInt(2,userId);
                                                            temp.setInt(3,associationType);
                                                            rs = temp.executeQuery();
                                                            //rs = temp.getResultSet();
                                                            if(rs.next()){
                                                                updateFlag=true;		
                                                                queryFilterResult=rs.getString("QueryFilter");
                                                                if((queryFilterResult!=null)){
                                                                        if(!queryFilterResult.equals("")){
                                                                    appendFlag=true;
                                                                }
                                                            }}
                                                            if(temp!=null){
                                                                temp.close();
                                                                temp=null;
                                                            }
                                                            if(rs!=null){
                                                                rs.close();
                                                                rs=null;
                                                            }

                                                            if(!updateFlag){
                                                                temp =con.prepareStatement("insert into QueueUserTable(QueueId,UserId,AssociationType,QueryFilter,QueryPreview,RevisionNo)values(?,?,?,?,?,?)");													//insert into QueueUserTable;
                                                                temp.setInt(1,queueId);
                                                                temp.setInt(2,userId );
                                                                temp.setInt(3,associationType );
                                                                WFSUtil.DB_SetString(4,queryFilter,temp, dbType);
                                                                //temp.setString(4,queryFilter);
                                                                WFSUtil.DB_SetString(5,"N",temp, dbType);
                                                                //temp.setString(5,"N" );
                                                                int revisionNumber= WFSUtil.getRevisionNumber(con, stmt, dbType);
                                                                temp.setInt(6, revisionNumber);
                                                                temp.execute();													
                                                            }
                                                            else if((updateFlag)&&(appendFlag)){
                                                                //update QueueUserTable and append queryFilter to current QueryFilter
                                                                queryFilterResult=queryFilterResult+" and "+queryFilter;
                                                                temp =con.prepareStatement("update QueueUserTable set QueryFilter=? where QueueId=? and UserId =? and AssociationType=?");//insert into QueueUserTable;
                                                                WFSUtil.DB_SetString(1,queryFilterResult,temp, dbType);
                                                                //temp.setString(1,queryFilterResult);
                                                                temp.setInt(2,queueId );
                                                                temp.setInt(3,userId );
                                                                temp.setInt(4,associationType);
                                                                temp.executeUpdate();
                                                                if(temp!=null){
                                                                    temp.close();
                                                                    temp=null;
                                                                }
                                                            }else if((updateFlag)&&(!appendFlag)){
                                                                queryFilterResult=queryFilter;
                                                                temp =con.prepareStatement("update QueueUserTable set QueryFilter=? where QueueId=? and UserId =? and AssociationType=?");													//insert into QueueUserTable;
                                                                WFSUtil.DB_SetString(1,queryFilterResult,temp, dbType);
                                                                //temp.setString(1,queryFilterResult);
                                                                temp.setInt(2,queueId );
                                                                temp.setInt(3,userId );
                                                                temp.setInt(4,associationType);
                                                                temp.executeUpdate();
                                                                if(temp!=null){
                                                                    temp.close();
                                                                    temp=null;
                                                                }
                                                            }
                                                            queueUserAssocMap=new HashMap<String,String>();
                                                        }
                                                    }
                                                }
                                            }
											
                                            int index =0;
                                            int varId = 0;
                                            int varFieldId = 0;
                                            String listenerXML = parser.getValueOf("Listener","",true);
											if((listenerXML!=null)||(!(listenerXML.equals("")))){
												WFSUtil.printOut(engine,"Inside listener");
												// To convert fieldXML into well formed XML required for DOM parsing
												listenerXML = "<Listener>"+listenerXML+"</Listener>";
												HashMap<String,String> listenerMap= new HashMap<String,String>(); 
												Document listenerDoc = WFXMLUtil.createDocument(listenerXML);
												Node node = listenerDoc.getFirstChild();
												NodeList listenerNodeList = WFXMLUtil.getChildListByName(node, "Activity");
												for (int temp = 0; temp < listenerNodeList.getLength(); temp++){
													Node nNode = listenerNodeList.item(temp);
													String nodeName = nNode.getNodeName();
													NamedNodeMap attrs = nNode.getAttributes();
													for (int j = 0; j < attrs.getLength(); j++) {
														Attr attribute = (Attr) attrs.item(j);
														String attributeName = attribute.getName();
														String attributeVal = attribute.getValue();
														listenerMap.put(attributeName, attributeVal);
													}
													actId =Integer.parseInt(listenerMap.get("id"));
													String language= listenerMap.get("language");
													String codeSnippet= listenerMap.get("codeSnippet");
                                                    int fieldlistener =Integer.parseInt(listenerMap.get("fieldlistener"));
                                                    String object= listenerMap.get("object");
                                                    String function = listenerMap.get("functionName");
                                                    String name = null;
                                                    PreparedStatement pstemp= con.prepareStatement("Insert into WFVariantFormListenerTable (ProcessDefId, ProcessVariantId, VariableId, VarFieldId, FormExtId, "
                                                            + "ActivityId, CodeSnippet, LanguageType, FieldListener, ObjectForListener, FunctionName) "
                                                            + "values (?,?,?,?,?,?,?,?,?,?,?)");
                                                    pstemp.setInt(1,processDefId);
                                                    pstemp.setInt(2,variantId);
                                                    if("F".equalsIgnoreCase(object)){
                                                        pstemp.setInt(3,0);
                                                        pstemp.setInt(4,0);
                                                    }else{
                                                        name= listenerMap.get("name");
                                                        String tempSt = fieldIdNameMapping.get(name);
                                                        index =tempSt.indexOf(string21);
                                                        varId = Integer.parseInt(tempSt.substring(0, index));
                                                        varFieldId = Integer.parseInt(tempSt.substring(index+1));
                                                        pstemp.setInt(3,varId);
                                                        pstemp.setInt(4,varFieldId);
                                                    }
                                                    
                                                   pstemp.setInt(5, formExtid);
                                                   pstemp.setInt(6,actId);
                                                   WFSUtil.DB_SetString(7, codeSnippet,pstemp, dbType);
                                                   WFSUtil.DB_SetString(8, language,pstemp, dbType);
                                                   pstemp.setInt(9,fieldlistener);
                                                   WFSUtil.DB_SetString(10, object,pstemp, dbType);
                                                   WFSUtil.DB_SetString(11, function,pstemp, dbType);
                                                   pstemp.execute();
												}	
											}                                                                                                                                 
											
                                            pstmt = con.prepareStatement("Update ProcessDefTable Set lastModifiedOn = " + WFSUtil.getDate(dbType) + " Where processDefId = ?");
                                            pstmt.setInt(1, processDefId);
                                            pstmt.execute();
                                            pstmt.close();
                                            
											if (!con.getAutoCommit()) {
												con.commit();
												con.setAutoCommit(true);
											}
											/*DDL statements will be at the end of the code block*/											
											createQueryString.append(")");
											//create table for fields
											String createStatement="Create table "+ tableName +" " +createQueryString;

											pstmt= con.prepareStatement(createStatement);
											pstmt.execute();
											WFSUtil.printOut(engine,"After Creating Complex table ");
											if(pstmt!=null){
												pstmt.close();
												pstmt=null;
											}
                                        }else{
                                            mainCode = WFSError.WF_OPERATION_FAILED;
                                            subCode = WFSError.WF_INVALID_VARNAME;
                                            subject = WFSErrorMsg.getMessage(mainCode);
                                            errType = WFSError.WF_TMP;
                                            descr = WFSErrorMsg.getMessage(subCode);
                                        }
                                    }else{
                                        mainCode = WFSError.WF_OPERATION_FAILED;
                                        subCode = WFSError.WF_INVALID_VARNAME;
                                        subject = WFSErrorMsg.getMessage(mainCode);
                                        errType = WFSError.WF_TMP;
                                        descr = WFSErrorMsg.getMessage(subCode);
                                    }
                                }else {
                                    mainCode = WFSError.WF_PROCESS_TYPE_GENERIC;
                                    subCode = 0;
                                    subject = WFSErrorMsg.getMessage(mainCode);
                                    descr =   WFSErrorMsg.getMessage(subCode);
                                    errType = WFSError.WF_TMP;

                                }
                            }else {
                                mainCode = WFSError.WF_INVALID_PROCESS_DEFINITION;
                                subCode = 0;
                                subject = WFSErrorMsg.getMessage(mainCode);
                                descr =   WFSErrorMsg.getMessage(subCode);
                                errType = WFSError.WF_TMP;
                            }
                            arrAuditList.add(new WFAdminLogValue(variantId, label, 0, null, null, null, null, null, null, null, WFSConstant.WFL_AddVariant, processDefId, 0, null, userID, userName, 0, null, null));
                        }
                    }else{
                        mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                        subCode = 0;
                        subject = WFSErrorMsg.getMessage(mainCode);
                        descr = WFSErrorMsg.getMessage(subCode);
                        errType = WFSError.WF_TMP;
                    }		
                    if(mainCode == 0){
                        WFSUtil.genAdminLogExt(con, engine, arrAuditList);
                        outputXML = new StringBuffer(500);
                        outputXML.append(gen.createOutputFile("WFCreateProcessVariant"));
                        outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                        outputXML.append("<VariantId>");            
                        outputXML.append(variantId);
                        outputXML.append("</VariantId>");
                        outputXML.append(gen.closeOutputFile("WFCreateProcessVariant"));	
                    }
		}
                
		catch (SQLException e) { 
                    WFSUtil.printErr(engine,"", e);
                    mainCode = WFSError.WM_INVALID_FILTER;
                    subCode = WFSError.WFS_SQL;
                    subject = WFSErrorMsg.getMessage(mainCode);
                    errType = WFSError.WF_FAT;
                    if (e.getErrorCode() == 0) {
                            if (e.getSQLState().equalsIgnoreCase("08S01")) {
                                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
                                    + ")";
                            }
                    } else {
                            descr = e.getMessage();
                    }
		} 
		catch (NullPointerException e) {
                    WFSUtil.printErr(engine,"", e);
                    mainCode = WFSError.WF_OPERATION_FAILED;
                    subCode = WFSError.WFS_SYS;
                    subject = WFSErrorMsg.getMessage(mainCode);
                    errType = WFSError.WF_TMP;
                    descr = e.toString();
		} 
		catch (JTSException e) {
                    WFSUtil.printErr(engine,"", e);
                    mainCode = WFSError.WF_OPERATION_FAILED;
                    subCode = e.getErrorCode();
                    subject = WFSErrorMsg.getMessage(mainCode);
                    errType = WFSError.WF_TMP;
                    descr = e.getMessage();
		} 
                catch (Exception e) {
                    WFSUtil.printErr(engine,"", e);
                    mainCode = WFSError.WF_OPERATION_FAILED;
                    subCode = WFSError.WFS_EXP;
                    subject = WFSErrorMsg.getMessage(mainCode);
                    errType = WFSError.WF_TMP;
                    descr = e.toString();
		} finally {
                    try{
                        if(!con.getAutoCommit()){
                            con.rollback();
                            con.setAutoCommit(true);
                        }
                    } catch(Exception ignored){
                        WFSUtil.printErr(engine,"", ignored);
                    }
                    try {
                        if (pstmt != null) {
                            pstmt.close();
                            pstmt = null;
                        }
                    } catch (Exception e) {
                        WFSUtil.printErr(engine,"", e);
                    }
                    try {
                        if (stmt != null) {
                            stmt.close();
                            stmt = null;
                        }
                    } catch (Exception e) {
                        WFSUtil.printErr(engine,"", e);
                    }
                    try{
                        if (rs != null) {
                            rs.close();
                            rs = null;
                        }
                    }
                    catch (Exception e) {
                        WFSUtil.printErr(engine,"", e);
                    }
                   
		}
		 if (mainCode != 0){
				String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
				return errorString;
			}
            return outputXML.toString();
	}
	
	/*----------------------------------------------------------------------------------------------------
	//	Function Name 					: WMChangeProcessVariantState
	//	Date Written (DD/MM/YYYY)		: 24/04/2013
	//	Author							: Shweta Singhal
	//	Input Parameters				: Connection , XMLParser , XMLGenerator
	//	Output Parameters				: none
	//	Return Values					: String
	//	Description						: Change Process Variant State for the given variant of a process
	//----------------------------------------------------------------------------------------------------*/

    public String WFChangeProcessVariantState(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
    	StringBuffer outputXML = new StringBuffer("");
        PreparedStatement pstmt = null;
        PreparedStatement pstmt2 = null;
        PreparedStatement pstmt3 = null;
        Statement actionStmt = null;
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        ResultSet rs = null;
        ResultSet rs1 = null;
        int authID = 0;
        XMLParser inputXML = new XMLParser();
        inputXML.setInputXML(parser.toString());
        StringBuffer tempXml = new StringBuffer(100);
        String engine = parser.getValueOf("EngineName");
        String option = parser.getValueOf("Option", "", false);
        try {
            int sessionID = parser.getIntOf("SessionId", 0, false);
            int procVarID = parser.getIntOf("VariantId", 0, false);
            String procVarState = parser.getValueOf("VariantState", "", false);
            String label=null;
            int dbType = ServerProperty.getReference().getDBType(engine);
            boolean pendingActionsFlag = parser.getValueOf("PendingActionsFlag").startsWith("Y");
            WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
            ArrayList arrAuditList = new ArrayList();
            if (participant != null) {
                int userID = participant.getid();
                String userName = participant.getname().trim(); 
                if (con.getAutoCommit())
                    con.setAutoCommit(false);
                Statement stmt = con.createStatement();
                String procVarName = null;
                int procId = 0;
                rs = stmt.executeQuery(" Select ProcessVariantName, ProcessdefId,Label from WFProcessVariantDefTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessVariantId = " + procVarID + WFSUtil.getQueryLockHintStr(dbType));
                if (rs.next()) {
                    procVarName = rs.getString(1).trim();
                    procId = rs.getInt("ProcessdefId");
					label=rs.getString("Label");
                    rs.close();
                } else{
                    mainCode = WFSError.WF_OPERATION_FAILED;
                    subCode = WFSError.WM_INVALID_PROC_VARIANT_DEFINITION;
                    subject = WFSError.WF_TMP;
                    descr = WFSErrorMsg.getMessage(subCode);
                    errType = WFSErrorMsg.getMessage(mainCode);
                }
                if (stmt != null) {
                    stmt.close();
                    stmt = null;
                }

                //boolean rightsFlag = WFSUtil.checkRights(con, dbType, WFSConstant.CONST_OBJTYPE_PROCESS, procDefID, sessionID, WFSConstant.CONST_PROCESS_CHNGSTATE);
                /*if (!rightsFlag) {
                    mainCode = WFSError.WFS_NORIGHTS;
                    subCode = WFSError.WM_SUCCESS;
                    subject = WFSErrorMsg.getMessage(mainCode);
                    errType = WFSError.WF_TMP;
                }*/

                if (mainCode == 0) {
                    if(con.getAutoCommit())
                        con.setAutoCommit(false);
                    if (procVarState.equalsIgnoreCase("Disabled") || procVarState.equalsIgnoreCase("Enabled")) {
                        char AuthorizationFlag = parser.getCharOf("AuthorizationFlag", 'N', true);
                        if(AuthorizationFlag == 'Y') {/* //Currently Maker-Checker is not supported in Process Variant 
                            authID = WFSUtil.generateAuthorizationID('V', procVarID, procVarName, userName, con, dbType, engine);
                            pstmt = con.prepareStatement("Insert into WFAuthorizeProcVarDefTable(AuthorizationID, ActionID, ProcessVariantState)values(" + authID + ", " + WFSConstant.WFL_ProcVariantStateChanged + ", ?)");
                            WFSUtil.DB_SetString(1, procVarState, pstmt, dbType);*/
                        } else {
                            pstmt = con.prepareStatement("Update WFProcessVariantDefTable Set PROCESSVARIANTSTATE = ? where ProcessVariantID = ?");
                            WFSUtil.DB_SetString(1, procVarState,pstmt,dbType);
                            pstmt.setInt(2, procVarID);
                           
                            if (procVarState.equalsIgnoreCase("Enabled")){
                                pstmt3 = con.prepareStatement(" Select 1 from ProcessDefTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessDefID = ? and ProcessState = ?  ");
                                pstmt3.setInt(1, procId);
                                WFSUtil.DB_SetString(2,"Disabled",pstmt3,dbType);
                                rs1  = pstmt3.executeQuery();
                                if(rs1.next()){
                                	mainCode = WFSError.WF_BASEPRO_DISABLED;
                                    subCode = WFSError.WF_BASEPRO_DISABLED;
                                    subject = WFSErrorMsg.getMessage(mainCode);
                                    errType = WFSError.WF_TMP;
                                }
//                                pstmt2 = con.prepareStatement(" Update ProcessDefTable Set ProcessState = ? where ProcessDefID = ?	");
//                                WFSUtil.DB_SetString(1, procVarState,pstmt2,dbType);
//                                pstmt2.setInt(2, procId);
//                                pstmt2.executeUpdate();
//                                pstmt2.close();
                            }

                            }
                            int res = 0;
                            if(pstmt!=null){
                            res=pstmt.executeUpdate();
                            pstmt.close();
                            }else{
                            	WFSUtil.printOut(engine,"WFChangeProcessVariantState: prepared statement is null");
                            }

                            if(res == 0) {
                            mainCode = WFSError.WM_INVALID_PROC_VARIANT_DEFINITION;
                            subCode = 0;
                            subject = WFSErrorMsg.getMessage(mainCode);
                            descr = WFSErrorMsg.getMessage(subCode);
                            errType = WFSError.WF_TMP;
                        } 
                    } else {
                        mainCode = WFSError.WM_INVALID_STATE;
                        subCode = 0;
                        subject = WFSErrorMsg.getMessage(mainCode);
                        descr = WFSErrorMsg.getMessage(subCode);
                        errType = WFSError.WF_TMP;
                        return null;
                    }
                    if(pendingActionsFlag) {
                        pstmt = con.prepareStatement("select authorizationid from WFAuthorizationTable " + WFSUtil.getTableLockHintStr(dbType) + " where EntityId = ? and EntityType = ?");
                        pstmt.setInt(1, procVarID);
                        WFSUtil.DB_SetString(2, "V",pstmt,dbType);
                        pstmt.execute();
                        ResultSet actionRs = pstmt.getResultSet();
                        if(actionRs != null && actionRs.next()) {
                            String authIdList = actionRs.getString("authorizationid");
                            while(actionRs.next())
                                    authIdList += ", " + actionRs.getString("authorizationid");

                            actionStmt = con.createStatement();
                            actionRs = actionStmt.executeQuery("select actionid from WFAuthorizeProcVarDefTable " + WFSUtil.getTableLockHintStr(dbType) + " where authorizationid in ( " + WFSUtil.TO_SANITIZE_STRING(authIdList, true) + " ) ");
                            if(actionRs != null && actionRs.next()) {
                                tempXml.append("<PendingActions>");
                                tempXml.append(actionRs.getString("actionid"));
                                while(actionRs.next())
                                    tempXml.append(",").append(actionRs.getString(1));
                                tempXml.append("</PendingActions>");
                            }
                            actionStmt.close();
                        }
                    }
                    String oldState = null;
                    if("Enabled".equalsIgnoreCase(procVarState))
                        oldState = "Disabled";
                    else
                        oldState = "Enabled";
                    arrAuditList.add(new WFAdminLogValue(procVarID, label, 0, null, null, oldState, procVarState, null, null, null, WFSConstant.WFL_Change_VariantState, procId, 0, null, userID, userName, 0, null, null));
                    
                    pstmt = con.prepareStatement("Update ProcessDefTable Set lastModifiedOn = " + WFSUtil.getDate(dbType) + " Where processDefId = ?");
                    pstmt.setInt(1, procId);
                    pstmt.execute();
                    pstmt.close();
                  if(mainCode == 0 || mainCode == 18){
                    if (!con.getAutoCommit()) {
                        con.commit();
                        con.setAutoCommit(true);
                    }
                  }
                }
            } else {
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            if (mainCode == 0) {
                WFSUtil.genAdminLogExt(con, engine, arrAuditList);
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFChangeProcessVariantState"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append(tempXml);
                outputXML.append(gen.closeOutputFile("WFChangeProcessVariantState"));
            }
        } catch (SQLException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WM_INVALID_STATE;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
                        + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (JTSException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
        } catch (Exception e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
            try {
                if (!con.getAutoCommit()) {
                    con.rollback();
                    con.setAutoCommit(true);
                }
                if (rs != null)
                    rs.close();
                if (pstmt != null) {
                    pstmt.close();
                    pstmt = null;
                }
            } catch (Exception e) {}
            
        }
        if (mainCode != 0) {
			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			return errorString;
        }
        return outputXML.toString();
    }
    
    /*----------------------------------------------------------------------------------------------------
//	Function Name 				: WFModifyProcessVariant
//	Date Written (DD/MM/YYYY)	: 26/04/2013
//	Author						: Shweta Singhal
//	Input Parameters			: Connection , XMLParser , XMLGenerator
//	Output Parameters			: none
//	Return Values				: String
//	Description					: Modify the properties of a given varinat of a process
//----------------------------------------------------------------------------------------------------*/

    public String WFModifyProcessVariant(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
    	StringBuffer outputXML = new StringBuffer("");
        PreparedStatement pstmt = null;
        PreparedStatement pstmtForcDel = null;
        PreparedStatement pstmtgetConstraint = null;
        Statement actionStmt = null;
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        ResultSet rs = null;
        ResultSet rsForcDel = null;
        ResultSet rsgetConstraint = null;
        int authID = 0;
        XMLParser inputXML = new XMLParser();
        inputXML.setInputXML(parser.toString());
        StringBuffer alterAddBuff = null;
        StringBuffer alterDelBuff = null;
        HashMap<String, String> hMap = null;
        String engine = parser.getValueOf("EngineName");
    	String option = parser.getValueOf("Option", "", false);

        try {
            int sessionID = parser.getIntOf("SessionId", 0, false);
            int procVarID = parser.getIntOf("VariantId", 0, false);
            String forceDelFlag = parser.getValueOf("ForceDeleteVariable","N",true);
            int dbType = ServerProperty.getReference().getDBType(engine);
            boolean authorizationFlag = parser.getValueOf("AuthorizationFlag", "N", true).startsWith("Y");
            WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
            ArrayList arrAuditList = new ArrayList();
            if (participant != null) {
                int userID = participant.getid();
                String userName = participant.getname().trim(); 
                Statement stmt = con.createStatement();
                int procDefId = 0;
                String procVarName = null;
                rs = stmt.executeQuery("Select ProcessDefId, ProcessVariantName from WFProcessVariantDefTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessVariantId = " + procVarID );
                if (!rs.next()) {
                    rs.close();
                    mainCode = WFSError.WF_OPERATION_FAILED;
                    subCode = WFSError.WM_INVALID_PROC_VARIANT_DEFINITION;
                    subject = WFSError.WF_TMP;
                    descr = WFSErrorMsg.getMessage(mainCode);
                    errType = WFSErrorMsg.getMessage(subCode);
                } else{
                    procDefId = rs.getInt("ProcessDefId");
                    procVarName = rs.getString("ProcessVariantName");
                    if(rs != null){
                        rs.close();
                        rs = null;
                    }
                    String usrDefName = "data_"+procVarName;
                    String label = parser.getValueOf("VariantName", "", true);
                    String desc = parser.getValueOf("Description", "", true);
                    if (con.getAutoCommit())
                        con.setAutoCommit(false);
                    if(!authorizationFlag){
                        
                        StringBuffer sBuff = new StringBuffer(200);
                        boolean labelFlag = false;
                        boolean descFlag = false;
                        sBuff.append("update WFProcessVariantDefTable set LastModifiedOn = ").append(WFSUtil.getDate(dbType)).append("");
                        if(!label.trim().equals(""))
                            labelFlag = true;
                        if(!desc.trim().equals(""))
                            descFlag = true;
                        if(descFlag || labelFlag)
                            sBuff.append(", ");
                        if(labelFlag)
                            sBuff.append("label = ").append(WFSUtil.TO_STRING(label, true, dbType));
                        if(descFlag && labelFlag)
                            sBuff.append(", ");
                        if(descFlag)
                            sBuff.append("description = ").append(WFSUtil.TO_STRING(desc, true, dbType));
                        sBuff.append(" where ProcessVariantId = ?");
                        if(!sBuff.toString().equals("")){
                            pstmt = con.prepareStatement(sBuff.toString());
                            pstmt.setInt(1, procVarID);
                            pstmt.execute();
                            if(pstmt!=null){
                                pstmt.close();
                                pstmt = null;
                            }
                        }
                        
                        stmt = con.createStatement();
                        String tableName = "";
                        String fieldName = null;
                        String fieldType = null;
                        String fieldLength = null;
                        String defaultVal = null;
                        int precision =0;
                        String method = null;
                        String pickListInfo = null;
                        String control = null;
                        int type = 0;
                        int length = 0;
                        rs = stmt.executeQuery("Select tableName from ExtDBConfTable " + WFSUtil.getTableLockHintStr(dbType) + " where processVariantid = "+procVarID+" ");
                        if(!rs.next()){
                            mainCode = WFSError.WF_OPERATION_FAILED;
                            subCode = WFSError.WM_INVALID_PROC_VARIANT_DEFINITION;
                            subject = WFSError.WF_TMP;
                            descr = WFSErrorMsg.getMessage(mainCode);
                            errType = WFSErrorMsg.getMessage(subCode);
                        }else{
                            tableName = rs.getString("tableName");
                            if(rs != null){
                                rs.close();
                                rs = null;
                            }
                            stmt.close();
                            String st = null;
                            HashMap<Integer, String> actMap = new HashMap();
                            pstmt = con.prepareStatement("SELECT ActivityId, ActivityName FROM ActivityTable " + WFSUtil.getTableLockHintStr(dbType) + " where processdefid = ? ");
                            pstmt.setInt(1,procDefId);
                            pstmt.execute();
                            rs=pstmt.getResultSet();
                            if(rs.next()){
                                actMap.put(rs.getInt("ActivityId"), rs.getString("ActivityName"));
                            }
                            if (rs != null) {
                                rs.close();
                                rs = null;
                            }
                            
                            pstmt = con.prepareStatement("SELECT InterfaceId, InterfaceName FROM PROCESS_INTERFACETABLE " + WFSUtil.getTableLockHintStr(dbType) + " where processdefid = ? and InterfaceName in (?,?)");
                            pstmt.setInt(1,procDefId);
                            WFSUtil.DB_SetString(2, WFSConstant.EXT_INT_FORMEXT_NAME, pstmt, dbType);
                            WFSUtil.DB_SetString(3, WFSConstant.EXT_INT_DOCUMENT_NAME, pstmt, dbType);
                            pstmt.execute();
                            rs=pstmt.getResultSet();
                            int formInterfaceId = 0;
                            int docInterfaceId = 0;
                            String interfaceName = "";
                            while(rs.next()){
                                interfaceName = rs.getString("InterfaceName");
                                if("FormExtView".equalsIgnoreCase(interfaceName))
                                    formInterfaceId=rs.getInt("InterfaceId");
                                else
                                    docInterfaceId = rs.getInt("InterfaceId");
                            }
                            if (rs != null) {
                                rs.close();
                                rs = null;
                            }
                            String layoutXML = parser.getValueOf("Layout","",true);
                            int formExtid = 0;
                            String formField = "Y,0,930,10275,15360";
                            StringBuffer updFormLayoutBuf = null;
                            String actName = null;
                            if((layoutXML!=null)||(!(layoutXML.equals("")))){
                                WFSUtil.printOut(engine,"Inside fieldTYpe");
                                layoutXML= "<Layout>" + layoutXML +"</Layout>";
                                HashMap<String,Integer> layoutMap= new HashMap<String,Integer>(); 
                                Document layoutDoc = WFXMLUtil.createDocument(layoutXML);
                                NodeList nList = layoutDoc.getElementsByTagName("FormLayout");
                                char operation = '\0';
                                int actId = 0;
                                int columns = 0;
                                int width1 = 0;
                                int width2 = 0;
                                int width3 = 0;
                                for (int temp = 0; temp < nList.getLength(); temp++) {
                                    Node nNode = nList.item(temp);
                                    String nodeName = nNode.getNodeName();
                                    Element e = (Element)nNode;
                                    operation = e.getAttribute("operation").charAt(0); 
                                    NamedNodeMap attrs = nNode.getAttributes();
                                    for (int j = 0; j < attrs.getLength(); j++) {
                                        Attr attribute = (Attr) attrs.item(j);
                                        String attributeName = attribute.getName();
                                        String attributeVal = attribute.getValue();
                                        if(!"operation".equalsIgnoreCase(attributeName))
                                            layoutMap.put(attributeName, Integer.parseInt(attributeVal));
                                    }
                                    actId = layoutMap.get("activityId");
                                    if(layoutMap.containsKey("columns"))
                                        columns = layoutMap.get("columns");
                                    if(layoutMap.containsKey("width1"))
                                        width1 = layoutMap.get("width1");
                                    if(layoutMap.containsKey("width2"))
                                        width2 = layoutMap.get("width2");
                                    if(layoutMap.containsKey("width3"))
                                        width3 = layoutMap.get("width3");
                                    switch(operation){
                                        case 'I':{
                                            
                                            if (dbType != JTSConstant.JTS_MSSQL) {
                                                formExtid =Integer.parseInt(WFSUtil.nextVal(con, "FormExtId", dbType));
                                            }
                                            if (dbType == JTSConstant.JTS_MSSQL) {
                                                //pstmt=con.prepareStatement("insert into WFVariantFormTable (processdefid,ProcessVariantId,Columns,Width1,Width2,Width3) values(?,?,?,?,?,?)");
                                                st = "insert into WFVariantFormTable (processdefid,ProcessVariantId,Columns,Width1,Width2,Width3) values ("+procDefId+","+procVarID+","+columns+","+width1+","+width2+","+width3+")";
                                            }else if (dbType == JTSConstant.JTS_ORACLE || dbType == JTSConstant.JTS_POSTGRES) {
                                                //pstmt=con.prepareStatement("insert into WFVariantFormTable (processdefid,ProcessVariantId,Columns,Width1,Width2,Width3,FormExtId) values(?,?,?,?,?,?,?)");
                                                st = "insert into WFVariantFormTable (processdefid,ProcessVariantId,Columns,Width1,Width2,Width3,FormExtId) values("+procDefId+","+procVarID+","+columns+","+width1+","+width2+","+width3+", "+formExtid+")";
                                            }
//                                            pstmt.setInt(1,procDefId);
//                                            pstmt.setInt(2,procVarID);
//                                            pstmt.setInt(3,columns);
//                                            pstmt.setInt(4,width1);
//                                            pstmt.setInt(5,width2);
//                                            pstmt.setInt(6,width3);
//                                            if(dbType == JTSConstant.JTS_ORACLE)
//                                                pstmt.setInt(7,formExtid);
                                            
                                            stmt.execute(st);
                                            
                                            if(dbType == JTSConstant.JTS_MSSQL){
                                                stmt.execute("Select @@IDENTITY");
                                                rs = stmt.getResultSet();
                                                if(rs != null && rs.next()) {
                                                    formExtid = rs.getInt(1);
                                                    rs.close();
                                                }
                                            }
                                            if(rs!=null){
                                                rs.close();
                                                rs = null;
                                            }
                                            
                                            pstmt=con.prepareStatement("insert into ActivityAssociationTable (Processdefid,ProcessVariantId,ActivityId, DefinitionId, DefinitionType,AccessFlag,FieldName, Attribute, ExtObjId, VariableId) values(?,?,?,?,?,?,?,?,?,?)");
                                            pstmt.setInt(1,procDefId);
                                            pstmt.setInt(2,procVarID);
                                            pstmt.setInt(3,actId);
                                            pstmt.setInt(4,formInterfaceId);
                                            WFSUtil.DB_SetString(5, "N", pstmt, dbType);
                                            WFSUtil.DB_SetString(6, "", pstmt, dbType);
                                            WFSUtil.DB_SetString(7, formField, pstmt, dbType);
                                            WFSUtil.DB_SetString(8, "", pstmt, dbType);
                                            pstmt.setInt(9,0);
                                            pstmt.setInt(10,0);
                                            pstmt.execute();

                                            pstmt=con.prepareStatement("insert into ActivityInterfaceAssocTable (Processdefid,ProcessVariantId,ActivityId, ActivityName, InterfaceElementId,"
                                                    + "InterfaceType,Attribute, TriggerName) values(?,?,?,?,?,?,?,?)");
                                            pstmt.setInt(1,procDefId);
                                            pstmt.setInt(2,procVarID);
                                            pstmt.setInt(3,actId);
                                            actName = actMap.get(actId);
                                            WFSUtil.DB_SetString(4, actName, pstmt, dbType);
                                            pstmt.setInt(5,formExtid);
                                            WFSUtil.DB_SetString(6, "F", pstmt, dbType);
                                            WFSUtil.DB_SetString(7, "", pstmt, dbType);
                                            WFSUtil.DB_SetString(8, "", pstmt, dbType);
                                            pstmt.execute();
                                            
                                            break;
                                        }
                                        case 'D':{
                                            pstmt = con.prepareStatement("Select FormExtId from WFVariantFormTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessVariantId = ? ");
                                            pstmt.setInt(1, procVarID);
                                            rs = pstmt.executeQuery();
                                            if(rs.next())
                                                formExtid = rs.getInt("FormExtId");
                                            if(rs!=null){
                                                rs.close();
                                                rs = null;
                                            }
                                            
                                            pstmt = con.prepareStatement("Delete from WFVariantFormTable where ProcessVariantId = ? ");
                                            pstmt.setInt(1, procVarID);
                                            pstmt.execute();
                                            if(pstmt!=null){
                                                pstmt.close();
                                                pstmt = null;
                                            }
                                            
                                            pstmt = con.prepareStatement("Delete from ActivityAssociationTable where ProcessVariantId = ? and ProcessDefId = ? and DefinitionType = ? and DefinitionId = ? ");
                                            pstmt.setInt(1, procVarID);
                                            pstmt.setInt(2, procDefId);
                                            WFSUtil.DB_SetString(3, "N", pstmt, dbType);
                                            pstmt.setInt(4, formInterfaceId);
                                            pstmt.execute();
                                            if(pstmt!=null){
                                                pstmt.close();
                                                pstmt = null;
                                            }
                                            
                                            pstmt = con.prepareStatement("Delete from ActivityInterfaceAssocTable where ProcessVariantId = ? and ProcessDefId = ? and InterfaceElementId = ? ");
                                            pstmt.setInt(1, procVarID);
                                            pstmt.setInt(2, procDefId);
                                            pstmt.setInt(3, formExtid);
                                            pstmt.execute();
                                            if(pstmt!=null){
                                                pstmt.close();
                                                pstmt = null;
                                            }
                                            break;
                                        }
                                        case 'U':{
                                            pstmt = con.prepareStatement("Select FormExtId from WFVariantFormTable " + WFSUtil.getTableLockHintStr(dbType) + " where processvariantId = ?");
                                            pstmt.setInt(1, procVarID);
                                            rs = pstmt.executeQuery();
                                            
                                            if(rs.next())
                                                formExtid = rs.getInt("FormExtId");
                                            
                                            updFormLayoutBuf = new StringBuffer();
                                            updFormLayoutBuf.append("Update WFVariantFormTable Set ");
                                            boolean columnsFlag = false;
                                            boolean width1Flag = false;
                                            boolean width2Flag = false;
                                            if(layoutMap.containsKey("columns")){
                                                updFormLayoutBuf.append(" columns = ").append(columns).append(" ");
                                                columnsFlag = true;
                                            }    
                                            if(layoutMap.containsKey("width1")){
                                                if(columnsFlag)
                                                    updFormLayoutBuf.append(" ,");
                                                updFormLayoutBuf.append(" width1 = ").append(width1).append(" ");
                                                width1Flag = true;
                                            }
                                            if(layoutMap.containsKey("width2")){
                                                if(columnsFlag)
                                                    updFormLayoutBuf.append(" ,");
                                            StringBuffer append = updFormLayoutBuf.append(" width2 = ").append(width2).append(" ");
                                                width2Flag = true;
                                            }
                                            if(layoutMap.containsKey("width3")){
                                                if(columnsFlag)
                                                    updFormLayoutBuf.append(" ,");
                                                updFormLayoutBuf.append(" width3 = "+width3+"");
                                            }
                                            updFormLayoutBuf.append("where ProcessVariantId = ? and FormExtId = ?");
                                            pstmt = con.prepareStatement(updFormLayoutBuf.toString());
                                            pstmt.setInt(1, procVarID);
                                            pstmt.setInt(2,formExtid);
                                            pstmt.execute();
                                            break;
                                        }
                                        default:  
                                            break;
                                    }
                                   layoutMap = new HashMap<String, Integer>();
                                }
                            }
                            int addCount = 0;
                            int delCount = 0;
                            String fieldXML = parser.getValueOf("Fields", "", true);
                            StringBuffer updVarMapBuf = null;
                            StringBuffer updFieldInfoBuf = null;
                            StringBuffer updVarMappingBuf = null;
                            StringBuffer updFormListenerBuf = null;
                            if(!fieldXML.equals("")){
                                fieldXML = "<Fields>"+fieldXML+"</Fields>";
                                alterDelBuff = new StringBuffer();
                                alterAddBuff = new StringBuffer();
                                Document fieldDoc = WFXMLUtil.createDocument(fieldXML);
                                Node node = fieldDoc.getFirstChild();
                                NodeList nList = WFXMLUtil.getChildListByName(node, "Field");
                                char operation = '\0';
                                for (int temp = 0; temp < nList.getLength(); temp++) {
                                    hMap = new HashMap<String, String>();
                                    Node nNode = nList.item(temp);
                                    String nodeName = nNode.getNodeName();
                                    Element e = (Element)nNode;
                                    operation = e.getAttribute("operation").charAt(0);  
                                    NamedNodeMap attrs = nNode.getAttributes();
                                    for (int j = 0; j < attrs.getLength(); j++) {
                                        Attr attribute = (Attr) attrs.item(j);
                                        String attributeName = attribute.getName();
                                        String attributeVal = attribute.getValue();
                                        if(!"operation".equalsIgnoreCase(attributeName))
                                            hMap.put(attributeName, attributeVal);
                                    }
                                    
                                    fieldName = hMap.get("name");
                                    if(hMap.containsKey("type")){
                                        fieldType = hMap.get("type");
                                        if(fieldType != null || !fieldType.equals(""))
                                            type = Integer.parseInt(fieldType);
                                    }    
                                    if(hMap.containsKey("length")){
                                        fieldLength = hMap.get("length");
                                        if(fieldLength != null|| !fieldType.equals(""))
                                            length = Integer.parseInt(fieldLength);
                                    }
                                    if(type == 6)
                                        precision = Integer.parseInt(hMap.get("precision"));
                                    defaultVal = hMap.get("defaultValue");
                                    method = hMap.get("methodName");
                                    pickListInfo = hMap.get("pickListInfo");
                                    control = hMap.get("controlType");
                                    /*if(hMap.containsKey("unbounded")){
                                        fieldUnbounded = hMap.get("unbounded");
                                        if(fieldUnbounded.equals(""))
                                            fieldUnbounded = "N";
                                    }*/
                                    
                                    pstmt = con.prepareStatement("select variableid, extobjId from VarMappingTable " + WFSUtil.getTableLockHintStr(dbType) + " where processdefid = ? and ProcessVariantId = ? and UserDefinedName = ?");
                                    pstmt.setInt(1, procDefId);
                                    pstmt.setInt(2, procVarID);
                                    WFSUtil.DB_SetString(3, usrDefName,pstmt,dbType);
                                    rs = pstmt.executeQuery();
                                    int variableId = 0;
                                    int extObjId = 0;
                                    if(rs.next()){
                                        variableId = rs.getInt("variableid");
                                        extObjId = rs.getInt("extobjId");
                                    }else{
                                        mainCode = WFSError.WF_OPERATION_FAILED;
                                        subCode = WFSError.WM_INVALID_PROC_VARIANT_DEFINITION;
                                        subject = WFSError.WF_TMP;
                                        descr = WFSErrorMsg.getMessage(mainCode);
                                        errType = WFSErrorMsg.getMessage(subCode);
                                    }
                                    if(rs!=null){
                                        rs.close();
                                        rs = null;
                                    }

                                    switch(operation){
                                        case 'I':{
                                            if(addCount == 0){
                                                alterAddBuff.append("Alter table ").append(tableName).append(" Add ");
                                                if(dbType == JTSConstant.JTS_ORACLE)
                                                    alterAddBuff.append("(");
                                            }    
                                            if(addCount >0){
                                                if(dbType == JTSConstant.JTS_POSTGRES)
                                                    alterAddBuff.append(",ADD ");
                                                else
                                                    alterAddBuff.append(",");
                                            }
                                            
                                            alterAddBuff.append(fieldName);
                                            alterAddBuff.append(" ");
                                            alterAddBuff.append(WFSUtil.getDBDataTypeForWFType(type, dbType,null));                           
                                            if(type == WFSConstant.WF_STR)
                                                alterAddBuff.append("(").append(length).append(")");
          	                                if(defaultVal != null || !defaultVal.equals("")){								
												if(type == WFSConstant.WF_SHORT_DAT){
													alterAddBuff.append(" DEFAULT "+WFSUtil.TO_SHORT_DATE(defaultVal, true, dbType)+" ");
												}else if(type == WFSConstant.WF_DAT){
													alterAddBuff.append(" DEFAULT "+WFSUtil.TO_DATE(defaultVal, true, dbType)+" ");
												}else{												
													alterAddBuff.append(" DEFAULT "+WFSUtil.TO_STRING(defaultVal, true, dbType)+" ");
												}
											}  
                                            pstmt = con.prepareStatement("select TypeFieldId, FieldName from WfTypeDefTable " + WFSUtil.getTableLockHintStr(dbType) + " where processdefid = ? and ProcessVariantId = ?");
                                            pstmt.setInt(1, procDefId);
                                            pstmt.setInt(2, procVarID);
                                            rs = pstmt.executeQuery();
                                            int typeFieldId = 0;
                                            String fName = "";
                                            int maxTypeFieldId = 0;
                                            HashMap fMap = new HashMap();
                                            while(rs.next()){
                                                typeFieldId = rs.getInt("TypeFieldId");
                                                fName  = rs.getString("FieldName");
                                                fMap.put(typeFieldId, fName);
                                                if(maxTypeFieldId<typeFieldId)
                                                    maxTypeFieldId = typeFieldId;
                                            }
                                            maxTypeFieldId ++;

                                            if(rs!=null){
                                                rs.close();
                                                rs = null;
                                            }

                                            if(!fMap.containsValue(fieldName)){
                                                pstmt = con.prepareStatement("insert into WFTypeDefTable (ProcessDefId,ParentTypeId,TypeFieldId,FieldName,WFType,TypeId,Unbounded,ExtensionTypeId,ProcessVariantId) values (?,?,?,?,?,?,?,?,?)");
                                                pstmt.setInt(1, procDefId);
                                                pstmt.setInt(2, 1);
                                                pstmt.setInt(3, maxTypeFieldId);
                                                WFSUtil.DB_SetString(4, fieldName,pstmt,dbType);
                                                pstmt.setInt(5, type);
                                                pstmt.setInt(6, 0);
                                                WFSUtil.DB_SetString(7, "N",pstmt,dbType);
                                                pstmt.setInt(8, -1);
                                                pstmt.setInt(9, procVarID);
                                                pstmt.execute();

                                                if(rs!=null){
                                                    rs.close();
                                                    rs = null;
                                                }
                                            }
                                            
                                            pstmt = con.prepareStatement("select max(VarFieldId) as varfieldId, max(TypeFieldId) as typeFieldId from WFUDTVarMappingTable where processdefid = ? and ProcessVariantId = ?");
                                            pstmt.setInt(1, procDefId);
                                            pstmt.setInt(2, procVarID);
                                            rs = pstmt.executeQuery();
                                            int varFieldId = 0;
                                            typeFieldId = 0;
                                            if(rs.next()){
                                                varFieldId = rs.getInt("varfieldId");
                                                typeFieldId = rs.getInt("typeFieldId");
                                            }    
                                            varFieldId++;
                                            typeFieldId++;
                                            
                                            if(rs!=null){
                                                rs.close();
                                                rs = null;
                                            }
                                            pstmt = con.prepareStatement("insert into WFUDTVarMappingTable (ProcessDefId,VariableId,VarFieldId,TypeId,TypeFieldId,"
                                                    + "ParentVarFieldId,MappedObjectName,ExtObjId,MappedObjectType,FieldLength,VarPrecision,RelationId,ProcessVariantId, DefaultValue) "
                                                    + "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                            pstmt.setInt(1, procDefId);
                                            pstmt.setInt(2, variableId);
                                            pstmt.setInt(3, varFieldId);
                                            pstmt.setInt(4, 1);
                                            pstmt.setInt(5, typeFieldId);
                                            pstmt.setInt(6, 1);
                                            WFSUtil.DB_SetString(7, fieldName,pstmt,dbType);
                                            pstmt.setInt(8, extObjId);
                                            WFSUtil.DB_SetString(9, "C",pstmt,dbType);
                                            pstmt.setInt(10, length);
                                            pstmt.setInt(11, precision);
                                            pstmt.setInt(12, 0);
                                            pstmt.setInt(13, procVarID);
                                            WFSUtil.DB_SetString(14, defaultVal,pstmt,dbType);
                                            pstmt.execute();
                                            
                                            pstmt = con.prepareStatement("select max(FieldId) as FieldId from WFVariantFieldInfoTable where processdefid = ? and ProcessVariantId = ?");
                                            pstmt.setInt(1, procDefId);
                                            pstmt.setInt(2, procVarID);
                                            rs = pstmt.executeQuery();
                                            int fieldId = 0;
                                            typeFieldId = 0;
                                            if(rs.next())
                                                fieldId = rs.getInt("FieldId");
                                            
                                            if(rs!=null){
                                                rs.close();
                                                rs = null;
                                            }
                                            
                                            pstmt=con.prepareStatement("insert into WFVariantFieldInfoTable(processdefid,ProcessVariantId,FieldId,VariableId,VarFieldId, Type,Length,DefaultValue,Methodname,PickListInfo, ControlType) values(?,?,?,?,?,?,?,?,?,?,?)");
											pstmt.setInt(1,procDefId);
											pstmt.setInt(2,procVarID);
											pstmt.setInt(3,++fieldId);
											pstmt.setInt(4,variableId);
											pstmt.setInt(5,varFieldId);
											pstmt.setInt(6,type);
											pstmt.setInt(7,length);
											WFSUtil.DB_SetString(8, defaultVal,pstmt,dbType);
											WFSUtil.DB_SetString(9, method,pstmt,dbType);
											WFSUtil.DB_SetString(10, pickListInfo,pstmt,dbType);
                                                                                        if(dbType!=JTSConstant.JTS_POSTGRES)
                                                                                            WFSUtil.DB_SetString(11, control,pstmt,dbType);
                                                                                        if(dbType==JTSConstant.JTS_POSTGRES)    
                                                                                            pstmt.setInt(11,Integer.parseInt(control));
                                            pstmt.execute();
                                            addCount++;
                                            break;
                                        }
                                        case 'D':{
                                            boolean delFlag = false;
                                            if(forceDelFlag.equalsIgnoreCase("N")){
                                                 pstmtForcDel = con.prepareStatement(" Select * from WFInstrumentTable where ProcessVariantId  = ?");
                                                 pstmtForcDel.setInt(1, procVarID);
                                                 rsForcDel = pstmtForcDel.executeQuery();
                                                 if(rsForcDel.next()){
                                                      mainCode = WFSError.WF_OPERATION_FAILED;
                                                      subCode = WFSError.WF_DATA_EXIST;
                                                      subject = WFSErrorMsg.getMessage(mainCode);
                                                      descr = WFSErrorMsg.getMessage(subCode);
                                                      errType = WFSError.WF_TMP;
                                                      
                                                 }else{
                                                       delFlag = true;

                                                 }
                                            }else if (forceDelFlag.equalsIgnoreCase("Y")){
                                                  delFlag = true;
                                            }
                                            if(delFlag){
                                                if(dbType == JTSConstant.JTS_MSSQL){
                                                    pstmtgetConstraint = con.prepareStatement(" select  d.name from sys.tables t join sys.default_constraints d on d.parent_object_id = t.object_id join sys.columns c on c.object_id = t.object_id and c.column_id = d.parent_column_id where t.name = ? and c.name = ? ");
                                                    WFSUtil.DB_SetString(1, tableName,pstmtgetConstraint,dbType);
                                                    WFSUtil.DB_SetString(2, fieldName,pstmtgetConstraint,dbType);
                                                    rsgetConstraint = pstmtgetConstraint.executeQuery();
                                                    if(rsgetConstraint.next()){
                                                        String consName = rsgetConstraint.getString(1);
                                                        pstmt = con.prepareStatement("Alter table "+tableName+" Drop constraint "+consName);
                                                        pstmt.execute();
                                                    }
                                                }
                                                if(delCount == 0){
                                                    alterDelBuff.append("Alter table ").append(tableName).append(" Drop ");
                                                    if(dbType == JTSConstant.JTS_ORACLE)
                                                        alterDelBuff.append("(");
                                                    if(dbType == JTSConstant.JTS_MSSQL || dbType == JTSConstant.JTS_POSTGRES)
                                                        alterDelBuff.append(" COLUMN ");
                                                }
                                            if(delCount > 0)
                                                alterDelBuff.append(",");
                                            if((delCount > 0)&&(dbType == JTSConstant.JTS_POSTGRES)){
                                            	alterDelBuff.append(" DROP COLUMN ");
                                            }
                                            alterDelBuff.append(fieldName);


                                            pstmt = con.prepareStatement("Delete From WFTypeDefTable where ProcessVariantId = ? and fieldName = ?");
                                            pstmt.setInt(1, procVarID);
                                            WFSUtil.DB_SetString(2, fieldName,pstmt,dbType);
                                            pstmt.execute();

                                            pstmt = con.prepareStatement("Select VarFieldId from WFUDTVarMappingTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessVariantId = ? and VariableId = ? and MappedObjectType = ? and MappedObjectName = ?");
                                            pstmt.setInt(1, procVarID);
                                            pstmt.setInt(2, variableId);
                                            WFSUtil.DB_SetString(3, "C",pstmt,dbType);
                                            WFSUtil.DB_SetString(4, fieldName,pstmt,dbType);
                                            rs = pstmt.executeQuery();
                                            int varfieldId = 0;
                                            if(rs.next())
                                                varfieldId = rs.getInt("VarFieldId");

                                            pstmt = con.prepareStatement("Delete From WFUDTVarMappingTable where ProcessVariantId = ? and VariableId = ? and MappedObjectType = ? and MappedObjectName = ?");
                                            pstmt.setInt(1, procVarID);
                                            pstmt.setInt(2, variableId);
                                            WFSUtil.DB_SetString(3, "C",pstmt,dbType);
                                            WFSUtil.DB_SetString(4, fieldName,pstmt,dbType);
                                            pstmt.execute();

                                            pstmt = con.prepareStatement("Delete From WFVariantFieldInfoTable where ProcessVariantId = ? and VariableId = ? and VarFieldId = ?");
                                            pstmt.setInt(1, procVarID);
                                            pstmt.setInt(2, variableId);
                                            pstmt.setInt(3, varfieldId);
                                            pstmt.execute();

                                            pstmt = con.prepareStatement("Delete From WFVariantFieldAssociationTable where ProcessVariantId = ? and VariableId = ? and VarFieldId = ?");
                                            pstmt.setInt(1, procVarID);
                                            pstmt.setInt(2, variableId);
                                            pstmt.setInt(3, varfieldId);
                                            pstmt.execute();
                                            delCount++;
                                             }
                                             break;
                                        }
                                        case 'U':{
                                            updVarMapBuf = new StringBuffer();
                                            updFieldInfoBuf = new StringBuffer();
                                            boolean typeFlag = false;
                                            boolean lenFlag = false;
                                            boolean defValFlag = false;
                                            boolean precisionFlag = false;
                                            boolean methodFlag = false;
                                            boolean pickListFlag = false;
                                            boolean controlFlag = false;
                                            
                                            pstmt = con.prepareStatement("Select VarFieldId from WFUDTVarMappingTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessVariantId = ? and VariableId = ? and MappedObjectType = ? and MappedObjectName = ?");
                                            pstmt.setInt(1, procVarID);
                                            pstmt.setInt(2, variableId);
                                            WFSUtil.DB_SetString(3, "C",pstmt,dbType);
                                            WFSUtil.DB_SetString(4, fieldName,pstmt,dbType);
                                            rs = pstmt.executeQuery();
                                            int varfieldId = 0;
                                            if(rs.next())
                                                varfieldId = rs.getInt("VarFieldId");
                                            updFieldInfoBuf.append("Update WFVariantFieldInfoTable set ");
                                            if(hMap.containsKey("type")){
                                                pstmt = con.prepareStatement("Update WFTypeDefTable set WFType = ? where ProcessVariantId = ? and fieldName = ?");
                                                pstmt.setInt(1, type);
                                                pstmt.setInt(2, procVarID);
                                                WFSUtil.DB_SetString(3, fieldName,pstmt,dbType);
                                                pstmt.execute();
                                                
                                                updFieldInfoBuf.append(" Type = ").append(type).append("");
                                                typeFlag = true;
                                            }
                                            updVarMapBuf.append("Update WFUDTVarMappingTable set ");
                                            
                                            if(hMap.containsKey("length")){
                                                updVarMapBuf.append(" FieldLength = ").append(length).append("");
                                                if(typeFlag)
                                                    updFieldInfoBuf.append(",");
                                                updFieldInfoBuf.append(" Length = ").append(length).append("");
                                                lenFlag = true;
                                            }
                                            if(hMap.containsKey("defaultValue")){
                                                if(lenFlag)
                                                    updVarMapBuf.append(",");
                                                updVarMapBuf.append(" DefaultValue = ").append(WFSUtil.TO_STRING(defaultVal, true, dbType)).append(" ");
                                                if(typeFlag || lenFlag)
                                                    updFieldInfoBuf.append(",");
                                                updFieldInfoBuf.append(" DefaultValue = ").append(WFSUtil.TO_STRING(defaultVal, true, dbType)).append(" ");
                                                defValFlag = true;
                                            }
                                            if(hMap.containsKey("precision")){
                                                if(lenFlag || defValFlag)
                                                    updVarMapBuf.append(", ");
                                                updVarMapBuf.append(" VarPrecision = ").append(precision).append(" ");
                                                precisionFlag = true;
                                            }
                                            if(hMap.containsKey("methodName")){
                                                if(typeFlag || lenFlag || defValFlag)
                                                    updFieldInfoBuf.append(", ");
                                                updFieldInfoBuf.append(" MethodName = ").append(WFSUtil.TO_STRING(method, true, dbType)).append(" ");
                                                methodFlag = true;
                                            }
                                            if(hMap.containsKey("pickListInfo")){
                                                if(typeFlag || lenFlag || defValFlag || methodFlag)
                                                    updFieldInfoBuf.append(", ");
                                                updFieldInfoBuf.append(" PickListInfo = ").append(WFSUtil.TO_STRING(pickListInfo, true, dbType)).append(" ");
                                                pickListFlag = true;
                                            }
                                            if(hMap.containsKey("controlType")){
                                                if(typeFlag || lenFlag || defValFlag || methodFlag || pickListFlag)
                                                    updFieldInfoBuf.append(", ");
                                                updFieldInfoBuf.append(" ControlType = ").append(Integer.parseInt(control)).append(" ");
                                                controlFlag = true;
                                            }
                                            updVarMapBuf.append(" where ProcessVariantId = ? and VariableId = ? and MappedObjectType = ? and MappedObjectName = ?");
                                            updFieldInfoBuf.append(" where ProcessVariantId = ? and VariableId = ? and VarFieldId = ?");
                                            WFSUtil.printOut(engine,"update UDTVarMappingTable Query>>"+updVarMapBuf.toString());
                                            WFSUtil.printOut(engine,"update WFVariantFieldInfoTable Query>>"+updFieldInfoBuf.toString());
                                            
                                            pstmt = con.prepareStatement(updVarMapBuf.toString());
                                            pstmt.setInt(1, procVarID);
                                            pstmt.setInt(2, variableId);
                                            WFSUtil.DB_SetString(3, "C",pstmt,dbType);
                                            WFSUtil.DB_SetString(4, fieldName,pstmt,dbType);
                                            pstmt.execute();
                                            
                                            pstmt = con.prepareStatement(updFieldInfoBuf.toString());
                                            pstmt.setInt(1, procVarID);
                                            pstmt.setInt(2, variableId);
                                            pstmt.setInt(3, varfieldId);
                                            pstmt.execute();
                                            
                                            break;
                                        }
                                        default:   
                                            break;
                                    }
                                   hMap = new HashMap<String, String>();
                                }
                                if(!alterAddBuff.toString().equals("")){
                                    if(dbType == JTSConstant.JTS_ORACLE)
                                        alterAddBuff.append(")");
                                    
                                    pstmt = con.prepareStatement(alterAddBuff.toString());
                                    pstmt.execute();
                                }
                                if(!alterDelBuff.toString().equals("")){
                                    if(dbType == JTSConstant.JTS_ORACLE)
                                        alterDelBuff.append(")");

                                    pstmt = con.prepareStatement(alterDelBuff.toString());
                                    pstmt.execute();
                                }
                                if(pstmt!=null){
                                    pstmt.close();
                                    pstmt = null;
                                }
                            }
                        
//                            String formBuffer = parser.getValueOf("FormBuffer","",true);
//                            if(!formBuffer.equals("")){
//                                Clob clobObject = con.createClob();
//                                clobObject.setString(1, formBuffer);
//                                pstmt = con.prepareStatement("Select 1 from WFForm_table where ProcessVariantId = ? ");
//                                pstmt.setInt(1, procVarID);
//                                rs = pstmt.executeQuery();
//                                if(rs.next()){
//                                    pstmt = con.prepareStatement("Update WFForm_table set FormBuffer= ? where ProcessVariantId = ? ");
//                                    pstmt.setClob(1, clobObject);
//                                    pstmt.setInt(2, procVarID);
//                                    pstmt.execute();
//                                }else{
//                                    String formName = "FORM_"+procVarName;
//                                    pstmt = con.prepareStatement("Insert into WFForm_table (PROCESSDEFID, FORMID, FORMNAME, FORMBUFFER, ISENCRYPTED, PROCESSVARIANTID)values (?,?,?,?,?,?)");
//                                    pstmt.setInt(1, procDefId);
//                                    pstmt.setInt(2, 1);
//                                    WFSUtil.DB_SetString(3, formName, pstmt, dbType);
//                                    pstmt.setClob(4, clobObject);
//                                    WFSUtil.DB_SetString(5, "Y", pstmt, dbType);
//                                    pstmt.setInt(6, procVarID);
//                                    pstmt.execute();
//                                }
//                                if(pstmt!=null){
//                                    pstmt.close();
//                                    pstmt = null;
//                                }
//                            }
                            String docXML = parser.getValueOf("DocumentTypes", "", true);
                            Iterator itr = actMap.keySet().iterator();
                            int actId = 0;
                            String docField = "Y,0,915,7305,7005";
                            while (itr.hasNext()) {
                                actId = (Integer) itr.next();
                                actName = actMap.get(actId);
                                
                                pstmt=con.prepareStatement("Select 1 from ActivityAssociationTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessDefId = ? and ProcessVariantId = ? and ActivityId = ? and DefinitionId = ?");
                                pstmt.setInt(1,procDefId);
                                pstmt.setInt(2,procVarID);
                                pstmt.setInt(3,actId);
                                pstmt.setInt(4,docInterfaceId);
                                rs = pstmt.executeQuery();
                                if(!rs.next()){
                                    pstmt=con.prepareStatement("insert into ActivityAssociationTable (Processdefid,ProcessVariantId,ActivityId, DefinitionId, DefinitionType,AccessFlag,FieldName, Attribute, ExtObjId, VariableId) values(?,?,?,?,?,?,?,?,?,?)");
                                    pstmt.setInt(1,procDefId);
                                    pstmt.setInt(2,procVarID);
                                    pstmt.setInt(3,actId);
                                    pstmt.setInt(4,docInterfaceId);
                                    WFSUtil.DB_SetString(5, "N", pstmt, dbType);
                                    WFSUtil.DB_SetString(6, "", pstmt, dbType);
                                    WFSUtil.DB_SetString(7, docField, pstmt, dbType);
                                    WFSUtil.DB_SetString(8, "", pstmt, dbType);
                                    pstmt.setInt(9,0);
                                    pstmt.setInt(10,0);
                                    pstmt.execute();
                                }
                            }
                            if(!docXML.equals("")){
                                docXML = "<DocumentTypes>"+docXML+"</DocumentTypes>";
                                Document documentDoc = WFXMLUtil.createDocument(docXML);
                                Node node = documentDoc.getFirstChild();
                                NodeList nList = WFXMLUtil.getChildListByName(node, "DocumentType");
                                char operation = '\0';
                                String docName = null;
                                String docLabel = null;
                                for (int temp = 0; temp < nList.getLength(); temp++) {
                                    hMap = new HashMap<String, String>();
                                    Node nNode = nList.item(temp);
                                    String nodeName = nNode.getNodeName();
                                    Element e = (Element)nNode;
                                    operation = e.getAttribute("operation").charAt(0);  
                                    NamedNodeMap attrs = nNode.getAttributes();
                                    for (int j = 0; j < attrs.getLength(); j++) {
                                        Attr attribute = (Attr) attrs.item(j);
                                        String attributeName = attribute.getName();
                                        String attributeVal = attribute.getValue();
                                        if(!"operation".equalsIgnoreCase(attributeName))
                                            hMap.put(attributeName, attributeVal);
                                    }
                                    
                                    docName = hMap.get("name");
                                    switch(operation){
                                        case 'I':{
                                            pstmt = con.prepareStatement("select max(DocId) as DocId from DOCUMENTTYPEDEFTABLE where processdefid = ? and ProcessVariantId = ?");
                                            pstmt.setInt(1, procDefId);
                                            pstmt.setInt(2, procVarID);
                                            rs = pstmt.executeQuery();
                                            int docId = 0;
                                            if(rs.next())
                                                docId = rs.getInt("DocId");
                                            docId++;

                                            if(rs!=null){
                                                rs.close();
                                                rs = null;
                                            }
                                            if(pstmt!=null){
                                                pstmt.close();
                                                pstmt = null;
                                            }

                                            pstmt = con.prepareStatement("Insert into DOCUMENTTYPEDEFTABLE (ProcessDefId, DocId, DocName, ProcessVariantId) values (?,?,?,?)");
                                            pstmt.setInt(1, procDefId);
                                            pstmt.setInt(2, docId);
                                            WFSUtil.DB_SetString(3, docName,pstmt,dbType);
                                            pstmt.setInt(4, procVarID);
                                            pstmt.execute();

                                            if(pstmt!=null){
                                                pstmt.close();
                                                pstmt = null;
                                            }
                                            break;
                                        }
                                        case 'D':{
                                            pstmt = con.prepareStatement("Select DocId from DOCUMENTTYPEDEFTABLE " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessVariantId = ? and ProcessDefId = ? and DocName = ?");
                                            pstmt.setInt(1, procVarID);
                                            pstmt.setInt(2, procDefId);
                                            WFSUtil.DB_SetString(3, docName,pstmt,dbType);
                                            rs = pstmt.executeQuery();
                                            int docId = 0;
                                            if(rs.next())
                                                docId = rs.getInt("DocId");
                                            if(rs !=null){
                                                rs.close();
                                                rs = null;
                                            }
                                            
                                            pstmt = con.prepareStatement("Delete from DOCUMENTTYPEDEFTABLE where ProcessVariantId = ? and ProcessDefId = ? and DocName = ?");
                                            pstmt.setInt(1, procVarID);
                                            pstmt.setInt(2, procDefId);
                                            WFSUtil.DB_SetString(3, docName,pstmt,dbType);
                                            pstmt.execute();

                                            if(pstmt!=null){
                                                pstmt.close();
                                                pstmt = null;
                                            }
                                            pstmt = con.prepareStatement("Delete from ACTIVITYINTERFACEASSOCTABLE where ProcessVariantId = ? and ProcessDefId = ? and InterfaceElementId = ?");
                                            pstmt.setInt(1, procVarID);
                                            pstmt.setInt(2, procDefId);
                                            pstmt.setInt(3, docId);
                                            pstmt.execute();

                                            if(pstmt!=null){
                                                pstmt.close();
                                                pstmt = null;
                                            }
                                            break;
                                        }
//                                        case 'U':{
//                                            //pending discussion at web end
//                                            break;
//                                        }
                                        default:  
                                            break;
                                    }
                                   hMap = new HashMap<String, String>();
                                }
                            }
							
                            String fieldAssocXML = parser.getValueOf("FieldAssociation", "", true);
                            if(!fieldAssocXML.equals("")){
                                fieldAssocXML = "<FieldAssociation>"+fieldAssocXML+"</FieldAssociation>";
                                Document fieldDoc = WFXMLUtil.createDocument(fieldAssocXML);
                                //Node node = documentDoc.getFirstChild();
                                NodeList nList = fieldDoc.getElementsByTagName("Activity");
                                char operation = '\0';
                                String enable = null;
                                String editable = null;
                                String visible = null;
                                String mandatory = null;
                                String varType = null;
                                for (int temp = 0; temp < nList.getLength(); temp++) {
                                    hMap = new HashMap<String, String>();
                                    Node nNode = nList.item(temp);
									if(nNode instanceof Element && nNode.hasAttributes()){
										String nodeName = nNode.getNodeName();
										Element ele = (Element)nNode;
										actId = Integer.parseInt(ele.getAttribute("id"));
										NodeList field = ele.getChildNodes();
										for (int t = 0; t < field.getLength(); t++) {
											Node mNode = field.item(t);
											//fieldName = mNode.getNodeName();
											Element e = (Element)mNode;
											operation = e.getAttribute("operation").charAt(0);
											fieldName = e.getAttribute("FieldName");											
											NamedNodeMap attrs = mNode.getAttributes();
											for (int j = 1; j < attrs.getLength(); j++) {
												Attr attribute = (Attr) attrs.item(j);
												String attributeName = attribute.getName();
												String attributeVal = attribute.getValue();
												if(!"operation".equalsIgnoreCase(attributeName))
													hMap.put(attributeName, attributeVal); 
											} 
                                            if(hMap.containsKey("enable"))
                                                enable = hMap.get("enable");
                                            if(hMap.containsKey("editable"))
                                                editable = hMap.get("editable");
                                            if(hMap.containsKey("visible"))
                                                visible = hMap.get("visible");
                                            if(hMap.containsKey("mandatory"))
                                                mandatory = hMap.get("mandatory");
                                            if(hMap.containsKey("varType"))
                                                varType = hMap.get("varType");
                                            int variableId = 0;
                                            int varFieldId = 0;

                                            if("U".equalsIgnoreCase(varType)){
                                                updVarMapBuf = new StringBuffer();
                                                updVarMapBuf.append(" select VariableId, 0 as VarFieldId from VARMAPPINGTABLE " + WFSUtil.getTableLockHintStr(dbType) + " where processdefid = ? and ProcessVariantId = 0 and VariableId <27 and UserDefinedName = ?");
                                                if(dbType == JTSConstant.JTS_MSSQL)
                                                    updVarMapBuf.append(" and LEN(UserDefinedName)>0 ");
                                                else if(dbType == JTSConstant.JTS_ORACLE || dbType == JTSConstant.JTS_POSTGRES)
                                                    updVarMapBuf.append(" and LENGTH(UserDefinedName)>0 ");
                                                pstmt = con.prepareStatement(updVarMapBuf.toString());
                                                pstmt.setInt(1, procDefId);
                                                WFSUtil.DB_SetString(2, fieldName, pstmt, dbType);
                                            }else{
                                                updFieldInfoBuf = new StringBuffer();
                                                updFieldInfoBuf.append(" Select VariableId, VarFieldId from WFUDTVarMappingTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessDefId = ? and ProcessVariantId = ? and MappedObjectName = ? and MappedObjectType = ?");
                                                pstmt = con.prepareStatement(updFieldInfoBuf.toString());
                                                pstmt.setInt(1, procDefId);
                                                pstmt.setInt(2, procVarID);
                                                WFSUtil.DB_SetString(3, fieldName, pstmt, dbType);
                                                WFSUtil.DB_SetString(4, "C", pstmt, dbType);
                                            }

                                            rs = pstmt.executeQuery();
                                            if(rs.next()){
                                                variableId = rs.getInt("VariableId");
                                                varFieldId = rs.getInt("VarFieldId");

                                            }else{
                                                mainCode = WFSError.WF_OPERATION_FAILED;
                                                subCode = WFSError.WM_INVALID_PROC_VARIANT_DEFINITION;
                                                subject = WFSError.WF_TMP;
                                                descr = WFSErrorMsg.getMessage(mainCode);
                                                errType = WFSErrorMsg.getMessage(subCode);
                                            }
                                            if(rs!=null){
                                                rs.close();
                                                rs = null;
                                            }
                                            if(pstmt!=null){
                                                pstmt.close();
                                                pstmt = null;
                                            }
                                            WFSUtil.printOut(engine,"VariableId>>"+variableId+" VarFieldId>>"+varFieldId);
                                            switch(operation){
                                                case 'I':{
                                                    pstmt = con.prepareStatement("Insert into WFVariantFieldAssociationTable (ProcessDefId, ProcessVariantId, ActivityId, VariableId, VarFieldId, Enable, Editable, Visible, Mandatory) values (?,?,?,?,?,?,?,?,?)");
                                                    pstmt.setInt(1, procDefId);
                                                    pstmt.setInt(2, procVarID);
                                                    pstmt.setInt(3, actId);
                                                    pstmt.setInt(4, variableId);
                                                    pstmt.setInt(5, varFieldId);
                                                    WFSUtil.DB_SetString(6, enable,pstmt,dbType);
                                                    WFSUtil.DB_SetString(7, editable,pstmt,dbType);
                                                    WFSUtil.DB_SetString(8, visible,pstmt,dbType);
                                                    WFSUtil.DB_SetString(9, mandatory,pstmt,dbType);
                                                    pstmt.execute();
                                                    if(pstmt!=null){
                                                        pstmt.close();
                                                        pstmt = null;
                                                    }
                                                    if("U".equalsIgnoreCase(varType)){
                                                     pstmt = con.prepareStatement("Select 1 from ActivityAssociationTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessDefId = ? and ProcessVariantId = ? and ActivityId = ? and variableId = ?");
                                                    pstmt.setInt(1, procDefId);
                                                    pstmt.setInt(2, 0);
                                                    pstmt.setInt(3, actId);
                                                    pstmt.setInt(4, variableId);
                                                    rs = pstmt.executeQuery();
                                                    if(!rs.next()){
                                                        pstmt=con.prepareStatement("Select max(DefinitionId) from ActivityAssociationTable where processdefid = ? and DefinitionType = 'Q' and ActivityId = ? ");
                                                        pstmt.setInt(1, procDefId);
                                                        pstmt.setInt(2, actId);
                                                        rs = pstmt.executeQuery();
                                                        rs.next();
                                                        int defId = rs.getInt(1);
							pstmt = con.prepareStatement("insert into ACTIVITYASSOCIATIONTABLE (ProcessDefId,ActivityId,DefinitionType,FieldName,VariableId, ProcessVariantId,DefinitionId,Attribute,ExtObjID) VALUES(?,?,?,?,?,?,?,?,?)");
							pstmt.setInt(1,procDefId);
                                                        pstmt.setInt(2,actId);
                                                        WFSUtil.DB_SetString(3,"Q",pstmt , dbType);
                                                        WFSUtil.DB_SetString(4,usrDefName,pstmt, dbType);
                                                        pstmt.setInt(5,variableId);
                                                        pstmt.setInt(6,0);
                                                        pstmt.setInt(7,defId+1);
                                                        WFSUtil.DB_SetString(8,"O",pstmt, dbType);
                                                        pstmt.setInt(9,1);
														pstmt.execute();
                                                    }
                                                    if(rs!=null){
                                                        rs.close();
                                                        rs = null;
                                                    }
                                                    }
                                                    else{
                                                    pstmt = con.prepareStatement("Select 1 from ActivityAssociationTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessDefId = ? and ProcessVariantId = ? and ActivityId = ? and variableId = ?");
                                                    pstmt.setInt(1, procDefId);
                                                    pstmt.setInt(2, procVarID);
                                                    pstmt.setInt(3, actId);
                                                    pstmt.setInt(4, variableId);
                                                    rs = pstmt.executeQuery();
                                                    if(!rs.next()){
														pstmt = con.prepareStatement("insert into ACTIVITYASSOCIATIONTABLE (ProcessDefId,ActivityId,DefinitionType,FieldName,VariableId, ProcessVariantId,DefinitionId,Attribute,ExtObjID) VALUES(?,?,?,?,?,?,?,?,?)");
														pstmt.setInt(1,procDefId);
                                                        pstmt.setInt(2,actId);
                                                        WFSUtil.DB_SetString(3,"I",pstmt , dbType);
                                                        WFSUtil.DB_SetString(4,usrDefName,pstmt, dbType);
                                                        pstmt.setInt(5,variableId);
                                                        pstmt.setInt(6,procVarID);
                                                        pstmt.setInt(7,3);
                                                        WFSUtil.DB_SetString(8,"O",pstmt, dbType);
                                                        pstmt.setInt(9,1);
														pstmt.execute();
                                                    }
                                                    if(rs!=null){
                                                        rs.close();
                                                        rs = null;
                                                    }
													
													pstmt = con.prepareStatement("Select 1 from ActivityAssociationTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessDefId = ? and ProcessVariantId = ? and ActivityId = ? and definitionid = ?");
                                                    pstmt.setInt(1, procDefId);
                                                    pstmt.setInt(2, procVarID);
                                                    pstmt.setInt(3, actId);
                                                    pstmt.setInt(4, formInterfaceId);
                                                    rs = pstmt.executeQuery();
                                                    if(!rs.next()){
														pstmt = con.prepareStatement("insert into ACTIVITYASSOCIATIONTABLE (ProcessDefId,ActivityId,DefinitionType,FieldName,VariableId, ProcessVariantId,DefinitionId,Attribute,ExtObjID) VALUES(?,?,?,?,?,?,?,?,?)");
														pstmt.setInt(1,procDefId);
                                                        pstmt.setInt(2,actId);
                                                        WFSUtil.DB_SetString(3,"N",pstmt , dbType);
                                                        WFSUtil.DB_SetString(4,formField,pstmt, dbType);
                                                        pstmt.setInt(5,0);
                                                        pstmt.setInt(6,procVarID);
                                                        pstmt.setInt(7,formInterfaceId);
                                                        WFSUtil.DB_SetString(8,"",pstmt, dbType);
                                                        pstmt.setInt(9,0);
														pstmt.execute();
                                                    }
                                                    if(rs!=null){
                                                        rs.close();
                                                        rs = null;
                                                    }
                                                    if(pstmt!=null){
                                                        pstmt.close();
                                                        pstmt = null;
                                                    }
                                                    }
                                                    break;
                                                    
                                                    
                                                }
                                                case 'D':{
                                                    pstmt = con.prepareStatement("Delete from WFVariantFieldAssociationTable where ProcessVariantId = ? and ProcessDefId = ? and VariableId = ? and VarFieldId = ? and ActivityId = ?");
                                                    pstmt.setInt(1, procVarID);
                                                    pstmt.setInt(2, procDefId);
                                                    pstmt.setInt(3, variableId);
                                                    pstmt.setInt(4, varFieldId);
                                                    pstmt.setInt(5, actId);
                                                    pstmt.execute();
                                                    if(pstmt!=null){
                                                        pstmt.close();
                                                        pstmt = null;
                                                    }
                                                    break;
                                                }
                                                case 'U':{
                                                    StringBuffer updFieldAssoc = new StringBuffer();
                                                    boolean enableFlag = false;
                                                    boolean editableFlag = false;
                                                    boolean visibleFlag = false;
                                                    boolean mandatFlag = false;
                                                    updFieldAssoc.append(" Update WFVariantFieldAssociationTable Set ");
                                                    if(hMap.containsKey("enable")){
                                                        updFieldAssoc.append(" Enable = ").append(WFSUtil.TO_STRING(enable, true, dbType)).append("");
                                                        enableFlag = true;
                                                    }
                                                    if(hMap.containsKey("editable")){
                                                        if(enableFlag)
                                                            updFieldAssoc.append(" ,");
                                                        updFieldAssoc.append(" Editable= ").append(WFSUtil.TO_STRING(editable, true, dbType)).append("");
                                                        editableFlag = true;
                                                    }
                                                    if(hMap.containsKey("visible")){
                                                        if(enableFlag || editableFlag)
                                                            updFieldAssoc.append(" ,");
                                                        updFieldAssoc.append(" Visible= ").append(WFSUtil.TO_STRING(visible, true, dbType)).append("");
                                                        visibleFlag = true;
                                                    }
                                                    if(hMap.containsKey("mandatory")){
                                                        if(enableFlag || editableFlag || visibleFlag)
                                                            updFieldAssoc.append(" ,");
                                                        updFieldAssoc.append(" Mandatory = ").append(WFSUtil.TO_STRING(mandatory, true, dbType)).append("");
                                                        mandatFlag = true;
                                                    }
                                                    updFieldAssoc.append(" Where ProcessVariantId = ? and VariableId =? and VarFieldId = ? and ActivityId = ?");
                                                    pstmt = con.prepareStatement(updFieldAssoc.toString());
                                                    pstmt.setInt(1, procVarID);
                                                    pstmt.setInt(2, variableId);
                                                    pstmt.setInt(3, varFieldId);
                                                    pstmt.setInt(4, actId);
                                                    pstmt.execute();
                                                    if(pstmt!=null){
                                                        pstmt.close();
                                                        pstmt = null;
                                                    }
                                                    break;
                                                }
                                                default:  
                                                    break;
                                            }
                                           hMap = new HashMap<String, String>();
										}
									}
								}
                            }
                            String docAssocXML = parser.getValueOf("DocumentAssociation", "", true);
                            if(!docAssocXML.equals("")){
                                docAssocXML = "<DocumentAssociation>"+docAssocXML+"</DocumentAssociation>";
                                Document documentDoc = WFXMLUtil.createDocument(docAssocXML);
                                NodeList nList = documentDoc.getElementsByTagName("Activity");
                                char operation = '\0';
                                String docName = null;
                                String docauth = null;
                                for (int temp = 0; temp < nList.getLength(); temp++) {
                                    hMap = new HashMap<String, String>();
                                    Node nNode = nList.item(temp);
                                    if(nNode instanceof Element && nNode.hasAttributes()){
                                        Element ele = (Element) nNode;
                                        actId = Integer.parseInt(ele.getAttribute("id"));
                                        NodeList field = ele.getChildNodes();
                                        for (int t = 0; t < field.getLength(); t++) {
                                            Node mNode = field.item(t);
                                            //docName = mNode.getNodeName();
                                            Element e = (Element)mNode;
                                            operation = e.getAttribute("operation").charAt(0); 
                                            NamedNodeMap attrs = mNode.getAttributes();
                                            for (int j = 0; j < attrs.getLength(); j++) {
                                                Attr attribute = (Attr) attrs.item(j);
                                                String attributeName = attribute.getName();
                                                String attributeVal = attribute.getValue();
                                                if("docName".equalsIgnoreCase(attributeName)){
													docName =  attributeVal ;	
												} else { 
													if(!"operation".equalsIgnoreCase(attributeName))
														hMap.put(attributeName, attributeVal); 
												}
                                            }
                                            if(hMap.containsKey("authorization"))
                                                docauth = hMap.get("authorization");
                                            pstmt = con.prepareStatement("select DocId from DOCUMENTTYPEDEFTABLE where processdefid = ? and ProcessVariantId = ? and DocName = ?");
                                            pstmt.setInt(1, procDefId);
                                            pstmt.setInt(2, procVarID);
                                            WFSUtil.DB_SetString(3, docName,pstmt,dbType);
                                            rs = pstmt.executeQuery();
                                            int docId = 0;
                                            if(rs.next())
                                                docId = rs.getInt("DocId");

                                            if(rs!=null){
                                                rs.close();
                                                rs = null;
                                            }
                                            if(pstmt!=null){
                                                pstmt.close();
                                                pstmt = null;
                                            }
                                            switch(operation){
                                                case 'I':{
                                                    pstmt = con.prepareStatement("select ActivityName from ACTIVITYTABLE " + WFSUtil.getTableLockHintStr(dbType) + " where processdefid = ? and ActivityId = ?");
                                                    pstmt.setInt(1, procDefId);
                                                    pstmt.setInt(2, actId);
                                                    rs = pstmt.executeQuery();
                                                    int varId = 0;
                                                    if(rs.next()){
                                                        actName = rs.getString("ActivityName");
                                                    }else{
                                                        mainCode = WFSError.WF_OPERATION_FAILED;
                                                        subCode = WFSError.WF_INVALID_ACTIVITY_ID;
                                                        subject = WFSError.WF_TMP;
                                                        descr = WFSErrorMsg.getMessage(mainCode);
                                                        errType = WFSErrorMsg.getMessage(subCode);
                                                    }
                                                    if(rs!=null){
                                                        rs.close();
                                                        rs = null;
                                                    }
                                                    if(pstmt!=null){
                                                        pstmt.close();
                                                        pstmt = null;
                                                    }

                                                    pstmt = con.prepareStatement("Insert into ACTIVITYINTERFACEASSOCTABLE (ProcessDefId, ActivityId, ActivityName, InterfaceElementId, InterfaceType, Attribute, TriggerName, ProcessVariantId) values (?,?,?,?,?,?,?,?)");
                                                    pstmt.setInt(1, procDefId);
                                                    pstmt.setInt(2, actId);
                                                    WFSUtil.DB_SetString(3, actName,pstmt,dbType);
                                                    pstmt.setInt(4, docId);
                                                    WFSUtil.DB_SetString(5, "D",pstmt,dbType);
                                                    WFSUtil.DB_SetString(6, docauth,pstmt,dbType);
                                                    WFSUtil.DB_SetString(7, "",pstmt,dbType);
                                                    pstmt.setInt(8, procVarID);
                                                    pstmt.execute();

                                                    if(pstmt!=null){
                                                        pstmt.close();
                                                        pstmt = null;
                                                    }
                                                    break;
                                                }
                                                case 'D':{
                                                    pstmt = con.prepareStatement("Delete from ACTIVITYINTERFACEASSOCTABLE where ProcessVariantId = ? and ProcessDefId = ? and InterfaceType = ? and InterfaceElementId = ? and ActivityId = ?");
                                                    pstmt.setInt(1, procVarID);
                                                    pstmt.setInt(2, procDefId);
                                                    WFSUtil.DB_SetString(3, "D",pstmt,dbType);
                                                    pstmt.setInt(4, docId);
                                                    pstmt.setInt(5, actId);
                                                    pstmt.execute();

                                                    if(pstmt!=null){
                                                        pstmt.close();
                                                        pstmt = null;
                                                    }
                                                    break;
                                                }
                                                case 'U':{
                                                    pstmt = con.prepareStatement("Update ACTIVITYINTERFACEASSOCTABLE set Attribute = ? where ProcessVariantId = ? and ProcessDefId = ? and InterfaceType = ? and InterfaceElementId = ? and ActivityId = ?");
                                                    WFSUtil.DB_SetString(1, docauth,pstmt,dbType);
                                                    pstmt.setInt(2, procVarID);
                                                    pstmt.setInt(3, procDefId);
                                                    WFSUtil.DB_SetString(4, "D",pstmt,dbType);
                                                    pstmt.setInt(5, docId);
                                                    pstmt.setInt(6, actId);
                                                    pstmt.execute();

                                                    if(pstmt!=null){
                                                        pstmt.close();
                                                        pstmt = null;
                                                    }
                                                    break;
                                                }
                                                default:  
                                                    break;
                                            }
                                           hMap = new HashMap<String, String>();
                                        }
                                    }
                                    // error if no activityid is given
                                }
                            }
                            
                            String listenerXML = parser.getValueOf("Listener","",true);
                            int formExtId = 0;
                            if((listenerXML!=null)||(!(listenerXML.equals("")))){
                                WFSUtil.printOut(engine,"Inside listener");
                                // To convert fieldXML into well formed XML required for DOM parsing
                                listenerXML = "<Listener>"+listenerXML+"</Listener>";
                                HashMap<String,String> listenerMap= new HashMap<String,String>(); 
                                Document listenerDoc = WFXMLUtil.createDocument(listenerXML);
                                Node node = listenerDoc.getFirstChild();
                                NodeList listenerNodeList = WFXMLUtil.getChildListByName(node, "Activity");
                                char operation = '\0';
                                String language = null;
                                String codeSnippet = null;
                                int fieldlistener = 0;
                                String function = null;
                                String object = null;
                                String name = null;
                                String varType = null;
                                int variableId = 0;
                                int varFieldId = 0;
                                for (int temp = 0; temp < listenerNodeList.getLength(); temp++){
                                    Node nNode = listenerNodeList.item(temp);
                                    String nodeName = nNode.getNodeName();
                                    NamedNodeMap attrs = nNode.getAttributes();
                                    Element e = (Element)nNode;
                                    operation = e.getAttribute("operation").charAt(0); 
                                    for (int j = 0; j < attrs.getLength(); j++) {
                                        Attr attribute = (Attr) attrs.item(j);
                                        String attributeName = attribute.getName();
                                        String attributeVal = attribute.getValue();
                                        if(!"operation".equalsIgnoreCase(attributeName))
                                            listenerMap.put(attributeName, attributeVal);
                                    }
                                    actId =Integer.parseInt(listenerMap.get("id"));
                                    if(listenerMap.containsKey("language"))
                                        language= listenerMap.get("language");
                                    if(listenerMap.containsKey("codeSnippet"))
                                        codeSnippet= listenerMap.get("codeSnippet");
                                    if(listenerMap.containsKey("functionName"))
                                        function= listenerMap.get("functionName");
                                    if(listenerMap.containsKey("fieldlistener"))
                                        fieldlistener =Integer.parseInt(listenerMap.get("fieldlistener"));
                                    if(listenerMap.containsKey("object")){
                                        updVarMapBuf = new StringBuffer();
                                        updVarMappingBuf = new StringBuffer();
                                        object= listenerMap.get("object");
                                        if("C".equalsIgnoreCase(object)){
                                            if(listenerMap.containsKey("varType"))
                                                varType =listenerMap.get("varType");
                                            if(listenerMap.containsKey("name")){
                                                name= listenerMap.get("name");
                                                if("U".equalsIgnoreCase(varType)){
                                                    updVarMapBuf.append(" select VariableId, 0 as VarFieldId from VARMAPPINGTABLE " + WFSUtil.getTableLockHintStr(dbType) + " where processdefid = ? and ProcessVariantId = 0 and VariableId <27 and UserDefinedName = ?");
                                                    if(dbType == JTSConstant.JTS_MSSQL)
                                                        updVarMapBuf.append(" and LEN(UserDefinedName)>0 ");
                                                    else if(dbType == JTSConstant.JTS_ORACLE || dbType == JTSConstant.JTS_POSTGRES)
                                                        updVarMapBuf.append(" and LENGTH(UserDefinedName)>0 ");
                                                   // WFSUtil.printOut("blag>>"+updVarMapBuf.toString() +" VarName>>"+name);
                                                    pstmt = con.prepareStatement(updVarMapBuf.toString());
                                                    pstmt.setInt(1, procDefId);
                                                    WFSUtil.DB_SetString(2, name, pstmt, dbType);
                                                }else{
                                                    updVarMappingBuf.append(" Select VariableId, VarFieldId from WFUDTVarMappingTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessDefId = ? and ProcessVariantId = ? and MappedObjectName = ? and MappedObjectType = ?");
                                                    pstmt = con.prepareStatement(updVarMappingBuf.toString());
                                                    //WFSUtil.printOut("blag>>"+updVarMappingBuf.toString() +" VarName>>"+name);
                                                    pstmt.setInt(1, procDefId);
                                                    pstmt.setInt(2, procVarID);
                                                    WFSUtil.DB_SetString(3, name, pstmt, dbType);
                                                    WFSUtil.DB_SetString(4, "C", pstmt, dbType);
                                                }

                                                rs = pstmt.executeQuery();
                                                //WFSUtil.printOut("blag successful for VarName>>"+name);
                                                if(rs.next()){
                                                   // System.out.println("inside rs for var>>"+name);
                                                    variableId = rs.getInt("VariableId");
                                                    varFieldId = rs.getInt("VarFieldId");

                                                }else{
                                                    mainCode = WFSError.WF_OPERATION_FAILED;
                                                    subCode = WFSError.WM_INVALID_PROC_VARIANT_DEFINITION;
                                                    subject = WFSError.WF_TMP;
                                                    descr = WFSErrorMsg.getMessage(mainCode);
                                                    errType = WFSErrorMsg.getMessage(subCode);
                                                }
                                                
                                                if(rs != null){
                                                    rs.close();
                                                    rs = null;
                                                }
                                            }else{
                                                mainCode = WFSError.WF_OPERATION_FAILED;
                                                subCode = WFSError.WFS_ILP;
                                                subject = WFSErrorMsg.getMessage(mainCode);
                                                errType = WFSError.WF_TMP;
                                                descr = e.toString();
                                            }
                                            
                                        }
                                    }    
                                    
                                    switch(operation){
                                        case 'I':{
                                            pstmt = con.prepareStatement("Select FormExtId from WFVariantFormTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessDefId = ? and ProcessVariantId = ? ");
                                            pstmt.setInt(1, procDefId);
                                            pstmt.setInt(2, procVarID);
                                            rs = pstmt.executeQuery();
                                            if(rs.next())        
                                                formExtId = rs.getInt("FormExtId");
                                            pstmt = con.prepareStatement("Insert into WFVariantFormListenerTable (ProcessDefId, ProcessVariantId, VariableId, VarFieldId, FormExtId, "
                                                            + "ActivityId, CodeSnippet, LanguageType, FieldListener, ObjectForListener, FunctionName) "
                                                            + "values (?,?,?,?,?,?,?,?,?,?,?)");
                                            pstmt.setInt(1,procDefId);
                                            pstmt.setInt(2,procVarID);
                                            pstmt.setInt(3,variableId);
                                            pstmt.setInt(4,varFieldId);
                                            pstmt.setInt(5,formExtId);
                                            pstmt.setInt(6,actId);
                                            WFSUtil.DB_SetString(7, codeSnippet,pstmt,dbType);
                                            WFSUtil.DB_SetString(8, language,pstmt,dbType);
                                            pstmt.setInt(9,fieldlistener);
                                            WFSUtil.DB_SetString(10, object,pstmt,dbType);
                                            WFSUtil.DB_SetString(11, function,pstmt,dbType);
                                            pstmt.execute();

                                            if(pstmt!=null){
                                                pstmt.close();
                                                pstmt = null;
                                            }
                                            break;
                                        }
                                        case 'D':{
                                            pstmt = con.prepareStatement("Delete from WFVariantFormListenerTable where ProcessVariantId = ? and ProcessDefId = ? and ActivityId = ?"
                                                    + " and VariableId = ? and VarFieldId = ?");
                                            pstmt.setInt(1, procVarID);
                                            pstmt.setInt(2, procDefId);
                                            pstmt.setInt(3, actId);
                                            pstmt.setInt(4, variableId);
                                            pstmt.setInt(5, varFieldId);
                                            pstmt.execute();

                                            if(pstmt!=null){
                                                pstmt.close();
                                                pstmt = null;
                                            }
                                            break;
                                        }
                                        case 'U':{
                                            updFormListenerBuf = new StringBuffer();
                                            updFormListenerBuf.append("Update WFVariantFormListenerTable set ");
                                            boolean langFalg = false;
                                            boolean codeSnippetFalg = false;
                                            boolean fieldListenerFlag = false;
                                            if(listenerMap.containsKey("language")){
                                                updFormListenerBuf.append(" languageType = ").append(WFSUtil.TO_STRING(language, true, dbType)).append(" ");
                                                langFalg = true;
                                            }
                                            if(listenerMap.containsKey("codeSnippet")){
                                                if(langFalg)
                                                    updFormListenerBuf.append(" ,");
                                                updFormListenerBuf.append(" codeSnippet = ").append(WFSUtil.TO_STRING(codeSnippet, true, dbType)).append(" ");
                                                codeSnippetFalg = true;
                                            }
                                            if(listenerMap.containsKey("fieldlistener")){
                                                if(langFalg || codeSnippetFalg)
                                                    updFormListenerBuf.append(" ,");
                                                updFormListenerBuf.append(" fieldlistener = ").append(fieldlistener).append(" ");
                                                fieldListenerFlag = true;
                                            }
                                            if(listenerMap.containsKey("functionName")){
                                                if(langFalg || codeSnippetFalg || fieldListenerFlag)
                                                    updFormListenerBuf.append(" ,");
                                                updFormListenerBuf.append(" functionName = ").append(WFSUtil.TO_STRING(function, true, dbType)).append(" ");
                                            }
                                            
                                            updFormListenerBuf.append(" where ProcessVariantId = ? and VariableId =? and VarFieldId = ? and activityId = ? and fieldlistener = ?");
                                            pstmt = con.prepareStatement(updFormListenerBuf.toString());
                                            pstmt.setInt(1, procVarID);
                                            pstmt.setInt(2, variableId);
                                            pstmt.setInt(3, varFieldId);
                                            pstmt.setInt(4, actId);
                                            pstmt.setInt(5, fieldlistener);
                                            pstmt.execute();

                                            if(pstmt!=null){
                                                pstmt.close();
                                                pstmt = null;
                                            }
                                            break;
                                        }
                                        default:  
                                            break;
                                    }
                                }	
                            }
                        }
                    }else{
                    //Will decide later
                    }
                    arrAuditList.add(new WFAdminLogValue(procVarID, label, 0, null, null, null, null, null, null, null, WFSConstant.WFL_ModifyVariant, procDefId, 0, null, userID, userName, 0, null, null));
                    
                    pstmt = con.prepareStatement("Update ProcessDefTable Set lastModifiedOn = " + WFSUtil.getDate(dbType) + " Where processDefId = ?");
                    pstmt.setInt(1, procDefId);
                    pstmt.execute();
                    pstmt.close();
//Bug 43415 - Added variable is not getting deleted during modifyVariant call 
                   if (mainCode == 0 || mainCode == 18)    {
                    if (!con.getAutoCommit()) {
                        con.commit();
                        con.setAutoCommit(true);
                    }
                   }
                }
                if (stmt != null) {
                    stmt.close();
                    stmt = null;
                }
            } else {
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            if (mainCode == 0) {
                WFSUtil.genAdminLogExt(con, engine, arrAuditList);
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFModifyProcessVariant"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append(gen.closeOutputFile("WFModifyProcessVariant"));
            }
        } catch (SQLException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WM_INVALID_STATE;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
                        + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (JTSException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
        } catch (Exception e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
            try {
                if (!con.getAutoCommit()) {
                    con.rollback();
                    con.setAutoCommit(true);
                }
                if (rs != null)
                    rs.close();
                if (pstmt != null) {
                    pstmt.close();
                    pstmt = null;
                }
            } catch (Exception e) {}
            
        }
        if (mainCode != 0) {
			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			return errorString;
        }
        return outputXML.toString();
    }
    
//----------------------------------------------------------------------------------------------------
//	Function Name 				:	WFGetTaskList
//	Date Written (DD/MM/YYYY)               :	10-04-2015
//	Author					:	Sajid Khan  
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:       none
//	Return Values				:	String (output xml)
//	Description				:       API to fetch the list of tasks associated with an activity with status.
//----------------------------------------------------------------------------------------------------
/************************************************************************************************************************
 * Algorithm:
o  Validate the session
o  Get the list of Tasks associated with the given activity from WFTaskDefTable and ActivityInterfaceAssocTable with Attribute, TaskName, TaskId and other fields.
    	Based on the above list execute the precondition for each task with the data, docs and Tasks associated with processinstanceid.
        • If Precondition is not met then return status as 0- Waiting for that task
        • If Precondition is met then return status as  1–Ready for that task.
        • If for the Processinstanceid  any entry is present in WFTaskStatusTable on the particular Acitiviy with status either Initiated or Completed, Return that with status 2(Inititated) or 3(Completed)  .
InputXML:
<WFGetTaskList_Input>
	<Option>WFGetTaskList</Option>
	<EngineName>abccabinet</EngineName>
	<SessionId>123414214</SessionId>
	<UserName>Maxwell</UserName>
	<ProcessDefId>1</ProcessDefId>	
	<ProcessInstanceId>abc-0001-case</ProcessInstanceId>
	<WorkItemId>1</WorkItemId>
	<ActivityId>3</ActivityId>
	<BatchInfo>
		<NoOfRecordsToFetch>10</NoOfRecordsToFetch>; Default value should be 10
		<SortOrder>A</SortOrder>; A – Asc(Default), D- Desc
		<OrderBy></OrderBy>; 1- DueDate(Default), 2- TaskName, 3 - ProcessInstancId
		<LastValue></LastValue>
	</BatchInfo>
</WFGetTaskList_Input>
OutputXML :-
<WFGetTaskList_Output>
	<Option>WFGetTaskList</Option>
	<Exception>
		<MainCode>0</MainCode>
	</Exception>
	<TaskList>
		<TaskInfo>
			<TaskName>Task_name02</TaskName>
			<TaskId>02</TaskId>
			<Status>2</Status>;0-Waiting,1-Ready,2-Initiated,3-Complete
			<ProcessInstanceId>abc-0001-case</ProcessInstanceId>
			<AssignedTo>John</AssignedTo>
			<DueDate>2015-04-10 12:30:00</DueDate>
			<AssignedOn>2015-04-10 09:30:00</AssignedOn>
			<TaskType>4</TaskType>		
			<IsMandatory><IsMandatory>--Y or N
                        <IsRepeatable>Y</IsRepeatable>
                        <SubTaskId>1</SubTaskId>
		</TaskInfo>
                <TaskInfo>
			<TaskName>Task_name03</TaskName>
			<TaskId>03</TaskId>
			<Status>0</Status>;0-Waiting,1-Ready,2-Initiated,3-Complete
			<ProcessInstanceId>abc-0001-case</ProcessInstanceId>
			<AssignedTo></AssignedTo>
			<DueDate></DueDate>
			<AssignedOn></AssignedOn>
			<TaskType>2</TaskType>		
			<IsMandatory><IsMandatory>--Y or N
                        <IsRepeatable>Y</IsRepeatable>
                        <SubTaskId>0</SubTaskId>
		</TaskInfo>
	</TaskList>
</WFGetTaskList_Output>
********************************************************************************************************************/
public String WFGetTaskList(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
        StringBuilder outputXML = new StringBuilder();
        PreparedStatement pstmt = null;
        PreparedStatement pstmt1 = null; 
        Statement stmt = null;
        ResultSet rs = null;
        ResultSet rs1 = null;
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        String engine = parser.getValueOf("EngineName");
    	String option = parser.getValueOf("Option", "", false);
        String checkPreCondition="N";
        /*Task Property Maps*/
        HashMap<Integer,Integer> defaultStatusMap=new HashMap<Integer,Integer> ();
		HashMap<Integer,String> allowReassignmentMap=new HashMap<Integer,String>();
		HashMap<Integer,String> allowDeclineMap=new HashMap<Integer,String>();
		HashMap<Integer,String> approvalRequiredMap=new HashMap<Integer,String>();
		/*Date systemDate=null;
		Date validTill=null;
		*/
		//Changing date to Timestamp since the date is not capturing the time part.
		Timestamp systemDate=null;
		Timestamp validTill=null;
		String expiredFlag="";
		String escalatedFlag="";
		String approvalSentBy="";
		String reworkFlag="";
		try {
                int sessionID = parser.getIntOf("SessionId", 0, false);
                boolean noMoreFlag = false;
                int noOfRectoFetch = parser.getIntOf("NoOfRecordsToFetch",ServerProperty.getReference().getBatchSize(), true);
                if(noOfRectoFetch > ServerProperty.getReference().getBatchSize() || noOfRectoFetch <= 0) {
                    noOfRectoFetch = ServerProperty.getReference().getBatchSize(); 
                 }
                WFSUtil.printOut(engine,"[WMProcessDefinition:WFGetTaskList] WFGetTaskList executing for : " + parser);
                int processDefId = parser.getIntOf("ProcessDefId", 0, false);
                int activityId = parser.getIntOf("ActivityId",0,false);
                int wId = parser.getIntOf("WorkItemId", 0, false);
                String pId = parser.getValueOf("ProcessInstanceId","",false);
                char sortOrder = parser.getCharOf("SortOrder", 'A', true);
                int orderBy = parser.getIntOf("OrderBy", 1, true);
                String ordStr = "DueDate";
                String lastValue = parser.getValueOf("LastValue", "", true);
                ArrayList taskForPreChkList = new ArrayList();
                StringBuffer taskPreChkList=new StringBuffer();
                LinkedHashMap taskDataMap = new LinkedHashMap();
                HashMap taskStatusMap = new HashMap();
                HashMap<Integer,HashMap<Integer,Boolean>> tempTaskStatusMap = new HashMap<Integer,HashMap<Integer,Boolean>>();//Map holds for each task the result of each pre-condition on that task
                StringBuffer tempXml = new StringBuffer(500);
                String qryStr = null;
      			String qryStr1 = "";
      			String qryStr2 = "";
                int taskId = 0;
                String taskName = "";
                String taskStatus ="0";
                String isRepeatable = "";
                String isMandatory = "";
                String taskIsMandatoryList="";
                String actionDate = "";
                String assgnTo = "";
                String assgnBy = "";
                int days = 0;
                int hrs = 0;
                int mins = 0;
                String attribute = "";
      			String comments = "";
                String dueDate = null;
                int taskType = 0;
                int timeInMins = 0;
                int subTaskId = 0;
                String scope = "P";
                String createdBy = null;
                String tatInMins = null;
                int defaultTaskStatus=1;
                int dbType = ServerProperty.getReference().getDBType(engine);
                String instructions="";
                int tat=0;
                int priority=0;
                                
                String taskMode="";
                WFParticipant user = WFSUtil.WFCheckSession(con, sessionID); 

                
    			Map<Integer, Map<String, String>> taskUserMap = new HashMap<Integer, Map<String, String>>();

                if (user != null) {
                    int userId = user.getid();
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    Date convertedDate = null;
                    String operator1 = "";
                    String srtby = "";
                    String orderbyStr = "";
                    String lastValueStr = "";
                    String conditionStr = "";
                    ordStr = " a.TaskName ";
                    boolean isCaseWorker = WFSUtil.isUserCaseWorker(con, dbType, processDefId, pId, wId, activityId, userId, user.getname());//Changes  for Bug 58149 - my cases is not getting refreshed when task is revoked from case worker
                    if(!isCaseWorker){
                            mainCode = WFSError.WF_NO_AUTHORIZATION_ON_CASE;
                            subCode = 0;
                            subject = WFSErrorMsg.getMessage(mainCode);
                            descr = WFSErrorMsg.getMessage(mainCode);
                            errType = WFSError.WF_TMP;
                    }
                    switch(sortOrder){
                        case 'A':
                            operator1 = ">";
                            srtby = " ASC";

                            break;
                        case 'D':
                            operator1 = "<";
                            srtby = " DESC";
                            break;
                    }
                    orderbyStr = " Order By "+ordStr+" "+srtby;
                    if(!lastValue.equals("")){
                        lastValueStr = " And UPPER(a.TaskName) "+operator1+"UPPER("+WFSUtil.TO_STRING(lastValue,true,dbType)+")";
                    }
                    conditionStr = lastValueStr + orderbyStr;
                    /* Changes for the default task user */
        			stmt = con.createStatement();
        			//Selecting only those entries which have valid default users.
        			rs = stmt.executeQuery("select D.TaskId, D.UserId, V.UserName, V.PersonalName from wfDefaultTaskUser D, wfuserview V where "
        					+ " D.processdefid="+ processDefId +" and D.activityId= "+ activityId + " and D.userId > 0 and D.userId = V.userIndex"
        					+ " and D.CaseManagerId = " + WFSUtil.TO_SANITIZE_STRING(Integer.toString(user.getid()), false));
        			while(rs.next()){
        				int defaultTaskId = rs.getInt("TaskId");
        				int defaultUserId = rs.getInt("UserId");
        				String defaultUserName = rs.getString("UserName");
        				String personalName = rs.getString("PersonalName");
        				Map defaultUserMap = new HashMap<String, String>();
        				defaultUserMap.put("UserName", defaultUserName);
        				defaultUserMap.put("PersonalName", personalName);
        				defaultUserMap.put("UserId", Integer.toString(defaultUserId));
        				taskUserMap.put(defaultTaskId, defaultUserMap);
        			}
        			if (rs != null) {
        				rs.close();
        				rs = null;
        			}
        			if (stmt != null) {
        				stmt.close();
        				stmt = null;
        			}
        			/* Changes for the default task user */
                    /*Get the list of tasks associated with the given activity*/
                    
        			String query1 = "SELECT checkPreCondition from WFTaskPreCheckTable "
							+ WFSUtil.getTableLockHintStr(dbType)
							+ " where ProcessInstanceId=? and WorkItemId=? and ActivityId=? ";
					 pstmt = con.prepareStatement(query1);
					pstmt.setString(1, pId);
					pstmt.setInt(2, wId);
					pstmt.setInt(3, activityId);
					rs = pstmt.executeQuery();
					if (rs.next()) {
						checkPreCondition = rs.getString("checkPreCondition");
					} 
				      if (rs != null) {
							rs.close();
							rs = null;
						}
						if (pstmt != null) {
							pstmt.close();
							pstmt = null;
						}
						String autoInitateConditionStr=" 1=1 ";
						if("A".equalsIgnoreCase(checkPreCondition)){
							autoInitateConditionStr = " a.TaskType=2 ";
						}
						
                    //Changes in Bug for Bug 57360
                       qryStr = "Select * from (Select "+ WFSUtil.getFetchPrefixStr(dbType, noOfRectoFetch+1)+"  a.TaskId, a.TaskName, a.IsRepeatable,a.TaskType,"
                               + "b.TaskStatus, b.ActionDateTime, b.AssignedBy,b.AssignedTo,"
                               + "c.WFDays,c.WFHours,c.WFMinutes,d.Attribute,b.DueDate,b.SubTaskId,a.Scope,a.createdBy,e.attribute as RTAttribute,Instructions,TurnAroundTime,b.priority,a.TaskMode,b.validTill,"+WFSUtil.getDate(dbType)+" SystemDBDate,b.EscalatedFlag,b.ApprovalSentBy from WFTaskDefTable a Left Outer Join  "
                               + "(Select Taskid, SubTaskId, TaskStatus, AssignedBy,AssignedTo, Actiondatetime, DueDate,ProcessDefId,ProcessInstanceId,Priority,ValidTill,EscalatedFlag,ApprovalSentBy  "
                               + "From WFTaskStatusTable sub Inner Join (select MAX(SubTaskId) as  staskId, TaskId as tid from WFTaskStatusTable b"
                               + " Where ProcessDefId = ? And ProcessInstanceId = ? and WorkItemId = ? and ActivityId = ? GROUP BY taskid) main on sub.taskid=main.tid and sub.subtaskid=main.staskId and ProcessDefId = ? and "
                               + "ProcessInstanceId = ? and WorkItemId = ? and ActivityId = ? ) b  on a.ProcessDefId = b.ProcessDefId and a.TaskId = b.TaskId  Left outer join WFDurationTable c "
                               + "on c.ProcessDefId = a.ProcessDefId and c.DurationId = a.TurnAroundTime Left Outer Join ACTIVITYINTERFACEASSOCTABLE d"
                               + " on d.ProcessDefId = a.ProcessDefId and d.InterfaceElementId = a.TaskId and d.InterfaceType = 'J' And d.ActivityId = ?  and "
                               + " d.ProcessDefId = ? Left outer join RTActivityInterfaceAssocTable e on e.ProcessDefId = a.ProcessDefId and e.InterfaceElementId = "
                               + " a.TaskId and e.InterfaceType = 'J' and  e.activityId = ? and e.ProcessDefId = ? and e.ProcessInstanceId= ? and e.WorkItemId = ? where "
                               + "((d.ProcessDefId = ? and d.ActivityId = ?) OR (e.ProcessDefId = ? and e.ActivityId = ?)) and "+ autoInitateConditionStr+" "+conditionStr+")abc "+WFSUtil.getFetchSuffixStr(dbType, noOfRectoFetch + 1, WFSConstant.QUERY_STR_WHERE);
                       pstmt = con.prepareStatement(qryStr);
                       pstmt.setInt(1,processDefId);
                       WFSUtil.DB_SetString(2, pId, pstmt, dbType);
                       pstmt.setInt(3,wId );
                       pstmt.setInt(4,activityId);
                       
                       pstmt.setInt(5,processDefId);
                       WFSUtil.DB_SetString(6, pId, pstmt, dbType);
                       pstmt.setInt(7,wId );
                       pstmt.setInt(8,activityId);
                       pstmt.setInt(9,activityId);
                       pstmt.setInt(10,processDefId);
                       pstmt.setInt(11,activityId);
                       pstmt.setInt(12,processDefId);
                       WFSUtil.DB_SetString(13, pId, pstmt, dbType);
                       pstmt.setInt(14,wId );
                       pstmt.setInt(15,processDefId);
                       pstmt.setInt(16,activityId);
                       pstmt.setInt(17,processDefId);
                       pstmt.setInt(18,activityId);
                       rs= pstmt.executeQuery();   
                       int i = 0;
                       int tot = 0;
                       while(rs.next()){
                    	   comments = null;
                           if(i<noOfRectoFetch){
                                isMandatory = "N";
                                tatInMins = null;
                                taskId = rs.getInt(1);
                                taskName = rs.getString(2);
                                isRepeatable = rs.getString(3);
                                taskType = rs.getInt(4);
                                taskStatus = rs.getString(5);
                                actionDate = rs.getString(6);
                                assgnBy = rs.getString(7);
                                assgnTo = rs.getString(8);
                                days = rs.getInt(9);
                                hrs = rs.getInt(10);
                                mins = rs.getInt(11);
                                //attribute = rs.getString(12);
                                dueDate = rs.getString(13);
                                subTaskId = rs.getInt(14);
                                scope = rs.getString(15);
                                createdBy = rs.getString(16);
                                if(scope.equalsIgnoreCase("U")){
                                    attribute = rs.getString(17);//e.Attribute
                                }else{
                                    attribute = rs.getString(12);//d.attribute
                                }
                                instructions=rs.getString(18);
                                tat=rs.getInt(19);
                                priority = rs.getInt(20);
                                taskMode = rs.getString(21);
                                validTill=rs.getTimestamp(22);
                                systemDate=rs.getTimestamp(23);
                                escalatedFlag=rs.getString(24);
                                approvalSentBy=rs.getString(25);
                                Timestamp dueDateTask=rs.getTimestamp(13);
                                //Commenting for Bug 58094 - adhoc task added by casemanager is not visible in task list of caseworker and vice-versa
                                /*if(scope.equalsIgnoreCase("U") && !user.getname().equalsIgnoreCase(createdBy)){
                                 It means only those tasks of Scope U  to be shown in the list for a logged in user if he/she is the one who has 
                                  created that task at run time at that particular activity.
                                     
                                }else{*/
                            //Check whter the value of attribute returned from above query contains M ,means it is mandatory.
                                if(attribute !=null ){
                                  if(attribute.contains("M")){
                                      isMandatory = "Y";
                                  }
                                }
                                taskIsMandatoryList=taskIsMandatoryList+isMandatory+",";
                            //Tasks eligible for PreCondition check are those which is never intiated[TaskStatus = 2] or completed[TaskStatus = 3] or revoked[TaskStatus = 4].
                            //Tasks whose status is null and which is not completed before[SubTaskId = 0] on the same activity
                            //for the same ProcessInstance, send them for precheck
                               if(taskStatus == null && subTaskId ==0  ){
                                   taskForPreChkList.add(taskId);
                                   } else{
                                   taskStatusMap.put(taskId,taskStatus);
                               }
                               taskPreChkList.append(taskId).append(",");//Added for capturing current status of every Task(Used only for 1st time while inserting in WFTaskPreConditionResultTable)
                               
                            //Calculate the due date for tasks whose due date is null from the data retuend from WFDurationTable with days, hours and minutes.
                                if(days>=0){
                                    timeInMins = days*24*60;
                                 }
                                if(hrs>=0){
                                    timeInMins =timeInMins + hrs*60;
                                }
                                if(mins>=0){
                                    timeInMins = timeInMins + mins;
                                }
                                if(timeInMins!=0){
                                   tatInMins = String.valueOf(timeInMins);
                                }
                               
                                if(dueDate!=null){

                                    convertedDate =  dateFormat.parse(dueDate);
                                    dueDate = dateFormat.format(convertedDate);
                                }

                                if(actionDate!=null){
                                   convertedDate =  dateFormat.parse(actionDate);
                                   actionDate = dateFormat.format(convertedDate);
                                }
					            if (taskStatus != null && Integer.parseInt(taskStatus) == WFSConstant.WF_TaskDeclined) {
					              qryStr1 = "select comments from WFCOMMENTSTABLE where processdefid = ? and processinstanceid = ? and workitemid = ? and activityid = ? and taskid = ? and subtaskid = ? and CommentsType = ?";
					              pstmt1 = con.prepareStatement(qryStr1);
					              pstmt1.setInt(1, processDefId);
					              WFSUtil.DB_SetString(2, pId, pstmt1, dbType);
					              pstmt1.setInt(3, wId);
					              pstmt1.setInt(4, activityId);
					              pstmt1.setInt(5, taskId);
					              pstmt1.setInt(6, subTaskId);
					              pstmt1.setInt(7, WFSConstant.CONST_COMMENTS_DECLINE);
					              rs1 = pstmt1.executeQuery();
					              if (rs1.next()) {
					                comments = rs1.getString(1);
					              }
					              if (pstmt1 != null) {
					                pstmt1.close();
					                pstmt1 = null;
					              }
					              if (rs1 != null) {
					                rs1.close();
					                rs1 = null;
					              }
					            }
							if (taskStatus != null && Integer.parseInt(taskStatus) == WFSConstant.WFL_TaskReassigned) {
								qryStr1 = " select Comments from WFCOMMENTSTABLE where processdefid = ? and processinstanceid = ? "
										+ " and workitemid = ? and activityid = ? and taskid = ? and subtaskid = ? "
										+ " and CommentsType = ? ORDER BY CommentsId DESC";
								pstmt1 = con.prepareStatement(qryStr1);
								pstmt1.setInt(1, processDefId);
								WFSUtil.DB_SetString(2, pId, pstmt1, dbType);
								pstmt1.setInt(3, wId);
								pstmt1.setInt(4, activityId);
								pstmt1.setInt(5, taskId);
								pstmt1.setInt(6, subTaskId);
								pstmt1.setInt(7, WFSConstant.CONST_COMMENTS_REASSIGN);
								rs1 = pstmt1.executeQuery();
								if (rs1.next()) {
									comments = rs1.getString(1);
								}
								if (pstmt1 != null) {
									pstmt1.close();
									pstmt1 = null;
								}
								if (rs1 != null) {
									rs1.close(); 
									rs1 = null;
								}
							}
							//expiredFlag changes
							if(validTill==null ){
								expiredFlag="N";
							}
							else{
								expiredFlag=( Integer.parseInt(taskStatus) == WFSConstant.WF_TaskInitiated && systemDate.compareTo(validTill) > 0 ) ? "Y" : "N";
							}
							String delayedFlag="N";
							if(dueDateTask==null){
								delayedFlag="N";
							}
							else{
								delayedFlag=systemDate.compareTo(dueDateTask)<0?"N":"Y";
							}
							if(escalatedFlag==null){
								escalatedFlag="N";
							}
							if(approvalSentBy!=null && String.valueOf(WFSConstant.WF_TaskInitiated).equals(taskStatus)){
								reworkFlag="Y";
							}
							else{
								reworkFlag="N";
							}
							//Adding for Tool Tip description
							String waitingDescription="";
							qryStr1 = "select MandatoryText from WFTaskPropertyTable where processdefid = ? and  activityid = ? and taskid = ? ";
				              pstmt1 = con.prepareStatement(qryStr1);
				              pstmt1.setInt(1, processDefId);
				              pstmt1.setInt(2, activityId);
				              pstmt1.setInt(3, taskId);
				              rs1 = pstmt1.executeQuery();
				              if (rs1.next()) {
				            	  waitingDescription = rs1.getString(1);
				              }
				              if (pstmt1 != null) {
				                pstmt1.close();
				                pstmt1 = null;
				              }
				              if (rs1 != null) {
				                rs1.close();
				                rs1 = null;
				              }
                     

							Map<String, String> defaultUserMap = taskUserMap.get(taskId);
							int defUserId = 0;
							String defUserName = null;
							String defPersonalName = null;
							if(defaultUserMap != null && !defaultUserMap.isEmpty()){
								String defUserIdStr = (String)defaultUserMap.get("UserId");
								defUserId = (defUserIdStr != null && !defUserIdStr.isEmpty())?Integer.parseInt(defUserIdStr):0;
								if(defUserId > 0){
									defUserName = (String)defaultUserMap.get("UserName");
									defPersonalName = (String)defaultUserMap.get("PersonalName");
								}
							}
							//Put the task information in a map with key as TaskId and value as Task Data.

                            taskDataMap.put(taskId,new WFTaskInfoClass(taskId,subTaskId, taskName, isRepeatable, taskType,actionDate,assgnBy,assgnTo,isMandatory , dueDate,tatInMins, comments,instructions,tat,priority,defUserId, defUserName, defPersonalName, scope,taskMode,expiredFlag,escalatedFlag,reworkFlag,waitingDescription,delayedFlag));

                            noMoreFlag = true;  
                            i++;
                            //End of Scope U check 

                          }
                           tot++;
                       }
                       if (taskPreChkList.length()>0) {
						/*Change-tempTaskStatusMap contains any condition that is false so for that task Mandatory/Optional should be taken from WFTaskPreConditionResultTable*/
						String newTaskIsMandatoryList = getUpdatedList(con,
								taskIsMandatoryList, taskPreChkList, pId, wId,
								activityId,dbType);
						if (!newTaskIsMandatoryList.equals(taskIsMandatoryList)) {
							StringTokenizer strToken = new StringTokenizer(
									newTaskIsMandatoryList, ",");
							StringTokenizer taskKeyToken=new StringTokenizer(taskPreChkList.toString(),",");
							while (strToken.hasMoreElements() && taskKeyToken.hasMoreElements()) {
								WFTaskInfoClass obj = (WFTaskInfoClass) taskDataMap.get(Integer.parseInt(taskKeyToken.nextToken()));
								obj.isMandatory = strToken.nextToken();

							}
						}
						checkPreCondition=checkPreCondition(con,pId,wId,activityId,taskPreChkList.toString(),processDefId,taskIsMandatoryList,dbType);
						WFSUtil.printOut(engine,"[WMProcessDefinition:WFGetTaskList] WFGetTaskList - checkPreCondition : " + checkPreCondition);
						WFSUtil.updateTaskPropertyMap(con,processDefId,activityId,taskPreChkList.toString(),pId,dbType,defaultStatusMap,allowReassignmentMap,allowDeclineMap,approvalRequiredMap);
						
					}
					/*Change-tempTaskStatusMap ends*/
            //Check whether the precodition is met or not, If pre condition is met then 
            //status = 1(ready) else 0 (waiting)  
                       //Precondition is only checked if there is atelast one task eligible for PreConditionCheck.
                       HashMap<Integer,HashMap<Integer,ArrayList<Integer>>> taskRuleMap=null;//This map contains list of Operation for each pre-condition on a task
                       ArrayList<Integer> tempRuleList=null;
                       ArrayList<Integer> tempOperationList=null;
                       HashMap<String,String> managerMap=WFSUtil.getCaseManager(con,dbType,pId,wId);
                       String caseManager=managerMap.get("CaseManager");
                       String activityName=managerMap.get("ActivityName");
                       String processName=managerMap.get("ProcessName");
                       boolean isCaseManagerPresent=((caseManager==null)||(caseManager.length()==0))?false:true;
                       WFSUtil.printOut(engine,"[WMProcessDefinition:WFGetTaskList] WFGetTaskList - checkPreCondition : " + taskForPreChkList.toString());
                       //checkPreCondition is a flag which tells where any variable or task associated with pre-condition has changed.If changed,it is true else false
                       if((!taskForPreChkList.isEmpty() && isCaseManagerPresent && "Y".equalsIgnoreCase(checkPreCondition))||(!taskForPreChkList.isEmpty() && "E".equalsIgnoreCase(checkPreCondition)) ||(!taskForPreChkList.isEmpty() && "A".equalsIgnoreCase(checkPreCondition))){
                            
                    	   taskRuleMap=WFRoutingUtil.getTaskRuleMap(processDefId,activityId,con,taskForPreChkList,checkPreCondition,dbType);
                        	   tempTaskStatusMap = WFRoutingUtil.checkPrecondition(pId,wId,processDefId,activityId,con,dbType,engine,sessionID,userId, false,gen,taskForPreChkList,taskRuleMap) ;
                           }
                       else{
                    	   if(taskPreChkList.length()>0){
                    		 //Gets staus of task in case pre-condition is not calculated 
                    		   taskPreChkList.deleteCharAt(taskPreChkList.length()-1);
                    		   String query="SELECT Ready,Mandatory,taskId from WFTaskPreConditionResultTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessInstanceId=? and WorkItemId=? and ActivityId=? and TaskId in ("+taskPreChkList.toString()+")";
                    		   pstmt=con.prepareStatement(query);
                    		   pstmt.setString(1, pId);
                    		   pstmt.setInt(2, wId);
                    		   pstmt.setInt(3, activityId);
                    		   ResultSet rsSet=pstmt.executeQuery();
                    		   /*WFTaskPreConditionResultTable has ready and mandatory status of Task which is eligible for Pre-condtion.
                    		    * For task which is already initiated/completed respective values are taken from taskStatusMap-populated above */
                    		   while(rsSet.next()){
                    			   WFTaskInfoClass obj=(WFTaskInfoClass)taskDataMap.get(rsSet.getInt("taskId"));
                    			   obj.isMandatory=rsSet.getString("Mandatory");
                    			  if(!taskForPreChkList.isEmpty() && taskForPreChkList.contains(rsSet.getInt("taskId"))){
                    			   taskStatusMap.put(rsSet.getInt("taskId"), rsSet.getInt("Ready"));//Only for task which is not initiated and complete
                    			  }
                    		   }
                    		   if(rsSet!=null)
                    			   rsSet.close();
                    	   }
                    	   
                       }
                       
                       String assignedTo="";
                       String updateFieldName="";
                       String updateFieldValue="";
                       boolean updateFieldFlag=false;
                    
                           if(tempTaskStatusMap!=null && tempTaskStatusMap.size()>0){
                               Set<Integer> keys = tempTaskStatusMap.keySet();
                               for(Integer key:keys){//key is nothing but taskid
                            	   defaultTaskStatus=(defaultStatusMap.get(key)==null)?((WFTaskInfoClass)taskDataMap.get(key)).defaultStatus:defaultStatusMap.get(key);//Taking defaultStatus from object 
                            	   taskStatusMap.put(key,defaultTaskStatus);//By default Ready
                            	   defaultTaskStatus=1;
                            	   tempRuleList=new ArrayList<Integer>();
                            	   tempRuleList=getTrueRuleListforTask(tempTaskStatusMap,key);
                            	   for(int counter=1;counter<=tempRuleList.size();counter++){
                            		   tempOperationList=new ArrayList<Integer>(); 
                            		  tempOperationList=getOperationListforRule(taskRuleMap,tempRuleList.get(counter-1), key);
                            		  for(int innerCounter=1;innerCounter<=tempOperationList.size();innerCounter++){ 
                            			  int operationType=tempOperationList.get(innerCounter-1);
                            			  if(operationType==WFSConstant.TASK_WAITING_TO_READY){
                            				  taskStatusMap.put(key,1);
                            				  updateFieldName="Ready";
                            				  updateFieldValue="1";
                            				  updatePreConditionResultTable(con,updateFieldName,updateFieldValue,pId,wId,processDefId,activityId,key);
                            			  }
                            			  else if(operationType==WFSConstant.TASK_OPTIONAL_TO_MANDATORY){
                            				  WFTaskInfoClass obj=(WFTaskInfoClass)taskDataMap.get(key);
                            				  obj.isMandatory="Y";
                            				  updateFieldName="Mandatory";
                            				  updateFieldValue="Y";
                            				  updatePreConditionResultTable(con,updateFieldName,updateFieldValue,pId,wId,processDefId,activityId,key);
                            			  }
                            			  else if(operationType==WFSConstant.TASK_MANDATORY_TO_OPTIONAL){
                            				  WFTaskInfoClass obj=(WFTaskInfoClass)taskDataMap.get(key);
                            				  obj.isMandatory="N";
                            				  updateFieldName="Mandatory";
                            				  updateFieldValue="N";
                            				  updatePreConditionResultTable(con,updateFieldName,updateFieldValue,pId,wId,processDefId,activityId,key);
                            				}
                            			  else if(operationType==WFSConstant.TASK_INITIATE_ASSIGN){
                            				  //initiate task
                            				  WFTaskInfoClass obj=(WFTaskInfoClass)taskDataMap.get(key);
                        					  String caseManagerIdArray[]=new String[2];
                            				  int ruleId=tempRuleList.get(counter-1);
                            				  caseManagerIdArray=WFSUtil.getIdForName(con, dbType,caseManager, "U");
                            				  int caseManagerId=(caseManagerIdArray ==null || caseManagerIdArray[1]==null||caseManagerIdArray[1].length()==0)?0:Integer.parseInt(caseManagerIdArray[1]);//[0]=UserIndex;[1]->actual value
                            				  if(obj.taskMode!=null && (obj.taskMode.equals(WFSConstant.TASK_SUB_ASYNCHRONOUS)||(obj.taskMode.equals(WFSConstant.TASK_SUB_SYNCHRONOUS)))){
                            					  assignedTo="System";
                    						  }
                            				  else{
                            					  assignedTo= WFSUtil.getTaskAssignedTo(con,processDefId,pId,wId,activityId,key,dbType,engine,sessionID,userId,operationType,subTaskId,taskType,taskDataMap,ruleId,caseManagerId);
                            				  }
                            				  WFSUtil.printOut(engine,"[WMProcessDefinition:WFGetTaskList:AutoInitiate] assignedTo = " + assignedTo);
                            				  mainCode=WFSUtil.isUserValid(con,assignedTo,obj.taskMode);
												String urn = null;
												pstmt = con.prepareStatement("select  URN from WFINSTRUMENTTABLE " + WFSUtil.getTableLockHintStr(dbType)+ "where processinstanceid =?  and workitemid = ? ");
												WFSUtil.DB_SetString(1, pId, pstmt, dbType);
												pstmt.setInt(2, wId);
												pstmt.execute();
												rs = pstmt.getResultSet();
												if (rs.next()) {
													urn = rs.getString("URN");
												}
												if (pstmt != null) {
													pstmt.close();
													pstmt = null;
												}
												if (rs != null) {
													rs.close();
													rs = null;
												}
                            				  if(mainCode==0){
                            					   //Add WFInitiateTaskCall here
                            					  Map<String,Integer> dateTimeMap=WFSUtil.getDateTimeMapFromDuration(con, processDefId, ((WFTaskInfoClass)taskDataMap.get(key)).TurnAroundTime, subTaskId, pId, wId, activityId, dbType, engine);
                            					  Date DueDate=getDueDateFromDateTimeMap(dateTimeMap);
                            					  String strDate= dateFormat.format(DueDate);
                            					  String webServerAdd=parser.getValueOf("WebServerAddress","http://127.0.0.1:8080",true);
                            					  String oapWebServerAdd=parser.getValueOf("OAPWebServerAddress","http://127.0.0.1:8080",true);
                            					  String allowDecline=allowDeclineMap.get(key)==null?obj.allowDecline:allowDeclineMap.get(key);
                            					  String allowReassignment=allowReassignmentMap.get(key)==null?obj.allowReassignment:allowReassignmentMap.get(key);
                            					  String approvalRequired=approvalRequiredMap.get(key)==null?obj.approvalRequired:approvalRequiredMap.get(key);
                            					  String interfaceXml =WFGetTaskPropertyAssociationForAutoInitiateTask(con,processDefId,pId,wId,activityId,key,dbType,engine,sessionID,userId,operationType,subTaskId,taskType,taskDataMap,gen);
                            					  String taskDataXml=(String)WFSUtil.getTaskData(con, processDefId, pId, wId, activityId, key, subTaskId, dbType, engine, sessionID);
                            					  String xml=CreateXML.WFInitiateTask(engine, sessionID, webServerAdd, oapWebServerAdd, activityId, wId, processDefId, pId, key, strDate, assignedTo, interfaceXml, taskDataXml, ((WFTaskInfoClass)taskDataMap.get(key)).instructions,"Y",obj.taskType,obj.taskMode,allowDecline,allowReassignment,approvalRequired);
                            					  XMLParser xmlParser=new XMLParser();
                            					  xmlParser.setInputXML(xml);                            					  
                            					  WFSUtil.printOut(engine,"[WMProcessDefinition:WFGetTaskList:AutoInitiate] WFInitiateTaskXML input = " + xml);
                            					  String output=WFInitiateTask(con,xmlParser,gen);
                            					  /*This check is to handle the cases when multiple calls of InitiateTask are getting initiated*/
                            					  if(output != null){
	                            					  WFSUtil.printOut(engine,"[WMProcessDefinition:WFGetTaskList:AutoInitiate] WFInitiateTaskXML output = " + output);
	                            					  xmlParser=new XMLParser();
	                            					  xmlParser.setInputXML(output);
	                            					  mainCode=xmlParser.getIntOf("MainCode", 1, false);
	                            					  if(mainCode!=0){
	                            						  int webServerPort=0;
	                                      				  HashMap<String,String> mapForTaskAttributes = new HashMap<String, String>();
	    	                                  		       webServerAdd=parser.getValueOf("WebServerAddress","http://127.0.0.1:8080",true);
	                              					       oapWebServerAdd=parser.getValueOf("OAPWebServerAddress","http://127.0.0.1:8080",true);
	                              					       strDate  = WFSUtil.dbDateTime(con, dbType);
	                              					      mapForTaskAttributes.put("RouteName",processName);
	                              					      mapForTaskAttributes.put("ActivityName",activityName);
	    	                                  		      mapForTaskAttributes.put("ProcessInstanceId", pId);
	    	                                  		      mapForTaskAttributes.put("WorkItemId", String.valueOf(wId));
	    	                                  		      if(urn!=null&&!urn.equalsIgnoreCase("")){
	    	                                  		    	  mapForTaskAttributes.put("URN", String.valueOf(urn));
	    	                                  		      }else{
	    	                                  		    	  mapForTaskAttributes.put("URN", pId);
	    	                                  		      }
	    	                                  		      
	    	                                  		      mapForTaskAttributes.put("DueDate",dueDate);
	    	                                  		      mapForTaskAttributes.put("InitiatedOn",strDate);
	    	                                  		      mapForTaskAttributes.put("AssignedTo", assgnTo);
	    	                                  		      mapForTaskAttributes.put("EngineName", engine);
	    	                                  		      mapForTaskAttributes.put("TaskId",String.valueOf(taskId));
	    	                                  			  mapForTaskAttributes.put("OAPWebServerAddress", oapWebServerAdd);
	    	                                  			  mapForTaskAttributes.put("Reason","System Error");
	    	                                  			mapForTaskAttributes.put("MailSubject", "Auto-Initiation of Task- "+taskName+ "("+pId+") Failed");
	    	                                  			
	    		                                  		      if(webServerAdd==null){
	    		                                  		    	webServerAdd = "127.0.0.1";
	    		                                  		          webServerPort = 8080;
	    		                                  		   
	    		                                  		      } 
	    		                                  		    mapForTaskAttributes.put("WebServerAddress",webServerAdd);
	    		                                		      mapForTaskAttributes.put("WebServerPort",String.valueOf(webServerPort));
	    		                                		      mapForTaskAttributes.put("TaskName",taskName);
	    		                                		      mapForTaskAttributes.put("ActivityType",String.valueOf(32));
	    		                                  		      String userEmail="";
	    		                                  		    String strQry = "Select MailId From wfuserview Where UserName  = ? ";
	    		                                            pstmt = con.prepareStatement(strQry);
	    		                                            WFSUtil.DB_SetString(1, caseManager, pstmt, dbType);
	    		                                            rs = pstmt.executeQuery();
	    		                                            if(rs.next()){
	    		                                                userEmail = rs.getString(1);
	    		                                            }
	    		                                            if(userEmail != null && !("".equals(userEmail))){
	    		                                            	HashMap<String, String> mailStringAttributes = new HashMap<String, String>(); 
	    		    											HashMap<String, Integer> mailIntAttributes = new HashMap<String, Integer>();
	    		    											mailStringAttributes.put("CabinetName", engine);
	    		    											mailStringAttributes.put("MailTo", userEmail);
	    		    											mailStringAttributes.put("MailCC", null);
	    		    											mailStringAttributes.put("MailAttachmentIndex", null);
	    		    											mailStringAttributes.put("MailAttachmentNames", null);
	    		    											mailStringAttributes.put("MailStatus", "N");
	    		    											mailStringAttributes.put("MailStatusComments", null);
	    		    											mailStringAttributes.put("MailInsertedBy", null);
	    		    											mailStringAttributes.put("MailActionType", "TaskNotification");
	    		    											mailStringAttributes.put("MailAttachmentExtensions", null);
	    		    											mailStringAttributes.put("PropertyName", "AutoInitiateTask");
	    		    											mailStringAttributes.put("ProcessInstanceId", pId);
	    		    											mailIntAttributes.put("MailPriority", 1);
	    		    											mailIntAttributes.put("ProcessDefID", processDefId);
	    		    											mailIntAttributes.put("WorkItemId", wId);
	    		    											mailIntAttributes.put("ActivityId", activityId);
	    		    											mailIntAttributes.put("DbType", dbType);
	    		    											mailIntAttributes.put("NoOfTrials", 0);
	    		    											EmailTemplateUtil.addTaskToMailQueue(con, mapForTaskAttributes, mailIntAttributes, mailStringAttributes);
	    		                                            }
	    		                                            if(pstmt!= null){
	    		                                                pstmt.close();
	    		                                                pstmt = null;
	    		                                            }
	    		                                            if(rs!= null){
	    		                                                rs.close();
	    		                                                rs = null;
	    		                                            }
	    		                                          WFSUtil.updateWFTaskPreCheckTable( con,  pId,  wId,activityId,"N");
	                            						  mainCode = WFSError.WF_AUTOINITIATE_FAILED;
	                                                      subCode = 0;
	                                                      subject = WFSErrorMsg.getMessage(mainCode);
	                                                      descr = WFSErrorMsg.getMessage(mainCode);
	                                                      errType = WFSError.WF_TMP;
	                                                      String errorString = WFSUtil.generalError(parser.getValueOf("Option", "", false), engine, gen,mainCode, subCode,errType, subject,descr);
	                                      				  return errorString;
	                                      				  /*Mail to be sent to CaseManager in this Case*/
	                                      				  
	                            					  }
	                            					  else{
	                            						  //if Task has been Auto-Initiated correctly then Update the Task Status( "Initiated") and relevant fields
	                            						  updateFieldFlag=true;//For marking status in WFTaskPreCheckTable for pre-condition
	                            						  taskStatusMap.put(key, WFSConstant.WF_TaskInitiated);
	                            						  WFTaskInfoClass taskInfoObj = (WFTaskInfoClass)taskDataMap.get(key);
	                            						  taskInfoObj.assgnBy=assgnBy;
	                            						  taskInfoObj.assgnTo=assignedTo;
	                            						  taskInfoObj.actionDate=WFSUtil.dbDateTime(con, dbType);
	                            						  taskInfoObj.dueDate=strDate;
	  		                              				updatePreConditionResultTable(con,"Ready","1",pId,wId,processDefId,activityId,key); //Bug#77302
	                            					  }
                            					  }
                            				  }
                            				  else{
                            					  int webServerPort=0;
                                  				  HashMap<String,String> mapForTaskAttributes = new HashMap<String, String>();
	                                  		      String webServerAdd=parser.getValueOf("WebServerAddress","http://127.0.0.1:8080",true);
                          					      String oapWebServerAdd=parser.getValueOf("OAPWebServerAddress","http://127.0.0.1:8080",true);
                          					      String strDate  = WFSUtil.dbDateTime(con, dbType);
                          					      mapForTaskAttributes.put("RouteName",processName);
                        					      mapForTaskAttributes.put("ActivityName",activityName);
	                                  		      mapForTaskAttributes.put("ProcessInstanceId", pId);
	                                  		      mapForTaskAttributes.put("WorkItemId", String.valueOf(wId));
	                                  		      mapForTaskAttributes.put("DueDate",dueDate);
	                                  		      mapForTaskAttributes.put("InitiatedOn",strDate);
	                                  		      mapForTaskAttributes.put("AssignedTo", assgnTo);
	                                  		      mapForTaskAttributes.put("EngineName", engine);
	                                  		      mapForTaskAttributes.put("TaskId",String.valueOf(taskId));
	                                  			  mapForTaskAttributes.put("OAPWebServerAddress", oapWebServerAdd);
	                                  			  mapForTaskAttributes.put("Reason","Invalid User/EmailId");
	                                  			mapForTaskAttributes.put("MailSubject", "Auto-Initiation of Task- "+taskName+ "("+pId+") Failed");
	                                  		      if(urn != null && !urn.isEmpty()){
	                                  		    	  mapForTaskAttributes.put("URN", String.valueOf(urn));
	                                  		      }else{
	                                  		    	  mapForTaskAttributes.put("URN", pId);
	                                  		      }
	                                  			      if(webServerAdd==null){
		                                  		    	webServerAdd = "127.0.0.1";
		                                  		          webServerPort = 8080;
		                                  		   
		                                  		      } 
		                                  		    mapForTaskAttributes.put("WebServerAddress",webServerAdd);
		                                		      mapForTaskAttributes.put("WebServerPort",String.valueOf(webServerPort));
		                                		      mapForTaskAttributes.put("TaskName",taskName);
		                                		      mapForTaskAttributes.put("ActivityType",String.valueOf(32));
		                                  		      String userEmail="";
		                                  		    String strQry = "Select MailId From wfuserview Where UserName  = ? ";
		                                            pstmt = con.prepareStatement(strQry);
		                                            WFSUtil.DB_SetString(1, caseManager, pstmt, dbType);
		                                            rs = pstmt.executeQuery();
		                                            if(rs.next()){
		                                                userEmail = rs.getString(1);
		                                            }
		                                            if(userEmail != null && !("".equals(userEmail))){
		                                            	HashMap<String, String> mailStringAttributes = new HashMap<String, String>(); 
		    											HashMap<String, Integer> mailIntAttributes = new HashMap<String, Integer>();
		    											mailStringAttributes.put("CabinetName", engine);
		    											mailStringAttributes.put("MailTo", userEmail);
		    											mailStringAttributes.put("MailCC", null);
		    											mailStringAttributes.put("MailAttachmentIndex", null);
		    											mailStringAttributes.put("MailAttachmentNames", null);
		    											mailStringAttributes.put("MailStatus", "N");
		    											mailStringAttributes.put("MailStatusComments", null);
		    											mailStringAttributes.put("MailInsertedBy", null);
		    											mailStringAttributes.put("MailActionType", "TaskNotification");
		    											mailStringAttributes.put("MailAttachmentExtensions", null);
		    											mailStringAttributes.put("PropertyName", "AutoInitiateTask");
		    											mailStringAttributes.put("ProcessInstanceId", pId);
		    											mailIntAttributes.put("MailPriority", 1);
		    											mailIntAttributes.put("ProcessDefID", processDefId);
		    											mailIntAttributes.put("WorkItemId", wId);
		    											mailIntAttributes.put("ActivityId", activityId);
		    											mailIntAttributes.put("DbType", dbType);
		    											mailIntAttributes.put("NoOfTrials", 0);
		    											EmailTemplateUtil.addTaskToMailQueue(con, mapForTaskAttributes, mailIntAttributes, mailStringAttributes);
		                                            }
		                                            if(pstmt!= null){
		                                                pstmt.close();
		                                                pstmt = null;
		                                            }
		                                            if(rs!= null){
		                                                rs.close();
		                                                rs = null;
		                                            }
		                                            WFSUtil.updateWFTaskPreCheckTable( con,  pId,  wId,activityId,"N");
	                                                mainCode = WFSError.WF_INVALID_USER_AUTOINITIATE;
		                                              subCode = 0;
		                                              subject = WFSErrorMsg.getMessage(mainCode);
		                                              descr = WFSErrorMsg.getMessage(mainCode);
		                                              errType = WFSError.WF_TMP;
		                                              String errorString = WFSUtil.generalError(parser.getValueOf("Option", "", false), engine, gen,mainCode, subCode,errType, subject,descr);
		                              				  return errorString;
                                  				 
                            				  }
                            				  
                            			  }
                            			  else if(operationType==WFSConstant.TASK_SET){
                            				  //SetValuePart
                            				   int ruleId=tempRuleList.get(counter-1);
		                            			 mainCode= WFSUtil.executeRuleCondition(con,processDefId,pId,wId,activityId,key,dbType,engine,sessionID,userId,operationType,subTaskId,taskType,taskDataMap,ruleId);
		                            			 tempOperationList.removeAll(Collections.singleton(operationType));//ALL SET OPERATIONS ARE DONE TOGETHER-HENCE REMOVING FROM LIST
		                            			 innerCounter--;//ADDED TO MAINTAIN THE LOOP COUNTER
		                            			 
		                            			 if(mainCode!=0){
		                                             //Handle new error code to represent Error while Saving Task Data
		                                                mainCode = WFSError.WF_TASK_SET_DATA_FAILED;
		                                                subCode = 0;
		                                                subject = WFSErrorMsg.getMessage(mainCode);
		                                                descr = WFSErrorMsg.getMessage(mainCode);
		                                                errType = WFSError.WF_TMP;
		                                                String errorString = WFSUtil.generalError(parser.getValueOf("Option", "", false), engine, gen,mainCode, subCode,errType, subject,descr);
		                                				  return errorString;
		                                         }
                            			 
                            			  }
                            			  else if(operationType==WFSConstant.TASK_TRIGGER){
                            				  //Trigger Part-Not Applicable as of now
                            			  }
                            			 
                            		  }
                            	   }
                            	   
                               }
                              
                           }
                                                
                           
                           if(!updateFieldFlag){
                               WFSUtil.updateWFTaskPreCheckTable( con,  pId,  wId,activityId,"N");
                               }
             				  /*updating checkPreCondition to 'N' as all pre-condition and its operations are done.
                               Now pre-condition should only be calculated if this flag is 'Y'
                               This flag is updated to 'Y' in WfInitiateTask and WfCompleteTask & SetAttribute call provided the variable and task 
                               is associated with any pre-condition*/
                           if(!"A".equalsIgnoreCase(checkPreCondition)){
                        if (!noMoreFlag){
                                mainCode = WFSError.WM_NO_MORE_DATA;
                                subCode = 0;
                                subject = WFSErrorMsg.getMessage(mainCode);
                                descr = WFSErrorMsg.getMessage(subCode);
                                errType = WFSError.WF_TMP;
                        }else{
                          Set<Integer> keys = taskDataMap.keySet();
                          tempXml.append("<TaskList>\n");
                          for(Integer key:keys){
                              WFTaskInfoClass taskInfoObj = (WFTaskInfoClass)taskDataMap.get(key);
                              tempXml.append("<TaskInfo>\n");
                              tempXml.append(gen.writeValue("TaskId", String.valueOf(taskInfoObj.taskId)));
                              tempXml.append(gen.writeValue("SubTaskId", String.valueOf(taskInfoObj.subTaskId)));
                              tempXml.append(gen.writeValue("TaskName", WFSUtil.handleSpecialCharInXml(taskInfoObj.taskName)));
                              tempXml.append(gen.writeValue("TaskType", String.valueOf(taskInfoObj.taskType)));
                              tempXml.append(gen.writeValue("TaskMode", String.valueOf(taskInfoObj.taskMode)));
                              tempXml.append(gen.writeValue("ProcessInstanceId", pId));
                              tempXml.append(gen.writeValue("AssignedBy", taskInfoObj.assgnBy));
                              int status = (taskStatusMap.get(key))==null?defaultStatusMap.get(key):Integer.parseInt((String.valueOf(taskStatusMap.get(key))));
                             if(status==WFSConstant.WF_TaskDeclined){
                                  tempXml.append(gen.writeValue("DeclinedBy", taskInfoObj.assgnTo));
                              }
                              else{
                            	  tempXml.append(gen.writeValue("AssignedTo", taskInfoObj.assgnTo));
                              }
                              if(status == WFSConstant.WF_TaskPendingForApproval){
                            	  tempXml.append(gen.writeValue("PendingForApproval", "Y"));
                              }
                              tempXml.append(gen.writeValue("DueDate", taskInfoObj.dueDate));
                              tempXml.append(gen.writeValue("Turnaroundtime", taskInfoObj.tatInMins));
                              tempXml.append(gen.writeValue("IsMandatory", taskInfoObj.isMandatory));
                              tempXml.append(gen.writeValue("IsRepeatable", taskInfoObj.isRepeatable));
                              tempXml.append(gen.writeValue("ActionDateTime", taskInfoObj.actionDate));
                              tempXml.append(gen.writeValue("TaskStatus", String.valueOf(status)));
                              tempXml.append(gen.writeValue("Priority", String.valueOf(taskInfoObj.priority)));
            			      tempXml.append(gen.writeValue("RejectionComments", WFSUtil.handleSpecialCharInXml(taskInfoObj.rejectionComments)));

            			      tempXml.append(gen.writeValue("AllowReassignment", allowReassignmentMap.get(key)==null?taskInfoObj.allowReassignment:allowReassignmentMap.get(key)));
            			      tempXml.append(gen.writeValue("AllowDecline", allowDeclineMap.get(key)==null?taskInfoObj.allowDecline:allowDeclineMap.get(key)));
            			      tempXml.append(gen.writeValue("ApprovalRequired", approvalRequiredMap.get(key)==null?taskInfoObj.approvalRequired:approvalRequiredMap.get(key)));
                              tempXml.append(gen.writeValue("DefaultUserId", Integer.toString(taskInfoObj.defaultUserId)));
            			      tempXml.append(gen.writeValue("DefaultUserName", taskInfoObj.defaultUserName));
            			      tempXml.append(gen.writeValue("PersonalName", taskInfoObj.defaultName));
            			      tempXml.append(gen.writeValue("Scope", taskInfoObj.scope));
            			      tempXml.append(gen.writeValue("ExpiredFlag", taskInfoObj.expiredFlag));
            			      tempXml.append(gen.writeValue("EscalatedFlag", taskInfoObj.escalatedFlag));
            			      tempXml.append(gen.writeValue("ReworkFlag", taskInfoObj.reworkFlag));
            			      tempXml.append(gen.writeValue("WaitingDescription", taskInfoObj.waitingDescription));
            			      tempXml.append(gen.writeValue("DelayedFlag",taskInfoObj.delayedFlag));
            			      tempXml.append(WFSUtil.getSubProcessDetail(con,taskInfoObj.taskId,pId,processDefId));
            			      
            			      qryStr2 = "Select tf.FilterId, tf.RuleType, tf.RuleOrderId, tf.RuleId, tf.ConditionOrderId, tf.Param1, tf.Type1, " +
                         				" tf.ExtObjId1, tf.VariableId_1, tf.VarFieldId_1, tf.Param2, tf.Type2, tf.ExtObjId2, tf.VariableId_2, tf.VarFieldId_2, tf.Operator, tf.LogicalOp " +
                         				" FROM WFTaskUserFilterTable tf" + WFSUtil.getTableLockHintStr(dbType)  +" left join WFTaskUserAssocTable tua " + WFSUtil.getTableLockHintStr(dbType) +
                         				" on tf.ProcessDefId = tua.ProcessDefId AND tf.FilterId=tua.FilterId  WHERE tf.ProcessDefId = ? and tua.taskid=? " +
                         				" order by FilterId,ConditionOrderID ASC"; //order by is important for creating correct XML
            			      

                         				pstmt = con.prepareStatement(qryStr2);
                         				pstmt.setInt(1, processDefId);
                         				pstmt.setInt(2, (taskInfoObj.taskId));
                         				pstmt.execute();
                         				rs = pstmt.getResultSet();
                         				List<Integer> filterlist = new ArrayList<>();
                         				StringBuffer tempXml1 = new StringBuffer(500);
                         				tempXml1.append("<UserList>");
                         				int j=1;
                         				while (rs.next()){
                         					if(!filterlist.contains(rs.getInt("FilterId"))){
                         						if(j==1){
                         						tempXml1.append("<UserInfo>");
                         						tempXml1.append(gen.writeValue("FilterId", String.valueOf(rs.getInt("FilterId"))));
                         						tempXml1.append("<Conditions>");
                         						j++;
                         						}else{
                         							tempXml1.append("</Conditions>");
                         							tempXml1.append("</UserInfo>");
                         							tempXml1.append("<UserInfo>");
                             						tempXml1.append(gen.writeValue("FilterId", String.valueOf(rs.getInt("FilterId"))));
                             						tempXml1.append("<Conditions>");
                         						}
                         						filterlist.add(rs.getInt("FilterId"));
                         					}
                         					tempXml1.append("<Condition>");
                         					tempXml1.append(gen.writeValue("ConditionOrderId", String.valueOf(rs.getInt("ConditionOrderId"))));
                      					tempXml1.append(gen.writeValue("RuleType", String.valueOf(rs.getString("RuleType"))));
                      					tempXml1.append(gen.writeValue("RuleOrderId", String.valueOf(rs.getInt("RuleOrderId"))));
                      					tempXml1.append(gen.writeValue("RuleId", String.valueOf(rs.getInt("RuleId"))));
                      					tempXml1.append(gen.writeValue("Param1", String.valueOf(rs.getString("Param1"))));
                      					tempXml1.append(gen.writeValue("Type1", String.valueOf(rs.getString("Type1"))));
                      					tempXml1.append(gen.writeValue("ExtObjId1", String.valueOf(rs.getInt("ExtObjId1"))));
                      					tempXml1.append(gen.writeValue("VariableId_1", String.valueOf(rs.getInt("VariableId_1"))));
                      					tempXml1.append(gen.writeValue("VarFieldId_1", String.valueOf(rs.getInt("VarFieldId_1"))));
                      					tempXml1.append(gen.writeValue("Param2", String.valueOf(rs.getString("Param2"))));
                      					tempXml1.append(gen.writeValue("Type2", String.valueOf(rs.getString("Type2"))));
                      					tempXml1.append(gen.writeValue("ExtObjId2", String.valueOf(rs.getInt("ExtObjId2"))));
                      					tempXml1.append(gen.writeValue("VariableId_2", String.valueOf(rs.getInt("VariableId_2"))));
                      					tempXml1.append(gen.writeValue("VarFieldId_2", String.valueOf(rs.getInt("VarFieldId_2"))));
                      					tempXml1.append(gen.writeValue("Operator", String.valueOf(rs.getInt("Operator"))));
                      					tempXml1.append(gen.writeValue("LogicalOp", String.valueOf(rs.getInt("LogicalOp"))));
                      					tempXml1.append("</Condition>");
                         					
                         				}
                         				
                         				if(j==2){
                         					tempXml1.append("</Conditions>");
                 							tempXml1.append("</UserInfo>");
                         					tempXml1.append("</UserList>");
                         					tempXml.append(tempXml1);
                         				}
                         				if(pstmt!= null){
                                          pstmt.close();
                                          pstmt = null;
                                      }
                                      if(rs!= null){
                                          rs.close();
                                          rs = null;
                                      }
                              tempXml.append("\n</TaskInfo>\n");
                          }
                          tempXml.append("</TaskList>\n");
                          tempXml.append(gen.writeValueOf("TotalCount", String.valueOf(tot)));
                          tempXml.append(gen.writeValueOf("RetrievedCount", String.valueOf(i)));
                        }
                      }
                } else {
                        mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                        subCode = 0;
                        subject = WFSErrorMsg.getMessage(mainCode);
                        descr = WFSErrorMsg.getMessage(subCode);
                        errType = WFSError.WF_TMP;
                }
                if (mainCode == 0) { // generating output xml
                        outputXML.append(gen.createOutputFile("WFGetTaskList"));
                        outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                        outputXML.append(tempXml);
                        outputXML.append(gen.closeOutputFile("WFGetTaskList"));
                }
        } catch (SQLException e) { // throwing exceptions
                WFSUtil.printErr(engine,"", e);
                mainCode = WFSError.WM_INVALID_FILTER;
                subCode = WFSError.WFS_SQL;
                subject = WFSErrorMsg.getMessage(mainCode);
                errType = WFSError.WF_FAT;
                if (e.getErrorCode() == 0) {
                        if (e.getSQLState().equalsIgnoreCase("08S01")) {
                                descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
                        }
                } else {
                        descr = e.getMessage();
                }
        } catch (NumberFormatException e) {
                WFSUtil.printErr(engine,"", e);
                mainCode = WFSError.WF_OPERATION_FAILED;
                subCode = WFSError.WFS_ILP;
                subject = WFSErrorMsg.getMessage(mainCode);
                errType = WFSError.WF_TMP;
                descr = e.toString();
        } catch (NullPointerException e) {
                WFSUtil.printErr(engine,"", e);
                mainCode = WFSError.WF_OPERATION_FAILED;
                subCode = WFSError.WFS_SYS;
                subject = WFSErrorMsg.getMessage(mainCode);
                errType = WFSError.WF_TMP;
                descr = e.toString();
        } catch (WFSException e) { //WFS_7.1_032
                mainCode = e.getMainErrorCode();
                subCode = e.getSubErrorCode();
                subject = WFSErrorMsg.getMessage(mainCode);
                errType = e.getTypeOfError();
                descr = e.getErrorDescription();
        } catch (JTSException e) {
                WFSUtil.printErr(engine,"", e);
                mainCode = WFSError.WF_OPERATION_FAILED;
                subCode = e.getErrorCode();
                subject = WFSErrorMsg.getMessage(mainCode);
                errType = WFSError.WF_TMP;
                descr = e.getMessage();
        } catch (Exception e) {
                WFSUtil.printErr(engine,"", e);
                mainCode = WFSError.WF_OPERATION_FAILED;
                subCode = WFSError.WFS_EXP;
                subject = WFSErrorMsg.getMessage(mainCode);
                errType = WFSError.WF_TMP;
                descr = e.toString();
        } finally {
                try {
                        if (rs != null) { // checking resultset object and closing it if it is open
                                rs.close();
                                rs = null;
                        }
                } catch (Exception ignored) {}
                try {
                        if (pstmt != null) { // checking prepared statement object and closing it if it is open
                                pstmt.close();
                                pstmt = null;
                        }
                        if (stmt != null) {	//WFS_7.1_026
                                stmt.close();
                                stmt = null;
                        }
                } catch (Exception ignored) {}

               
        }
        if (mainCode != 0) {
			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			outputXML.append( errorString);

        }
        return outputXML.toString();
}


private String getUpdatedList(Connection con, String taskIsMandatoryList,
		StringBuffer taskPreChkList,String pId,int wId,int activityId,int dbType) throws SQLException, JTSException {
	// TODO Auto-generated method stub
	String strReturn="";
	HashMap<Integer,String> hMap=new HashMap<Integer,String>();
	int count=0;
	PreparedStatement pstmt=null;  
	if(taskPreChkList.length()>0){
	   taskPreChkList.deleteCharAt(taskPreChkList.length()-1);
	String query="SELECT "+WFSUtil.isnull("Mandatory", "'N'", dbType) +",TaskId from WFTaskPreConditionResultTable where ProcessInstanceId=? and WorkItemId=? and ActivityId=? and TaskId in ("+taskPreChkList.toString()+")";
	   pstmt=con.prepareStatement(query);
	   pstmt.setString(1, pId);
	   pstmt.setInt(2, wId);
	   pstmt.setInt(3, activityId);
	   ResultSet rsSet=pstmt.executeQuery();
	   while(rsSet.next()){
		   hMap.put(rsSet.getInt(2), rsSet.getString(1));
		   count++;
	   }
	   if(rsSet!=null){
		   rsSet.close();
	   }
	   if(pstmt!=null){
		   pstmt.close();
	   }

	   if(count==0){
		   strReturn=taskIsMandatoryList;
	   }
	   else{
		   StringTokenizer strToken=new StringTokenizer(taskPreChkList.toString(),",");
		   while(strToken.hasMoreTokens()){
			   String str=strToken.nextToken();
			   strReturn=strReturn+((hMap.get(Integer.valueOf(str))==null)?"N":hMap.get(Integer.valueOf(str)))+",";
		   }
	   }
	   taskPreChkList.append(",");//Same stringBuffer object is used in mainflow of program hence added
	}
	else{
		strReturn=taskIsMandatoryList;
	}
	return strReturn;
}

private String checkPreCondition(Connection con, String pId, int wId,
		int activityId,String taskList,int processDefId,String taskIsMandatoryList,int dbType) throws SQLException {

	String checkPreCondition;
	 	String query="SELECT checkPreCondition from WFTaskPreCheckTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessInstanceId=? and WorkItemId=? and ActivityId=? ";
	    PreparedStatement pstmt=con.prepareStatement(query);
	    pstmt.setString(1, pId);
		pstmt.setInt(2, wId);
		pstmt.setInt(3, activityId);
		ResultSet rs=pstmt.executeQuery();
		if(rs.next()){
			checkPreCondition= rs.getString("checkPreCondition");
		}
		
		else{
			query="Insert into WFTaskPreCheckTable (ProcessInstanceId,WorkItemId,ActivityId,checkPreCondition,ProcessDefId) values(?,?,?,?,?)";
			pstmt.close();
			pstmt= null;
			pstmt=con.prepareStatement(query);
		    pstmt.setString(1, pId);
			pstmt.setInt(2, wId); 
			pstmt.setInt(3, activityId);
			pstmt.setString(4,"Y");
			pstmt.setInt(5,processDefId);
			pstmt.executeUpdate();
			checkPreCondition= "Y";
			
				
		   }
		pstmt.close();
		pstmt= null;
		
			HashMap<Integer,Integer> taskDefaultStatus=new HashMap<Integer,Integer>();
			query="SELECT DefaultStatus,TaskId from WFTaskPropertyTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessDefId=? and ActivityId=? and taskId in ("+taskList.substring(0,taskList.length()-1)+")";
			pstmt=con.prepareStatement(query);
		    pstmt.setInt(1, processDefId);
			pstmt.setInt(2, activityId);
			rs=pstmt.executeQuery();
			while(rs.next()){
				taskDefaultStatus.put(rs.getInt("TaskId"), rs.getInt("DefaultStatus"));
			}
		
				rs.close();
				pstmt.close();
			
			
			ArrayList <Integer> designTimeTask=new ArrayList<Integer>();
			if(taskList!=null && !taskList.isEmpty()&&!taskDefaultStatus.isEmpty()){
			query="Select TaskId from WFTaskPreConditionResultTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessInstanceId=? and WorkItemId=? and ActivityId=? and taskId in ("+taskList.substring(0,taskList.length()-1)+")";
			pstmt=con.prepareStatement(query);
			pstmt.setString(1, pId);
			pstmt.setInt(2, wId);
			pstmt.setInt(3, activityId);
			rs=pstmt.executeQuery();
			while(rs.next()){
				designTimeTask.add(rs.getInt(1));
			}
			
				rs.close();
			
			
				pstmt.close();
			
			query="Insert into WFTaskPreConditionResultTable (ProcessInstanceId,WorkItemId,ActivityId,TaskId,Mandatory,Ready) values(?,?,?,?,?,?)";
			pstmt=con.prepareStatement(query);
			StringTokenizer strToken=new StringTokenizer(taskList, ",");
			StringTokenizer strToken2=new StringTokenizer(taskIsMandatoryList,",");
		   	while(strToken.hasMoreElements()&&strToken2.hasMoreElements()){
				String str=strToken.nextToken();
				pstmt.setString(1, pId);
				pstmt.setInt(2, wId);
				pstmt.setInt(3, activityId);
				pstmt.setInt(4,Integer.parseInt(str));
				pstmt.setString(5, ((String)strToken2.nextElement()));
				pstmt.setInt(6, (taskDefaultStatus.get(Integer.parseInt(str))==null?1:(Integer)taskDefaultStatus.get(Integer.parseInt(str))));
				if(!designTimeTask.contains(Integer.parseInt(str)))
				pstmt.addBatch();
		    }
			pstmt.executeBatch();
			
			}
			
			rs.close();
			
			
			   pstmt.close();
			
			return checkPreCondition;
	}

private void updatePreConditionResultTable(Connection con, String updateFieldName,
		String updateFieldValue, String pId, int wId, int processDefId,
		int activityId, int taskId) throws SQLException {
	    PreparedStatement pstmt = null;
	
	  try {
		String updateQuery="UPDATE WFTaskPreConditionResultTable set "+updateFieldName+"='"+updateFieldValue+"' where ProcessInstanceId=? and WorkItemId=? and ActivityId=? and TaskId =?";

		   pstmt=con.prepareStatement(updateQuery);
		   pstmt.setString(1, pId);
		   pstmt.setInt(2, wId);
		   pstmt.setInt(3, activityId);
		   pstmt.setInt(4,taskId);
		   pstmt.executeUpdate();
		  
	} finally  {
		if(pstmt!=null){
			   pstmt.close();
			   pstmt = null;
		   }
		
	}
}



/**
 * Function Name    :   getDueDateFromDateTimeMap
 * Programmer' Name :   Kumar Kimil
 * Date Written     :   04/07/2017
 * Input Parameters :   Map tmpMap
 * Output Parameters:   None.
 * Return Value     :   Date
 * Description      :   Returns calculated Date
 * 
 * *************************************************************
 */

private Date getDueDateFromDateTimeMap(Map tmpMap) {
	  Calendar calendar = Calendar.getInstance();
	  calendar.setTime(new Date());
	  calendar.add(Calendar.YEAR,((Integer) tmpMap.get("Year")).intValue());
	  calendar.add(Calendar.MONTH,((Integer) tmpMap.get("Month")).intValue());
	  calendar.add(Calendar.DATE,((Integer) tmpMap.get("Day")).intValue());
	  calendar.add(Calendar.HOUR,((Integer) tmpMap.get("Hour")).intValue());
	  calendar.add(Calendar.MINUTE,((Integer) tmpMap.get("Minute")).intValue());
	  calendar.add(Calendar.SECOND,((Integer) tmpMap.get("Second")).intValue());
	  Date validtill = calendar.getTime();
	  
	  return validtill;
}

/**
 * Function Name    :   getTrueRuleListforTask
 * Programmer' Name :   Kumar Kimil
 * Date Written     :   04/07/2017
 * Input Parameters :   HashMap<Integer, HashMap<Integer, Boolean>> tempTaskStatusMap,Integer TaskId
 * Output Parameters:   None.
 * Return Value     :   ArrayList<Integer>
 * Description      :   Returns an ArrayList containing list of rule which are true for the TaskId passed
 * 
 * *************************************************************
 */
private ArrayList<Integer> getTrueRuleListforTask(
		HashMap<Integer, HashMap<Integer, Boolean>> tempTaskStatusMap,
		Integer TaskId) {
			ArrayList<Integer> tempRuleList=new ArrayList<Integer>();
			HashMap<Integer,Boolean>tempMap=new HashMap<Integer,Boolean>();
			tempMap=tempTaskStatusMap.get(TaskId);
			Iterator it = tempMap.entrySet().iterator();
			while(it.hasNext()){
				Map.Entry pair = (Map.Entry)it.next();
				if((Boolean)pair.getValue()==true){
					tempRuleList.add((Integer)pair.getKey());
				}
			}
	
	
	return tempRuleList;
}

/**
 * Function Name    :   getOperationListforRule
 * Programmer' Name :   Kumar Kimil
 * Date Written     :   04/07/2017
 * Input Parameters :   HashMap<Integer,HashMap<Integer,ArrayList<Integer>>> taskRuleMap,Integer RuleId,Integer TaskId
 * Output Parameters:   None.
 * Return Value     :   ArrayList<Integer>
 * Description      :   Returns an ArrayList containing list of Operation which are true for the RuleId & TaskId passed
 * 
 * *************************************************************
 */
private ArrayList<Integer> getOperationListforRule(
		HashMap<Integer,HashMap<Integer,ArrayList<Integer>>> taskRuleMap,
		Integer RuleId,Integer TaskId) {
			ArrayList<Integer> tempRuleList=new ArrayList<Integer>();
			tempRuleList=taskRuleMap.get(TaskId).get(RuleId);
			return tempRuleList;
}


//----------------------------------------------------------------------------------------------------
//	Function Name 				:	WFGetTaskPropertyAssociation
//	Date Written (DD/MM/YYYY)               :	14-04-2015
//	Author					:	Sajid Khan  
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:       none
//	Return Values				:	String (output xml)
//	Description				:       API to fetch the properties of Tasks Associated with Activity.
//----------------------------------------------------------------------------------------------------
/************************************************************************************************************************
 Algorithms:
oValidate the session.
    Get the list of interfaces associated with the task.
    Get the name of the interface type from corresponding tables based on the InterfaceType.
        •T: Refer ToDoListDefTable
        •D: DocumentTypeDefTable
        •E: ExceptionDefTable
        •F:WFForm_Table
    If InterfaceType is F then
            •Check whether the Form is of HTML or NGForm
                oIf entry present in ActivityAssociationTable for DefintionType = N and DefinitonId =3  and
                     No entry is present in ActivityInterfaceAssocTable for InterfaceType = ‘F’ for  activity+Process  then the form is of HTML type.
                    Entry is found in ActivityInterfaceAssocTable for InterfaceType  = ‘F’ for the particular Activity+Process then form is of type NGForm.
        <FormType>H</FormType>
        H – Html Form
        A - NGForm

        <InterfaceType></InterfaceType> Values
        D- Document
        T- Todos
        E- Exceptions


        <Attribute></Attribute> Values:
        Exception
        Document
        ToDo
        Form

Exception Attributes:
        VR - Exception Raised,
        VC - Exception Cleared,
        VN - Exception View,
        VA-  Exception  Respond

Document Attributes:
       B- Document  viewing as well as perform scan action,
       V - Document view,
       M - Document View as well as Modify,
       T- Document view as well as modify as well as perform scan action,
       A - Document not viewable/modifable ,only scan action can be performed on it.

ToDO Attributes:
       M- Mandatory
       V- Read Only

Form
       N- Normal
       R- Read Only

InputXML:
<WFGetTaskPropertyAssociation_Input>
	<Option>WFGetTaskPropertyAssociation</Option>
	<EngineName>abccabinet</EngineName>
	<SessionID>123414214</SessionId>
	<ProcessDefId>1</ProcessDefId>
        <ProcessInstanceId>ABC-0001</ProcessInstanceId>	
	<ActivityId>3</ActivityId>
	<TaskId>1</TaskId>
</WFGetTaskPropertyAssociation_Input>

OutputXML :-
<WFGetTaskPropertyAssociation _Output>
	<Option>  WFGetTaskPropertyAssociation </Option>
	<Exception>
		<MainCode>0</MainCode>; 0 -Successfull, 11- Sesssion Invalid, 18 - No Records
	</Exception>
	<InterfaceList>
		<InterfaceInfo>
			<InterfaceType>D</InterfaceType>;D- Document
			<InterfaceId>1</InterfaceId>; DocumenttypeId
			<InterfaceTypeName>doc1</ InterfaceTypeName>; DocumentType name
			<Attribute></Attribute>
                </InterfaceInfo>
		<InterfaceInfo>
			<InterfaceType>T</InterfaceType>
			<InterfaceId>1</InterfaceId>
			<InterfaceTypeName>todo1</ InterfaceTypeName>
			<Attribute></Attribute>
                </InterfaceInfo>
                <InterfaceInfo>
			<InterfaceType>E</InterfaceType>
			<InterfaceId>1</InterfaceId>
			<InterfaceTypeName>excep1</ InterfaceTypeName>
			<Attribute></Attribute>
                </InterfaceInfo>
                <InterfaceInfo>
			<InterfaceType>F</InterfaceType>
			<InterfaceTypeName>excep1</ InterfaceTypeName>
			<InterfaceId>1</InterfaceId>
			<FormType>H</FormType>; H- Html, A-NGForm
			<Attribute>V</Attribute>; N- Normal, R-Read Only
                </InterfaceInfo>
	</InterfaceList>	
</WFGetTaskPropertyAssociation _Output>

********************************************************************************************************************/
public String WFGetTaskPropertyAssociation(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
        StringBuilder outputXML = new StringBuilder();
        PreparedStatement pstmt = null;
        PreparedStatement pstmt1 = null;
        Statement stmt1 = null;
        ResultSet rs = null;
        ResultSet rs1 = null;
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        String engine = parser.getValueOf("EngineName");
    	String option = parser.getValueOf("Option", "", false);
        try {
        	int sessionID = parser.getIntOf("SessionId", 0, false);
        	boolean noMoreFlag = false;
        	int processDefId = parser.getIntOf("ProcessDefId", 0, false);
        	int activityId = parser.getIntOf("ActivityId",0,false);
        	int taskId = parser.getIntOf("TaskId", 0, false);
        	String processInstanceId = parser.getValueOf("ProcessInstanceId","",true);
        	int workitemId = parser.getIntOf("WorkItemId", 1, true);
        	StringBuffer tempXml = new StringBuffer(500);
        	int interFaceId = 0;
        	String intrFaceType = "";
        	String interFaceName = "";
        	stmt1 = con.createStatement();
        	String attribute = "";
        	String condStr ="";
        	String colStr= "";
        	String tableStr = "";
        	String strQry = "";
        	String docType = "";
        	String key = null;
        	HashMap<String,String> interFaceNameMap  = new HashMap<String,String>();
        	String formType = "";
            String formName = "";
        	String strQry1 = "";
        	int dbType = ServerProperty.getReference().getDBType(engine);
        	WFParticipant user = WFSUtil.WFCheckSession(con, sessionID); 
        	if (user != null) {
        		boolean isCaseManager = WFSUtil.isUserCaseManager(con, dbType, processDefId, processInstanceId, workitemId, activityId, user.getid(), user.getname()); // Changes for Bug 58158
        		// All default rights would be available on interfaces if user is CaseManager. 
        		if(isCaseManager)
        		{
        			pstmt = con.prepareStatement("Select InterfaceId,InterfaceType, Attribute from WFTaskInterfaceAssocTable  where ProcessDefId = ? and ActivityId  = ?  And TaskId = ? ");
        			pstmt.setInt(1,processDefId);
        			pstmt.setInt(2,activityId);
        			pstmt.setInt(3,taskId);
        			rs= pstmt.executeQuery();
            		tempXml.append("<InterfaceList>\n");
        			while(rs.next()){
        				interFaceId = rs.getInt(1);
        				intrFaceType = rs.getString(2);
        				attribute = rs.getString(3);
        				if(intrFaceType.equalsIgnoreCase("T")){
        					strQry1 = " Select ToDoName from ToDoListDefTable where ToDoId = "+interFaceId+"  And ProcessDefId = "+processDefId;
        				}else if(intrFaceType.equalsIgnoreCase("D")){
        					stmt1 = con.createStatement();
        					strQry1 = " Select DocName, DocType from DOCUMENTTYPEDEFTABLE where DocId = "+interFaceId+"  And ProcessDefId = "+processDefId;
        					rs1 = stmt1.executeQuery(strQry1);
        					if(rs1.next()){
        						interFaceName = rs1.getString(1);
        						docType = rs1.getString(2);
    						}
        				}else if(intrFaceType.equalsIgnoreCase("E")){
        					strQry1 = " Select ExceptionName from EXCEPTIONDEFTABLE where ExceptionId = "+interFaceId+"  And ProcessDefId = "+processDefId;
        				}else if(intrFaceType.equalsIgnoreCase("F")){
        					if(interFaceId==0){
        						formType = "H";
        						formName = "HTMLForm";
        					}else{
        						formType = "A";
        						stmt1 = con.createStatement();
        						rs1 = stmt1.executeQuery(" Select FormName from WFForm_Table where FormId =  "+interFaceId+" And ProcessDefId = "+processDefId);
        						if(rs1.next()){
        							formName = rs1.getString(1);
        						}
        					}
        				}

        				if(rs1 != null){
        					rs1.close();
        					rs1 = null;
        				}
        				if(stmt1 != null){
        					stmt1.close();
        					stmt1 = null;
        				}
        				if((!intrFaceType.equalsIgnoreCase("F")) && (!intrFaceType.equalsIgnoreCase("D"))){//InterfaceId  would be zero only for Form type interface if the form a=is of HTML Type.
        					stmt1 = con.createStatement();
        					rs1 = stmt1.executeQuery(strQry1);
        					if(rs1.next()){
        						interFaceName = rs1.getString(1);
        					}
        				}
        				
        				if(stmt1 != null){
        					stmt1.close();
        					stmt1 = null;
        				}

        				if(rs1 != null){
        					rs1.close();
        					rs1 = null;
        				}
        				//Store the InterfaceName for InterfaceId+InterFaceType in a map for reuse and avoaid Databse hit.
        				key = interFaceId+"#"+intrFaceType;
        				if(!interFaceNameMap.containsKey(key)){
        					if(intrFaceType.equalsIgnoreCase("F")){
        						interFaceNameMap.put(key, formName);
        					}else{
        						interFaceNameMap.put(key, interFaceName);
        					}
        				}
        				tempXml.append("<InterfaceInfo>\n");
        				tempXml.append(gen.writeValueOf("InterfaceType",intrFaceType));
        				tempXml.append(gen.writeValueOf("InterfaceId",String.valueOf(interFaceId)));
        				if(intrFaceType.equalsIgnoreCase("F")){
        					tempXml.append(gen.writeValueOf("InterfaceTypeName",formName));
        					tempXml.append(gen.writeValueOf("FormType",formType));
        				}else{
        					tempXml.append(gen.writeValueOf("InterfaceTypeName",interFaceName));
        				}
        				if(intrFaceType.equalsIgnoreCase("D")){
        					tempXml.append(gen.writeValueOf("DocumentType",docType));
        					}
        				tempXml.append(gen.writeValueOf("Attribute",attribute));
        				tempXml.append("\n</InterfaceInfo>\n");
        				noMoreFlag = true;
        			}
            		tempXml.append("</InterfaceList>\n");
        			if(rs != null){
        				rs.close();
        				rs = null;
        			}
        			if(pstmt != null){
        				pstmt.close();
        				pstmt = null;
        			}
        		}else
        		{ 
        			//Rights assigned by Case Manager would be available on interfaces .
        			pstmt = con.prepareStatement("Select a.InterfaceId, a.InterfaceType, a.Attribute from WFRTTaskInterfaceAssocTable a inner join wftaskstatustable b  on a.ProcessInstanceId = b.ProcessInstanceId " +
        					" And a.workitemid = b.workitemid  and a. ProcessDefId = b.ProcessDefId and a.ActivityId  = b.ActivityId  And a.TaskId = b.TaskId  " + " where  b.processInstanceId = ?  and b.workitemid= ? And  b.ProcessDefId = ? and b.ActivityId  = ?  and b. assignedto = ? and b.taskstatus = " + WFSConstant.WF_TaskInitiated);
        			WFSUtil.DB_SetString(1,processInstanceId , pstmt, dbType);
        			pstmt.setInt(2,workitemId);
        			pstmt.setInt(3,processDefId);
        			pstmt.setInt(4,activityId);
        			pstmt.setString(5,user.getname());
        			rs= pstmt.executeQuery();
        			Set<FormDetails> FormSet = new HashSet<FormDetails>();

        			tempXml.append("<InterfaceList>\n");
        			while(rs.next()){
        				interFaceId = rs.getInt(1);
        				intrFaceType = rs.getString(2);
        				attribute = rs.getString(3);
        				/*key = interFaceId+"#"+intrFaceType;
                            interFaceName = interFaceNameMap.get(key);*/
        				if(intrFaceType.equalsIgnoreCase("T")){
        					strQry1 = " Select ToDoName from ToDoListDefTable where ToDoId = "+interFaceId+"  And ProcessDefId = "+processDefId;
        				}else if(intrFaceType.equalsIgnoreCase("D")){
        					stmt1 = con.createStatement();
        					strQry1 = " Select DocName, DocType from DOCUMENTTYPEDEFTABLE where DocId = "+interFaceId+"  And ProcessDefId = "+processDefId;
        					rs1 = stmt1.executeQuery(strQry1);
        					if(rs1.next()){
        						interFaceName = rs1.getString(1);
        						docType = rs1.getString(2);
    						}
        				}else if(intrFaceType.equalsIgnoreCase("E")){
        					strQry1 = " Select ExceptionName from EXCEPTIONDEFTABLE where ExceptionId = "+interFaceId+"  And ProcessDefId = "+processDefId;
        				}else if(intrFaceType.equalsIgnoreCase("F")){
        					if(interFaceId==0){
        						formName = "HTMLForm";
        					}else{
        						stmt1 = con.createStatement();
        						rs1 = stmt1.executeQuery(" Select FormName from WFForm_Table where FormId =  "+interFaceId+" And ProcessDefId = "+processDefId);
        						if(rs1.next()){
        							formName = rs1.getString(1);
        						}
        					}
        				}

        				if(rs1 != null){
        					rs1.close();
        					rs1 = null;
        				}
        				if(stmt1 != null){
        					stmt1.close();
        					stmt1 = null;
        				}
        				if((!intrFaceType.equalsIgnoreCase("F"))  &&  (!intrFaceType.equalsIgnoreCase("D"))){//InterfaceId  would be zero only for Form type interface if the form a=is of HTML Type.
        					stmt1 = con.createStatement();
        					rs1 = stmt1.executeQuery(strQry1);
        					if(rs1.next()){
        						interFaceName = rs1.getString(1);
        					}
        				}
        				if(rs1 != null){
        					rs1.close();
        					rs1 = null;
        				}
        				
        				if(stmt1 != null){
        					stmt1.close();
        					stmt1 = null;
        				}
        				key = interFaceId+"#"+intrFaceType;
        				if(!interFaceNameMap.containsKey(key)){
        					if(intrFaceType.equalsIgnoreCase("F")){
        						interFaceNameMap.put(key, formName);
        					}else{
        						interFaceNameMap.put(key, interFaceName);
        					}
        				}
        				if(intrFaceType.equalsIgnoreCase("F")){
        					FormDetails formdetail = new FormDetails(interFaceId,intrFaceType,attribute,formName);
        					if(!FormSet.contains(formdetail))
        						FormSet.add(formdetail);
        					else
        					{  for(FormDetails fds : FormSet){
        						if((fds.interfaceId==formdetail.interfaceId)&&(fds.Attribute.equals("R")))
        						{	FormSet.remove(fds);
        						FormSet.add(formdetail);
        						break;
        						}	
        					}
        					}
        					formdetail=null;
        				}else{
        					tempXml.append("<InterfaceInfo>\n");
        					tempXml.append(gen.writeValueOf("InterfaceType",intrFaceType));
        					tempXml.append(gen.writeValueOf("InterfaceId",String.valueOf(interFaceId)));
        					tempXml.append(gen.writeValueOf("InterfaceTypeName",interFaceName));
        					if(intrFaceType.equalsIgnoreCase("D")){
            					tempXml.append(gen.writeValueOf("DocumentType",docType));
            					}
        					tempXml.append(gen.writeValueOf("Attribute",attribute));
        					tempXml.append("\n</InterfaceInfo>\n");
        					noMoreFlag = true;
        				}
        			}   
        			/*   iterate over set to create final set*/
        			for (FormDetails fd : FormSet) {
        				formType=(fd.interfaceId ==0)?"H":"A";   // Only 'W' attributes would be sufficient for Form if both 'R' and  'W' is present.
        				tempXml.append("<InterfaceInfo>\n");
        				tempXml.append(gen.writeValueOf("InterfaceType",fd.interfaceType));
        				tempXml.append(gen.writeValueOf("InterfaceId",String.valueOf(fd.interfaceId)));
        				tempXml.append(gen.writeValueOf("InterfaceTypeName",fd.formName));
        				tempXml.append(gen.writeValueOf("FormType",formType));
        				tempXml.append(gen.writeValueOf("Attribute",fd.Attribute));
        				tempXml.append("\n</InterfaceInfo>\n");	
        			}
            		tempXml.append("</InterfaceList>\n");
            		
            		if(pstmt != null){
            			pstmt.close();
            			pstmt = null;
            		}
            		if(rs != null){
        				rs.close();
        				rs = null;
        			}
        		} 
        		
        		// for runtime assosiation i.e. to Reinitiate a task.
        	
        		pstmt = con.prepareStatement("Select InterfaceId,InterfaceType, Attribute from "
        				+ "WFRTTaskInterfaceAssocTable  where ProcessInstanceId = ? And WorkItemId = ?"
        				+ " And ProcessDefId = ? and ActivityId  = ?  And TaskId = ? ");
        		WFSUtil.DB_SetString(1,processInstanceId , pstmt, dbType);
        		pstmt.setInt(2,workitemId);
        		pstmt.setInt(3,processDefId);
        		pstmt.setInt(4,activityId);
        		pstmt.setInt(5,taskId);
        		rs= pstmt.executeQuery();
        		tempXml.append("<AssociatedInterface>\n");
        		while(rs.next()){
        			interFaceId = rs.getInt(1);
        			intrFaceType = rs.getString(2);
        			attribute = rs.getString(3);
        			key = interFaceId+"#"+intrFaceType;
        			interFaceName = interFaceNameMap.get(key);
        			tempXml.append("<InterfaceInfo>\n");
        			tempXml.append(gen.writeValueOf("InterfaceType",intrFaceType));
        			tempXml.append(gen.writeValueOf("InterfaceId",String.valueOf(interFaceId)));
        			if(intrFaceType.equalsIgnoreCase("F")){
        				if(interFaceId ==0){
        					formType = "H";
        				}else{
        					formType = "A";
        				}
        				tempXml.append(gen.writeValueOf("InterfaceTypeName",interFaceName));
        				tempXml.append(gen.writeValueOf("FormType",formType));
        			}else{
        				tempXml.append(gen.writeValueOf("InterfaceTypeName",interFaceName));
        			}
        			tempXml.append(gen.writeValueOf("Attribute",attribute));
        			tempXml.append("\n</InterfaceInfo>\n");
        			noMoreFlag = true;
        		}
        		tempXml.append("</AssociatedInterface>\n");
        		if(pstmt != null){
        			pstmt.close();
        			pstmt = null;
        		}
        		if(rs != null){
    				rs.close();
    				rs = null;
    			}
        	}else {
        		mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
        		subCode = 0;
        		subject = WFSErrorMsg.getMessage(mainCode);
        		descr = WFSErrorMsg.getMessage(subCode);
        		errType = WFSError.WF_TMP;
        	}
        	if(!noMoreFlag){
        		mainCode = WFSError.WM_NO_MORE_DATA;
        		subCode = 0;
        		subject = WFSErrorMsg.getMessage(mainCode);
        		descr = WFSErrorMsg.getMessage(subCode);
        		errType = WFSError.WF_TMP;
        	}
        	if (mainCode == 0) { // generating output xml
        	//	outputXML = new StringBuffer(500);
        		outputXML.append(gen.createOutputFile("WFGetTaskPropertyAssociation"));
        		outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
        		outputXML.append(tempXml);
        		outputXML.append(gen.closeOutputFile("WFGetTaskPropertyAssociation"));
                }
        } catch (SQLException e) { // throwing exceptions
                WFSUtil.printErr(engine,"", e);
                mainCode = WFSError.WM_INVALID_FILTER;
                subCode = WFSError.WFS_SQL;
                subject = WFSErrorMsg.getMessage(mainCode);
                errType = WFSError.WF_FAT;
                if (e.getErrorCode() == 0) {
                        if (e.getSQLState().equalsIgnoreCase("08S01")) {
                                descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
                        }
                } else {
                        descr = e.getMessage();
                }
        } catch (NumberFormatException e) {
                WFSUtil.printErr(engine,"", e);
                mainCode = WFSError.WF_OPERATION_FAILED;
                subCode = WFSError.WFS_ILP;
                subject = WFSErrorMsg.getMessage(mainCode);
                errType = WFSError.WF_TMP;
                descr = e.toString();
        } catch (NullPointerException e) {
                WFSUtil.printErr(engine,"", e);
                mainCode = WFSError.WF_OPERATION_FAILED;
                subCode = WFSError.WFS_SYS;
                subject = WFSErrorMsg.getMessage(mainCode);
                errType = WFSError.WF_TMP;
                descr = e.toString();
        } catch (WFSException e) { //WFS_7.1_032
                mainCode = e.getMainErrorCode();
                subCode = e.getSubErrorCode();
                subject = WFSErrorMsg.getMessage(mainCode);
                errType = e.getTypeOfError();
                descr = e.getErrorDescription();
        } catch (JTSException e) {
                WFSUtil.printErr(engine,"", e);
                mainCode = WFSError.WF_OPERATION_FAILED;
                subCode = e.getErrorCode();
                subject = WFSErrorMsg.getMessage(mainCode);
                errType = WFSError.WF_TMP;
                descr = e.getMessage();
        } catch (Exception e) {
                WFSUtil.printErr(engine,"", e);
                mainCode = WFSError.WF_OPERATION_FAILED;
                subCode = WFSError.WFS_EXP;
                subject = WFSErrorMsg.getMessage(mainCode);
                errType = WFSError.WF_TMP;
                descr = e.toString();
        } finally {
                try {
                        if (rs != null) { 
                             rs.close();
                             rs = null;
                        }
                        if (rs1 != null) { 
                             rs1.close();
                             rs1 = null;
                        }
 
                } catch (Exception ignored) {}
                try {
                        if (pstmt != null) {
                             pstmt.close();
                             pstmt = null;
                        }
                        if (pstmt1 != null) {
                             pstmt1.close();
                             pstmt1 = null;
                        }
                        if (stmt1 != null) {
                            stmt1.close();
                            stmt1 = null;
                        }
                } catch (Exception ignored) {}

               
        }
        if (mainCode != 0) {
			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			outputXML.append( errorString);
		}
        return outputXML.toString();
}

//----------------------------------------------------------------------------------------------------
//Function Name 				:	WFGetTaskPropertyAssociationForAutoInitiateTask
//Date Written (DD/MM/YYYY)               :	24-07-2017
//Author					:	Kumar Kimil
//Input Parameters			:	Connection , XMLParser , XMLGenerator
//Output Parameters			:       none
//Return Values				:	String (output xml)
//Description				:       method to fetch the properties of Tasks Associated with Activity for Auto-InitiatedTask.
//----------------------------------------------------------------------------------------------------

private String WFGetTaskPropertyAssociationForAutoInitiateTask(Connection con,int processDefId, String pId, int wId, int activityId, int taskId,
		int dbType, String engine, int sessionID, int userId,int operationType, int subTaskId, int taskType,LinkedHashMap taskDataMap,XMLGenerator gen) throws WFSException {
	 StringBuilder outputXML = new StringBuilder();
    PreparedStatement pstmt = null;
    PreparedStatement pstmt1 = null;
    Statement stmt1 = null;
    ResultSet rs = null;
    ResultSet rs1 = null;
    int mainCode = 0;
    int subCode = 0;
    String subject = null;
    String descr = null;
    String errType = WFSError.WF_TMP;
    String option = "WFGetTaskList";

    try {
    	
    	boolean noMoreFlag = false;
    	
    	
    	
    	String processInstanceId = pId;
    	int workitemId = wId;
    	StringBuffer tempXml = new StringBuffer(500);
    	int interFaceId = 0;
    	String intrFaceType = "";
    	String interFaceName = "";
    	stmt1 = con.createStatement();
    	String attribute = "";
    	String condStr ="";
    	String colStr= "";
    	String tableStr = "";
    	String strQry = "";
    	String key = null;
    	HashMap<String,String> interFaceNameMap  = new HashMap<String,String>();
    	String formType = "";
        String formName = "";
    	String strQry1 = "";
    	
    	WFParticipant user = WFSUtil.WFCheckSession(con, sessionID); 
    	if (user != null) {
    		
				
    		boolean isCaseManager = WFSUtil.isUserCaseManager(con, dbType, processDefId, processInstanceId, workitemId, activityId, user.getid(), user.getname()); // Changes for Bug 58158
    		// All default rights would be available on interfaces if user is CaseManager. 
    		if(!isCaseManager){
    			
    			String checkPreCondition="N";
        		String query1 = "SELECT checkPreCondition from WFTaskPreCheckTable "
    					+ WFSUtil.getTableLockHintStr(dbType)
    					+ " where ProcessInstanceId=? and WorkItemId=? and ActivityId=? ";
    			 pstmt = con.prepareStatement(query1);
    			pstmt.setString(1, pId);
    			pstmt.setInt(2, wId);
    			pstmt.setInt(3, activityId);
    			rs = pstmt.executeQuery();
    			if (rs.next()) {
    				checkPreCondition = rs.getString("checkPreCondition");
    			} 
    		      if (rs != null) {
    					rs.close();
    					rs = null;
    				}
    				if (pstmt != null) {
    					pstmt.close();
    					pstmt = null;
    				}
    				
    				if("A".equalsIgnoreCase(checkPreCondition) && operationType == 104){
    					isCaseManager = true;
    				}
    		}
    		if(isCaseManager)
    		{
    			pstmt = con.prepareStatement("Select InterfaceId,InterfaceType, Attribute from WFTaskInterfaceAssocTable  where ProcessDefId = ? and ActivityId  = ?  And TaskId = ? ");
    			pstmt.setInt(1,processDefId);
    			pstmt.setInt(2,activityId);
    			pstmt.setInt(3,taskId);
    			rs= pstmt.executeQuery();
        		tempXml.append("<TaskInterfaces>\n");
    			while(rs.next()){
    				interFaceId = rs.getInt(1);
    				intrFaceType = rs.getString(2);
    				attribute = rs.getString(3);
    				if(intrFaceType.equalsIgnoreCase("T")){
    					strQry1 = " Select ToDoName from ToDoListDefTable where ToDoId = "+interFaceId+"  And ProcessDefId = "+processDefId;
    				}else if(intrFaceType.equalsIgnoreCase("D")){
    					strQry1 = " Select DocName from DOCUMENTTYPEDEFTABLE where DocId = "+interFaceId+"  And ProcessDefId = "+processDefId;
    				}else if(intrFaceType.equalsIgnoreCase("E")){
    					strQry1 = " Select ExceptionName from EXCEPTIONDEFTABLE where ExceptionId = "+interFaceId+"  And ProcessDefId = "+processDefId;
    				}else if(intrFaceType.equalsIgnoreCase("F")){
    					if(interFaceId==0){
    						formType = "H";
    						formName = "HTMLForm";
    					}else{
    						formType = "A";
    						stmt1 = con.createStatement();
    						rs1 = stmt1.executeQuery(" Select FormName from WFForm_Table where FormId =  "+interFaceId+" And ProcessDefId = "+processDefId);
    						if(rs1.next()){
    							formName = rs1.getString(1);
    						}
    					}
    				}

    				if(rs1 != null){
    					rs1.close();
    					rs1 = null;
    				}
    				if(stmt1 != null){
    					stmt1.close();
    					stmt1 = null;
    				}
    				if(!intrFaceType.equalsIgnoreCase("F")){//InterfaceId  would be zero only for Form type interface if the form a=is of HTML Type.
    					stmt1 = con.createStatement();
    					rs1 = stmt1.executeQuery(strQry1);
    					if(rs1.next()){
    						interFaceName = rs1.getString(1);
    					}
    				}
    				if(stmt1 != null){
    					stmt1.close();
    					stmt1 = null;
    				}

    				if(rs1 != null){
    					rs1.close();
    					rs1 = null;
    				}
    				//Store the InterfaceName for InterfaceId+InterFaceType in a map for reuse and avoaid Databse hit.
    				key = interFaceId+"#"+intrFaceType;
    				if(!interFaceNameMap.containsKey(key)){
    					if(intrFaceType.equalsIgnoreCase("F")){
    						interFaceNameMap.put(key, formName);
    					}else{
    						interFaceNameMap.put(key, interFaceName);
    					}
    				}
    				tempXml.append("<Interface>\n");
    				tempXml.append(gen.writeValueOf("Type",intrFaceType));
    				tempXml.append(gen.writeValueOf("Id",String.valueOf(interFaceId)));
    				if(intrFaceType.equalsIgnoreCase("F")){
    					tempXml.append(gen.writeValueOf("Name",formName));
    					tempXml.append(gen.writeValueOf("FormType",formType));
    				}else{
    					tempXml.append(gen.writeValueOf("Name",interFaceName));
    				}
    				tempXml.append(gen.writeValueOf("Attribute",attribute));
    				tempXml.append("\n</Interface>\n");
    				noMoreFlag = true;
    			}
        		tempXml.append("</TaskInterfaces>\n");
    			if(rs != null){
    				rs.close();
    				rs = null;
    			}
    			if(pstmt != null){
    				pstmt.close();
    				pstmt = null;
    			}
    		}else
    		{ 
    			//Rights assigned by Case Manager would be available on interfaces .
    			pstmt = con.prepareStatement("Select a.InterfaceId, a.InterfaceType, a.Attribute from WFRTTaskInterfaceAssocTable a inner join wftaskstatustable b  on a.ProcessInstanceId = b.ProcessInstanceId " +
    					" And a.workitemid = b.workitemid  and a. ProcessDefId = b.ProcessDefId and a.ActivityId  = b.ActivityId  And a.TaskId = b.TaskId  " + " where  b.processInstanceId = ?  and b.workitemid= ? And  b.ProcessDefId = ? and b.ActivityId  = ?  and b. assignedto = ? ");
    			WFSUtil.DB_SetString(1,processInstanceId , pstmt, dbType);
    			pstmt.setInt(2,workitemId);
    			pstmt.setInt(3,processDefId);
    			pstmt.setInt(4,activityId);
    			pstmt.setString(5,user.getname());
    			rs= pstmt.executeQuery();
    			Set<FormDetails> FormSet = new HashSet<FormDetails>();

    			tempXml.append("<TaskInterfaces>\n");
    			while(rs.next()){
    				interFaceId = rs.getInt(1);
    				intrFaceType = rs.getString(2);
    				attribute = rs.getString(3);
    				/*key = interFaceId+"#"+intrFaceType;
                        interFaceName = interFaceNameMap.get(key);*/
    				if(intrFaceType.equalsIgnoreCase("T")){
    					strQry1 = " Select ToDoName from ToDoListDefTable where ToDoId = "+interFaceId+"  And ProcessDefId = "+processDefId;
    				}else if(intrFaceType.equalsIgnoreCase("D")){
    					strQry1 = " Select DocName from DOCUMENTTYPEDEFTABLE where DocId = "+interFaceId+"  And ProcessDefId = "+processDefId;
    				}else if(intrFaceType.equalsIgnoreCase("E")){
    					strQry1 = " Select ExceptionName from EXCEPTIONDEFTABLE where ExceptionId = "+interFaceId+"  And ProcessDefId = "+processDefId;
    				}else if(intrFaceType.equalsIgnoreCase("F")){
    					if(interFaceId==0){
    						formName = "HTMLForm";
    					}else{
    						stmt1 = con.createStatement();
    						rs1 = stmt1.executeQuery(" Select FormName from WFForm_Table where FormId =  "+interFaceId+" And ProcessDefId = "+processDefId);
    						if(rs1.next()){
    							formName = rs1.getString(1);
    						}
    					}
    				}

    				if(rs1 != null){
    					rs1.close();
    					rs1 = null;
    				}
    				if(stmt1 != null){
    					stmt1.close();
    					stmt1 = null;
    				}
    				if(!intrFaceType.equalsIgnoreCase("F")){//InterfaceId  would be zero only for Form type interface if the form a=is of HTML Type.
    					stmt1 = con.createStatement();
    					rs1 = stmt1.executeQuery(strQry1);
    					if(rs1.next()){
    						interFaceName = rs1.getString(1);
    					}
    				}
    				if(rs1 != null){
    					rs1.close();
    					rs1 = null;
    				}
    				
    				if(stmt1 != null){
    					stmt1.close();
    					stmt1 = null;
    				}
    				key = interFaceId+"#"+intrFaceType;
    				if(!interFaceNameMap.containsKey(key)){
    					if(intrFaceType.equalsIgnoreCase("F")){
    						interFaceNameMap.put(key, formName);
    					}else{
    						interFaceNameMap.put(key, interFaceName);
    					}
    				}
    				if(intrFaceType.equalsIgnoreCase("F")){
    					FormDetails formdetail = new FormDetails(interFaceId,intrFaceType,attribute,formName);
    					if(!FormSet.contains(formdetail))
    						FormSet.add(formdetail);
    					else
    					{  for(FormDetails fds : FormSet){
    						if((fds.interfaceId==formdetail.interfaceId)&&(fds.Attribute.equals("R")))
    						{	FormSet.remove(fds);
    						FormSet.add(formdetail);
    						break;
    						}	
    					}
    					}
    					formdetail=null;
    				}else{
    					tempXml.append("<Interface>\n");
    					tempXml.append(gen.writeValueOf("Type",intrFaceType));
    					tempXml.append(gen.writeValueOf("Id",String.valueOf(interFaceId)));
    					tempXml.append(gen.writeValueOf("Name",interFaceName));
    					tempXml.append(gen.writeValueOf("Attribute",attribute));
    					tempXml.append("\n</Interface>\n");
    					noMoreFlag = true;
    				}
    			}   
    			/*   iterate over set to create final set*/
    			for (FormDetails fd : FormSet) {
    				formType=(fd.interfaceId ==0)?"H":"A";   // Only 'W' attributes would be sufficient for Form if both 'R' and  'W' is present.
    				tempXml.append("<Interface>\n");
    				tempXml.append(gen.writeValueOf("Type",fd.interfaceType));
    				tempXml.append(gen.writeValueOf("Id",String.valueOf(fd.interfaceId)));
    				tempXml.append(gen.writeValueOf("Name",fd.formName));
    				tempXml.append(gen.writeValueOf("FormType",formType));
    				tempXml.append(gen.writeValueOf("Attribute",fd.Attribute));
    				tempXml.append("\n</Interface>\n");	
    			}
        		tempXml.append("</TaskInterfaces>\n");
        		
        		if(pstmt != null){
        			pstmt.close();
        			pstmt = null;
        		}
        		if(rs != null){
    				rs.close();
    				rs = null;
    			}
    		} 
    		
    		if(pstmt != null){
    			pstmt.close();
    			pstmt = null;
    		}
    		if(rs != null){
				rs.close();
				rs = null;
			}
    	}else {
    		mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
    		subCode = 0;
    		subject = WFSErrorMsg.getMessage(mainCode);
    		descr = WFSErrorMsg.getMessage(subCode);
    		errType = WFSError.WF_TMP;
    	}
    	if(!noMoreFlag){
    		mainCode = WFSError.WM_NO_MORE_DATA;
    		subCode = 0;
    		subject = WFSErrorMsg.getMessage(mainCode);
    		descr = WFSErrorMsg.getMessage(subCode);
    		errType = WFSError.WF_TMP;
    	}
    	if (mainCode == 0) { // generating output xml
    		//outputXML = new StringBuffer(500);
    		outputXML.append(tempXml);
            }
    } catch (SQLException e) { // throwing exceptions
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
           
    } catch (NumberFormatException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
    } catch (NullPointerException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
    } catch (WFSException e) { //WFS_7.1_032
            mainCode = e.getMainErrorCode();
            subCode = e.getSubErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = e.getTypeOfError();
            descr = e.getErrorDescription();
    } catch (JTSException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
    } catch (Exception e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
    } finally {
            try {
                    if (rs != null) { 
                         rs.close();
                         rs = null;
                    }
                    if (rs1 != null) { 
                         rs1.close();
                         rs1 = null;
                    }

            } catch (Exception ignored) {}
            try {
                    if (pstmt != null) {
                         pstmt.close();
                         pstmt = null;
                    }
                    if (pstmt1 != null) {
                         pstmt1.close();
                         pstmt1 = null;
                    }
                    if (stmt1 != null) {
                        stmt1.close();
                        stmt1 = null;
                    }
            } catch (Exception ignored) {}

           
    }
    if (mainCode != 0) {
        String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
		 outputXML.append( errorString);

    }
    return outputXML.toString();
}
//----------------------------------------------------------------------------------------------------
//Function Name 		    :	WFGetTasksForUser
//Date Written (DD/MM/YYYY) :	10-04-2015
//Author					:	Rishiram Meel  
//Input Parameters			:	Connection , XMLParser , XMLGenerator
//Output Parameters			:   none
//Return Values				:	String (output xml)
//Description				:   API to fetch the list of tasks which are assigned to an user.
//----------------------------------------------------------------------------------------------------
public String WFGetTasksForUser(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
	 StringBuilder outputXML = new StringBuilder();
	PreparedStatement pstmt = null;
	ResultSet rs = null;
	boolean commit =false;
	int mainCode = 0;
	int subCode = 0;
	String subject = null;
	String descr = null;
	String errType = WFSError.WF_TMP;
	String engine ="";
	String option = parser.getValueOf("Option", "", false);
        boolean noMoreFlag = false;
        String processInstanceId = null;
        int workitemId =0;
        String taskName =null;
        int taskId= 0;
        String dueDate = null;
        String searchPrefix=null;
        String searchCriteriaStr=null;
        int searchCriteria=0;
        String filterStr=null;
        StringBuilder newFilter=new StringBuilder("");
        int priority=0;
        String readFlag=null;
        String reworkFlag="";
	try {
		engine = parser.getValueOf("EngineName");
		int dbType = ServerProperty.getReference().getDBType(engine);
		int sessionID = parser.getIntOf("SessionId", 0, false);
		int customUserId = parser.getIntOf("UserId", 0, true);	//Calendar Sharing task
		String customUserName = "";								//Calendar Sharing task
		int noOfRecordsToFetch=parser.getIntOf("NoOfRecordsToFetch",10,true);
		String  sortOrder;
		String readValue=parser.getValueOf("ReadFlag","N",true); 
		int orderBy = parser.getIntOf("OrderBy", 1, true);
	    sortOrder=parser.getValueOf("SortOrder","A",true);
		String lastValue = parser.getValueOf("LastValue", "", true);
		if(!lastValue.equals("")){
		processInstanceId = parser.getValueOf("ProcessInstanceId", "", true);
		workitemId=parser.getIntOf("WorkItemId", 0, true);
		taskId= parser.getIntOf("TaskId",0,true);
		taskName= parser.getValueOf("TaskName","",true);
		dueDate = parser.getValueOf("DueDate","",true);
		priority=parser.getIntOf("Priority", 1, true);//what default value i should have 
		}
		WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
		searchPrefix=parser.getValueOf("SearchPrefix","*",true);// 
		searchCriteria=parser.getIntOf("SearchCriteria",1,true);
		if(searchCriteria==1){
			searchCriteriaStr="TaskName";
			filterStr=" Where "	+ WFSUtil.getLikeFilterStr(parser, searchCriteriaStr, searchPrefix, dbType, true);
		}
		else if(searchCriteria==2){
			searchCriteriaStr="Q.ProcessInstanceId";
			filterStr=" Where "	+ WFSUtil.getLikeFilterStr(parser, searchCriteriaStr, searchPrefix, dbType, true);
		}
		else if(searchCriteria==3){
			String innerSearchPrefix = parser.getValueOf("InnerSearchPrefix","*",true);
			searchCriteriaStr="Q.ProcessInstanceId";
			filterStr=" Where "	+ WFSUtil.getLikeFilterStr(parser, searchCriteriaStr, searchPrefix, dbType, true) 
					+ " and " + WFSUtil.getLikeFilterStr(parser, "TaskName", innerSearchPrefix, dbType, true);
			int SearchPrefixWorkitemId = parser.getIntOf("SearchPrefixWorkitemId", 0, true);
			if(SearchPrefixWorkitemId!=0){
				filterStr=filterStr+" and"+ " Q.WorkitemId  "+" = "+SearchPrefixWorkitemId;
			}
		}
		/*Adding changes for the Filters*/
		String readStatus = parser.getValueOf("ReadStatus","A",true);
		String isOverDue = parser.getValueOf("OverDue","N",true);
		String approvalPending = parser.getValueOf("ApprovalPending","A",true);
		if(!("A".equalsIgnoreCase(readStatus))){
			if("Y".equalsIgnoreCase(readStatus)){
				newFilter.append(" and ReadFlag = 'Y' ");
			}else if("N".equalsIgnoreCase(readStatus)){
				newFilter.append(" and ReadFlag = 'N' ");
			}
		}
		if("Y".equalsIgnoreCase(isOverDue)){
			newFilter.append(" and DueDate <= " + WFSUtil.getDate(dbType) + " ");
		}
		if(!("A".equalsIgnoreCase(approvalPending))){
			if("Y".equalsIgnoreCase(approvalPending)){
				newFilter.append(" and TaskStatus = " + WFSConstant.WF_TaskPendingForApproval);
			}else if("N".equalsIgnoreCase(approvalPending)){
				newFilter.append(" and TaskStatus = " + WFSConstant.WF_TaskInitiated);
			}
		}else{
			newFilter.append(" and ( TaskStatus = " + WFSConstant.WF_TaskInitiated + " OR TaskStatus = " + WFSConstant.WF_TaskPendingForApproval + " ) " );
		}
		/*Adding changes for the Filters till here*/
		int userID = 0;
        char pType = '\0';
		String userName="";
		StringBuffer tempXml = null;
		String sortStr = null;
		String orderStr = null;
		String operator1 = "";
		String operator2 = "";
		String operator3="=";
		String lastValueStr = "";
		String orderByStr="";
		int retrievedCount=0;
		int count=0;
		    /* Step-1 code  to check validation of session */ 
		if (user != null) {
			if (con.getAutoCommit()){
				con.setAutoCommit(false);
				commit = true;
			}
		    	
			if (sortOrder.equalsIgnoreCase("D")) {  //changes for sort on priority and ReadFlag
					sortStr = " DESC ";
					operator1 = "<";
					operator2 = "<=";
				}else{
						sortStr = " ASC ";
						operator1 = ">";
						operator2 = ">=";
			}			
			if(orderBy==1){
				orderStr="DueDate";
				orderByStr="ORDER BY DueDate " + sortStr +" , ProcessInstanceId "+ sortStr + " , WorkitemId "+ sortStr + " , Q.TaskId "+ sortStr ;
				
				}
				else if(orderBy==2){
				orderStr="TaskName";
				orderByStr="ORDER BY TaskName " + sortStr +" , ProcessInstanceId " + sortStr + " , WorkitemId " + sortStr ;
				
				}else if(orderBy==3){
				orderStr="Q.ProcessInstanceId";
				orderByStr="ORDER BY ProcessInstanceId " + sortStr +" , WorkitemId "+ sortStr + " , Q.TaskId "+ sortStr ;
				}else if(orderBy==4){
					orderStr="Priority";
					orderByStr=" ORDER BY Priority  " + sortStr  + " , ProcessInstanceId " + sortStr +" , WorkitemId "+ sortStr + " , Q.TaskId "+ sortStr ;
				}else{
					orderStr="ReadFlag";
					orderByStr=" ORDER BY ReadFlag  " + sortStr  + " , ProcessInstanceId " + sortStr +" , WorkitemId "+ sortStr + " , Q.TaskId "+ sortStr ;
				}
		
			if(!lastValue.equals("")){
				switch(orderBy){
				case 1 :
					lastValueStr = " and ( ( " + orderStr  + operator3 + WFSUtil.TO_DATE(dueDate,true,dbType) + //changes for Batching 
					" and Q.ProcessInstanceId  " + operator2 + WFSUtil.TO_STRING(processInstanceId,true,dbType) +
					" " + "and Q.WorkitemId  " + operator2 + workitemId +
					" " + "and Q.TaskId  " + operator1 + taskId +" ) or ( "+ orderStr  + operator3 + WFSUtil.TO_DATE(dueDate,true,dbType) + 
					" and Q.ProcessInstanceId  " + operator2 + WFSUtil.TO_STRING(processInstanceId,true,dbType) +
					" " + "and Q.WorkitemId  " + operator1 + workitemId +
					" " + "and Q.TaskId  " + operator2 + taskId + " ) or ( " + orderStr  + operator3 + WFSUtil.TO_DATE(dueDate,true,dbType) + 
					" and Q.ProcessInstanceId  " + operator1 + WFSUtil.TO_STRING(processInstanceId,true,dbType) +
					" " + "and Q.WorkitemId  " + operator2 + workitemId +
					" " + "and Q.TaskId  " + operator2 + taskId + "  ) or ( " + orderStr  + operator1 + WFSUtil.TO_DATE(dueDate,true,dbType) + " ) )";
				/*	" " + " and Q.ProcessInstanceId  " + operator2 + WFSUtil.TO_STRING(processInstanceId,true,dbType) +
					" " + "and Q.WorkitemId  " + operator2 + workitemId +
					" " + "and Q.TaskId  " + operator1 + taskId +" ) ";*/
					
					break ;
				case 2 :
					/*lastValueStr = " and (  ( " + orderStr  + operator3 + WFSUtil.TO_STRING(taskName,true,dbType)+
					" " + " and Q.ProcessInstanceId  " + operator1 + WFSUtil.TO_STRING(processInstanceId,true,dbType) +
					" " + "and Q.WorkitemId  " + operator2 + workitemId +" ) or  ( "+  orderStr  + operator1 + WFSUtil.TO_STRING(taskName,true,dbType)+
					" " + " and Q.ProcessInstanceId  " + operator2 + WFSUtil.TO_STRING(processInstanceId,true,dbType) +
					" " + "and Q.WorkitemId  " + operator2 + workitemId +" ) )"; */
					lastValueStr = " and (  ( " + orderStr  + operator3 + WFSUtil.TO_STRING(taskName,true,dbType)+
					" " + " and Q.ProcessInstanceId  " + operator2 + WFSUtil.TO_STRING(processInstanceId,true,dbType) +
					" " + "and Q.WorkitemId  " + operator1 + workitemId +" ) or ( " + orderStr  + operator3 + WFSUtil.TO_STRING(taskName,true,dbType)+
					" " + " and Q.ProcessInstanceId  " + operator1 + WFSUtil.TO_STRING(processInstanceId,true,dbType) +
					" " + "and Q.WorkitemId  " + operator2 + workitemId +" ) or  ( "+  
					orderStr  + operator1 + WFSUtil.TO_STRING(taskName,true,dbType)+" ) )"; 
					break;
				case 3 :
					/*lastValueStr = " and ( " + orderStr  + operator2 + WFSUtil.TO_STRING(processInstanceId,true,dbType)+
					" " + " and Q.WorkitemId  " + operator2 + workitemId +
					" " + "and Q.TaskId  " + operator1 + taskId +" ) ";*/
					lastValueStr = " and ( ( " + orderStr  + operator3 + WFSUtil.TO_STRING(processInstanceId,true,dbType)+
					" " + " and Q.WorkitemId  " + operator1 + workitemId +
					" " + "and Q.TaskId  " + operator2 + taskId +" ) or ( "+  
				   orderStr  + operator1 + WFSUtil.TO_STRING(processInstanceId,true,dbType)+" ) or (" +
				   orderStr  + operator3 + WFSUtil.TO_STRING(processInstanceId,true,dbType)+
				   " " + " and Q.WorkitemId  " + operator2 + workitemId +
				   " " + "and Q.TaskId  " + operator1 + taskId +" ) )";
					break;
				case 4 :
   					/*lastValueStr=" and ( " + orderStr  + operator2 + priority
					+ " and Q.ProcessInstanceId  " + operator2 + WFSUtil.TO_STRING(processInstanceId,true,dbType) +
					" " + "and Q.WorkitemId  " + operator2 + workitemId +
					" " + "and Q.TaskId  " + operator1 + taskId +" ) ";*/
					lastValueStr=" and ( ( " + orderStr  + operator3  + priority
					+ " and Q.ProcessInstanceId  " + operator1 + WFSUtil.TO_STRING(processInstanceId,true,dbType) +
					" ) or ( "  + orderStr  + operator3 + priority
					+ " and Q.ProcessInstanceId  " + operator3 + WFSUtil.TO_STRING(processInstanceId,true,dbType) +
					" " + "and Q.WorkitemId  " + operator1 + workitemId + " ) or ( "  + orderStr  + operator3 + priority
					+ " and Q.ProcessInstanceId  " + operator3 + WFSUtil.TO_STRING(processInstanceId,true,dbType) +
					" " + "and Q.WorkitemId  " + operator3 + workitemId +
					" " + "and Q.TaskId  " + operator1 + taskId +" ) or ( "+ orderStr  + operator1 + priority +" ) )";
					break;
				case 5 :
					// changes for sorting and batching on ReadFlag Status
					lastValueStr=" and ( ( " + orderStr  + operator3   +"'"+ readValue+"'" 
					+ " and Q.ProcessInstanceId  " + operator1 + WFSUtil.TO_STRING(processInstanceId,true,dbType) +
					" ) or ( "  + orderStr  + operator3 + "'"+ readValue+"'" 
					+ " and Q.ProcessInstanceId  " + operator3 + WFSUtil.TO_STRING(processInstanceId,true,dbType) +
					" " + "and Q.WorkitemId  " + operator1 + workitemId + " ) or ( "  + orderStr  + operator3 + "'"+ readValue+"'" 
					+ " and Q.ProcessInstanceId  " + operator3 + WFSUtil.TO_STRING(processInstanceId,true,dbType) +
					" " + "and Q.WorkitemId  " + operator3 + workitemId +
					" " + "and Q.TaskId  " + operator1 + taskId +" ) or ( "+ orderStr  + operator1 + "'"+ readValue+"'"  +" ) )";
				  }
             
	           }
		    tempXml = new StringBuffer();
		    
		    //Changes done for the Calendar Sharing Task//
		    //Getting the username if custom user id is not empty
		    if(customUserId != 0){
		    	userName = WFSUtil.getCustomUserName(con, parser, customUserId);
		    }else
			userName = user.getname();// changes for Bug 59097 
		    //Calendar Sharing till here//
		    
	    	if(userName != null && !userName.isEmpty()){ //Changes for Bug#72080 
			    pstmt = con.prepareStatement("select * from (select " + WFSUtil.getFetchPrefixStr(dbType, noOfRecordsToFetch+1) + 

						" P.TaskName, P.TaskMode, P.Scope, Q.ActivityId, Q.ProcessDefId,Q.TaskId,Q.ProcessInstanceId,Q.WorkItemId,P.TaskType,Q.AssignedBy,Q.ActionDateTime,Q.DueDate,Q.Priority,R.Q_QueueId,R.Queuename,Q.SubTaskId,Q.ReadFlag,Q.TaskStatus,Q.ApprovalSentBy,Q.AllowDecline AllowDeclineNew,Q.AllowReassignment AllowReassignmentNew,Q.ApprovalRequired ApprovalRequiredNew ,D.WFDays,D.WFHours,D.WFMinutes,R.URN,Q.validTill,"+WFSUtil.getDate(dbType)+" SystemDBDate,Q.EscalatedFlag From WFTaskDefTable  P LEFT OUTER JOIN WfDurationTable D ON P.Processdefid = D.Processdefid and P.Turnaroundtime = D.durationId INNER JOIN (select * from WFTaskStatusTable where UPPER(AssignedTo)=? " + newFilter.toString() + " ) Q ON P.TaskId=Q.TaskId and  P.ProcessDefId=Q.ProcessDefId "+ 

						" LEFT OUTER JOIN WFINSTRUMENTTABLE R ON R.ProcessInstanceID=Q.ProcessInstanceId and R.WorkItemId = Q.WorkItemId "+ filterStr + lastValueStr + orderByStr +" ) ut"  + WFSUtil.getFetchSuffixStr(dbType, noOfRecordsToFetch + 1, WFSConstant.QUERY_STR_WHERE) + "" ) ;
		    WFSUtil.DB_SetString(1, userName.toUpperCase(), pstmt, dbType);
		    pstmt.execute();
			rs = pstmt.getResultSet();
			  while(retrievedCount < noOfRecordsToFetch && rs.next()){
			    tempXml.append("\n<TaskInfo>\n");
			    tempXml.append(gen.writeValueOf("TaskName",  rs.getString("TaskName")));
			    tempXml.append(gen.writeValueOf("TaskId",  String.valueOf(rs.getInt("TaskId"))));
			    tempXml.append(gen.writeValueOf("TaskMode",  rs.getString("TaskMode")));
			    tempXml.append(gen.writeValueOf("Scope",  rs.getString("Scope")));
			    tempXml.append(gen.writeValueOf("ProcessDefId",  String.valueOf(rs.getInt("ProcessDefId"))));
			    tempXml.append(gen.writeValueOf("ActivityId",  String.valueOf(rs.getInt("ActivityId"))));
				tempXml.append(gen.writeValueOf("ProcessInstanceId", rs.getString("ProcessInstanceId")));
				tempXml.append(gen.writeValueOf("WorkItemId", String.valueOf(rs.getInt("WorkItemId"))));
				tempXml.append(gen.writeValueOf("TaskType", rs.getString("TaskType")));
				tempXml.append(gen.writeValueOf("AssignedBy", rs.getString("AssignedBy")));
				tempXml.append(gen.writeValueOf("AssignedOn", rs.getString("ActionDateTime")));
				tempXml.append(gen.writeValueOf("DueDate",  rs.getString("DueDate")));
				tempXml.append(gen.writeValueOf("Priority", String.valueOf(rs.getInt("Priority"))));
				tempXml.append(gen.writeValueOf("Q_QueueId", String.valueOf(rs.getInt("Q_QueueId"))));
				tempXml.append(gen.writeValueOf("QueueName",  rs.getString("Queuename")));
				tempXml.append(gen.writeValueOf("SubTaskId",  rs.getString("SubTaskId")));
				tempXml.append(gen.writeValueOf("ReadFlag",  rs.getString("ReadFlag")));
        		tempXml.append(gen.writeValueOf("AllowDecline",rs.getString("AllowDeclineNew")==null?"N":rs.getString("AllowDeclineNew")));
				tempXml.append(gen.writeValueOf("AllowReassignment",rs.getString("AllowReassignmentNew")==null?"N":rs.getString("AllowReassignmentNew")));
				tempXml.append(gen.writeValueOf("ApprovalRequired",rs.getString("ApprovalRequiredNew")==null?"N":rs.getString("ApprovalRequiredNew")));
				Timestamp validTill=rs.getTimestamp("validTill");
				Timestamp systemDate=rs.getTimestamp("SystemDBDate");
				Timestamp dueDateTask=rs.getTimestamp("DueDate");
                String escalatedFlag=rs.getString("EscalatedFlag");
                String expiredFlag="";
                if(validTill==null ){
					expiredFlag="N";
				}
				else{
					expiredFlag=systemDate.compareTo(validTill)<0?"N":"Y";
				}
                String delayedFlag="";
                if(dueDateTask==null ){
                	delayedFlag="N";
				}
				else{
					delayedFlag=systemDate.compareTo(dueDateTask)<0?"N":"Y";
				}
                
                
				if(escalatedFlag==null){
					escalatedFlag="N";
				}
				
				tempXml.append(gen.writeValue("ExpiredFlag", expiredFlag));
			    tempXml.append(gen.writeValue("EscalatedFlag", escalatedFlag));
			    tempXml.append(gen.writeValue("DelayedFlag", delayedFlag));
				/*String approvalRequired= "N";
				if(rs.getString("ApprovalRequired")!=null&&rs.getString("ApprovalRequired").equalsIgnoreCase("Y")){
					approvalRequired= "Y";
				}
				tempXml.append(gen.writeValueOf("ApprovalRequired", approvalRequired));*/
				int taskStatus = rs.getInt("TaskStatus");
				String pendingForApproval = "N";
				if(taskStatus== WFSConstant.WF_TaskPendingForApproval){
					pendingForApproval= "Y";
				}
				if( rs.getString("ApprovalSentBy")!=null && WFSConstant.WF_TaskInitiated==taskStatus){
					reworkFlag="Y";
				}
				else{
					reworkFlag="N";
				}
				/*Bug fix for bug#71828, Add TurnaoundTime in teh tasks details if the task is not initiated*/
				//See Change in query for fetching duration variables 
				int timeInMinutes = 0;
				int days = rs.getInt("WFDays");
				int hours = rs.getInt("WFHours");
				int minutes = rs.getInt("WFMinutes");
				if(days > 0){
					timeInMinutes += days*24*60;
				}
				if(hours > 0){
					timeInMinutes += hours*60;
				}
				if(minutes > 0){
					timeInMinutes += minutes;
				}
				tempXml.append(gen.writeValueOf("URN",  rs.getString("URN")));
				tempXml.append(gen.writeValueOf("Turnaroundtime",  String.valueOf(timeInMinutes)));
				/*Bug fix for bug#71828 ends here*/
				tempXml.append(gen.writeValueOf("PendingForApproval",  pendingForApproval));
				tempXml.append(gen.writeValueOf("ApprovalSentBy",  rs.getString("ApprovalSentBy")));
				tempXml.append(WFSUtil.getSubProcessDetail(con, rs.getInt("TaskId"), rs.getString("ProcessInstanceId"), rs.getInt("ProcessDefId")));//Task process xml added
				tempXml.append(gen.writeValueOf("ReworkFlag",  reworkFlag));
				tempXml.append("\n</TaskInfo>\n");
                                noMoreFlag = true;
                                retrievedCount++;
                                count++;
			  }
			  if (rs.next()) {
				  count++;
              }
                    
			  if(!noMoreFlag){
                            mainCode = WFSError.WM_NO_MORE_DATA;
                            subCode = 0;
                            subject = WFSErrorMsg.getMessage(mainCode);
                            descr = WFSErrorMsg.getMessage(subCode);
                            errType = WFSError.WF_TMP;
			}
			
		} else {
				mainCode = WFSError.WFS_INV_USR;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
	    	}
		} else {
			mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
			subCode = 0;
			subject = WFSErrorMsg.getMessage(mainCode);
			descr = WFSErrorMsg.getMessage(subCode);
			errType = WFSError.WF_TMP;
		}
		
		
		if (mainCode == 0) {
			if (!con.getAutoCommit()) {
				con.commit();
				con.setAutoCommit(true); 
				commit = false;
			}
		    	
		//	outputXML = new StringBuffer(500);
			outputXML.append(gen.createOutputFile("WFGetTasksForUser"));
			outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
			outputXML.append("<TaskList>");
			outputXML.append(tempXml);
			outputXML.append("</TaskList>\n");
	    	outputXML.append(gen.writeValueOf("RetrievedCount", String.valueOf(retrievedCount)));
			outputXML.append(gen.writeValueOf("Count", String.valueOf(count)));
			outputXML.append("\n");
			outputXML.append(gen.closeOutputFile("WFGetTasksForUser"));
		
		}
	} catch (SQLException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED; 
		subCode = WFSError.WFS_SQL;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_FAT;
		if (e.getErrorCode() == 0) {
			if (e.getSQLState().equalsIgnoreCase("08S01")) {
				descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
			}
		} else {
			descr = e.getMessage();
		}
	} catch (NumberFormatException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_ILP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (NullPointerException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_SYS;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	}catch (WFSException e) {
		mainCode = WFSError.WM_NO_MORE_DATA;
		subCode = 0;
		subject = WFSErrorMsg.getMessage(mainCode);
		descr = WFSErrorMsg.getMessage(subCode);
		errType = WFSError.WF_TMP;
	} catch (JTSException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = e.getErrorCode();
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.getMessage();
	} catch (Exception e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} finally {
		
		try {
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
			if(commit){
				//con.rollback();
				con.setAutoCommit(true);
				}
		} catch (Exception e) {
		WFSUtil.printErr(engine,"", e);
		}
		try{
			if (rs != null) {
				rs.close();
				rs = null;
			}
		}
		catch (Exception e) {

			WFSUtil.printErr(engine,"", e);
		}
		
	}
	if (mainCode != 0) {
        String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
        outputXML.append( errorString);
	}
	return outputXML.toString();
}

/*----------------------------------------------------------------------------------------------------
     Function Name                          : WFInitiateTask
     Date Written (DD/MM/YYYY)              : 23-04-2015
     Author                                 : Sajid Khan
     Input Parameters                       : Connection con, XMLParser parser, XMLGenerator gen
     Output Parameters                      : none
     Return Values                          : String
     Description                            : Initiate a Task by Case Manager with Property Association and Set Task Data.
 ----------------------------------------------------------------------------------------------------*/
/******************************************************************************************************************
 * Algorithm:   
    o	Validate session
    o	Get the list of task from TaskStatusTable on particular Activity+PInstanceId+ProcessDefId+TaskId
    o	Check whether entry exists in WFTaskStatusTable or not .
         If exists , it means Either the task has been Revoked[Status = 4]  or  Reinititated[Status = 3].
            •If Revoked[Status = 4]
                o Update the  AssignedTo , DueDate and Status =2  for that task on particular Activity+PInstanceId+ProcessDefId+TaskId where status = 4.
            •If Reinitiated{Record is available with Status = 3}
                 o Get SubTaskId value  as  max of SubTaskId + 1  for a Data with same processdefid+ActId+TaskId+ProcessInstanceId 
                 o Insert new entry into WFTaskStatus Table with Status = 2 and other values as provide in input like AssignedTo, DueDate etc..
         If not exists, Insert a new record into WFTaskStatusTable With Status = 3{Inititated} and  SubTaskId = 0.
    o	If InterfaceRestriction Flag = Y then 
         Insert date into WFRTTaskInterfaceAssocTable for that task + activity+PInstanceId+PDefId
    o	If while Initiating a task , some or all of the task data are set then 
         Values should be inserted into Specific  task type template table to store the value of template data for task separately.
         If Some or All of the Task Variables are mapped with Process Variables then data for the mapped variables for ProcessInstanceId should be updated in WFInstrumentTable [SetAttributeExt with UserDefVarFlag= Y]

InputXML:
<WFInitiateTask_Input>
	<Option> WFInitiateTask</Option>
	<EngineName>casemgmt</EngineName>
	<SessionID>123414214</SessionId>
	<ProcessDefId>1</ProcessDefId>	
	<ActivityId>3</ActivityId>
	<TaskId>1</TaskId>
	<ProcessInstanceId>abc-0001-process</ProcessInstanceId>
	<WorkItemId>1</WorkItemId>
	<DueDate>2015-05-12  12:22:34</DueDate>
	<AssignedTo>John</AssignedTo>
	<Priority>2</Priority>
        <TemplateId>1</TemplateId>
	<TaskType>1</TaskType>
        <Instruction>Task Instructions</Instruction>
	<TaskInterfaces>
		<Interface>
			<Id>1</Id>
			<Type>T</Type>
			<Name>todo1</Name>
			<Attribute>M</Attribute>
		</Interface>
		<Interface>
			<Id>1</Id>
			<Type>F</Type>
			<Name>form1</Name>
			<Attribute>V</Attribute>
		</Interface>
		<Interface>
			<Id>1</Id>
			<Type>E</Type>
			<Name>excep1</Name>
			<Attribute>VR</Attribute>
		</Interface>
		<Interface>
			<Id>1</Id>
			<Type>E</Type>
			<Name>excep1</Name>
			<Attribute>VC</Attribute>
		</Interface>
        </TaskInterfaces>
        <TaskData>
            <Data>
		<TemplateVariableId>3</TemplateVariableId>
		<TaskVariableName>Approver’s Name</TaskVariableName>
		<Value>Sajid Khan</Value>
                <VariableType>10</VariableType>;3 - INT,4- LONG,6 - FLOAT,8 -DATE,10 – TEXT
           </Data>
           <Data>
		<TemplateVariableId>2</TemplateVariableId>
		<TaskVariableName>Decision By</TaskVariableName>
		<Value>Sajid Khan</Value>
                <VariableType>10</VariableType>
	   </Data>
       </TaskData>
</WFInitiateTask_Input>

OutPutXML
<WFInitiateTask _Output>
	<Option>  WFInitiateTask </Option>
	<Exception>
		<MainCode>0</MainCode>
	</Exception>
	<InitiatedOn>2015-04-24 12:30:56</InitiatedOn>
</WFInitiateTask _ Output>

 * *******************************************************************************************************************/
 public String WFInitiateTask(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
    StringBuilder outputXml = new StringBuilder();
    PreparedStatement pstmt = null;
    PreparedStatement pstmt1 = null;
    PreparedStatement pstmt2 = null;
    Statement stmt = null;
    ResultSet rs = null;
 
    ResultSet rs2 = null;
    int mainCode = 0;
    int subCode = 0;
    String subject = null;
    String descr = null;
    String errType = WFSError.WF_TMP;
    String engine = null;
    
    boolean notifyByEmail = false;
    String taskName ="";
    String userEmail ="";
    String ccUserEmail = "";
    int sessionID = 0;
    int processdefid = 0;
    int activityId = 0;
    int taskId=0;
    String processInstanceId = "";
    String urn= "";
    int workItemId = 0;
    int taskStatus = 0;
    int subTaskId = 0;
    int taskType=0;
    String taskMode="";
    String dueDate="";
    String assgnTo="";
    int noOfTasks=0;
    String taskListXml;
    String instruction="";
    StringBuilder failedList=new StringBuilder("<FailedList>");
    XMLParser tempParser=new XMLParser();
    String strDate="";
	//Changes for Bug 57382
    boolean callTaskListThread=false;
    String strQry1 = "";
    try{ int count=1;
    	noOfTasks=parser.getNoOfFields("TaskInfo");
    	boolean multipleInitiateFlag=noOfTasks>1?true:false;//multiple initiate will always have more than 1 task
    	if(multipleInitiateFlag){
    	taskListXml=parser.getValueOf("TaskList");
    	}
    	do{
    		mainCode = 0;//Used in case of Multiple-Initiate
       try {
    	   sessionID = parser.getIntOf("SessionId", 0, false);
		   engine = parser.getValueOf("EngineName");
		   WFSUtil.printOut(engine,"[WMProcessDefinition:WFInitiateTask] WFInitiateTask executing for : " + parser);
		   int dbType = ServerProperty.getReference().getDBType(engine);
		   processdefid = parser.getIntOf("ProcessDefId", 0, false);
		   activityId = parser.getIntOf("ActivityId", 0, false);
		   processInstanceId = parser.getValueOf("ProcessInstanceId","",false);
		   workItemId = parser.getIntOf("WorkItemId", 1, true);
		  String option = parser.getValueOf("Option","",false);
		  taskType = parser.getIntOf("TaskType", 0, true);
		  String initiateWIInSubTask="";
		  if(multipleInitiateFlag){
			  if(count==1){
				  tempParser.setInputXML(parser.getFirstValueOf("TaskInfo"));
				  count++;
			  }
			  else{
				  tempParser.setInputXML( parser.getNextValueOf("TaskInfo"));
				  count++;
			  }
			  taskId = tempParser.getIntOf("TaskId", 0, false);
		      dueDate = tempParser.getValueOf("DueDate",null,true);
		      
		      if(con.getAutoCommit())
	              con.setAutoCommit(false);
		      	strQry1 = "Select TaskMode,InitiateWI From WFTaskDefTable " + WFSUtil.getTableLockHintStr(dbType) + " Where ProcessDefId = ? And TaskId = ? ";
	            pstmt = con.prepareStatement(strQry1);
	            pstmt.setInt(1, processdefid);
	            pstmt.setInt(2, taskId);
	            rs = pstmt.executeQuery();
	            if(rs.next()){
	            	taskMode=rs.getString("TaskMode");
	                taskMode=taskMode==null?"":taskMode;//To avoid null pointer exception
	                initiateWIInSubTask=rs.getString("InitiateWI");
	            }
	            if(pstmt!= null){
	                pstmt.close();
	                pstmt = null;
	            }
	            if(rs!= null){
	                rs.close();
	                rs = null;
	            }
	            
	            if(!taskMode.equalsIgnoreCase("A") && !taskMode.equalsIgnoreCase("S")) {
	            	 assgnTo = tempParser.getValueOf("AssignedTo","",false);
	            }
		      
		  }
		  else{
		  taskId = parser.getIntOf("TaskId", 0, false);
		   dueDate = parser.getValueOf("DueDate",null,true);
		   
		   if(con.getAutoCommit())
	              con.setAutoCommit(false);
		      	strQry1 = "Select TaskMode,InitiateWI From WFTaskDefTable " + WFSUtil.getTableLockHintStr(dbType) + " Where ProcessDefId = ? And TaskId = ? ";
	            pstmt = con.prepareStatement(strQry1);
	            pstmt.setInt(1, processdefid);
	            pstmt.setInt(2, taskId);
	            rs = pstmt.executeQuery();
	            if(rs.next()){
	            	taskMode=rs.getString("TaskMode");
	                taskMode=taskMode==null?"":taskMode;//To avoid null pointer exception
	                initiateWIInSubTask=rs.getString("InitiateWI");
	            }
	            if(pstmt!= null){
	                pstmt.close();
	                pstmt = null;
	            }
	            if(rs!= null){
	                rs.close();
	                rs = null;
	            }
	            
	            if(!taskMode.equalsIgnoreCase("A") && !taskMode.equalsIgnoreCase("S")) {
	            	assgnTo = parser.getValueOf("AssignedTo","",false);
	            }
		   instruction = parser.getValueOf("Instruction","",true);
		  }
		  int priority = parser.getIntOf("Priority",1,true);
		   //taskType = parser.getIntOf("TaskType", 0, true);
		  
		  WFSUtil.printOut(engine,"[WMProcessDefinition:WFInitiateTask:Expiry] WFInitiateTask executing for : " + processInstanceId);
		  String webServerAddress = parser.getValueOf("WebServerAddress",null,true);
		  int webServerPort = parser.getIntOf("WebServerPort",0,true);
		  boolean showCaseVisual = ((String)parser.getValueOf("ShowCaseVisual","N",true)).equalsIgnoreCase("Y");
		  boolean canInitiate = ((String)parser.getValueOf("CanInitiate","N",true)).equalsIgnoreCase("Y");
		  boolean approvalRequired = ((String)parser.getValueOf("ApprovalRequired","N",true)).equalsIgnoreCase("Y");
		  boolean allowDecline = ((String)parser.getValueOf("AllowDecline","Y",true)).equalsIgnoreCase("Y");
		  boolean allowReassignment = ((String)parser.getValueOf("AllowReassignment","Y",true)).equalsIgnoreCase("Y");
		  String OAPWebServerAddress = parser.getValueOf("OAPWebServerAddress","",true);
		  String omniServiceFlag=parser.getValueOf("OmniService","N",true);
		  int target=0;
		  int Q_DivertedByUserId = 0;
		  String Q_DivertedByUserName = "";
		  HashMap<Integer,WFTaskInfoClass> taskDataMap = new HashMap<Integer,WFTaskInfoClass>();
		  String isReinitiated = "N";
		  String isRevoked = "N";
		  String isDeclined = "N";
		  
		  SimpleDateFormat sdfDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//dd/MM/yyy
		  WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
		  HashMap<String,String> mapForTaskAttributes = new HashMap<String, String>();
		  Calendar cal = Calendar.getInstance();
		  strDate  = WFSUtil.dbDateTime(con, dbType);
		  mapForTaskAttributes.put("ProcessInstanceId", processInstanceId);
		  mapForTaskAttributes.put("WorkItemId", String.valueOf(workItemId));
		  mapForTaskAttributes.put("DueDate",dueDate);
		  mapForTaskAttributes.put("InitiatedOn",strDate);
		  mapForTaskAttributes.put("AssignedTo", assgnTo);
		  mapForTaskAttributes.put("EngineName", engine);
		  mapForTaskAttributes.put("TaskId",String.valueOf(taskId));
		  mapForTaskAttributes.put("OAPWebServerAddress", OAPWebServerAddress);
		  java.util.Date taskEntryDateTime = sdfDate.parse(WFSUtil.dbDateTime(con, dbType));
		  SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
		  if(webServerAddress==null){
		      webServerAddress = "127.0.0.1";
		      webServerPort = 8080;
   
		  } 
		  mapForTaskAttributes.put("WebServerAddress",webServerAddress);
		  mapForTaskAttributes.put("WebServerPort",String.valueOf(webServerPort));
		  
		  if(user != null && (user.gettype() == 'U' || user.gettype() == 'P')) {
			  mapForTaskAttributes.put("InitiatedBy",user.getname());
			  if(instruction==null){
				  instruction  = " ";
			  }
			  //Bug 83485
			  instruction =WFSUtil.handleSpecialCharInXml(instruction,false);
			  mapForTaskAttributes.put("Instructions",instruction);
			  mapForTaskAttributes.put("ActivityType",String.valueOf(32));

			    int userid = user.getid();
			    int noOfInterfaceFields;
			    int noOfTaskDataFields;
			    
			    XMLParser interfaceParser = new XMLParser();
		        XMLParser taskDataParser = new XMLParser();
		        ArrayList interfaceList = new ArrayList();
		        ArrayList taskDataList  = new ArrayList(); 
		        String interfaceName;
		        int interfaceId = 0;
		        String interfaceType = "";
		        String attribute = "";
		        String assgnQry = "";
		        String strQry = "";
		         if(con.getAutoCommit())
		              con.setAutoCommit(false);
		         strQry = "Select NotifyEmail, TaskName,TaskType,TaskMode,Instructions  From WFTaskDefTable " + WFSUtil.getTableLockHintStr(dbType) + " Where ProcessDefId = ? And TaskId = ? ";
		            pstmt = con.prepareStatement(strQry);
		            pstmt.setInt(1, processdefid);
		            pstmt.setInt(2, taskId);
		            rs = pstmt.executeQuery();
		            if(rs.next()){
		                notifyByEmail = "Y".equalsIgnoreCase(rs.getString("NotifyEmail"));
		                taskName = rs.getString(2);
		                mapForTaskAttributes.put("TaskName",taskName);
		                taskType=rs.getInt("TaskType");
		                taskMode=rs.getString("TaskMode");
		                taskMode=taskMode==null?"":taskMode;//To avoid null pointer exception
		                if(multipleInitiateFlag){
		                	instruction=rs.getString("Instructions");
		                }
		            }
		            if(pstmt!= null){
		                pstmt.close();
		                pstmt = null;
		            }
		            if(rs!= null){
		                rs.close();
		                rs = null;
		            }
		         //Returning WM_INVALID_CASE error in Case Task is initiated for a case which has already moved from Case Workstep
		            String checkPreCondition="N";
		            String query1 = "SELECT checkPreCondition from WFTaskPreCheckTable "
							+ WFSUtil.getTableLockHintStr(dbType)
							+ " where ProcessInstanceId=? and WorkItemId=? and ActivityId=? ";
					 pstmt = con.prepareStatement(query1);
					pstmt.setString(1, processInstanceId);
					pstmt.setInt(2, workItemId);
					pstmt.setInt(3, activityId);
					rs = pstmt.executeQuery();
					if (rs.next()) {
						checkPreCondition = rs.getString("checkPreCondition");
					} 
				      if (rs != null) {
							rs.close();
							rs = null;
						}
						if (pstmt != null) {
							pstmt.close();
							pstmt = null;
						}
						boolean autoInitateCase=false;
						if("A".equalsIgnoreCase(checkPreCondition)){
							autoInitateCase = true;
						}
						String ignoreActivityId=" ActivityId = ?";
						if(autoInitateCase){
							ignoreActivityId="1=1";
						}
		         pstmt=con.prepareStatement( "Select ActivityId,URN  from WFINSTRUMENTTABLE " + WFSUtil.getTableLockHintStr(dbType) + " where processInstanceId= ? and WorkItemId= ? and " +ignoreActivityId );
		         WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType); 
		         pstmt.setInt(2,workItemId);
		         if(!autoInitateCase){
		         pstmt.setInt(3,activityId);
		         }
		         pstmt.execute();
		         rs = pstmt.getResultSet();
		         if(rs.next()){
		        	 urn = rs.getString("URN");
		         }
		         else{
		        	 mainCode = WFSError.WM_INVALID_CASE;
		        	 subCode =  0;
		        	 subject = WFSErrorMsg.getMessage(mainCode);
		        	 errType = WFSError.WF_TMP;
		        	 failedList.append("<TaskInfo><TaskName>"+taskName+"</TaskName><TaskId>"+taskId+"</TaskId>").append("<Exception><MainCode>"+mainCode+"</MainCode>").append("<SubCode>"+subCode+"</SubCode>").append("<Subject>"+subject+"</Subject>").append("</Exception></TaskInfo>");
		        	 noOfTasks--;
		        	 continue;
		         }
		         if(pstmt!=null){
		        	 pstmt.close();
		        	 pstmt = null;
		         }
		         if(rs!=null){
		        	 rs.close();
		        	 rs = null;
		         }
		         if(mainCode==WFSError.WM_INVALID_CASE){
		        	 
		        	 failedList.append("<TaskInfo><TaskName>"+taskName+"</TaskName><TaskId>"+taskId+"</TaskId>").append("<Exception><MainCode>"+mainCode+"</MainCode>").append("<SubCode>"+subCode+"</SubCode>").append("<Subject>"+subject+"</Subject>").append("</Exception></TaskInfo>");
		        	 
		        	 noOfTasks--;
		        	 continue;
		         }
		         
		        //Query to check whether the which is being initiated is revoked or Reinitiated case.
		        //If It is revoked case , then update the existing entries
		         //If it is reinitiated then insert new entry in WFTaskStatus Table with subtaskId value as max+1.
		        boolean isInitiateAllowed = WFSUtil.isUserCaseWorker(con, dbType, processdefid, processInstanceId, workItemId, activityId, userid, user.getname());
		        if(!isInitiateAllowed){
		        	if("A".equalsIgnoreCase(checkPreCondition)){
		        		isInitiateAllowed = true;
					}
		        }
		        if(!isInitiateAllowed){

		            //This should never be the case, it means a task which is already in Initated state for a ProcessDefId + ActId+TaskId+WID+ProcessInstanId
		            // can not be initiated unless and untill it is revoked or completed.
		                mainCode = WFSError.WF_NO_AUTHORIZATION_ON_CASE;
		                subCode = 0;
		                subject = WFSErrorMsg.getMessage(mainCode);
		                descr = WFSErrorMsg.getMessage(mainCode);
		                errType = WFSError.WF_TMP;
		                failedList.append("<TaskInfo><TaskName>"+taskName+"</TaskName><TaskId>"+taskId+"</TaskId>").append("<Exception><MainCode>"+mainCode+"</MainCode>").append("<SubCode>"+subCode+"</SubCode>").append("<Subject>"+subject+"</Subject>").append("</Exception></TaskInfo>");
		                noOfTasks--;
		                continue;
		        }
		        else{
		        strQry = "Select  1  from WFTaskStatusTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessInstanceId = ? and WorkitemId = ? and ProcessDefId = ? And ActivityId = ? And "
		                + " TaskId = ?  And TaskStatus = ? "; 
		        pstmt = con.prepareStatement(strQry);
		        WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
		        pstmt.setInt(2, workItemId);
		        pstmt.setInt(3, processdefid);
		        pstmt.setInt(4,activityId);
		        pstmt.setInt(5,taskId);
		        pstmt.setInt(6,WFSConstant.WF_TaskInitiated);
		        rs = pstmt.executeQuery();
		        HashMap<Integer,HashMap<Integer,ArrayList<Integer>>> taskRuleMap=null;
		        if(rs.next()){
		        //This should never be the case, it means a task which is already in Initated state for a ProcessDefId + ActId+TaskId+WID+ProcessInstanId
		        // can not be initiated unless and untill it is revoked or completed.
		            mainCode = WFSError.WF_Task_Already_Initiated;
		            subCode = 0;
		            subject = WFSErrorMsg.getMessage(mainCode);
		            descr = WFSErrorMsg.getMessage(mainCode);
		            errType = WFSError.WF_TMP;
		            failedList.append("<TaskInfo><TaskName>"+taskName+"</TaskName><TaskId>"+taskId+"</TaskId>").append("<Exception><MainCode>"+mainCode+"</MainCode>").append("<SubCode>"+subCode+"</SubCode>").append("<Subject>"+subject+"</Subject>").append("</Exception></TaskInfo>");
		            noOfTasks--;
		            continue;
		        }else{
		        	//Changes for notify by email in Case Management
				   	//Changes for Bug 57382 --checking pre condition for a task 
		        	boolean checkFlg=false;
		        	pstmt=con.prepareStatement("Select Ready,Mandatory from WFTaskPreConditionResultTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessInstanceId=? and WorkitemId=? and ActivityId=? and TaskId=?");
		        	pstmt.setString(1, processInstanceId);
		        	pstmt.setInt(2, workItemId);
		        	pstmt.setInt(3, activityId);
		        	pstmt.setInt(4, taskId);
		        	rs=pstmt.executeQuery();
		        	if(rs.next()){
		        	  	if(rs.getInt("Ready")==0){
		        	  		checkFlg=true;
		        	  	}
		        	}
		        	if(checkFlg && "N".equals(omniServiceFlag)){
		            	 mainCode = WFSError.WF_TASK_PRECONDITION_FAILED;
		                 subCode = 0;
		                 subject = WFSErrorMsg.getMessage(mainCode);
		                 descr = WFSErrorMsg.getMessage(mainCode);
		                 errType = WFSError.WF_TMP;
		                 failedList.append("<TaskInfo><TaskName>"+taskName+"</TaskName><TaskId>"+taskId+"</TaskId>").append("<Exception><MainCode>"+mainCode+"</MainCode>").append("<SubCode>"+subCode+"</SubCode>").append("<Subject>"+subject+"</Subject>").append("</Exception></TaskInfo>");
		        	}
		                   
		        	WFWorkitem wfWorkitem=null;
		        	HashMap childProcessTaskDetails=null;
		            if(taskType==WFSConstant.TASK_PROCESS &&(taskMode.equals(WFSConstant.TASK_SUB_SYNCHRONOUS)||taskMode.equals(WFSConstant.TASK_SUB_ASYNCHRONOUS)||taskMode.equals(WFSConstant.TASK_SUB_USER_DEF_SYNCHRONOUS))){
		               String appServerIP = WFServerProperty.getSharedInstance().getCallBrokerData().getProperty(WFSConstant.CONST_BROKER_APP_SERVER_IP);
		         	   int appServerPort = Integer.parseInt(WFServerProperty.getSharedInstance().getCallBrokerData().getProperty(WFSConstant.CONST_BROKER_APP_SERVER_PORT));
		         	   String appServerType = WFServerProperty.getSharedInstance().getCallBrokerData().getProperty(WFSConstant.CONST_BROKER_APP_SERVER_TYPE);
		               WFRuleEngine wfRuleEngine = WFRuleEngine.getSharedInstance();
		          	   wfRuleEngine.initialize(appServerIP, appServerPort, appServerType);
		            	WFProcess wfProcess = wfRuleEngine.getProcessInfo(processdefid, engine);
		                 wfWorkitem = WFRoutingUtil.getWorkitemForTask(con, wfProcess, processInstanceId, workItemId, processdefid,
		     				   engine, DatabaseTransactionServer.charSet, wfRuleEngine.getRegInfo(),sessionID, user.getid(),false);
		                
		                if(taskMode.equals(WFSConstant.TASK_SUB_SYNCHRONOUS)||taskMode.equals(WFSConstant.TASK_SUB_ASYNCHRONOUS)){
		                	 synchronousTaskRouting(con,wfWorkitem,wfRuleEngine,engine,gen,taskId,taskType,taskMode,subTaskId, user.getid(),dbType, initiateWIInSubTask);
		                }
		                 childProcessTaskDetails = wfWorkitem.getChildProcessDetails();
		                
		                
		            }
		            
		            if(notifyByEmail){
		            	pstmt =con.prepareStatement("Select a.processname, b.activityname from ProcessDefTable a " + WFSUtil.getTableLockHintStr(dbType) + " inner join activitytable b " + WFSUtil.getTableLockHintStr(dbType) + " on a.processdefid = b.processdefid and a.processdefid = ? and b.activityid = ?");
		            	pstmt.setInt(1, processdefid);
		            	pstmt.setInt(2, activityId);
		            	rs=pstmt.executeQuery();
		            	if(rs.next()){
		            		mapForTaskAttributes.put("RouteName",rs.getString("processname"));
		            		mapForTaskAttributes.put("ActivityName",rs.getString("activityname"));
		            	}
		            	 if(pstmt!= null){
		                     pstmt.close();
		                     pstmt = null;
		                 }
		                 if(rs!= null){
		                     rs.close();
		                     rs = null;
		                 }
		            	
		            }
		            
		            strQry = "Select Distinct TaskStatus  from WFTaskStatusTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessInstanceId = ? and WorkitemId = ? and ProcessDefId = ? And ActivityId = ? And "
		                    + " TaskId = ? And TaskStatus IN(?,?,?)";
		            pstmt = con.prepareStatement(strQry);
		            WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
		            pstmt.setInt(2, workItemId);
		            pstmt.setInt(3, processdefid);
		            pstmt.setInt(4,activityId);
		            pstmt.setInt(5,taskId);
		            pstmt.setInt(6,WFSConstant.WF_TaskCompleted);
		            pstmt.setInt(7,WFSConstant.WF_TaskRevoked);
		            pstmt.setInt(8, WFSConstant.WF_TaskDeclined);
		            rs = pstmt.executeQuery();
		            while(rs.next()){
		               taskStatus = rs.getInt(1);
		               if(taskStatus==3){//It means task which is being initiated has already been completed atleast once
		                   isReinitiated = "Y";
		               }else if (taskStatus == 4){//Task which is being initiated has been revoked atleast once.
		                   isRevoked = "Y";

		               }else if (taskStatus == 5) {
		                   isDeclined = "Y";
		               } 

		               }

		            if("Y".equalsIgnoreCase(isRevoked)){
		                isReinitiated = "N";
		            }
		            if(pstmt!= null){
		                pstmt.close();
		                pstmt = null; 
		            }
		            if(rs!= null){
		                rs.close();
		                rs = null;
		            }
		            
		            	pstmt = con.prepareStatement("Select max(SubTaskId) as NewSubTaskId from WFTaskStatusTable "+WFSUtil.getTableLockHintStr(dbType)+" where ProcessInstanceId = ? and" +
		                				" WorkItemId = ? and processdefid=?  And ActivityId = ? And TaskId = ?");
		                WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
		                pstmt.setInt(2,workItemId);
		                pstmt.setInt(3,processdefid);
		                pstmt.setInt(4,activityId);
		                pstmt.setInt(5,taskId);
		                rs= pstmt.executeQuery();
		                if(rs.next()){
		                    if("Y".equalsIgnoreCase(isRevoked) || "Y".equalsIgnoreCase(isDeclined))
		                         subTaskId = rs.getInt(1);
		          		else if ("Y".equalsIgnoreCase(isReinitiated))
		                        subTaskId = rs.getInt(1)+1;
		                }
		           
		            if(rs!= null){
		                rs.close();
		                rs = null;
		            }
		            if (taskType==WFSConstant.TASK_PROCESS &&(taskMode.equals(WFSConstant.TASK_SUB_SYNCHRONOUS)||taskMode.equals(WFSConstant.TASK_SUB_ASYNCHRONOUS))){
		            	assgnTo="System";
		            }                
		            else{
						pstmt = con
								.prepareStatement(" Select UserIndex from WFUserView  where Upper(UserName) = ?");// for Bug 57652 - while diversion, tasks should also be diverted along with the workitems 
						WFSUtil.DB_SetString(1, assgnTo.toUpperCase(), pstmt,
								dbType);
						pstmt.execute();
						rs = pstmt.getResultSet();
						if (rs.next()) {
							target = rs.getInt("UserIndex");
						}
						if (rs != null) {
							rs.close();
							rs = null;
						}
						if (pstmt != null) {
							pstmt.close();
							pstmt = null;
						}
						if (target > 0) {
							int divertId = WFSUtil.getDivert(con, target, dbType,processdefid,activityId);
							if (divertId != target) {
								//get user name also
								pstmt = con
										.prepareStatement("Select Username from WFUserView where UserIndex = ?");
								pstmt.setInt(1, divertId);
								pstmt.execute();
								rs = pstmt.getResultSet();
								if (rs != null && rs.next()) {
									Q_DivertedByUserName = assgnTo;
									assgnTo = rs.getString("UserName").trim();
									Q_DivertedByUserId = target;
									target = divertId;
								} else {
									mainCode = WFSError.WM_INVALID_TARGET_USER;
									subCode = 0;
									subject = WFSErrorMsg.getMessage(mainCode);
									descr = WFSErrorMsg.getMessage(subCode);
									errType = WFSError.WF_TMP;
									failedList.append("<TaskInfo><TaskName>"+taskName+"</TaskName><TaskId>"+taskId+"</TaskId>").append("<Exception><MainCode>"+mainCode+"</MainCode>").append("<SubCode>"+subCode+"</SubCode>").append("<Subject>"+subject+"</Subject>").append("</Exception></TaskInfo>");
									noOfTasks--;
									continue;
								}
								if (rs != null) {
									rs.close();
									rs = null;
								}
								if (pstmt != null) {
									pstmt.close();
									pstmt = null;
								}
							}
						} else {
							mainCode = WFSError.WM_INVALID_TARGET_USER;
							subCode = 0;
							subject = WFSErrorMsg.getMessage(mainCode);
							descr = WFSErrorMsg.getMessage(subCode);
							errType = WFSError.WF_TMP;
							failedList.append("<TaskInfo><TaskName>"+taskName+"</TaskName><TaskId>"+taskId+"</TaskId>").append("<Exception><MainCode>"+mainCode+"</MainCode>").append("<SubCode>"+subCode+"</SubCode>").append("<Subject>"+subject+"</Subject>").append("</Exception></TaskInfo>");
							noOfTasks--;
							continue;
						}
					}
					if("Y".equalsIgnoreCase(isRevoked)){
		                assgnQry = " Update WFTaskStatusTable set ActionDateTime = "+WFSUtil.TO_DATE(strDate, true, dbType)+",AssignedBy = ? ,InitiatedBy =?, AssignedTo =?," +
		                			"DueDate = "+WFSUtil.TO_DATE(dueDate, true, dbType)+",TaskStatus = ?, Priority = ?,Instructions = ?,Q_DivertedByUserId=? ," +
		                			" showCaseVisual=?, CanInitiate=?, ApprovalRequired=?,AllowDecline=?,AllowReassignment=? " +
		                			" Where ProcessInstanceId = ? and WorkItemId = ?  and ProcessDefId = ? And ActivityId = ? And TaskId = ? And SubTaskId = ? ";
		                pstmt = con.prepareStatement(assgnQry);
		                WFSUtil.DB_SetString(1, user.getname(), pstmt, dbType);
		                WFSUtil.DB_SetString(2, user.getname(), pstmt, dbType);
		                WFSUtil.DB_SetString(3, assgnTo, pstmt, dbType);
		                pstmt.setInt(4,2);
		                pstmt.setInt(5,priority);
		                WFSUtil.DB_SetString(6,instruction,pstmt,dbType);
		                pstmt.setInt(7, Q_DivertedByUserId);
		                WFSUtil.DB_SetString(8, showCaseVisual?"Y":"N", pstmt, dbType);
		                WFSUtil.DB_SetString(9, canInitiate?"Y":"N", pstmt, dbType);
		                WFSUtil.DB_SetString(10, approvalRequired?"Y":"N", pstmt, dbType);
		                WFSUtil.DB_SetString(11, allowDecline?"Y":"N", pstmt, dbType);
		                WFSUtil.DB_SetString(12, allowReassignment?"Y":"N", pstmt, dbType);
		                WFSUtil.DB_SetString(13, processInstanceId, pstmt, dbType);
		                pstmt.setInt(14, workItemId);
		                pstmt.setInt(15, processdefid);
		                pstmt.setInt(16,activityId);
		                pstmt.setInt(17,taskId);
		                pstmt.setInt(18, subTaskId);
		                
					}else if("Y".equalsIgnoreCase(isDeclined)){
		                assgnQry = " Update WFTaskStatusTable set ActionDateTime = "+WFSUtil.TO_DATE(strDate, true, dbType)+",AssignedBy = ? ,InitiatedBy =?, AssignedTo =?,"
		            			+ " DueDate = "+WFSUtil.TO_DATE(dueDate, true, dbType)+",TaskStatus = ?, Priority = ?,Instructions = ?,Q_DivertedByUserId=?, "
		            			+ " showCaseVisual=?, CanInitiate=?, ApprovalRequired=?,AllowDecline=?,AllowReassignment=? Where ProcessInstanceId = ? and WorkItemId = ?  and ProcessDefId = ?"
		            			+ " And ActivityId = ? And TaskId = ? And SubTaskId = ? ";
		                pstmt = con.prepareStatement(assgnQry);
		                WFSUtil.DB_SetString(1, user.getname(), pstmt, dbType);
		                WFSUtil.DB_SetString(2, user.getname(), pstmt, dbType);
		                WFSUtil.DB_SetString(3, assgnTo, pstmt, dbType);
		                pstmt.setInt(4,2);
		                pstmt.setInt(5,priority);
		                WFSUtil.DB_SetString(6,instruction,pstmt,dbType);
		                pstmt.setInt(7, Q_DivertedByUserId);
		                WFSUtil.DB_SetString(8, showCaseVisual?"Y":"N", pstmt, dbType);
		                WFSUtil.DB_SetString(9, canInitiate?"Y":"N", pstmt, dbType);
		                WFSUtil.DB_SetString(10, approvalRequired?"Y":"N", pstmt, dbType);
		                WFSUtil.DB_SetString(11, allowDecline?"Y":"N", pstmt, dbType);
		                WFSUtil.DB_SetString(12, allowReassignment?"Y":"N", pstmt, dbType);
		                WFSUtil.DB_SetString(13, processInstanceId, pstmt, dbType);
		                pstmt.setInt(14, workItemId);
		                pstmt.setInt(15, processdefid);
		                pstmt.setInt(16,activityId);
		                pstmt.setInt(17,taskId);
		                pstmt.setInt(18, subTaskId);
		            
					}else{
		                 assgnQry = " Insert Into WFTaskStatusTable(ProcessInstanceId,WorkItemId, ProcessDefId, ActivityId,TaskId"
		                         + ",TaskStatus,ActionDateTime,AssignedBy,AssignedTo,DueDate,Priority, SubTaskId,Instructions,showCaseVisual,CanInitiate,Q_DivertedByUserId,InitiatedBy,TaskEntryDateTime,ApprovalRequired,AllowDecline,AllowReassignment,ChildProcessInstanceId,ChildWorkitemId) Values"+
		                          "(?,?,?,?,?,?,"+WFSUtil.TO_DATE(strDate, true, dbType) +",?,?,"
		                            +WFSUtil.TO_DATE(dueDate, true, dbType)+",?,?,?,?,?,?,?,?,?,?,?,?,?)";
		                	
		                pstmt = con.prepareStatement(assgnQry);
		                WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
		                pstmt.setInt(2, workItemId);
		                pstmt.setInt(3, processdefid);
		                pstmt.setInt(4,activityId);
		                pstmt.setInt(5,taskId);
		                pstmt.setInt(6,2);
		                WFSUtil.DB_SetString(7, "Y".equals(omniServiceFlag)?"System":user.getname(), pstmt, dbType);
		                WFSUtil.DB_SetString(8, assgnTo, pstmt, dbType);
		                pstmt.setInt(9,priority);
		                pstmt.setInt(10,subTaskId);
		                WFSUtil.DB_SetString(11,instruction,pstmt,dbType);
		                pstmt.setString(12, showCaseVisual?"Y":"N");
		                pstmt.setString(13, canInitiate?"Y":"N");
		                pstmt.setInt(14, Q_DivertedByUserId);
		                WFSUtil.DB_SetString(15,user.getname(),pstmt,dbType);
		                pstmt.setTimestamp(16, new Timestamp(taskEntryDateTime.getTime()));
		                pstmt.setString(17, approvalRequired?"Y":"N");
		                pstmt.setString(18, allowDecline?"Y":"N");
		                pstmt.setString(19, allowReassignment?"Y":"N");
						
						if(childProcessTaskDetails != null){
		                pstmt.setString(20, (String) childProcessTaskDetails.get("ChildProcessInstanceID"));
		                pstmt.setInt(21, 1);
						}else{
							 pstmt.setString(20,"");
				                pstmt.setInt(21,0);
						}
		                
		            }
					try{
						pstmt.execute();
					}catch(SQLException ex){
						WFSUtil.printOut(engine,"[WMProcessDefinition:WFInitiateTask] WFInitiateTask SQL Exception for processInstanceId = " + processInstanceId + ", activityId = " + activityId + ", taskId = " + taskId);
						return null;
					}

					//Changes for Adhoc Task --**Mohnish**
		            String scope = "P";
		            boolean useSeparateTable = true;
		            
		            if(taskId>0){
		            	String taskQry = "Select Scope,UseSeparateTable from WFTaskDefTable where  ProcessDefId =? And TaskId = ?";
		            	pstmt = con.prepareStatement(taskQry);
		            	pstmt.setInt(1,processdefid);
		            	pstmt.setInt(2,taskId);
		            	rs = pstmt.executeQuery();
		            	if(rs.next()){
		            		scope= rs.getString("Scope");
		            		useSeparateTable = ("Y").equalsIgnoreCase(rs.getString("UseSeparateTable"));
		            	}
		            }
		            if(rs!=null){
		            	rs.close();
		            	rs=null;
		            }
		            if(pstmt!=null){
		            	pstmt.close();
		            	pstmt=null;
		            }
		            //For Multiple initiate <TaskData> and <Interface> wont come from Frontend
		            XMLParser temp=new XMLParser();
		            if(multipleInitiateFlag){
		  	    	  String taskDataXml=(String)WFSUtil.getTaskData(con, processdefid, processInstanceId, workItemId, activityId, taskId, subTaskId, dbType, engine, sessionID);
					  temp.setInputXML(taskDataXml);
		  	    	  noOfTaskDataFields  = temp.getNoOfFields("Data");
		            }else{
		            	noOfTaskDataFields  = parser.getNoOfFields("Data");
		            }
		           if(noOfTaskDataFields>0){
		                 int templateVarId = 0;
		                 String taskVarName = "";
		                 String value = "";
		                 int variableType = 0;
		                 if (multipleInitiateFlag) {
							taskDataList.add(temp.getFirstValueOf("Data"));
							for (int i = 1; i < noOfTaskDataFields; i++) {
								taskDataList.add(temp.getNextValueOf("Data"));
							}
							
						}
		                 else{
							taskDataList.add(parser.getFirstValueOf("Data"));
							for (int i = 1; i < noOfTaskDataFields; i++) {
								taskDataList.add(parser.getNextValueOf("Data"));
							}
							
					     }
						for(int i = 0; i < noOfTaskDataFields; i++){
		                    taskDataParser.setInputXML((String) taskDataList.get(i));
		                    templateVarId = taskDataParser.getIntOf("TemplateVariableId",0,true);
		                    taskVarName = taskDataParser.getValueOf("TaskVariableName");
		                    value  = taskDataParser.getValueOf("Value");
		                    variableType = taskDataParser.getIntOf("VariableType",0,false);
		                    taskDataMap.put(templateVarId,new WFTaskInfoClass(templateVarId, taskVarName, value,variableType));
		                 }
						//Changes for Adhoc Task **Mohnish**
		                 mainCode = WFSUtil.setTaskData(con,user, engine,dbType,processdefid,processInstanceId,workItemId,activityId,
		                                        taskId,subTaskId,taskType,taskDataMap,false,new Boolean[]{false},scope,useSeparateTable,omniServiceFlag.equals("Y")?true:false);
		                 if(mainCode!=0){
		                     //Handle new error code to represent Error while Saving Task Data
		                        mainCode = WFSError.WF_TASK_DATA_NOTSAVED;
		                        subCode = 0;
		                        subject = WFSErrorMsg.getMessage(mainCode);
		                        descr = WFSErrorMsg.getMessage(mainCode);
		                        errType = WFSError.WF_TMP;

		                 }
		           } 

		           //Interface needs to be set again for Workitem in WFRTTaskInterfaceAssocTable 
		           if(multipleInitiateFlag){
		   	    	  String interfaceXml =WFGetTaskPropertyAssociationForAutoInitiateTask(con,processdefid,processInstanceId,workItemId,activityId,taskId,dbType,engine,sessionID,userid,0,subTaskId,taskType,new LinkedHashMap(taskDataMap),gen);
		   	    	temp.setInputXML(interfaceXml);
				    	noOfInterfaceFields = temp.getNoOfFields("Interface");
		   	     }else{
		            noOfInterfaceFields = parser.getNoOfFields("Interface");
		             }
		           if(noOfInterfaceFields > 0) {
		           	if(multipleInitiateFlag){
		                   interfaceList.add(temp.getFirstValueOf("Interface"));
		                   for(int i = 1; i < noOfInterfaceFields; i++) {
		                   	interfaceList.add(temp.getNextValueOf("Interface"));
		                   }
		                   interfaceList.add(temp.getFirstValueOf("Interface"));
		               }
		           	else{
		               interfaceList.add(parser.getFirstValueOf("Interface"));
		               for(int i = 1; i < noOfInterfaceFields; i++) {
		               	interfaceList.add(parser.getNextValueOf("Interface"));
		               }
		               interfaceList.add(parser.getFirstValueOf("Interface"));
		           	}
		           

		               //Delete the enteries present in WFRTTaskInterfaceAssocTable and Insert the new associations of interfaces. 
		               pstmt1 = con.prepareStatement(" Delete  from WFRTTaskInterfaceAssocTable where ProcessInstanceId = ?"
		                        + " And WorkitemId = ? And ProcessDefId = ? And ActivityId = ? And  TaskId = ?  ");
		               WFSUtil.DB_SetString(1, processInstanceId, pstmt1, dbType);
		               pstmt1.setInt(2,workItemId);
		               pstmt1.setInt(3, processdefid);
		               pstmt1.setInt(4, activityId);
		               pstmt1.setInt(5,taskId);
		               
		               pstmt1.execute();

		               if(pstmt!=null){
		                   pstmt.close();
		                   pstmt = null;
		               }

		               pstmt = con.prepareStatement("Insert Into WFRTTaskInterfaceAssocTable(ProcessinstanceId, WorkItemId,"
		                         + " ProcessDefId, ActivityId, TaskId, InterfaceId, InterfaceType, Attribute) Values ( ?,?,?,?,?,?,?,?)");
		                         
		                for(int i = 0; i < noOfInterfaceFields; i++){
		                   interfaceParser.setInputXML((String) interfaceList.get(i));
		                   interfaceId = interfaceParser.getIntOf("Id",0,true);
		                   interfaceType = interfaceParser.getValueOf("Type");
		                   interfaceName = interfaceParser.getValueOf("Name");
		                   attribute = interfaceParser.getValueOf("Attribute");
		                   
		                   WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
		                   pstmt.setInt(2, workItemId);
		                   pstmt.setInt(3, processdefid);
		                   pstmt.setInt(4, activityId);
		                   pstmt.setInt(5, taskId);
		                   pstmt.setInt(6,interfaceId);
		                   pstmt.setString(7,interfaceType);
		                   pstmt.setString(8,attribute);
		                   pstmt.addBatch();
		                }
		                pstmt.executeBatch();
		                if(pstmt!=null){
		                   pstmt.close();
		                }
		           }
		       }
		        }
		        if(mainCode ==0){
		        	//Update the validTill column in WFTaskExpiryOperation Table for Task Expiry feature
					try {
						if ("N".equalsIgnoreCase(isDeclined)) {
      					  	WFSUtil.printOut(engine,"[WMProcessDefinition:WFInitiateTask:Expiry] WFInitiateTask Setting expiry for taskid = " + taskId + " PID : " + processInstanceId);
							String baseTime = "";
							int durationId = 0;
							int expOpr = 0;
							String expTillVar = "";
							int extObjId = 0;
							String expCalFlag = "";
							java.sql.Timestamp turnAroundTime = null;
							java.util.Date validtill = null;

							pstmt = con.prepareStatement(
									"select Expiry, ExpiryOperator, ExpireUntillVariable, ExtObjId, ExpCalFlag from "
											+ " WFTaskExpiryOperation where processdefid = ? and taskid = ? and NeverExpireFlag = ?");
							pstmt.setInt(1, processdefid);
							pstmt.setInt(2, taskId);
							WFSUtil.DB_SetString(3, "Y", pstmt, dbType);
							rs = pstmt.executeQuery();
							boolean hasSetExpiry = false;
							if (rs.next()) {
								hasSetExpiry = true;
								durationId = rs.getInt("Expiry");
								expOpr = rs.getInt("ExpiryOperator");
								expTillVar = rs.getString("ExpireUntillVariable");
								extObjId = rs.getInt("ExtObjId");
								expCalFlag = rs.getString("ExpCalFlag");
							}
							if (rs != null) {
								rs.close();
								rs = null;
							}
							if (pstmt != null) {
								pstmt.close();
								pstmt = null;
							}
							WFSUtil.printOut(engine,"[WMProcessDefinition:WFInitiateTask:Expiry] WFInitiateTask expiry details: hasSetExpiry = " + hasSetExpiry + " durationId = " + durationId + " expOpr = " + expOpr + " expTillVar = " + expTillVar + " extObjId = " + extObjId + " expCalFlag = " + expCalFlag);
							if(hasSetExpiry){
								Map<String, Integer> durationMap = WFSUtil.getDateTimeMapFromDuration(con, processdefid, durationId, taskId, processInstanceId, workItemId, activityId, dbType, engine);
								if (expTillVar.equalsIgnoreCase("CurrentDateTime")) {
									baseTime = sf.format(sdfDate.parse(WFSUtil.dbDateTime(con, dbType)));
								} else if (expTillVar.equalsIgnoreCase("CaseEntryDateTime") || expTillVar.equalsIgnoreCase("EntryDateTime")) {
									expTillVar = "EntryDateTime";
									int variableId = 0;
									int varExtObjId = 0;
									pstmt = con.prepareStatement("select VariableId, ExtObjId from varmappingtable " + WFSUtil.getTableLockHintStr(dbType) + " where processdefid = ? and UserDefinedName = ?");
									pstmt.setInt(1, processdefid);
									WFSUtil.DB_SetString(2, expTillVar, pstmt, dbType);
									rs = pstmt.executeQuery();
									if (rs.next()) {
										variableId = rs.getInt("VariableId");
										varExtObjId = rs.getInt("ExtObjId");
									}
									if (rs != null) {
										rs.close();
										rs = null;
									}
									if (pstmt != null) {
										pstmt.close();
										pstmt = null;
									}
									baseTime = WFSUtil.getVariableValue(con, variableId, expTillVar, processdefid, processInstanceId, workItemId, activityId, taskId, dbType, engine, varExtObjId);
								} else if (expTillVar.equalsIgnoreCase("TaskEntryDateTime")) {
									baseTime = sf.format(taskEntryDateTime);
								} else if (expTillVar.equalsIgnoreCase("TurnAroundDateTime")) {
									pstmt = con.prepareStatement("select ExpectedWorkitemDelay,EntryDATETIME  from wfinstrumenttable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessInstanceID = ?");
									WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
									rs = pstmt.executeQuery();
									if (rs.next()) {
										turnAroundTime = rs.getTimestamp("ExpectedWorkitemDelay");
										if(turnAroundTime == null){
											turnAroundTime = rs.getTimestamp("EntryDATETIME");
										}
									}
									if (rs != null) {
										rs.close();
										rs = null;
									}
									if (pstmt != null) {
										pstmt.close();
										pstmt = null;
									}
									if(turnAroundTime != null){
										baseTime = sf.format(turnAroundTime);
									}
								}else if("TaskDueDate".equalsIgnoreCase(expTillVar)){
									baseTime = dueDate;
								} else {
									int variableId = 0;
									int varExtObjId = 0;
									String varName = "";
									pstmt = con.prepareStatement("select VariableId, ExtObjId, SystemDefinedName from varmappingtable " + WFSUtil.getTableLockHintStr(dbType) + " where processdefid = ? and UserDefinedName = ?");
									pstmt.setInt(1, processdefid);
									WFSUtil.DB_SetString(2, expTillVar, pstmt, dbType);
									rs = pstmt.executeQuery();
									if (rs.next()) {
										variableId = rs.getInt("VariableId");
										varExtObjId = rs.getInt("ExtObjId");
										varName = rs.getString("SystemDefinedName");
									}
									if (rs != null) {
										rs.close();
										rs = null;
									}
									if (pstmt != null) {
										pstmt.close();
										pstmt = null;
									}
									baseTime = WFSUtil.getVariableValue(con, variableId, varName, processdefid, processInstanceId, workItemId, activityId, taskId, dbType, engine, varExtObjId);
								}
								cal.setTime(sdfDate.parse(baseTime.contains(".")?baseTime.substring(0, baseTime.indexOf(".")):baseTime));
								WFSUtil.printOut(engine,"[WMProcessDefinition:WFInitiateTask:Expiry] WFInitiateTask setting baseTime = " + baseTime);								
								if("N".equalsIgnoreCase(expCalFlag)){
									if(expOpr == 11){
										//Plus opertaion
										cal.add(Calendar.YEAR, durationMap.get("Year").intValue());
										cal.add(Calendar.MONTH, durationMap.get("Month").intValue());
										cal.add(Calendar.DATE, durationMap.get("Day").intValue());
										cal.add(Calendar.HOUR_OF_DAY, durationMap.get("Hour").intValue());
										cal.add(Calendar.MINUTE, durationMap.get("Minute").intValue());
										cal.add(Calendar.SECOND, durationMap.get("Second").intValue());
									}else if(expOpr == 12){
										//Minus operation
										cal.add(Calendar.YEAR, -durationMap.get("Year").intValue());
										cal.add(Calendar.MONTH, -durationMap.get("Month").intValue());
										cal.add(Calendar.DATE, -durationMap.get("Day").intValue());
										cal.add(Calendar.HOUR_OF_DAY, -durationMap.get("Hour").intValue());
										cal.add(Calendar.MINUTE, -durationMap.get("Minute").intValue());
										cal.add(Calendar.SECOND, -durationMap.get("Second").intValue());
									}
								}else{
									String calendarName = null;
									stmt = con.createStatement();
									java.util.Date calDate = cal.getTime();
									String queryStr = " Select CalendarName From WFINSTRUMENTTABLE "+ WFSUtil.getTableLockHintStr(dbType) +" where ProcessInstanceID = " + WFSUtil.TO_STRING(processInstanceId, true, dbType) + " And WorkitemId = 1";
									rs = WFSUtil.jdbcExecuteQuery(processInstanceId, sessionID, user.getid(), queryStr, stmt, null, false, engine);
									if(rs.next()){
										calendarName = rs.getString(1);
									}
									if (rs != null) {
										rs.close();
										rs = null;
									}
									if (pstmt != null) {
										pstmt.close();
										pstmt = null;
									}
									WFCalAssocData wfCalAssocData = WFSUtil.getWICalendarInfo(con, engine, processdefid, "0", calendarName);
									if(wfCalAssocData != null){
										calDate = WFCalUtil.getSharedInstance().getNextDateTime(calDate, durationMap.get("Year"), durationMap.get("Month"), durationMap.get("Day"), durationMap.get("Hour"), durationMap.get("Minute"), durationMap.get("Second"), wfCalAssocData.getProcessDefId(), wfCalAssocData.getCalId());
									}else{
										calDate = null;
									}
									cal.setTime(calDate);
								}
								validtill = cal.getTime();
								WFSUtil.printOut(engine,"[WMProcessDefinition:WFInitiateTask:Expiry] WFInitiateTask setting validtill = " + validtill);
								pstmt = con.prepareStatement( "update WFTaskStatusTable set validTill = ? where processInstanceId = ? and workItemId = ? and " + " processdefid = ? and activityId = ? and taskId = ? and subTaskId = ?");
								WFSUtil.printOut(engine,"[WMProcessDefinition:WFInitiateTask:Expiry] ValidTill = update WFTaskStatusTable set validTill = ? where processInstanceId = ? and workItemId = ? and " + " processdefid = ? and activityId = ? and taskId = ? and subTaskId = ?");
								WFSUtil.printOut(engine,"[WMProcessDefinition:WFInitiateTask:Expiry] ValidTill = " + validtill.getTime() + ", processInstanceId = " + processInstanceId + ", workItemId = " + workItemId + ", processdefid = " + processdefid + ", activityId = " + activityId + ", taskId = " + taskId + ", subTaskId = " + subTaskId);
								int updateCount = 0;
								pstmt.setTimestamp(1, new java.sql.Timestamp(validtill.getTime()));
								WFSUtil.DB_SetString(2, processInstanceId, pstmt, dbType);
								pstmt.setInt(3, workItemId);
								pstmt.setInt(4, processdefid);
								pstmt.setInt(5, activityId);
								pstmt.setInt(6, taskId);
								pstmt.setInt(7, subTaskId);
								updateCount = pstmt.executeUpdate();
								WFSUtil.printOut(engine,"[WMProcessDefinition:WFInitiateTask:Expiry] Update count = " + updateCount);
								if (pstmt != null) {
									pstmt.close();
									pstmt = null;
								}
							}
						}
					}catch(Exception ex){
						WFSUtil.printErr(engine, "", ex);
		                mainCode = WFSError.WF_TASK_EXPIRY_FAILED_ON_INITIATE;
		                subCode = 0;
		                subject = WFSErrorMsg.getMessage(mainCode);
		                descr = WFSErrorMsg.getMessage(mainCode);
		                errType = WFSError.WF_TMP;
		                failedList.append("<TaskInfo><TaskName>"+taskName+"</TaskName><TaskId>"+taskId+"</TaskId>").append("<Exception><MainCode>"+mainCode+"</MainCode>").append("<SubCode>"+subCode+"</SubCode>").append("<Subject>"+subject+"</Subject>").append("</Exception></TaskInfo>");
					}finally{
						if (rs != null) {
							rs.close();
							rs = null;
						}
						if (pstmt != null) {
							pstmt.close();
							pstmt = null;
						}
					}
		        }
		        WFSUtil.printOut(engine,"[WMProcessDefinition:WFInitiateTask:Expiry] After setting up expiry");
				//Task Escalation prework starts here
		        if(mainCode == 0){
					try{
						//if ("N".equalsIgnoreCase(isRevoked) && "N".equalsIgnoreCase(isDeclined)) {
							cal = Calendar.getInstance();
							java.util.Date scheduleTime = null;
							int noOfTasksEscalated = 0;
							if(dbType == JTSConstant.JTS_MSSQL){
								pstmt1 = con.prepareStatement(" insert into WFEscalationTable(ProcessInstanceId, WorkitemId, ProcessDefId, ActivityId, TaskId, "
										+ " EscalationMode, ConcernedAuthInfo, Comments, Message, ScheduleTime, FromId, CCId, BCCId, Frequency, "
										+ " FrequencyDuration) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ");
							}else{
								String escalationIdStr = WFSUtil.nextVal(con, "EscalationId", dbType);
								int escalationId = Integer.parseInt(escalationIdStr);
								pstmt1 = con.prepareStatement(" insert into WFEscalationTable(EscalationId, ProcessInstanceId, WorkitemId, ProcessDefId, ActivityId, TaskId, "
										+ " EscalationMode, ConcernedAuthInfo, Comments, Message, ScheduleTime, FromId, CCId, BCCId, Frequency, "
										+ " FrequencyDuration) values ( "+ escalationId + ",?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ");
							}
							//Activity ID -1 to differentiate between the task escalation and activity escalation
							pstmt = con.prepareStatement("select RuleId, OperationType, Param1, Type1, ExtObjID1, VariableId_1, VarFieldId_1, Param2, Type2, "
									+ " ExtObjID2, VariableId_2, VarFieldId_2, Param3, Type3, ExtObjID3, VariableId_3, VarFieldId_3, Operator, AssignedTo, "
									+ " OperationOrderId, RuleCalFlag from WFTaskRuleOperationTable " + WFSUtil.getTableLockHintStr(dbType) + " where processdefid = ? and ActivityId = -1 and taskid = ? and "
									+ " OperationType = 26");
							pstmt.setInt(1, processdefid);
							pstmt.setInt(2, taskId);
							rs = pstmt.executeQuery();
							while (rs.next()) {
								noOfTasksEscalated += 1;
								String param1 = rs.getString("Param1");
								String type1 = rs.getString("Type1");
								int extObjId1 = rs.getInt("ExtObjID1");
								int varId1 = rs.getInt("VariableId_1");
			
								String param2 = rs.getString("Param2");
								String type2 = rs.getString("Type2");
								int extObjId2 = rs.getInt("ExtObjID2");
								int varId2 = rs.getInt("VariableId_2");
			
								String param3 = rs.getString("Param3");
								String type3 = rs.getString("Type3");
								int extObjId3 = rs.getInt("ExtObjID3");
								int varId3 = rs.getInt("VariableId_3");
			
								String ruleCalFlag = rs.getString("RuleCalFlag");
								String mailFrom = null;
								String mailTo = null;
								StringBuilder ccTo = new StringBuilder("");
								String bccTo = null;
								String mailSubject = null;
								String mailMessage = null;
								int mailPriority = 0;
			
								String baseTime = "";
			
								if (type1.equalsIgnoreCase("V")) {
									int triggerId = Integer.parseInt(param1);
									Map<String, String> attribMap = new HashMap<String, String>();
									Map<String, String> mailMap = WFSUtil.getMailMapFromTable(con, processdefid, triggerId, processInstanceId, workItemId, activityId, taskId, dbType, engine, user.getname());
									mailFrom = mailMap.get("FROM");
									mailTo = mailMap.get("TO");
									String ccToStr = mailMap.get("CC");
									ccTo.append((ccToStr != null && !ccToStr.isEmpty())?ccToStr : "");
									bccTo = mailMap.get("BCC");
									String subjectWithTag = mailMap.get("SUBJECT");
									String messageWithTag = mailMap.get("MESSAGE");
									//Adding the code to get Map of SystemDefinedName and userDefinedName
									pstmt2 = con.prepareStatement("select SystemDefinedName, UserDefinedName from varmappingtable " + WFSUtil.getTableLockHintStr(dbType) + "where processdefid = ? and VariableScope <> 'I' and UserDefinedName is not null");
									pstmt2.setInt(1, processdefid);
									rs2 = pstmt2.executeQuery();
									while(rs2.next()){
										String sysDefName = rs2.getString(1);
										String userDefName = rs2.getString(2);
										attribMap.put(userDefName.toUpperCase(), sysDefName.toUpperCase());
									}
									if (rs2 != null) {
										rs2.close();
										rs2 = null;
									}
									if (pstmt2 != null) {
										pstmt2.close();
										pstmt2 = null;
									}
									//Added till here the code to get the map of the sysdefname and userdefname
									mailSubject = WFSUtil.replaceMailTags(subjectWithTag, con, processdefid, processInstanceId, workItemId, activityId, taskId, dbType, attribMap, engine);
									mailMessage = WFSUtil.replaceMailTags(messageWithTag, con, processdefid, processInstanceId, workItemId, activityId, taskId, dbType, attribMap, engine);
							    	 if(!mailMessage.toUpperCase().contains("</HTML>"))
							    		 mailMessage = "<html><body>"+mailMessage.replaceAll("\n","<br>")+"</body></html>";
									String mailPriorityStr = mailMap.get("PRIORITY");
									if (mailPriorityStr != null && !mailPriorityStr.isEmpty()) {
										mailPriority = Integer.parseInt(mailPriorityStr);
									}else{
										mailPriority = 1;
									}
								}
								// CCing Case Manager, Case Worker and Task Initiator
								String caseManager = WFSUtil.getCaseManager(con, processInstanceId, processdefid, workItemId, dbType, engine);
								String taskInitiator = user.getname();
		
								if(mailFrom == null || mailFrom.isEmpty()){
									mailFrom = "OmniFlowSystem_do_not_reply@newgen.co.in";
								}
								if(caseManager == null || caseManager.isEmpty()){
									pstmt2 = con.prepareStatement(" Select MailId From wfuserview Where Upper(UserName) IN (?, ?) ");
									WFSUtil.DB_SetString(1, taskInitiator, pstmt2, dbType);
									WFSUtil.DB_SetString(2, assgnTo, pstmt2, dbType);
								}else{
									pstmt2 = con.prepareStatement(" Select MailId From wfuserview Where Upper(UserName) IN (?, ?, ?) ");
									WFSUtil.DB_SetString(1, caseManager, pstmt2, dbType);
									WFSUtil.DB_SetString(2, taskInitiator, pstmt2, dbType);
									WFSUtil.DB_SetString(3, assgnTo, pstmt2, dbType);
								}
								rs2 = pstmt2.executeQuery();
								
								while (rs2.next()) {
									String email = rs2.getString(1);
									if (email != null && !email.equals(""))
										ccTo.append(";" + email);
								}
								if (rs2 != null) {
									rs2.close();
									rs2 = null;
								}
								if (pstmt2 != null) {
									pstmt2.close();
									pstmt2 = null;
								}
								
								if (type2.equalsIgnoreCase("C")) {
									cal.setTime(sdfDate.parse(param2.contains(".")?param2.substring(0, param2.indexOf(".")):param2));
								} else if (type2.equalsIgnoreCase("S")) {
									if(param2.equalsIgnoreCase("CurrentDateTime")){
										cal.setTime(sdfDate.parse(WFSUtil.dbDateTime(con, dbType)));
									}else if(param2.equalsIgnoreCase("CaseEntryDateTime") || param2.equalsIgnoreCase("EntryDateTime")){
										param2 = "EntryDateTime";
										baseTime = WFSUtil.getVariableValue(con, varId2, param2, processdefid, processInstanceId, workItemId, activityId, taskId, dbType, engine, extObjId2);
										cal.setTime(sdfDate.parse(baseTime.contains(".")?baseTime.substring(0, baseTime.indexOf(".")):baseTime));
									}else if(param2.equalsIgnoreCase("TaskEntryDateTime")){
										cal.setTime(taskEntryDateTime);
									}else if(param2.equalsIgnoreCase("TurnAroundDateTime")){
										pstmt2 = con.prepareStatement("select ExpectedWorkitemDelay,EntryDATETIME  from wfinstrumenttable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessInstanceID = ?");
										WFSUtil.DB_SetString(1, processInstanceId, pstmt2, dbType);
										rs2 = pstmt2.executeQuery();
										if(rs2.next()){
											baseTime = rs2.getString("ExpectedWorkitemDelay");
											if(baseTime == null){
												baseTime = rs2.getString("EntryDATETIME");	
											}
										}
										if(rs2 != null){
											rs2.close();
											rs2 = null;
										}
										if(pstmt2 != null){
											pstmt2.close();
											pstmt2 = null;
										}
										cal.setTime(sdfDate.parse(baseTime.contains(".")?baseTime.substring(0, baseTime.indexOf(".")):baseTime));
									}else if("TaskDueDate".equalsIgnoreCase(param2)){
										cal.setTime(sdfDate.parse(dueDate));
									}else {
										baseTime = WFSUtil.getVariableValue(con, varId2, param2, processdefid, processInstanceId, workItemId, activityId, taskId, dbType, engine, extObjId2);							
										cal.setTime(sdfDate.parse(baseTime.contains(".")?baseTime.substring(0, baseTime.indexOf(".")):baseTime));
									}
								}else{
									baseTime = WFSUtil.getVarValueAllTypes(param2, type2, extObjId2, varId2, -1, con, processdefid, processInstanceId, workItemId, activityId, taskId, dbType, engine, null);
									cal.setTime(sdfDate.parse(baseTime.contains(".")?baseTime.substring(0, baseTime.indexOf(".")):baseTime));
								}
								int durationId = 0;
								Map<String, Integer> durationMap = null;
								if (type3.equalsIgnoreCase("V")) {
									int startIndx = param3.trim().indexOf("<Expression>");
									int endIndx = 0;
									if (startIndx >= 0) {
										endIndx = param3.indexOf("</Expression>");
										String durationStr = param3.substring(startIndx + 12, endIndx);
										if (!durationStr.isEmpty()) {
											durationId = Integer.parseInt(durationStr);
										}
									}
									durationMap = WFSUtil.getDateTimeMapFromDuration(con, processdefid, durationId, taskId, processInstanceId, workItemId, activityId, dbType, engine);
								}
								if(durationMap != null && !durationMap.isEmpty()){
									if(ruleCalFlag == null || "N".equalsIgnoreCase(ruleCalFlag)){
										cal.add(Calendar.DATE, durationMap.get("Day").intValue());
										cal.add(Calendar.HOUR_OF_DAY, durationMap.get("Hour").intValue());
										cal.add(Calendar.MINUTE, durationMap.get("Minute").intValue());
										cal.add(Calendar.SECOND, durationMap.get("Second").intValue());
									}else{
										String calendarName = null;
										stmt = con.createStatement();
										java.util.Date calDate = cal.getTime();
										String queryStr = " Select CalendarName From WFINSTRUMENTTABLE "+ WFSUtil.getTableLockHintStr(dbType) +" where ProcessInstanceID = " + WFSUtil.TO_STRING(processInstanceId, true, dbType) + " And WorkitemId = 1";
										rs2 = WFSUtil.jdbcExecuteQuery(processInstanceId, sessionID, user.getid(), queryStr, stmt, null, false, engine);
										if(rs2.next()){
											calendarName = rs2.getString(1);
										}
										if (rs2 != null) {
											rs2.close();
											rs2 = null;
										}
										WFCalAssocData wfCalAssocData = WFSUtil.getWICalendarInfo(con, engine, processdefid, "0", calendarName);
										if(wfCalAssocData != null){
											calDate = WFCalUtil.getSharedInstance().getNextDateTime(calDate, durationMap.get("Year"), durationMap.get("Month"), durationMap.get("Day"), durationMap.get("Hour"), durationMap.get("Minute"), durationMap.get("Second"), wfCalAssocData.getProcessDefId(), wfCalAssocData.getCalId());
										}else{
											calDate = null;
										}
										cal.setTime(calDate);
									}
									scheduleTime = cal.getTime();
									WFSUtil.DB_SetString(1, processInstanceId, pstmt1, dbType);
									pstmt1.setInt(2, workItemId);
									pstmt1.setInt(3, processdefid);
									pstmt1.setInt(4, -activityId);	//-ve task id to differntiate b/w task escalation & activity escalation(checked in SP)
									pstmt1.setInt(5, taskId);
									WFSUtil.DB_SetString(6, "Mail", pstmt1, dbType);
									WFSUtil.DB_SetString(7, mailTo, pstmt1, dbType);
									WFSUtil.DB_SetString(8, mailSubject, pstmt1, dbType);
									WFSUtil.DB_SetString(9, mailMessage, pstmt1, dbType);
									pstmt1.setTimestamp(10, new java.sql.Timestamp(scheduleTime.getTime()));
									WFSUtil.DB_SetString(11, mailFrom, pstmt1, dbType);
									WFSUtil.DB_SetString(12, ccTo.toString(), pstmt1, dbType);
									WFSUtil.DB_SetString(13, bccTo, pstmt1, dbType);
									pstmt1.setInt(14, 0);
									pstmt1.setInt(15, 0);
									pstmt1.addBatch();
								}
							}
							if(noOfTasksEscalated > 0){
								pstmt1.executeBatch();
							}
							if (pstmt1 != null) {
								pstmt1.close();
								pstmt1 = null;
							}
							if (rs != null) {
								rs.close();
								rs = null;
							}
							if (pstmt != null) {
								pstmt.close();
								pstmt = null;
							}
						//}
					}catch(Exception ex){
						WFSUtil.printErr(engine, "", ex);
		                mainCode = WFSError.WF_TASK_ESCALATION_FAILED_ON_INITIATE;
		                subCode = 0;
		                subject = WFSErrorMsg.getMessage(mainCode);
		                descr = WFSErrorMsg.getMessage(mainCode);
		                errType = WFSError.WF_TMP;
		                failedList.append("<TaskInfo><TaskName>"+taskName+"</TaskName><TaskId>"+taskId+"</TaskId>").append("<Exception><MainCode>"+mainCode+"</MainCode>").append("<SubCode>"+subCode+"</SubCode>").append("<Subject>"+subject+"</Subject>").append("</Exception></TaskInfo>");
					}finally{
						if (pstmt1 != null) {
							pstmt1.close();
							pstmt1 = null;
						}
						if (rs != null) {
							rs.close();
							rs = null;
						}
						if (pstmt != null) {
							pstmt.close();
							pstmt = null;
						}
					}
		        }
		        WFSUtil.printOut(engine,"[WMProcessDefinition:WFInitiateTask:Expiry] After setting up escalation");
		        // Till here to populate the WFTaskEscalationTAble for Task Escalation
		        if(mainCode == 0){
		    		//Changes for notify by email in Case Management
		        	if(notifyByEmail){
		        		int queueId = 0;
		        		 if(pstmt!= null){
		                     pstmt.close();
		                     pstmt = null;
		                 }
		                 if(rs!= null){
		                     rs.close();
		                     rs = null;
		                 }
		                strQry = "Select MailId From wfuserview Where UserName  = ? ";
		                pstmt = con.prepareStatement(strQry);
		                WFSUtil.DB_SetString(1, assgnTo, pstmt, dbType);
		                rs = pstmt.executeQuery();
		                if(rs.next()){
		                    userEmail = rs.getString(1);
		                }
		                 if(rs!= null){
		                     rs.close();
		                     rs = null;
		                 }
		        		 if(pstmt!= null){
		                     pstmt.close();
		                     pstmt = null;
		                 }
		        		 
		        		 //adding cc mailId in template
		        		String taskInitiator = user.getname();
		        		strQry = "Select MailId From wfuserview Where UserName  = ? ";
		                pstmt = con.prepareStatement(strQry);
		                WFSUtil.DB_SetString(1, taskInitiator, pstmt, dbType);
		                rs = pstmt.executeQuery();
		                if(rs.next()){
		                    ccUserEmail = rs.getString(1);
		                }
		                 if(rs!= null){
		                     rs.close();
		                     rs = null;
		                 }
		        		 if(pstmt!= null){
		                     pstmt.close();
		                     pstmt = null;
		                 }
			        		 
		                strQry = "Select distinct Q_QueueId from wfinstrumenttable " + WFSUtil.getTableLockHintStr(dbType) + " where processinstanceid = ? and workitemId = ?";
		                pstmt = con.prepareStatement(strQry);
		                WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
		                pstmt.setInt(2, workItemId);
		                rs = pstmt.executeQuery();
		                if(rs.next()){
		                	queueId = rs.getInt(1);
		                }
		                if(userEmail != null && !("".equals(userEmail))){
            			HashMap<String, String> mailStringAttributes = new HashMap<String, String>(); 
            			HashMap<String, Integer> mailIntAttributes = new HashMap<String, Integer>();
            			mailStringAttributes.put("CabinetName", engine);
            			mailStringAttributes.put("MailTo", userEmail.toString());
            			if(ccUserEmail != null && !("".equals(ccUserEmail))) {
            			mailStringAttributes.put("MailCC", ccUserEmail.toString());
						}else {
							mailStringAttributes.put("MailCC", null);
						}
            			mailStringAttributes.put("MailAttachmentIndex", null);
            			mailStringAttributes.put("MailAttachmentNames", null);
            			mailStringAttributes.put("MailStatus", "N");
            			mailStringAttributes.put("MailStatusComments", null);
            			mailStringAttributes.put("MailInsertedBy", null);
            			mailStringAttributes.put("MailActionType", "TaskNotification");
            			mailStringAttributes.put("MailAttachmentExtensions", null);
            			mailStringAttributes.put("PropertyName", "InitiateTask");
            			mailStringAttributes.put("ProcessInstanceId", processInstanceId);
            			if(urn!=null&&!urn.equalsIgnoreCase("")){
            				mailStringAttributes.put("URN",urn);
                			mapForTaskAttributes.put("URN",urn);
            			}else{
            				mailStringAttributes.put("URN",processInstanceId);
                			mapForTaskAttributes.put("URN",processInstanceId);   
            			}
            			mailIntAttributes.put("MailPriority", 1);
            			mailIntAttributes.put("ProcessDefID", processdefid);
            			mailIntAttributes.put("WorkItemId", workItemId);
            			mailIntAttributes.put("ActivityId", activityId);
            			mailIntAttributes.put("DbType", dbType);
            			mailIntAttributes.put("NoOfTrials", 0);
            			mapForTaskAttributes.put("QueueId",Integer.toString(queueId));
            			mapForTaskAttributes.put("SubTaskId", String.valueOf(subTaskId));
            			EmailTemplateUtil.addTaskToMailQueue(con, mapForTaskAttributes, mailIntAttributes, mailStringAttributes);
		                }
		                if(pstmt!= null){
		                    pstmt.close();
		                    pstmt = null;
		                }
		                if(rs!= null){
		                    rs.close();
		                    rs = null;
		                }
		                
		            }
		        	if (taskType==WFSConstant.TASK_PROCESS && taskMode.equals(WFSConstant.TASK_SUB_ASYNCHRONOUS)) {//OmiService flag='Y' for Sub Process Task
		    			HashMap<String, String> infoMap = new HashMap<String, String>();
		    			infoMap.put("EngineName", engine);
		    			infoMap.put("SessionId", String.valueOf(sessionID));
		    			infoMap.put("ProcessDefId", String.valueOf(processdefid));
		    			infoMap.put("ProcessInstanceId", processInstanceId);
		    			infoMap.put("ActivityId", String.valueOf(activityId));
		    			infoMap.put("WorkItemId", String.valueOf(workItemId));
		    			infoMap.put("TaskId", String.valueOf(taskId));
		    			infoMap.put("SubTaskId", String.valueOf(subTaskId));
		    			StringBuilder completeTaskXML = new StringBuilder();
		    			completeTaskXML.append(CreateXML.WFCompleteTask(infoMap));
		    			XMLParser tempParse = new XMLParser();
		    			tempParse.setInputXML(completeTaskXML.toString());
		    			WFCompleteTask(con, tempParse, gen);
		    		}
		        	/*Updating it to 'Y' so that pre-condition gets checked*/
		        	if(WFSUtil.checkTaskAndVariableinPreCondition(con,processdefid,activityId,taskId,null,"T",1)){//checing for Task
		        		WFSUtil.updateWFTaskPreCheckTable( con,  processInstanceId,  workItemId,activityId,"Y");
		        		callTaskListThread=true;
		        	}
		              //Auditing of ActionId = 701 , TaskInitiated
		                WFSUtil.generateTaskLog(engine, con,dbType, processInstanceId,WFSConstant.WFL_TaskInitiated, workItemId, processdefid,
		                   activityId,null,0,userid,user.gettype() != 'U' ? "System" : user.getname(),assgnTo, taskId, subTaskId,strDate);
		                if(Q_DivertedByUserId!=0){
		                    WFSUtil.generateTaskLog(engine, con,dbType, processInstanceId, WFSConstant.WFL_TaskDiverted, workItemId,
		                    		processdefid, activityId, null, 0, userid, user.gettype() != 'U' ? "System" : user.getname(),assgnTo+","+Q_DivertedByUserName, taskId, subTaskId,strDate);
		                }

		                
		        }
		        }else {
		              mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
		              subCode = 0;
		              subject = WFSErrorMsg.getMessage(mainCode);
		              descr = WFSErrorMsg.getMessage(subCode);
		              errType = WFSError.WF_TMP;
		              failedList.append("<TaskInfo><TaskName>"+taskName+"</TaskName><TaskId>"+taskId+"</TaskId>").append("<Exception><MainCode>"+mainCode+"</MainCode>").append("<SubCode>"+subCode+"</SubCode>").append("<Subject>"+subject+"</Subject>").append("</Exception></TaskInfo>");
		          }
		        
		        noOfTasks--;
       	} catch(SQLException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if(e.getErrorCode() == 0) {
              if(e.getSQLState().equalsIgnoreCase("08S01")) {
                descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
                  + ")";
              }
            } else {
              descr = e.getMessage();
            }
            failedList.append("<TaskInfo><TaskName>"+taskName+"</TaskName><TaskId>"+taskId+"</TaskId>").append("<Exception><MainCode>"+mainCode+"</MainCode>").append("<SubCode>"+subCode+"</SubCode>").append("<Subject>"+subject+"</Subject>").append("</Exception></TaskInfo>");
          } catch(NumberFormatException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
            failedList.append("<TaskInfo><TaskName>"+taskName+"</TaskName><TaskId>"+taskId+"</TaskId>").append("<Exception><MainCode>"+mainCode+"</MainCode>").append("<SubCode>"+subCode+"</SubCode>").append("<Subject>"+subject+"</Subject>").append("</Exception></TaskInfo>");
          } catch(NullPointerException e) {
            WFSUtil.printErr(engine,"", e); 
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
            failedList.append("<TaskInfo><TaskName>"+taskName+"</TaskName><TaskId>"+taskId+"</TaskId>").append("<Exception><MainCode>"+mainCode+"</MainCode>").append("<SubCode>"+subCode+"</SubCode>").append("<Subject>"+subject+"</Subject>").append("</Exception></TaskInfo>");
          } catch(JTSException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
            failedList.append("<TaskInfo><TaskName>"+taskName+"</TaskName><TaskId>"+taskId+"</TaskId>").append("<Exception><MainCode>"+mainCode+"</MainCode>").append("<SubCode>"+subCode+"</SubCode>").append("<Subject>"+subject+"</Subject>").append("</Exception></TaskInfo>");
          } catch(Exception e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
            failedList.append("<TaskInfo><TaskName>"+taskName+"</TaskName><TaskId>"+taskId+"</TaskId>").append("<Exception><MainCode>"+mainCode+"</MainCode>").append("<SubCode>"+subCode+"</SubCode>").append("<Subject>"+subject+"</Subject>").append("</Exception></TaskInfo>");
          }
          if(mainCode==0){
        	  if (!con.getAutoCommit()){
                  con.commit();
  		          WFSUtil.printOut(engine,"[WMProcessDefinition:WFInitiateTask:Expiry] Committing the transaction");
                 }
          }
          else{
        	  if (!con.getAutoCommit()){
                  con.rollback();
                 }
          }
    	}while(multipleInitiateFlag && noOfTasks>0);
    	if(mainCode == 0 && !failedList.toString().contains("<TaskInfo>")){
            outputXml.append(gen.createOutputFile("WFInitiateTask"));
            outputXml.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
            outputXml.append("<InitiatedOn>"+strDate+"</InitiatedOn>\n");
            outputXml.append(gen.closeOutputFile("WFInitiateTask"));
       }
    	else{
    		outputXml.append(gen.createOutputFile("WFInitiateTask"));
            outputXml.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
            outputXml.append(failedList).append("</FailedList>\n");
            outputXml.append(gen.closeOutputFile("WFInitiateTask"));
    	}
    }
     catch(NumberFormatException e) {
      WFSUtil.printErr(engine,"", e);
      mainCode = WFSError.WF_OPERATION_FAILED;
      subCode = WFSError.WFS_ILP;
      subject = WFSErrorMsg.getMessage(mainCode);
      errType = WFSError.WF_TMP;
      descr = e.toString();
    } catch(NullPointerException e) {
      WFSUtil.printErr(engine,"", e); 
      mainCode = WFSError.WF_OPERATION_FAILED;
      subCode = WFSError.WFS_SYS;
      subject = WFSErrorMsg.getMessage(mainCode);
      errType = WFSError.WF_TMP;
      descr = e.toString();
    }  catch(Exception e) {
      WFSUtil.printErr(engine,"", e);
      mainCode = WFSError.WF_OPERATION_FAILED;
      subCode = WFSError.WFS_EXP;
      subject = WFSErrorMsg.getMessage(mainCode);
      errType = WFSError.WF_TMP;
      descr = e.toString();
    } catch(Error e) {
      WFSUtil.printErr(engine,"", e);
      mainCode = WFSError.WF_OPERATION_FAILED;
      subCode = WFSError.WFS_EXP;
      subject = WFSErrorMsg.getMessage(mainCode);
      errType = WFSError.WF_TMP;
      descr = e.toString();
    } finally {
      try {
    	  
		if(!con.getAutoCommit()){
			con.rollback();
	        con.setAutoCommit(true);
		}
        if(pstmt != null) {
          pstmt.close();
          pstmt = null;
        }
        if(pstmt1 != null) {
          pstmt1.close();
          pstmt1 = null;
        }
        if(callTaskListThread){
        	WFSUtil.printOut(engine,"Calling TaskList thread starts");
        	ExecutorService executor = Executors.newFixedThreadPool(1);
        	Runnable worker = new WorkerThread(engine,"WFInitiateTask", processInstanceId, workItemId, activityId, sessionID, processdefid);
        	executor.execute(worker);
        	WFSUtil.printOut(engine,"Calling TaskList thread ends");
        }
      } catch(Exception e) {}
      
    }
    if(mainCode != 0) {
        throw new WFSException(mainCode, subCode, errType, subject, descr);
      }
    return outputXml.toString();
    }
 
 



private int synchronousTaskRouting(Connection con, WFWorkitem wfWorkitem,
		WFRuleEngine wfRuleEngine,String cabinetName, XMLGenerator generator,int taskId,int taskType,String taskMode,int subTaskId,int userId,int dbType, String initiateWIInSubTask) throws WFSException{
	String output="";
	int status=0;
	//Bug 78917 - parser was not required here and was getting unnecessarily modified here.
	XMLParser parser = new XMLParser("");
    try
    {
        WFSUtil.printOut(cabinetName, "Going to create workitem in Subprocess");
        Object[] result = wfWorkitem.createWorkitemInSubProcessForTask(taskId,taskType,taskMode,subTaskId, userId,dbType,initiateWIInSubTask);
        if(result != null)
        {
            status = (Integer)result[0];
            if(status == 0)
            {
                String uploadWorkitemInputXml = (String)result[2];
                if(uploadWorkitemInputXml != null && uploadWorkitemInputXml.trim().length() > 0)
                {
                    output = WFRoutingUtil.execUpdateOperation(con, uploadWorkitemInputXml, NGConstant.APP_WORKFLOW, wfRuleEngine.getRegInfo(), generator);
                    parser.setInputXML(output);
                    status = Integer.parseInt(parser.getValueOf("MainCode"));
                    if(status == 11)
                    {
                        WFRuleEngine.writeErr("[WMProcessDefination] synchronousTaskRouting() Check Check Check........!!! Invalid Session error in WFUploadWorkitem .... ", wfRuleEngine.getRegInfo());
                        throw new IllegalStateException("[WMProcessDefination] synchronousTaskRouting() Invalid Session error in WFUploadWorkitem .... ");
                    }
                    else if(status != 0)
                    {
                        wfWorkitem.setSuspensionFlag("Y");
                        wfWorkitem.setSuspensionCause(ApplicationConstants.ERROR_UPLOAD_WORKITEM_FAILED_FOR_SUBPROCESS);
                    }
                    else
                    {
                        HashMap childDetails = (HashMap)result[1];
                        String childProcessInstanceId = parser.getValueOf("ProcessInstanceId", "", false);
                        childDetails.put("ChildProcessInstanceID", childProcessInstanceId);
                        wfWorkitem.setChildProcessDetails(childDetails);
                        String linkWorkItemInputXml = (String)result[3];
                        if(linkWorkItemInputXml != null && linkWorkItemInputXml.trim().length() > 0)
                        {
                            parser.setInputXML(linkWorkItemInputXml);
                            parser.changeValue("LinkedProcessInstanceID", childProcessInstanceId);
                            linkWorkItemInputXml = parser.toString();
                            output = WFRoutingUtil.execUpdateOperation(con, linkWorkItemInputXml, NGConstant.APP_WORKFLOW, wfRuleEngine.getRegInfo(), generator);
                            parser.setInputXML(output);
                            status = Integer.parseInt(parser.getValueOf("MainCode"));
                            if(status == 11)
                            {
                                WFRuleEngine.writeErr("[WFRoutingUtil] routeWorkitem() Check Check Check........!!! Invalid Session error in WFLinkWorkitem .... ", wfRuleEngine.getRegInfo());
                                throw new IllegalStateException("[WFRoutingUtil] routeWorkitem() Invalid Session error in WFLinkWorkitem .... ");
                            }
                            else if(status != 0)
                            {
                                wfWorkitem.setSuspensionFlag("Y");
                                wfWorkitem.setSuspensionCause(ApplicationConstants.ERROR_LINK_CHILD_WORKITEM_FAILED);
                            }
                        }
                        else
                        {
                            WFRuleEngine.writeErr("[WFRoutingUtil] routeWorkitem() InputXML is null for WFLinkWorkitem .... ", wfRuleEngine.getRegInfo());
                            throw new IllegalStateException("[WFRoutingUtil] routeWorkitem() InputXML is null for WFLinkWorkitem .... ");
                        }
                    }
                }
                else
                {
                    WFRuleEngine.writeErr("[WFRoutingUtil] routeWorkitem() InputXML is null for WFUploadWorkItem .... ", wfRuleEngine.getRegInfo());
                    throw new IllegalStateException("[WFRoutingUtil] routeWorkitem() InputXML is null for WFUploadWorkItem .... ");
                }
            }
            else if(status == 18)
            {
                status = 0;
            }
        }
        else{
            status = -1;
        }
       String inputXML = wfWorkitem.getInputXMLForCreateWI();
        if(inputXML != null && inputXML.length() != 0){
            parser.setInputXML(inputXML);
		int	targetActivityID = parser.getIntOf("ActivityId", 0, true);
           String targetBlockId = parser.getValueOf("BlockId", "0", true);
          String  srcActivityId = parser.getValueOf("PrevActivityId", "0", true);
          String  srcBlockId = parser.getValueOf("PrevBlockId", "0" , true);
            WFRuleEngine.writeXML(inputXML, wfRuleEngine.getRegInfo());
            
            output = WFCreateWorkitemInternal.WFCreateWorkItemInternal(con, parser, generator, true);
           /** @todo Check output here .....
             * If non zero maincode transaction to be rollbacked from calling method - Ruhi Hira */
            WFRuleEngine.writeXML(output, wfRuleEngine.getRegInfo());
            parser.setInputXML(output);
            int targetQueueId = parser.getIntOf("RetTargetQueueId", 0, true);
            targetBlockId = parser.getValueOf("RetTargetBlockId", "0", true);
            String targetQueueType = parser.getValueOf("RetTargetQueueType", null, true);
            /*Bug # 7819*/
            targetActivityID = Integer.parseInt(parser.getValueOf("RetTargetActivity",String.valueOf(targetActivityID),true));
            targetBlockId = parser.getValueOf("RetTargetBlockId",targetBlockId,true);
           
        } else {
        	WFRuleEngine.writeErr("[WFRoutingUtil] routeWorkitem() InputXML is null for WFCreateWorkitemInternal .... ", wfRuleEngine.getRegInfo());
        	throw new IllegalStateException("[WFRoutingUtil] routeWorkitem() InputXML is null for WFCreateWorkitemInternal .... ");
        }
        
    }
    catch(RuntimeException e)
    {
        WFRuleEngine.writeErr("Error in creating Workitem in SubProcess .... DMS Session is not set.", wfRuleEngine.getRegInfo());
        WFRuleEngine.writeErr(e, wfRuleEngine.getRegInfo());
        wfWorkitem.setSuspensionFlag("Y");
        wfWorkitem.setSuspensionCause(ApplicationConstants.APP_ERR);
        throw new WFSException(WFSError.WF_DMS_SESSION_NOT_SET, WFSError.WF_DMS_SESSION_NOT_SET, WFSError.WF_TMP, WFSErrorMsg.getMessage(WFSError.WF_DMS_SESSION_NOT_SET), WFSErrorMsg.getMessage(WFSError.WF_DMS_SESSION_NOT_SET));
    }
    catch(Exception e)
    {
        WFRuleEngine.writeErr("[WFRoutingUtil] routeWorkitem() Error in creating Workitem in SubProcess .... ", wfRuleEngine.getRegInfo());
        WFRuleEngine.writeErr(e, wfRuleEngine.getRegInfo());
        wfWorkitem.setSuspensionFlag("Y");
        wfWorkitem.setSuspensionCause(ApplicationConstants.APP_ERR);
        status = -1;
    }
    return status;

}

//----------------------------------------------------------------------------------------------------
//Function Name 		    :	WFRevokeTask
//Date Written (DD/MM/YYYY) :	10-04-2015
//Author					:	Rishiram Meel  
//Input Parameters			:	Connection , XMLParser , XMLGenerator
//Output Parameters			:   none
//Return Values				:	String (output xml)
//Description				:   API to revoke the  task .
//----------------------------------------------------------------------------------------------------
	public String WFRevokeTask(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
		StringBuffer outputXML = new StringBuffer("");
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		boolean commit = false;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
		String engine = "";
		String option = parser.getValueOf("Option", "", false);
		HashMap<String, String> mapForTaskAttributes = new HashMap<String, String>();

		String processInstanceId = null;
		int workitemId = 0;
		int processDefId = 0;
		int activityId = 0;
		int taskId = 0;
		String dueDate = null;
		int days = 0;
		int hrs = 0;
		int mins = 0;
		int timeInMins = 0;
		int subTaskId = 0;
		String fieldName = null;
		String userEmail = "";
		String ccUserEmail = "";
		PreparedStatement pstmt1 = null;
		Statement stmt = null;
		ResultSet rs1 = null;
		String strQry = "";
		String urn = "";
		String instruction = "";

		try {
			int workItemId = parser.getIntOf("WorkItemId", 1, true);
			engine = parser.getValueOf("EngineName");
			int sessionID = parser.getIntOf("SessionId", 0, false);
			int dbType = ServerProperty.getReference().getDBType(engine);
			String actionDateTime = WFSUtil.dbDateTime(con, dbType);
			processInstanceId = parser.getValueOf("ProcessInstanceId", "", false);
			workitemId = parser.getIntOf("WorkItemId", 0, false);
			taskId = parser.getIntOf("TaskId", 0, false);
			processDefId = parser.getIntOf("ProcessDefId", 0, false);
			activityId = parser.getIntOf("ActivityId", 0, false);
			WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
			String revokedByUsername = user.getname();
			int userID = 0;
			char pType = '\0';
			StringBuffer tempXml = null;
			int taskStatus = 0;
			String revokeComment = parser.getValueOf("RevokeComments");
			String webServerAddress = parser.getValueOf("WebServerAddress", null, true);
			String OAPWebServerAddress = parser.getValueOf("OAPWebServerAddress", "", true);

			if (user != null) {
				if (con.getAutoCommit()) {
					con.setAutoCommit(false);
					commit = true;
				}
				pstmt = con.prepareStatement(
						"select  DueDate,SubTaskId, AssignedTo, Instructions from WFTaskStatusTable where  ProcessInstanceId=? and WorkItemId=? and ProcessDefId=? and ActivityId=? and TaskId=? and TaskStatus=? ");
				WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
				pstmt.setInt(2, workitemId);
				pstmt.setInt(3, processDefId);
				pstmt.setInt(4, activityId);
				pstmt.setInt(5, taskId);
				pstmt.setInt(6, 2);
				pstmt.execute();
				rs = pstmt.getResultSet();
				if (rs.next()) {
					dueDate = rs.getString("DueDate");
					subTaskId = rs.getInt("SubTaskId");
					fieldName = rs.getString("AssignedTo");
					instruction = rs.getString("Instructions");
					if (pstmt != null) {
						pstmt.close();
						pstmt = null;
					}
					if (rs != null) {
						rs.close();
						rs = null;
					}
					// Returning ActionDateTime(Revoked Time) from WFRevokeTask API

					pstmt = con.prepareStatement(" update WFTaskStatusTable set taskStatus=?,ActionDateTime="
							+ WFSUtil.TO_DATE(actionDateTime, true, dbType)
							+ ",AssignedTo=? where ProcessInstanceId=? and WorkItemId=? and ProcessDefId=? and ActivityId=? and TaskId=? and TaskStatus=?");
					pstmt.setInt(1, 4);
					pstmt.setNull(2, java.sql.Types.VARCHAR);
					// WFSUtil.DB_SetString(2, "null", pstmt, dbType);
					WFSUtil.DB_SetString(3, processInstanceId, pstmt, dbType);
					pstmt.setInt(4, workitemId);
					pstmt.setInt(5, processDefId);
					pstmt.setInt(6, activityId);
					pstmt.setInt(7, taskId);
					pstmt.setInt(8, 2);
					int rs2 = pstmt.executeUpdate();
					if (pstmt != null) {
						pstmt.close();
						pstmt = null;
					}
					if (rs != null) {
						rs.close();
						rs = null;
					}
					/*
					 * Query Corrected for Bug 58949 select b.WFDays,b.WFHours,b.WFMinutes from
					 * WFTaskDefTable a inner join WFDurationTable b on a.processdefid =
					 * b.processdefid and a.TurnAroundTime= b.durationid where a.processDefId=70 and
					 * a.taskid = 3
					 */
					pstmt = con.prepareStatement("select b.WFDays,b.WFHours,b.WFMinutes from "
							+ "WFTaskDefTable a inner join WFDurationTable b " + "on a.processdefid = b.processdefid "
							+ "and a.TurnAroundTime= b.durationid where a.processDefId=? and a.taskid = ?");

					pstmt.setInt(1, processDefId);
					pstmt.setInt(2, taskId);
					pstmt.execute();
					rs = pstmt.getResultSet();
					while (rs.next()) {
						days = rs.getInt(1);
						hrs = rs.getInt(2);
						mins = rs.getInt(3);
					}
					pstmt.close();
					if (days >= 0) {
						timeInMins = days * 24 * 60;
					}
					if (hrs >= 0) {
						timeInMins = timeInMins + hrs * 60;
					}
					if (mins >= 0) {
						timeInMins = timeInMins + mins;
					}
					taskStatus = 4;
					tempXml = new StringBuffer();
					tempXml.append(gen.writeValueOf("TaskStatus", String.valueOf(taskStatus)));
					tempXml.append(gen.writeValueOf("DueDate", dueDate));
					tempXml.append(gen.writeValueOf("ActionDateTime", actionDateTime));
					tempXml.append(gen.writeValueOf("Turnaroundtime", String.valueOf(timeInMins)));
				} else {
					mainCode = WFSError.WF_TASK_NOT_REVOKED;
					subCode = 0;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}
			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if (mainCode == 0) {
				// Changes related to deleting the Defined escalation on the task to be revoked
				pstmt = con.prepareStatement(
						"delete from WFEscalationTable where PROCESSINSTANCEID = ? and WORKITEMID = ? and PROCESSDEFID = ? and ACTIVITYID = ? "
								+ " and ESCALATIONMODE = 'Mail' and TASKID = ? and ESCALATIONTYPE = 'F'");
				pstmt.setString(1, processInstanceId);
				pstmt.setInt(2, workitemId);
				pstmt.setInt(3, processDefId);
				pstmt.setInt(4, -activityId);
				pstmt.setInt(5, taskId);
				pstmt.executeUpdate();
				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}

				/* UT BugFix#72105 */
				if (revokeComment != null && !revokeComment.isEmpty()) {
					String commentsToUser[] = WFSUtil.getIdForName(con, dbType, fieldName, "U");
					int commentsToUserId = Integer.parseInt(commentsToUser[1]);
					pstmt = con.prepareStatement(
							"insert into WFCommentsTable(ProcessDefId, ActivityId, ProcessInstanceId, WorkItemId, "
									+ "CommentsBy, CommentsByName, CommentsTo, CommentsToName, Comments, ActionDateTime, CommentsType, ProcessVariantId, "
									+ "TaskId, SubTaskId) values(?,?,?,?,?,?,?,?,?,"
									+ WFSUtil.TO_DATE(actionDateTime, true, dbType) + ",?,?,?,?)");
					pstmt.setInt(1, processDefId);
					pstmt.setInt(2, activityId);
					WFSUtil.DB_SetString(3, processInstanceId, pstmt, dbType);
					pstmt.setInt(4, workitemId);
					pstmt.setInt(5, user.getid());
					WFSUtil.DB_SetString(6, user.gettype() == 'P' ? "System" : user.getname(), pstmt, dbType);
					pstmt.setInt(7, commentsToUserId);
					WFSUtil.DB_SetString(8, fieldName, pstmt, dbType);
					WFSUtil.DB_SetString(9, revokeComment, pstmt, dbType);
					pstmt.setInt(10, WFSConstant.CONST_COMMENTS_TASK_REVOKED);
					pstmt.setInt(11, 0);
					pstmt.setInt(12, taskId);
					pstmt.setInt(13, subTaskId);
					pstmt.execute();
					pstmt.close();
					pstmt = null;
				}
				if (user.gettype() == 'P') {
					revokedByUsername = "System";
				} else if (user.gettype() != 'P') {
					mapForTaskAttributes.put("ProcessInstanceId", processInstanceId);
					mapForTaskAttributes.put("WorkItemId", String.valueOf(workItemId));
					if (urn != null && !urn.equalsIgnoreCase("")) {
						mapForTaskAttributes.put("URN", urn);
					} else {
						mapForTaskAttributes.put("URN", processInstanceId);
					}

					mapForTaskAttributes.put("ProcessDefId", String.valueOf(processDefId));
					mapForTaskAttributes.put("ActivityId", String.valueOf(activityId));
					mapForTaskAttributes.put("TaskId", String.valueOf(taskId));
					mapForTaskAttributes.put("SubTaskId", String.valueOf(subTaskId));
					mapForTaskAttributes.put("EngineName", engine);
					mapForTaskAttributes.put("Instructions", instruction);
					mapForTaskAttributes.put("ActivityType", String.valueOf(32));
					mapForTaskAttributes.put("Comments", revokeComment);
					mapForTaskAttributes.put("DueDate", dueDate);
					mapForTaskAttributes.put("AssignedOn", WFSUtil.dbDateTime(con, dbType));
					mapForTaskAttributes.put("AssignedBy", revokedByUsername);// AssignedBy
					mapForTaskAttributes.put("OAPWebServerAddress",OAPWebServerAddress);
					mapForTaskAttributes.put("WebServerAddress",webServerAddress);

					pstmt1 = con.prepareStatement("Select a.processname, b.activityname from ProcessDefTable a "
							+ WFSUtil.getTableLockHintStr(dbType) + " inner join activitytable b "
							+ WFSUtil.getTableLockHintStr(dbType)
							+ " on a.processdefid = b.processdefid and a.processdefid = ? and b.activityid = ?");
					pstmt1.setInt(1, processDefId);
					pstmt1.setInt(2, activityId);
					rs = pstmt1.executeQuery();
					if (rs.next()) {
						mapForTaskAttributes.put("RouteName", rs.getString("processname"));
						mapForTaskAttributes.put("ActivityName", rs.getString("activityname"));
					}
					if (pstmt1 != null) {
						pstmt1.close();
						pstmt1 = null;
					}
					if (rs != null) {
						rs.close();
						rs = null;
					}
					pstmt1 = con.prepareStatement(
							"Select TaskName From WFTaskDefTable where ProcessDefId =? and TaskId =?");
					pstmt1.setInt(1, processDefId);
					pstmt1.setInt(2, taskId);
					rs = pstmt1.executeQuery();
					if (rs.next()) {
						mapForTaskAttributes.put("TaskName", rs.getString("TaskName"));
					}
					if (pstmt1 != null) {
						pstmt1.close();
						pstmt1 = null;
					}
					if (rs != null) {
						rs.close();
						rs = null;
					}
					strQry = "Select MailId From wfuserview Where upper(UserName) = ? ";
					pstmt1 = con.prepareStatement(strQry);
					WFSUtil.DB_SetString(1, fieldName.toUpperCase(), pstmt1, dbType);
					rs = pstmt1.executeQuery();
					while (rs != null && rs.next()) {
						userEmail = userEmail + rs.getString(1) + ";";
					}
					if (rs != null) {
						rs.close();
						rs = null;
					}
					if (pstmt1 != null) {
						pstmt1.close();
						pstmt1 = null;
					}

					// (ccmailid support)
					strQry = "Select MailId From wfuserview Where upper(UserName) = ? ";
					pstmt1 = con.prepareStatement(strQry);
					WFSUtil.DB_SetString(1, revokedByUsername.toUpperCase(), pstmt1, dbType);
					rs = pstmt1.executeQuery();
					while (rs != null && rs.next()) {
						ccUserEmail = ccUserEmail + rs.getString(1) + ";";
					}
					if (rs != null) {
						rs.close();
						rs = null;
					}
					if (pstmt1 != null) {
						pstmt1.close();
						pstmt1 = null;
					}

					int queueId = 0;
					strQry = "Select distinct Q_QueueId from wfinstrumenttable " + WFSUtil.getTableLockHintStr(dbType)
							+ " where processinstanceid = ? and workitemId = ?";
					pstmt1 = con.prepareStatement(strQry);
					WFSUtil.DB_SetString(1, processInstanceId, pstmt1, dbType);
					pstmt1.setInt(2, workItemId);
					rs = pstmt1.executeQuery();
					if (rs.next()) {
						queueId = rs.getInt(1);
					}
					if (userEmail != null && userEmail.length() > 0) {
						HashMap<String, String> mailStringAttributes = new HashMap<String, String>();
						HashMap<String, Integer> mailIntAttributes = new HashMap<String, Integer>();
						mailStringAttributes.put("CabinetName", engine);
						mailStringAttributes.put("MailTo", userEmail.toString());
						if(ccUserEmail != null && !("".equals(ccUserEmail))) {
						mailStringAttributes.put("MailCC", ccUserEmail.toString());
						}else {
							mailStringAttributes.put("MailCC", null);
						}
						mailStringAttributes.put("MailAttachmentIndex", null);
						mailStringAttributes.put("MailAttachmentNames", null);
						mailStringAttributes.put("MailStatus", "N");
						mailStringAttributes.put("MailStatusComments", null);
						mailStringAttributes.put("MailInsertedBy", null);
						mailStringAttributes.put("MailActionType", "TaskNotification");
						mailStringAttributes.put("MailAttachmentExtensions", null);
						mailStringAttributes.put("PropertyName", "RevokeTask");
						mailStringAttributes.put("ProcessInstanceId", processInstanceId);
						mailIntAttributes.put("MailPriority", 1);
						mailIntAttributes.put("ProcessDefID", processDefId);
						mailIntAttributes.put("WorkItemId", workItemId);
						mailIntAttributes.put("ActivityId", activityId);
						mailIntAttributes.put("DbType", dbType);
						mailIntAttributes.put("NoOfTrials", 0);
						mapForTaskAttributes.put("QueueId", Integer.toString(queueId));
						mapForTaskAttributes.put("sourceUser", fieldName);
						EmailTemplateUtil.addTaskToMailQueue(con, mapForTaskAttributes, mailIntAttributes,
								mailStringAttributes);

					}
				}
				if (pstmt1 != null) {
					pstmt1.close();
					pstmt1 = null;
				}
				if (rs != null) {
					rs.close();
					rs = null;
				}

				WFSUtil.generateTaskLog(engine, con, dbType, processInstanceId, WFSConstant.WFL_TaskRevoked, workitemId,
						processDefId, activityId, null, 0, userID, revokedByUsername, fieldName, taskId, subTaskId,
						actionDateTime);
				if (!con.getAutoCommit()) {
					con.commit();
					con.setAutoCommit(true);
					commit = false;
				}
				outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WFRevokeTask"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(tempXml);
				outputXML.append("\n");
				outputXML.append(gen.closeOutputFile("WFRevokeTask"));

			}
		} catch (SQLException e) {
			WFSUtil.printErr(engine, "", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0) {
				if (e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
				}
			} else {
				descr = e.getMessage();
			}
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine, "", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine, "", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (WFSException e) {
			mainCode = WFSError.WM_NO_MORE_DATA;
			subCode = 0;
			subject = WFSErrorMsg.getMessage(mainCode);
			descr = WFSErrorMsg.getMessage(subCode);
			errType = WFSError.WF_TMP;
		} catch (JTSException e) {
			WFSUtil.printErr(engine, "", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();
		} catch (Exception e) {
			WFSUtil.printErr(engine, "", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} finally {
			try {
				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
				if (commit) {
					// con.rollback();
					con.setAutoCommit(true);
				}
			} catch (Exception e) {
				WFSUtil.printErr(engine, "", e);
			}
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
			} catch (Exception e) {
				WFSUtil.printErr(engine, "", e);
			}

		}
		if (mainCode != 0) {
			String errorString = WFSUtil.generalError(option, engine, gen, mainCode, subCode, errType, subject, descr);
			return errorString;
		}
		return outputXML.toString();
	}

  // ----------------------------------------------------------------------------------------------------
  // Function Name : WFDeclineTask
  // Date Written (DD/MM/YYYY) : 19-06-2017
  // Author : Shubhankur Manuja
  // Input Parameters : Connection , XMLParser , XMLGenerator
  // Output Parameters : none
  // Return Values : String (output xml)
  // Description : API to decline the task .
  // ----------------------------------------------------------------------------------------------------
  public String WFDeclineTask(Connection con, XMLParser parser, XMLGenerator gen)
      throws JTSException, WFSException {
    StringBuilder outputXML = new StringBuilder();
    PreparedStatement pstmt = null;
    ResultSet rs = null;
    boolean commit = false;
    int mainCode = 0;
    int subCode = 0;
    String subject = null;
    String descr = null;
    String errType = WFSError.WF_TMP;
    String engine = "";
    String option = parser.getValueOf("Option","",false);
    String rejectionComments = "";
    String processInstanceId = null;
    String urn = null;
    int workItemId = 0;
    int processDefId = 0;
    int activityId = 0;
    int taskId = 0;
    String dueDate = null;
    int days = 0;
    int hrs = 0;
    int mins = 0;
    int timeInMins = 0;
    int subTaskId = 0;
    String listOfTask="";
    String caseManager = null;
    String declinedBy = "";
    XMLParser tmpParser = new XMLParser();
    StringBuffer tempXml = new StringBuffer();
    try {
      engine = parser.getValueOf("EngineName");
      int sessionID = parser.getIntOf("SessionId", 0, false);
      rejectionComments = parser.getValueOf("RejectionComments", "", false);
      String webServerAddress = parser.getValueOf("WebServerAddress", null, true);
      String OAPWebServerAddress = parser.getValueOf("OAPWebServerAddress", "", true);
      String taskList = parser.getValueOf("TaskList", "N", false);	
      int dbType = ServerProperty.getReference().getDBType(engine);
      String actionDateTime = WFSUtil.dbDateTime(con, dbType);
      int noOfTasks = 0;
      int counter=0;
      if(!taskList.equals("")){
		 noOfTasks = parser.getNoOfFields("TaskInfo");

      }
      WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);

	
      while(noOfTasks>0){
    	  if(counter==0){
    			tmpParser.setInputXML(parser.getFirstValueOf("TaskInfo"));
    			counter++;
    		  }
    		  else{
    			tmpParser.setInputXML("");
    			tmpParser.setInputXML(parser.getNextValueOf("TaskInfo"));
    		  }
    	  listOfTask=listOfTask+tmpParser.getIntOf("TaskId", 0, false)+",";
    	  noOfTasks--;
      }
      

      if(!taskList.equals("")){
 		 noOfTasks = parser.getNoOfFields("TaskInfo");
       }
      counter=0;
      tmpParser = new XMLParser();
      if(user!=null){
      while(noOfTasks>0){
    	  if(counter==0){
    			tmpParser.setInputXML(parser.getFirstValueOf("TaskInfo"));
    			counter++;
    		  }
    		  else{
    			tmpParser.setInputXML("");
    			tmpParser.setInputXML(parser.getNextValueOf("TaskInfo"));
    		  }
    	  listOfTask=listOfTask+tmpParser.getIntOf("TaskId", 0, false)+",";
    	  noOfTasks--;
      }
     
      if(!taskList.equals("")){
 		 noOfTasks = parser.getNoOfFields("TaskInfo");
       }
      counter=0;
      tmpParser = new XMLParser();

      while(noOfTasks>0){
	  if(counter==0){
		tmpParser.setInputXML(parser.getFirstValueOf("TaskInfo"));
		counter++;
	  }
	  else{
		tmpParser.setInputXML("");
		tmpParser.setInputXML(parser.getNextValueOf("TaskInfo"));
	  }
      processInstanceId = tmpParser.getValueOf("ProcessInstanceId", "", false);
      workItemId = tmpParser.getIntOf("WorkItemId", 0, false);
      taskId = tmpParser.getIntOf("TaskId", 0, false);
      processDefId = tmpParser.getIntOf("ProcessDefId", 0, false);
      activityId = tmpParser.getIntOf("ActivityId", 0, false);
      HashMap<Integer,String>allowDeclineMap=new HashMap<Integer,String>();
	  allowDeclineMap=WFSUtil.getColumnValueFromWFTaskStatusTable("AllowDecline",processInstanceId,con,processDefId,activityId,dbType,listOfTask);
      
      if(String.valueOf(allowDeclineMap.get(taskId)).equals("Y")){
      int userID = 0;
      char pType = '\0';
      String taskInitiator = "";
      HashMap<String, String> mapForTaskAttributes = new HashMap<String, String>();
      Calendar cal = Calendar.getInstance();
      String strDate = WFSUtil.dbDateTime(con, dbType);
      mapForTaskAttributes.put("ProcessInstanceId", processInstanceId);
      mapForTaskAttributes.put("WorkItemId", String.valueOf(workItemId));
      mapForTaskAttributes.put("DueDate", dueDate);
      mapForTaskAttributes.put("DeclinedOn", strDate);
      mapForTaskAttributes.put("EngineName", engine);
      mapForTaskAttributes.put("TaskId", String.valueOf(taskId));
      mapForTaskAttributes.put("OAPWebServerAddress", OAPWebServerAddress);
      mapForTaskAttributes.put("WebServerAddress", webServerAddress);

      if (user != null && user.gettype() == 'U') {
        mapForTaskAttributes.put("DeclinedBy", user.getname());
        declinedBy = user.getname();
      }
      if (rejectionComments == null) {
        rejectionComments = " ";
      }
      mapForTaskAttributes.put("Comments", rejectionComments);
      mapForTaskAttributes.put("ActivityType", String.valueOf(32));
      int taskStatus = 0;
 
        if (con.getAutoCommit()) {
          con.setAutoCommit(false);
          commit = true;
        }

        pstmt =
            con.prepareStatement("select  AssignedUser,URN from WFINSTRUMENTTABLE where processinstanceid =? and processdefid = ? and workitemid = ? and activityid = ?");
        WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
        pstmt.setInt(2, processDefId);
        pstmt.setInt(3, workItemId);
        pstmt.setInt(4, activityId);
        pstmt.execute();
        rs = pstmt.getResultSet();
        if (rs.next()) {
          caseManager = rs.getString("AssignedUser");
          urn = rs.getString("URN");
        }
        if (pstmt != null) {
            pstmt.close();
            pstmt = null;
          }
          if (rs != null) {
            rs.close();
            rs = null;
          }
          if(urn!=null&&!urn.equalsIgnoreCase("")){
        	  mapForTaskAttributes.put("URN", urn);
          }else{
        	  mapForTaskAttributes.put("URN", processInstanceId);
          }

        pstmt =
            con.prepareStatement("select  DueDate,SubTaskId, AssignedBy from WFTaskStatusTable where  ProcessInstanceId=? and WorkItemId=? and ProcessDefId=? and ActivityId=? and TaskId=? and TaskStatus=? ");
        WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
        pstmt.setInt(2, workItemId);
        pstmt.setInt(3, processDefId);
        pstmt.setInt(4, activityId);
        pstmt.setInt(5, taskId);
        pstmt.setInt(6, 2);
        pstmt.execute();
        rs = pstmt.getResultSet();
        if (rs.next()) {
          dueDate = rs.getString("DueDate");
          subTaskId = rs.getInt("SubTaskId");
          taskInitiator = rs.getString("AssignedBy");
          if (pstmt != null) {
            pstmt.close();
            pstmt = null;
          }
          if (rs != null) {
            rs.close();
            rs = null;
          }


          pstmt =
              con.prepareStatement("update WFTaskStatusTable set taskStatus=?, ActionDateTime="
                  + WFSUtil.TO_DATE(actionDateTime, true, dbType)
                  + " where ProcessInstanceId=? and WorkItemId=? and ProcessDefId=? and ActivityId=? and TaskId=? and TaskStatus=?");
          pstmt.setInt(1, WFSConstant.WF_TaskDeclined);
          WFSUtil.DB_SetString(2, processInstanceId, pstmt, dbType);
          pstmt.setInt(3, workItemId);
          pstmt.setInt(4, processDefId);
          pstmt.setInt(5, activityId);
          pstmt.setInt(6, taskId);
          pstmt.setInt(7, 2);
          int rs1 = pstmt.executeUpdate();
          if (pstmt != null) {
            pstmt.close();
            pstmt = null;
          }
          if (rs != null) {
            rs.close();
            rs = null;
          }

          String[] caseManagerIdArr = WFSUtil.getIdForName(con, dbType, caseManager, "U");
          int caseManagerId = Integer.parseInt(caseManagerIdArr[1]);
          if (!rejectionComments.equals("")) {
            pstmt =
                con.prepareStatement("insert into WFCommentsTable(ProcessDefId, ActivityId, ProcessInstanceId, "
                    + "WorkItemId, ProcessVariantId, TaskId, SubTaskId, CommentsBy, CommentsByName, CommentsTo, "
                    + "CommentsToName, Comments, CommentsType, ActionDateTime) "
                    + "values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "
                    + WFSUtil.getDate(dbType)
                    + ")");
            pstmt.setInt(1, processDefId);
            pstmt.setInt(2, activityId);
            WFSUtil.DB_SetString(3, processInstanceId, pstmt, dbType);
            pstmt.setInt(4, workItemId);
            pstmt.setInt(5, 0);
            pstmt.setInt(6, taskId);
            pstmt.setInt(7, subTaskId);
            pstmt.setInt(8, user.getid());
            WFSUtil.DB_SetString(9, user.getname(), pstmt, dbType);
            pstmt.setInt(10, caseManagerId);
            WFSUtil.DB_SetString(11, caseManager, pstmt, dbType);
            WFSUtil.DB_SetString(12, rejectionComments, pstmt, dbType);
            pstmt.setInt(13, WFSConstant.CONST_COMMENTS_DECLINE);
            pstmt.execute();
            pstmt.close();
            pstmt = null;

          }


          pstmt =
              con.prepareStatement("select b.WFDays,b.WFHours,b.WFMinutes from "
                  + "WFTaskDefTable a inner join WFDurationTable b "
                  + "on a.processdefid = b.processdefid "
                  + "and a.TurnAroundTime= b.durationid where a.processDefId=? and a.taskid = ?");

          pstmt.setInt(1, processDefId);
          pstmt.setInt(2, taskId);
          pstmt.execute();
          rs = pstmt.getResultSet();
          while (rs.next()) {
            days = rs.getInt(1);
            hrs = rs.getInt(2);
            mins = rs.getInt(3);
          }

          if (days >= 0) {
            timeInMins = days * 24 * 60;
          }
          if (hrs >= 0) {
            timeInMins = timeInMins + hrs * 60;
          }
          if (mins >= 0) {
            timeInMins = timeInMins + mins;
          }
          if(rs!=null){
        	  rs.close();
          }
          if(pstmt!=null){
        	  pstmt.close();
          }

          String strQry =
              "Select TaskName  From WFTaskDefTable " + WFSUtil.getTableLockHintStr(dbType)
                  + " Where ProcessDefId = ? And TaskId = ? ";
          pstmt = con.prepareStatement(strQry);
          pstmt.setInt(1, processDefId);
          pstmt.setInt(2, taskId);
          rs = pstmt.executeQuery();
          if (rs.next()) {
            String taskName = rs.getString(1);
            mapForTaskAttributes.put("TaskName", taskName);
          }
          if (pstmt != null) {
            pstmt.close();
            pstmt = null;
          }
          if (rs != null) {
            rs.close();
            rs = null;
          }
          pstmt =
              con.prepareStatement("Select a.processname, b.activityname from ProcessDefTable a " + WFSUtil.getTableLockHintStr(dbType) + " inner join activitytable b " + WFSUtil.getTableLockHintStr(dbType) + " on a.processdefid = b.processdefid and a.processdefid = ? and b.activityid = ?");
          pstmt.setInt(1, processDefId);
          pstmt.setInt(2, activityId);
          rs = pstmt.executeQuery();
          if (rs.next()) {
            mapForTaskAttributes.put("RouteName", rs.getString("processname"));
            mapForTaskAttributes.put("ActivityName", rs.getString("activityname"));
          }
          if (pstmt != null) {
            pstmt.close();
            pstmt = null;
          }
          if (rs != null) {
            rs.close();
            rs = null;
          }

          taskStatus = WFSConstant.WF_TaskDeclined;
          tempXml.append("<DeclinedTask>\n");
          tempXml.append(gen.writeValueOf("TaskId",String.valueOf(taskId)));
          tempXml.append(gen.writeValueOf("TaskStatus", String.valueOf(taskStatus)));
          tempXml.append(gen.writeValueOf("DueDate", dueDate));
          tempXml.append(gen.writeValueOf("ActionDateTime", actionDateTime));
          tempXml.append(gen.writeValueOf("Turnaroundtime", String.valueOf(timeInMins)));
          tempXml.append("\n</DeclinedTask>");
        } else {
          mainCode = WFSError.WF_TASK_NOT_DECLINED;
          subCode = 0;
          subject = WFSErrorMsg.getMessage(mainCode);
          descr = WFSErrorMsg.getMessage(subCode);
          errType = WFSError.WF_TMP;
        }
      
      if (mainCode == 0) {
    	  //Changes related to deleting the Defined escalation on the task to be declined
          pstmt = con.prepareStatement("delete from WFEscalationTable where PROCESSINSTANCEID = ? and WORKITEMID = ? and PROCESSDEFID = ? and ACTIVITYID = ? "
          		+ " and ESCALATIONMODE = 'Mail' and TASKID = ? and ESCALATIONTYPE = 'F'");
          pstmt.setString(1, processInstanceId);
          pstmt.setInt(2, workItemId);
          pstmt.setInt(3, processDefId);
          pstmt.setInt(4, -activityId);
          pstmt.setInt(5, taskId);
          pstmt.executeUpdate();
          if(pstmt!= null){
              pstmt.close();
              pstmt = null;
          }
    	  
    	int queueId = 0;
        if (pstmt != null) {
          pstmt.close();
          pstmt = null;
        }
        if (rs != null) {
          rs.close();
          rs = null;
        }
        String userEmail = "";
        String ccUserEmail = "";
        String strQry = "Select MailId From wfuserview Where upper(UserName) = ? ";
        pstmt = con.prepareStatement(strQry);
        WFSUtil.DB_SetString(1, taskInitiator.toUpperCase(), pstmt, dbType);
        rs = pstmt.executeQuery();
        while (rs != null && rs.next()) {
          userEmail = userEmail + rs.getString(1) + ";";
        }
		if (rs != null) {
			rs.close();
			rs = null;
		}
		if (pstmt != null) {
			pstmt.close();
			pstmt = null;
		}
		
		//adding ccmailid
		String ccStrQry = "Select MailId From wfuserview Where upper(UserName) = ? ";
        pstmt = con.prepareStatement(ccStrQry);
        WFSUtil.DB_SetString(1, declinedBy.toUpperCase(), pstmt, dbType);
        rs = pstmt.executeQuery();
        while (rs != null && rs.next()) {
        	ccUserEmail = ccUserEmail + rs.getString(1) + ";";
        }
		if (rs != null) {
			rs.close();
			rs = null;
		}
		if (pstmt != null) {
			pstmt.close();
			pstmt = null;
		}
        strQry = "Select distinct Q_QueueId from wfinstrumenttable " + WFSUtil.getTableLockHintStr(dbType) + " where processinstanceid = ? and workitemId = ?";
        pstmt = con.prepareStatement(strQry);
        WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
        pstmt.setInt(2, workItemId);
        rs = pstmt.executeQuery();
        if (rs != null && rs.next()) {
        	queueId = rs.getInt(1);
        }
        if (userEmail != null && !("".equals(userEmail))) {
			HashMap<String, String> mailStringAttributes = new HashMap<String, String>(); 
			HashMap<String, Integer> mailIntAttributes = new HashMap<String, Integer>();
			mailStringAttributes.put("CabinetName", engine);
			mailStringAttributes.put("MailTo", userEmail.toString());
			if(ccUserEmail != null && !("".equals(ccUserEmail))) {
			mailStringAttributes.put("MailCC", ccUserEmail.toString());
			}else {
				mailStringAttributes.put("MailCC", null);
			}
			mailStringAttributes.put("MailAttachmentIndex", null);
			mailStringAttributes.put("MailAttachmentNames", null);
			mailStringAttributes.put("MailStatus", "N");
			mailStringAttributes.put("MailStatusComments", null);
			mailStringAttributes.put("MailInsertedBy", null);
			mailStringAttributes.put("MailActionType", "TaskNotification");
			mailStringAttributes.put("MailAttachmentExtensions", null);
			mailStringAttributes.put("PropertyName", "DeclineTask");
			mailStringAttributes.put("ProcessInstanceId", processInstanceId);
			mailIntAttributes.put("MailPriority", 1);
			mailIntAttributes.put("ProcessDefID", processDefId);
			mailIntAttributes.put("WorkItemId", workItemId);
			mailIntAttributes.put("ActivityId", activityId);
			mailIntAttributes.put("DbType", dbType);
			mailIntAttributes.put("NoOfTrials", 0);
			mapForTaskAttributes.put("QueueId", Integer.toString(queueId));
			mapForTaskAttributes.put("SubTaskId", String.valueOf(subTaskId));
			EmailTemplateUtil.addTaskToMailQueue(con, mapForTaskAttributes, mailIntAttributes, mailStringAttributes);
        }
      }
        if (pstmt != null) {
          pstmt.close();
          pstmt = null;
        }
        if (rs != null) {
          rs.close();
          rs = null;
        }
        WFSUtil.generateTaskLog(engine, con, dbType, processInstanceId,
            WFSConstant.WFL_TaskDeclined, workItemId, processDefId, activityId, null, 0, userID,
            user.getname(), user.getname(), taskId, subTaskId, actionDateTime);
      }
      else{
	        mainCode = WFSError.WF_NO_AUTHORIZATION;
	        subCode = 0;
	        subject = WFSErrorMsg.getMessage(300);
	        descr = WFSErrorMsg.getMessage(subCode);
	        errType = WFSError.WF_TMP;
	        String strReturn = WFSUtil.generalError("WFDeclineTask", engine, gen, mainCode, subCode, errType, subject,
					descr);
			return strReturn; 
	      }
      noOfTasks--;
      }
      }
  	  else {
    	        mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
    	        subCode = 0;
    	        subject = WFSErrorMsg.getMessage(mainCode);
    	        descr = WFSErrorMsg.getMessage(subCode);
    	        errType = WFSError.WF_TMP;
    	        String strReturn = WFSUtil.generalError("WFDeclineTask", engine, gen, mainCode, subCode, errType, subject,
    					descr);
    			return strReturn; 
    	      }
    	  
      if(mainCode==0){
        if (!con.getAutoCommit()) {
          con.commit();
          con.setAutoCommit(true);
          commit = false;
        }
       // outputXML = new StringBuffer(500);
        outputXML.append(gen.createOutputFile("WFDeclineTask"));
        outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
        outputXML.append(tempXml);
        outputXML.append("\n");
        outputXML.append(gen.closeOutputFile("WFDeclineTask"));
      }

    } catch (SQLException e) {
      WFSUtil.printErr(engine, "", e);
      mainCode = WFSError.WF_OPERATION_FAILED;
      subCode = WFSError.WFS_SQL;
      subject = WFSErrorMsg.getMessage(mainCode);
      errType = WFSError.WF_FAT;
      if (e.getErrorCode() == 0) {
        if (e.getSQLState().equalsIgnoreCase("08S01")) {
          descr =
              (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
                  + ")";
        }
      } else {
        descr = e.getMessage();
      }
    } catch (NumberFormatException e) {
      WFSUtil.printErr(engine, "", e);
      mainCode = WFSError.WF_OPERATION_FAILED;
      subCode = WFSError.WFS_ILP;
      subject = WFSErrorMsg.getMessage(mainCode);
      errType = WFSError.WF_TMP;
      descr = e.toString();
    } catch (NullPointerException e) {
      WFSUtil.printErr(engine, "", e);
      mainCode = WFSError.WF_OPERATION_FAILED;
      subCode = WFSError.WFS_SYS;
      subject = WFSErrorMsg.getMessage(mainCode);
      errType = WFSError.WF_TMP;
      descr = e.toString();
    } catch (WFSException e) {
      mainCode = WFSError.WM_NO_MORE_DATA;
      subCode = 0;
      subject = WFSErrorMsg.getMessage(mainCode);
      descr = WFSErrorMsg.getMessage(subCode);
      errType = WFSError.WF_TMP;
    } catch (JTSException e) {
      WFSUtil.printErr(engine, "", e);
      mainCode = WFSError.WF_OPERATION_FAILED;
      subCode = e.getErrorCode();
      subject = WFSErrorMsg.getMessage(mainCode);
      errType = WFSError.WF_TMP;
      descr = e.getMessage();
    } catch (Exception e) {
      WFSUtil.printErr(engine, "", e);
      mainCode = WFSError.WF_OPERATION_FAILED;
      subCode = WFSError.WFS_EXP;
      subject = WFSErrorMsg.getMessage(mainCode);
      errType = WFSError.WF_TMP;
      descr = e.toString();
    }  finally {
      try {
        if (pstmt != null) {
          pstmt.close();
          pstmt = null;
        }
        if (commit) {
        	con.rollback();
          con.setAutoCommit(true);
        }
      } catch (Exception e) {
        WFSUtil.printErr(engine, "", e);
      }
      try {
        if (rs != null) {
          rs.close();
          rs = null;
        }
      } catch (Exception e) {
        WFSUtil.printErr(engine, "", e);
      }
      
    }
    if (mainCode != 0) {
		String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
		outputXML.append( errorString);

  }
    return outputXML.toString();
  }

  // ----------------------------------------------------------------------------------------------------
//	Function Name 				:	WFGetTemplateForTask
//	Date Written (DD/MM/YYYY)               :	28-04-2015
//	Author					:	Sajid Khan  
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:       none
//	Return Values				:	String (output xml)
//	Description				:       API to Get the Template Fields for a Task.
//----------------------------------------------------------------------------------------------------
/************************************************************************************************************************
 Algorithms:
 * Get the Template associated with the task.     

<WFGetTemplateForTask _Input>
	<Option>WFGetTemplateForTask</Option>
	<EngineName>casemgmt</EngineName>
	<SessionID>123414214</SessionId>
	<ProcessDefId>1</ProcessDefId>	
	<TaskId>1</TaskId>
        <SubTaskId>3</SubTaskId>
	<ActivityId>3</ActivityId>
</WFGetTemplateForTask _Input>

<WFGetTemplateForTask_Output>
	<Exception>
		<MainCode>0</MainCode>
	</Exception>
	<Goal>To check Address</Goal>
	<Instruction>INtructe</Instruction>
        <Consultants>
            <Consultant>
                <UserName>Anushree</UserName>
                <ConsultantOrderId>1</ConsultantOrderId>
            </Consultant>
            <Consultant>
                <UserName>Diwaker</UserName>
                <ConsultantOrderId>2</ConsultantOrderId>
            </Consultant>
        </Consultants>
	<TemplateId>3</TemplateId>
	<TemplateName>task1_template</TemplateName>
	<TemplateFields>
		<TemplateField>
			<TemplateVariableId>1</TemplateVariableId>
			<TaskVariableName>Approver’s Name</TaskVariableName>
			<DisplayName>Name</DisplayName>
			<VariableType>10</VariableType>
			<OrderId>1</OrderId>
                        <VariableValue>Sajid Khan</VariableValue>
			<ControlType>1</ControlType>
		</TemplateField>
		<TemplateField>
			<TemplateVariableId>2</TemplateVariableId>
			<TaskVariableName>Created On</TaskVariableName>
			<DisplayName>DateCreation</DisplayName>
			<VariableType>8</VariableType>
			<OrderId>2</OrderId>
                        <ControlType>1</ControlType>
		</TemplateField >
                <TemplateField>
			<TemplateVariableId>3</TemplateVariableId>
			<TaskVariableName>Approver’s Name</TaskVariableName>
			<DisplayName>Name</DisplayName>
			<VariableType>10</VariableType>
			<OrderId>3</OrderId>
			<ControlType>3</ControlType>
			<ControlValues>
				<Value>Approve</Value>
				<Value>Reject</Value>
			</ControlValues>
		</TemplateField>
	</TemplateFields>
</WFGetTemplateForTask_Output>

Note: IN WFConsultantsTable, Type = 4 will represent task and TypeId will be TaskId if Type = 4.
********************************************************************************************************************/
public String WFGetTemplateForTask(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
        StringBuilder outputXML = new StringBuilder();
        PreparedStatement pstmt = null;
        PreparedStatement pstmt1 = null;
        //Statement stmt = null;
        ResultSet rs = null;
        ResultSet rs1 = null;
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        String engine = parser.getValueOf("EngineName");
        String option = parser.getValueOf("Option","",false);
        String encodedBinaryData = null;
        int formsize = 0;

        try {
                int sessionID = parser.getIntOf("SessionId", 0, false);
                boolean noMoreFlag = false;
                int processDefId = parser.getIntOf("ProcessDefId", 0, false);
                int activityId = parser.getIntOf("ActivityId",0,true);
                int taskId = parser.getIntOf("TaskId", 0, false);
                int subTaskId = parser.getIntOf("SubTaskId", 0, true);
                String processInstanceId = parser.getValueOf("ProcessInstanceId",null,false);
                int workItemId = parser.getIntOf("WorkitemId",0,false);
				String getFormBuffer = parser.getValueOf("GetFormBuffer", "Y" ,true);
                LinkedHashMap varValueMap = new LinkedHashMap();
               // int templateId = 0;
                int tempVarId = 0;
                String taskVarName = "";
                String displayName = "";
                int variableType = 0;
                int orderId = 0;
                int controlType = 0;
                int taskType = 0;
                String readOnly = "N";
                boolean dbLinking = false;
                String templateName = null;
                String goal = null;
                String instruction = null;
                boolean isMappedFlag = true;//If isMapped is true then return a hashmap containgin key as templatevariableid and values as Mapped variable value
                StringBuffer tempXml = new StringBuffer(500);
                StringBuffer formBufferXml = new StringBuffer(500);
                StringBuffer controlValueXml = new StringBuffer(100);
                int dbType = ServerProperty.getReference().getDBType(engine);
                WFParticipant user = WFSUtil.WFCheckSession(con, sessionID); 
                String dbLinkingQuery = null;
                if (user != null) {
                		pstmt = con.prepareStatement("Select Instructions from WFTaskStatusTable " +WFSUtil.getTableLockHintStr(dbType)+"  Where ProcessInstanceId = "
                                + " ? and Workitemid =? And ProcessDefId =? and ActivityId = ? And TaskId = ? And SubTaskId = ?");
                        //rs = pstmt.executeQuery("Select Instructions from WFTaskStatusTable Where ProcessInstanceId = "
                         WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);        
                         pstmt.setInt(2,workItemId);
                         pstmt.setInt(3,processDefId);
                         pstmt.setInt(4,activityId);
                         pstmt.setInt(5,taskId);
                         pstmt.setInt(6,subTaskId);
                         rs=pstmt.executeQuery();       
                        if(rs.next()){
                            instruction = rs.getString(1);
                        }
                        if(pstmt!=null){
                            pstmt.close();
                            pstmt = null;
                        }
                        if(rs!=null){
                            rs.close();
                            rs = null;
                        }
                        
                        
                        pstmt = con.prepareStatement("Select Goal, Instructions, TaskType from WFTaskDefTable " +WFSUtil.getTableLockHintStr(dbType)+" where ProcessDefId = ? and TaskId = ?");
                        //rs = stmt.executeQuery("Select Goal, Instructions, TaskType from WFTaskDefTable Where TaskId = "+taskId+" And ProcessDefId = "+processDefId);
                        pstmt.setInt(1, processDefId);
                        pstmt.setInt(2, taskId);
                        rs = pstmt.executeQuery();
                        if(rs.next()){
                            goal = rs.getString(1);
                            if(instruction==null || ("".equals(instruction))){
                                instruction = rs.getString(2);
                            }
                            taskType = rs.getInt(3);
                        }
                        if(pstmt!=null){
                            pstmt.close();
                            pstmt = null;
                        }
                        if(rs!=null){
                            rs.close();
                            rs = null;
                        }
                        pstmt = con.prepareStatement("Select TemplateName from WFTaskTemplateDefTable " +WFSUtil.getTableLockHintStr(dbType)+" Where ProcessDefId=? and TaskId = ?");
                        pstmt.setInt(1,processDefId);
                        pstmt.setInt(2,taskId);
                        rs = pstmt.executeQuery();
                        if(rs.next()){
                            templateName = rs.getString(1);
                        }
                        if(pstmt!=null){
                            pstmt.close();
                            pstmt = null;
                        }
                        if(rs!=null){
                            rs.close();
                            rs = null;
                        }
                        
                        pstmt = con.prepareStatement("Select ConsultantOrderId,UserName from WFConsultantsTable " +WFSUtil.getTableLockHintStr(dbType)+" Where Type = ? And TypeId = ? and ProcessDefId = ?");
                        pstmt.setInt(1,4);
                        pstmt.setInt(2,taskId);
                        pstmt.setInt(3, processDefId);
                        rs = pstmt.executeQuery();
                        StringBuffer consultantStr = new StringBuffer(100);
                        consultantStr.append("\n<Consultants>\n");
                        while(rs.next()){
                              consultantStr.append("<Consultant>\n");
                              consultantStr.append(gen.writeValue("UserName", rs.getString(2)));
                              consultantStr.append(gen.writeValue("ConsultantOrderId", rs.getString(1)));
                              consultantStr.append("\n</Consultant>\n");
                        }
                        consultantStr.append("</Consultants>\n");
                        if(pstmt!=null){
                           pstmt.close();
                           pstmt = null;
                        }
                        if(rs!=null){
                            rs.close();
                            rs = null;
                        }
                        tempXml.append(gen.writeValue("Goal", WFSUtil.handleSpecialCharInXml(goal)));
                        tempXml.append(gen.writeValue("Instruction", WFSUtil.handleSpecialCharInXml(instruction)));
                        tempXml.append(gen.writeValue("TemplateName", templateName));
                        tempXml.append(consultantStr);
                   //Query to check wheter all task data required or only those task data which are mapped to process variables.
                   /*If any record found in WFTaskStatusTable for TaskStatus =2 for a ProcessDefId+ActivityId+TaskId+ProcessInstanceId
                    * it means the task is already intiated that says bring those task data which is mapped with process variables else 
                    * get it from TaskData table.
                    */
                        if(templateName!=null){
                            pstmt = con.prepareStatement(" Select 1 from WFTaskStatusTable " +WFSUtil.getTableLockHintStr(dbType)+" where ProcessInstanceId = ? And WorkitemId = ? and ProcessDefId = ? And "
                                    + "ActivityId = ? And TaskId = ? And SubTaskId = ? and TaskStatus IN (?,?,?) ");
                            WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
                            pstmt.setInt(2, workItemId);
                            pstmt.setInt(3,processDefId);
                            pstmt.setInt(4, activityId);
                            pstmt.setInt(5, taskId);
                            pstmt.setInt(6, subTaskId);
                            pstmt.setInt(7, WFSConstant.WF_TaskInitiated);
                            pstmt.setInt(8, WFSConstant.WF_TaskCompleted);
                            pstmt.setInt(9, WFSConstant.WF_TaskPendingForApproval);
                            rs = pstmt.executeQuery();
                            if(rs.next()){
                                isMappedFlag = false;
                            }else{
                                isMappedFlag = true;
                            }

                            varValueMap = WFSUtil.fetchTaskData(con, processDefId, activityId, taskId,subTaskId, processInstanceId,
                                                workItemId, 0, 0, dbType, false, engine, gen,isMappedFlag);
                            if(pstmt!=null){
                               pstmt.close();
                               pstmt = null;
                            }
                            if(rs!=null){
                                rs.close();
                                rs = null;
                            }
                            //Changes in query for Bug 57754
                            String strQry = "Select  a.TemplateVariableId,a.TaskVariableName,a.DisplayName,a.VariableType,a.OrderId,"
                                        + "a.ControlType,b.ReadOnly,b.TypeFieldId,b.VariableId,a.DBLinking from WFTaskTemplateFieldDefTable  a " +WFSUtil.getTableLockHintStr(dbType)+"   LEFT JOIN "
                                        + "(Select * from WFTaskVariableMappingTable  " +WFSUtil.getTableLockHintStr(dbType)+"  where ProcessDefId=? and ActivityId = ? and TaskId=? ) b on "
                                        + "a.TemplateVariableId=b.TemplateVariableId where  a.ProcessDefId = ? and a.TaskId=? ";
                           //For Generic Tasks only template fields will be  process specific and for rest of the types processdefid in template tables will be 0.
                            pstmt = con.prepareStatement(strQry);
                            pstmt.setInt(1,processDefId);
                            pstmt.setInt(2,activityId);
                            pstmt.setInt(3,taskId);
                            pstmt.setInt(4,processDefId);
                            pstmt.setInt(5,taskId);
                            rs = pstmt.executeQuery();
                            tempXml.append("<TemplateFields>\n");
                            while(rs.next()){
                                tempVarId = rs.getInt(1);
                                taskVarName = rs.getString(2);
                                displayName = rs.getString(3);
                                variableType = rs.getInt(4);
                                orderId = rs.getInt(5);
                                controlType = rs.getInt(6);
                                readOnly = rs.getString(7);
                                dbLinking = (rs.getString("DBLinking")).equalsIgnoreCase("Y");
                                if(readOnly==null || "".equals(readOnly))//It means this templatevariable is not mapped with any process variables.
                                   readOnly = "N";
                                if(controlType ==3){
                                     if(pstmt1!=null){
                                        pstmt1.close();
                                        pstmt1 = null;
                                    }
                                    if(rs1!=null){
                                       rs1.close();
                                       rs1 = null;
                                    }
                                    pstmt1 = con.prepareStatement(" Select ControlValue from WFTaskTempControlValues " +WFSUtil.getTableLockHintStr(dbType)+" Where"
                                            + " ProcessDefId = ? And TaskId = ? and TemplateVariableId= ? ");
                                    
                                    pstmt1.setInt(1,processDefId);
                                    pstmt1.setInt(2,taskId);
                                    pstmt1.setInt(3,tempVarId);
                                    rs1 = pstmt1.executeQuery();

                                    controlValueXml.append("\n<ControlValues>\n");
                                    if(dbLinking){
                                        if(rs1.next()){
                                        dbLinkingQuery= rs1.getString("ControlValue");
                                        }
                                         if(pstmt1!=null){
                                            pstmt1.close();
                                            pstmt1 = null;
                                         }
                                         if(rs1!=null){
                                            rs1.close();
                                            rs1 = null;
                                         }
                                         pstmt1 = con.prepareStatement(WFSUtil.TO_SANITIZE_STRING(dbLinkingQuery, true));
                                         rs1 = pstmt1.executeQuery();
                                    }
                                    while(rs1.next()){
                                        controlValueXml.append("<Value>"+rs1.getString(1) +"</Value>\n");
                                    }
                                    controlValueXml.append("</ControlValues>\n");
                                }
                                tempXml.append("<TemplateField>\n");
                                tempXml.append(gen.writeValue("TemplateVariableId", String.valueOf(tempVarId)));
                                tempXml.append(gen.writeValue("TaskVariableName", taskVarName));
                                tempXml.append(gen.writeValue("DisplayName", displayName));
                                tempXml.append(gen.writeValue("IsReadOnly", readOnly));
                                tempXml.append(gen.writeValue("VariableType", String.valueOf(variableType)));
                                tempXml.append(gen.writeValue("OrderId", String.valueOf(orderId)));
                                tempXml.append(gen.writeValue("ControlType", String.valueOf(controlType)));
                                if(varValueMap.containsKey(tempVarId)){
                                    tempXml.append(gen.writeValue("VariableValue", StringEscapeUtils.unescapeXml(StringEscapeUtils.escapeXml(String.valueOf(varValueMap.get(tempVarId))))));
                                }
                                if(controlType ==3){
                                    tempXml.append(controlValueXml);
                                    controlValueXml= new StringBuffer();
                                }
                                tempXml.append("\n</TemplateField>\n");
                                noMoreFlag = true;
                            }
                            tempXml.append("</TemplateFields>\n");
                            
                            if(pstmt!=null){
                               pstmt.close();
                               pstmt = null;
                            }
                            if(rs1!=null){
                               rs1.close();
                               rs1 = null;
                            }
                            if(pstmt1!=null){
                            	pstmt1.close();
                            }
    //                        if(!noMoreFlag){
    //                          mainCode = WFSError.WM_NO_MORE_DATA;
    //                          subCode = 0;
    //                          subject = WFSErrorMsg.getMessage(mainCode);
    //                          descr = WFSErrorMsg.getMessage(subCode);
    //                          errType = WFSError.WF_TMP;
    //                      }
                        }
                        //Changes for Form association with task
						if("Y".equalsIgnoreCase(getFormBuffer)){
							Object[] result = null;
							//Device type added in query for iform support **Mohnish **
							pstmt = con.prepareStatement("Select FormBuffer,DeviceType from WFTaskFormTable "+WFSUtil.getTableLockHintStr(dbType)+" where processdefid = ? and taskid =? ");
							pstmt.setInt(1, processDefId);
							pstmt.setInt(2, taskId);
							pstmt.execute();
							rs = pstmt.getResultSet();
							if (rs.next()) {
								formBufferXml.append("<FormInterface><Definition>\n");

								formBufferXml.append("<Form>\n");
								formBufferXml.append("<FormBuffer>");
								
								//----------------------------------------------------------------------------
								// Changed By											:	Prashant
								// Reason / Cause (Bug No if Any)	: Bug No TSR_3.0.1_003
								// Change Description							: directly append bytearray to xml
								//----------------------------------------------------------------------------
								//			outFile.write(text);
								result = WFSUtil.getBIGData(con, rs, "FormBuffer", dbType, "8859_1");
								formBufferXml.append((String) result[0]);
								formsize = ((Integer) result[1]).intValue();
								//		  outFile.flush();
								//		  outFile.close();
								//		  java.io.File outFile1 = new java.io.File("HOWHOWOut.ngf");
								//		  java.io.File inFile = new java.io.File("HOWHOW.ngf");

								//		  Reduce32 reduce = new Reduce32();
								//		  short sTemp = 0;
								//		  try{
								//			sTemp = reduce.NGAP_ExpandFile(inFile.getAbsolutePath(), outFile1.getAbsolutePath());
								//		  }
								//		  catch(Exception e){
								//			  WFSUtil.printErr(parser,"", e);
								//		  }
								formBufferXml.append("</FormBuffer>");

								//----------------------------------------------------------------------------
								// Changed By											:	Prashant
								// Reason / Cause (Bug No if Any)	: return length of formbuffer
								// Change Description							: return length of formbuffer
								//----------------------------------------------------------------------------
								formBufferXml.append(gen.writeValueOf("LengthFormBuffer", formsize + ""));
								String deviceType =rs.getString("DeviceType");
								formBufferXml.append(gen.writeValueOf("DeviceType", deviceType));
								formBufferXml.append("</Form>\n");
								/*Changes start for**Mohnish** iform support*/
								/*Changes end for **Mohnish** iform support*/
								if(deviceType.equalsIgnoreCase(WFSConstant.DEVICE_TYPE_IFORM)){
									encodedBinaryData = "N";	
								}
								else{
									encodedBinaryData = "Y";	
								}
								formBufferXml.append(gen.writeValueOf("EncodedBinaryData", encodedBinaryData));
								formBufferXml.append("</Definition></FormInterface>\n");
							}  
							
							if(formsize!=0){
								tempXml.append(formBufferXml);
							}
						}
                        if(pstmt!=null){
                            pstmt.close();
                            pstmt = null;
                         }
                         if(rs!=null){
                             rs.close();
                             rs = null;
                         }
                }else{
                        mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                        subCode = 0;
                        subject = WFSErrorMsg.getMessage(mainCode);
                        descr = WFSErrorMsg.getMessage(subCode);
                        errType = WFSError.WF_TMP;
                }
               
                if (mainCode == 0) { // generating output xml
                       // outputXML = new StringBuffer(500);
                        outputXML.append(gen.createOutputFile("WFGetTemplateForTask"));
                        outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                        outputXML.append(tempXml);
                        outputXML.append(gen.closeOutputFile("WFGetTemplateForTask"));
                }
        } catch (SQLException e) { // throwing exceptions
                WFSUtil.printErr(engine,"", e);
                mainCode = WFSError.WM_INVALID_FILTER;
                subCode = WFSError.WFS_SQL;
                subject = WFSErrorMsg.getMessage(mainCode);
                errType = WFSError.WF_FAT;
                if (e.getErrorCode() == 0) {
                        if ("08S01".equalsIgnoreCase(e.getSQLState())) {
                                descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
                        }
                } else {
                        descr = e.getMessage();
                }
        } catch (NumberFormatException e) {
                WFSUtil.printErr(engine,"", e);
                mainCode = WFSError.WF_OPERATION_FAILED;
                subCode = WFSError.WFS_ILP;
                subject = WFSErrorMsg.getMessage(mainCode);
                errType = WFSError.WF_TMP;
                descr = e.toString();
        } catch (NullPointerException e) {
                WFSUtil.printErr(engine,"", e);
                mainCode = WFSError.WF_OPERATION_FAILED;
                subCode = WFSError.WFS_SYS;
                subject = WFSErrorMsg.getMessage(mainCode);
                errType = WFSError.WF_TMP;
                descr = e.toString();
        } catch (WFSException e) { //WFS_7.1_032
                mainCode = e.getMainErrorCode();
                subCode = e.getSubErrorCode();
                subject = WFSErrorMsg.getMessage(mainCode);
                errType = e.getTypeOfError();
                descr = e.getErrorDescription();
        } catch (JTSException e) {
                WFSUtil.printErr(engine,"", e);
                mainCode = WFSError.WF_OPERATION_FAILED;
                subCode = e.getErrorCode();
                subject = WFSErrorMsg.getMessage(mainCode);
                errType = WFSError.WF_TMP;
                descr = e.getMessage();
        } catch (Exception e) {
                WFSUtil.printErr(engine,"", e);
                mainCode = WFSError.WF_OPERATION_FAILED;
                subCode = WFSError.WFS_EXP;
                subject = WFSErrorMsg.getMessage(mainCode);
                errType = WFSError.WF_TMP;
                descr = e.toString();
        } finally {
            try{
                if (rs != null) { 
                     rs.close();
                     rs = null;
                }
                if (rs1 != null) { 
                     rs1.close();
                     rs1 = null;
                }
                if (pstmt != null) {
                    pstmt.close();
                    pstmt = null;
                }
             } catch (Exception ignored) {}
           
        }
        if (mainCode != 0) {
			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			outputXML.append( errorString);
        }
        return outputXML.toString();
}
//----------------------------------------------------------------------------------------------------
//Function Name 		    :	WFAddTask
//Date Written (DD/MM/YYYY) :	10-05-2015
//Author					:	Rishiram Meel  
//Input Parameters			:	Connection , XMLParser , XMLGenerator
//Output Parameters			:   none
//Return Values				:	String (output xml)
//Description				:   API to  Add New Task  .
//----------------------------------------------------------------------------------------------------
public String WFAddTask(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
	StringBuilder outputXML = new StringBuilder();
	PreparedStatement pstmt = null;
	PreparedStatement pstmt1 = null;
	PreparedStatement pstmt2 = null;
	boolean commit =false; 
	boolean isCreatedNewTemplate=false; 
	ResultSet rs = null;
	int mainCode = 0;
	int subCode = 0;
	String subject = null;
	String descr = null;
	String errType = WFSError.WF_TMP;
	String engine ="";
    String option = parser.getValueOf("Option","",false);

	try {
		engine = parser.getValueOf("EngineName");
		int templateId=parser.getIntOf("TemplateId",0 ,true);
		int dbType = ServerProperty.getReference().getDBType(engine);
		 //Calendar cal = Calendar.getInstance();
		 //String strDate = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US).format(cal.getTime()).toString();
		String strDate=WFSUtil.dbDateTime(con, dbType);
		
		int sessionID = parser.getIntOf("SessionId", 0, false);
		String  processInstanceId= parser.getValueOf("ProcessInstanceId", "0", false);
		int workItemId = parser.getIntOf("WorkItemId", 0, false);
		int processDefId = parser.getIntOf("ProcessDefId", 0, false);
		int tasktype=1;//parser.getIntOf("TaskType", 0 , false);
		String taskname=parser.getValueOf("TaskName","",false);
		String description=parser.getValueOf("Description","",true);
		description=WFSUtil.handleSpecialCharInXml(description,false);
		String isrepeatable=parser.getValueOf("isRepeatable","Y",true);
		String turnAroundTime = parser.getValueOf("Turnaroundtime", "", true);
		//Changes for notify by email in Case Management
		String notifyEmail = parser.getValueOf("NotifyEmail","N",true);
		String days=null;
		String  hours=null;
		String  minutes=null;
		String  tatCalFlag=null;
		tatCalFlag=parser.getValueOf("TATCalFlag","N",true);
		String goal=parser.getValueOf("Goal", "",true);
		goal=WFSUtil.handleSpecialCharInXml(goal,false);
		String instruction=parser.getValueOf("Instruction", "",true);
		instruction=WFSUtil.handleSpecialCharInXml(instruction,false);
		int templateid=0;
		String templateName=null;
		String reUsable=null;
		String taskTemplate=parser.getValueOf("TaskTemplate","",true);
		String cost=parser.getValueOf("Cost","0",true);//default value changed from "" to "0" as this has been removed from FE
		//FomBuffer handling in WFAddTask   
		String bufferVal= parser.getValueOf("FormBuffer", "", true);
		//if(!taskTemplate.equals("")){
		//	templateid=parser.getIntOf("TemplateId",0 , true);
		//}
		StringBuffer tempXml = null;
		WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
		int userID = 0;
                char pType = '\0';
		String userName="";
		int durationId=0;
		int taskId=0;
		int activityId = parser.getIntOf("ActivityId", 0, false);
                String activityName=parser.getValueOf("ActivityName","",true);
                int processVariantId=parser.getIntOf("ProcessVariantId",0,true);
//                StringBuffer createQuery=new StringBuffer(500);
                StringBuffer tempXML = new StringBuffer(100);
        String taskMode="";
		if (user != null) {
                    if(con.getAutoCommit()){
                        con.setAutoCommit(false);
                        commit = true;
                     }
                    userID=user.getid();
                    
                    //Checking process is checkout or not . If process is checkout then user will not be able to add new task
                    pstmt=con.prepareStatement("Select *from CHECKOUTPROCESSESTABLE "+WFSUtil.getTableLockHintStr(dbType)+" where processdefid=?");
                    pstmt.setInt(1, processDefId);
                    rs=pstmt.executeQuery();
                    if(rs!=null && rs.next())
                    {
                    	mainCode = WFSError.WF_ADHOC_TASK_CANNOT_ADDED;
                    	subCode = 0;
                    	subject = WFSErrorMsg.getMessage(mainCode);
                    	descr = WFSErrorMsg.getMessage(subCode);
                    	errType = WFSError.WF_TMP;
                    }
                    if(pstmt!=null){
                    	pstmt.close();
                    	pstmt=null;
                    }
                    if(rs!=null){
                    	rs.close();
                    	rs=null;
                    }
                    if(mainCode==WFSError.WF_ADHOC_TASK_CANNOT_ADDED){
                    	String strReturn = WFSUtil.generalError(option, engine, gen,
                    			mainCode, subCode,
                    			errType, subject,
                    			descr);
                    	return strReturn;	
                    }
                    
    //Part-1 code for  define a new template----------------------------------------------- 
    //if(templateid==0){
//                        pstmt=con.prepareStatement("select " + WFSUtil.isnull("max(TaskId)", "0", dbType)
//                                                    + "  from WFTaskDefTable " + WFSUtil.getLockPrefixStr(dbType)
//                                                    + "  where ProcessDefId =? " + WFSUtil.getLockSuffixStr(dbType));
//                   
                    //Returning WM_INVALID_CASE error in Case Task is added for a case which has already moved from Case Workstep
                    pstmt=con.prepareStatement("Select ActivityId from WFInstrumentTable "+ WFSUtil.getTableLockHintStr(dbType) + " where processinstanceid= ? and workitemid = ? and activityid = ?");
                    WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
                    pstmt.setInt(2,workItemId);
                    pstmt.setInt(3,activityId);
                    rs= pstmt.executeQuery();
                    if(!rs.next()){
                    	mainCode = WFSError.WM_INVALID_CASE;
                    	subCode = 0;
                    	subject = WFSErrorMsg.getMessage(mainCode);
                    	descr = WFSErrorMsg.getMessage(subCode);
                    	errType = WFSError.WF_TMP;
                    }
                    if(pstmt!=null){
                    	pstmt.close();
                    	pstmt=null;
                    }
                    if(rs!=null){
                    	rs.close();
                    	rs=null;
                    }
                    if(mainCode==WFSError.WM_INVALID_CASE){
                    	String strReturn = WFSUtil.generalError(option, engine, gen,
                    			mainCode, subCode,
                    			errType, subject,
                    			descr);
                    	return strReturn;	
                    }
                    
                    boolean isAddTaskAllowed = WFSUtil.isUserCaseWorker(con, dbType, processDefId, processInstanceId, workItemId, activityId, userID, user.getname());
                    if(!isAddTaskAllowed){

                        //This should never be the case, it means a task which is already in Initated state for a ProcessDefId + ActId+TaskId+WID+ProcessInstanId
                        // can not be initiated unless and untill it is revoked or completed.
                            mainCode = WFSError.WF_NO_AUTHORIZATION_ON_CASE;
                            subCode = 0;
                            subject = WFSErrorMsg.getMessage(mainCode);
                            descr = WFSErrorMsg.getMessage(mainCode);
                            errType = WFSError.WF_TMP;
                            String strReturn = WFSUtil.generalError(option, engine, gen,
                        			mainCode, subCode,
                        			errType, subject,
                        			descr);
                        	return strReturn;	
                     }
                    //Changes for Bug 57417 - Checking if a task with same name for that instance with Scope 'U' or design time task with Scope 'P' exists 	
                    pstmt = con.prepareStatement(" Select TaskId from WFTaskDefTable a " + WFSUtil.getTableLockHintStr(dbType) + "  left outer JOIN RTACTIVITYINTERFACEASSOCTABLE b " + 
                			" on a.ProcessDefId =b.ProcessDefId and a.TaskId = b.InterfaceElementId where (( b.ProcessInstanceId= ?" +
                			" and b.WorkItemId = ?  and a.Scope = ? and a.ProcessDefId =? )or  ( a.ProcessDefId =? and a.Scope =? )) " +
                			" and a.TaskName =? ");  
                WFSUtil.DB_SetString(1,processInstanceId,pstmt, dbType);
                pstmt.setInt(2, workItemId);
                WFSUtil.DB_SetString(3, "U", pstmt, dbType);
                pstmt.setInt(4, processDefId);
                pstmt.setInt(5, processDefId);
                WFSUtil.DB_SetString(6, "P", pstmt, dbType);
                WFSUtil.DB_SetString(7, taskname, pstmt, dbType);
                    	
                    pstmt.execute();
                    rs = pstmt.getResultSet();
                    if(!rs.next()){
                        rs.close();
                        pstmt.close();
                        pstmt=con.prepareStatement(" SELECT TaskId FROM WFTaskDefTable "+ WFSUtil.getLockPrefixStr(dbType)+ " WHERE TaskId = "
                              + "(SELECT "+ WFSUtil.isnull("max(TaskId)", "0", dbType)+ " FROM WFTaskDefTable  WHERE processdefid = ? ) "
                              + " AND processdefid =? " + WFSUtil.getLockSuffixStr(dbType));
                        pstmt.setInt(1,processDefId);
                        pstmt.setInt(2,processDefId);
                        pstmt.execute();
                        rs = pstmt.getResultSet();
                        if(rs.next()){
                           taskId= rs.getInt(1);
                        }
                        taskId = taskId +1 ;
                        if(pstmt!=null){
                            pstmt.close();
                            pstmt = null;
                        }
                        if(rs!=null){
                            rs.close();
                            rs = null;
                        }
                        tempXML.append(gen.writeValueOf("TaskId", String.valueOf(taskId)));
                        int noOfTemplateFields = parser.getNoOfFields("TemplateField"); 
                        if(noOfTemplateFields > 0){
                                String taskVariableName=null;
                                String displayName=null;
                                int variableType=0;
                                int orderId=0;
                                int controlType=0;
                                String controlValue=null;
                                int startIndex = 0;
                                int innerStartIndex = 0;
                                int endIndex = 0;
                                int innerEndIndex = 0;
                                //templateName=parser.getValueOf("TemplateName","",false);

                                //reUsable=parser.getValueOf("ReUsable","Y",true);
                                String dBLinking=parser.getValueOf("DBLinking","N",true);

                                int innerNoOfFields=0;
                                // get max TaskId to generate new TaskId  

                                String processName = "";
                                pstmt=con.prepareStatement("select ProcessName from ProcessDefTable "+WFSUtil.getTableLockHintStr(dbType)+" where ProcessDefId = ?");
                                pstmt.setInt(1,processDefId);
                                pstmt.execute();
                                rs = pstmt.getResultSet();
                                if(rs.next()){
                                   processName = rs.getString(1);
                                }
                                // to create GenericDatatable 
                                templateName=processName+"_"+taskId+"_Template";
                                /*createQuery.append(" create table "+" WFGenericData_" + String.valueOf(processDefId) +"_"+String.valueOf(taskId) + " ( ProcessInstanceId " + WFSUtil.getDBDataTypeForWFType(10,dbType,null)+"(63)" + " NOT NULL,ProcessDefId INT  NOT NULL,WorkItemId INT NOT NULL,ActivityId INT NOT NULL,TaskId Integer NOT NULL,SubTaskId INT DEFAULT 0 NOT NULL,");
                                createQuery.append(" EntryDateTime "+ WFSUtil.getDBDataTypeForWFType(8,dbType,null));*/
                                if (pstmt1 != null) { 
                                    pstmt1.close();
                                    pstmt1 = null;
                                }
                                if (rs != null) { 
                                    rs.close();
                                    rs = null;
                                }
                                // insert an entry into  WFTaskTemplateDefTable for newly created  template 
                                pstmt1 = con.prepareStatement("Insert into WFTaskTemplateDefTable(ProcessDefId, TaskId, TemplateName) values (?,?,?)");
                                pstmt1.setInt(1,processDefId);
                                pstmt1.setInt(2,taskId);
                                WFSUtil.DB_SetString(3, templateName, pstmt1, dbType);
                                //WFSUtil.DB_SetString(4, reUsable, pstmt1, dbType);
                                int  res1 = pstmt1.executeUpdate();
                                if(pstmt1 != null){ 
                                    pstmt1.close();
                                    pstmt1 = null;
                                }
                                if(rs!= null){ 
                                   rs.close();
                                   rs = null;
                                }
                                //insert a entry into WFTaskTemplateFieldDefTable and  WFTaskTempControlValues 
                                 pstmt1 = con.prepareStatement("Insert into WFTaskTemplateFieldDefTable(ProcessDefId,TaskId,TemplateVariableId,TaskVariableName"
                                         + ",DisplayName,VariableType,OrderId,ControlType,DBLinking ) values (?,?,?,?,?,?,?,?,?)");
                                 pstmt2 = con.prepareStatement("Insert into WFTaskTempControlValues(ProcessDefId,TaskId,TemplateVariableId,ControlValue) "
                                         + " values (?,?,?,?)");
                                 int templateVariableId=0;
                                 for(int i=0;i<noOfTemplateFields;i++){
                                                        //createQuery.append(", ");
                                    templateVariableId++;
                                    startIndex = parser.getStartIndex("TemplateField", endIndex, Integer.MAX_VALUE);
                                    endIndex = parser.getEndIndex("TemplateField", startIndex, Integer.MAX_VALUE); 
                                    //templateVariableId = Integer.parseInt(parser.getValueOf("TemplateVariableId", startIndex, endIndex));
                                    taskVariableName = parser.getValueOf("TaskVariableName", startIndex, endIndex);
                                    //createQuery.append(taskVariableName);
                                    //added
                                    displayName = parser.getValueOf("DisplayName", startIndex, endIndex);
                                    variableType = Integer.parseInt(parser.getValueOf("VariableType", startIndex, endIndex));
                                    orderId = Integer.parseInt(parser.getValueOf("OrderId", startIndex, endIndex));
                                    controlType = Integer.parseInt(parser.getValueOf("ControlType", startIndex, endIndex));
                                    /*if(variableType==10){
                                           if(controlType==2)
                                      createQuery.append(""+WFSUtil.getDBDataTypeForWFType(variableType,dbType,null)+"(255)");
                                   else
                                      createQuery.append(""+WFSUtil.getDBDataTypeForWFType(variableType,dbType,null)+"(100)");	
                                   }
                                   else {
                                           createQuery.append(" "+WFSUtil.getDBDataTypeForWFType(variableType,dbType,null));
                                   }*/

                                    pstmt1.setInt(1,processDefId);
                                    pstmt1.setInt(2,taskId);
                                    pstmt1.setInt(3,templateVariableId);
                                    WFSUtil.DB_SetString(4, taskVariableName, pstmt1, dbType);
                                    WFSUtil.DB_SetString(5, displayName, pstmt1, dbType);
                                    pstmt1.setInt(6,variableType);
                                    pstmt1.setInt(7,orderId);
                                    pstmt1.setInt(8,controlType);
                                    WFSUtil.DB_SetString(9, dBLinking, pstmt1, dbType);
                                    pstmt1.addBatch();
                                    innerNoOfFields= parser.getNoOfFields("ControlValue", startIndex, endIndex); 
                                    XMLParser tempParser = new XMLParser(parser.getValueOf("ControlValues", startIndex, endIndex));
                                    int start = 0;
                                    int end = 0;
                                    for(int j=0;j<innerNoOfFields;j++){
                                       pstmt2.setInt(1,processDefId);
                                       pstmt2.setInt(2,taskId);
                                       pstmt2.setInt(3,templateVariableId);
                                       start = tempParser.getStartIndex("ControlValue", end, 0);
                                       end = tempParser.getEndIndex("ControlValue", start, 0);
                                       controlValue = tempParser.getValueOf("Value", start, end);
                                       WFSUtil.DB_SetString(4, controlValue, pstmt2, dbType);
                                       pstmt2.addBatch();
                                    }
                                }
                                 //createQuery.append(" )");
                                 pstmt1.executeBatch();
                                 pstmt2.executeBatch();
                                 if (pstmt1 != null) { 
                                    pstmt1.close();
                                    pstmt1 = null;
                                 }
                                 if (pstmt2 != null) { 
                                     pstmt2.close();
                                     pstmt2 = null;
                                 }
                                 if (rs != null) { 
                                    rs.close();
                                    rs = null;
                                 }
                            }
                //  End of Part-1 ------------------------------------------------------------------------------------------

                // Part-2 Code for define new task (insert into WFTaskdefTable ) and in case TAT insert into WFDurationTable 
                        if(!turnAroundTime.equals("")){
                            WFDuration processTAT = new WFDuration(turnAroundTime);
                            durationId = getMaxDurationId(con, processDefId, dbType);
                            durationId++;
                            pstmt = con.prepareStatement(" Insert Into WFDurationTable(ProcessDefId, DurationId, WFYears, WFMonths, WFDays, WFHours, WFMinutes, WFSeconds ) values (?, ?, ?, ?, ?, ?, ?, ?) ");
                            pstmt.setInt(1, processDefId);
                            pstmt.setInt(2, durationId);
                            WFSUtil.DB_SetString(3, processTAT.getYears(), pstmt, dbType);
                            WFSUtil.DB_SetString(4, processTAT.getMonths(), pstmt, dbType);
                            WFSUtil.DB_SetString(5, processTAT.getDays(), pstmt, dbType);
                            WFSUtil.DB_SetString(6, processTAT.getHours(), pstmt, dbType);
                            WFSUtil.DB_SetString(7, processTAT.getMinutes(), pstmt, dbType);
                            WFSUtil.DB_SetString(8, processTAT.getSeconds(), pstmt, dbType);
                            int  res = pstmt.executeUpdate();
                            if (pstmt != null) { 
                                pstmt.close();
                                pstmt = null;
                            }
                        }
                        userName = user.getname();
//			pstmt=con.prepareStatement("select " + WFSUtil.isnull("max(TaskId)", "0", dbType)
//							+ "  from WFTaskDefTable " + WFSUtil.getLockPrefixStr(dbType)
//							+ "  where ProcessDefId =? " + WFSUtil.getLockSuffixStr(dbType));
//                        pstmt.setInt(1,processDefId);
//                        pstmt.execute();
//                        rs = pstmt.getResultSet();
//                        if(rs.next()){
//                           taskId= rs.getInt(1);
//                        }
//                        taskId++;
                        if(pstmt != null){ 
                           pstmt.close();
                           pstmt = null;
                        }
                         if(rs != null){ 
                            rs.close();
                            rs = null;
                        }
                         taskMode=parser.getValueOf("TaskMode","",true);
                 		//Changes for notify by email in Case Management --Adding notifyemail column
                        pstmt = con.prepareStatement("Insert Into WFTaskDefTable ( ProcessDefId,TaskId,TaskType,TaskName,Description,xLeft,yTop,IsRepeatable,TurnAroundTime,CreatedOn,CreatedBy,Scope,Goal,Instructions,TATCalFlag,Cost,NotifyEmail,UseSeparateTable,TaskMode ) values(?,?,?,?,?,?,?,?,?,"+ WFSUtil.getDate(dbType) +",?,?,?,?,?,?,?,?,?)");
                        pstmt.setInt(1, processDefId);
                        pstmt.setInt(2, taskId);
                        pstmt.setInt(3,tasktype);
                        WFSUtil.DB_SetString(4, taskname,pstmt,dbType);
                        WFSUtil.DB_SetString(5, description,pstmt,dbType);
                        pstmt.setInt(6, 0);
                        pstmt.setInt(7, 0);
                        WFSUtil.DB_SetString(8,isrepeatable,pstmt,dbType);
                        pstmt.setInt(9,durationId);
                        WFSUtil.DB_SetString(10,userName,pstmt,dbType);
                        WFSUtil.DB_SetString(11, "U",pstmt,dbType);
                        WFSUtil.DB_SetString(12,goal,pstmt,dbType);
                        WFSUtil.DB_SetString(13,instruction,pstmt,dbType);
                        WFSUtil.DB_SetString(14,tatCalFlag,pstmt,dbType);
                        if(dbType!=JTSConstant.JTS_POSTGRES)    
                            WFSUtil.DB_SetString(15,cost,pstmt,dbType);
                        else
                            pstmt.setFloat(15, Float.parseFloat(cost));
                        WFSUtil.DB_SetString(16,notifyEmail,pstmt,dbType);
                       WFSUtil.DB_SetString(17,"N",pstmt,dbType);
						 WFSUtil.DB_SetString(18,taskMode,pstmt,dbType);
                        int  res3= pstmt.executeUpdate();
                        if (pstmt != null) { 
                            pstmt.close();
                            pstmt = null;
                        }
                        // Handling Regarding Consultant 
                        int noOfConsultantsFields  = parser.getNoOfFields("Consultant");
                        if(noOfConsultantsFields>0){
                            //int noOfConsultantsFields = parser.getNoOfFields("Consultant");  
                            int cstartIndex = 0;
                            int cendIndex = 0;
                            pstmt1 = con.prepareStatement("Insert into WFConsultantsTable values (?,?,?,?,?)");
                            for(int i=0;i<noOfConsultantsFields;i++){
                                cstartIndex = parser.getStartIndex("Consultant", cendIndex, Integer.MAX_VALUE);
                                cendIndex = parser.getEndIndex("Consultant", cstartIndex, Integer.MAX_VALUE); 
                                pstmt1.setInt(1, 4);
                                pstmt1.setInt(2, taskId);
                                pstmt1.setInt(3, processDefId);
                                pstmt1.setInt(4, Integer.parseInt(parser.getValueOf("ConsultantOrderId", cstartIndex, cendIndex)));
                                WFSUtil.DB_SetString(5,parser.getValueOf("UserName", cstartIndex, cendIndex),pstmt1,dbType);
                                pstmt1.addBatch();
                            }
                            pstmt1.executeBatch();
                            if (pstmt1 != null) { 
                                pstmt1.close();
                                pstmt1 = null;
                            }
                        }
                        //Handling Regarding Insert Default association into WFTaskInterfaceAssocTable 
                         pstmt1 = con.prepareStatement("insert into WFTaskInterfaceAssocTable (ProcessDefId,ActivityId,TaskId,InterfaceId,InterfaceType,Attribute)"
                                         + "select ?,?,?,InterfaceElementId, InterfaceType,Attribute from ACTIVITYINTERFACEASSOCTABLE where ActivityId=? and ProcessDefId=? and InterfaceType NOT IN (?)");
                         pstmt1.setInt(1, processDefId);
                         pstmt1.setInt(2, activityId);
                         pstmt1.setInt(3, taskId);
                         pstmt1.setInt(4, activityId);
                         pstmt1.setInt(5, processDefId);
                         pstmt1.setString(6, "J");
                         int res2=pstmt1.executeUpdate();
                         if (pstmt1 != null) { 
                            pstmt1.close();
                            pstmt1= null;
                         }	
                         
                         // for form default value is Null but it has to be "W" in taskInterfaceAssocTable. so update values corresponding to Form Entry.  
                         
                         pstmt1=con.prepareStatement("Update WFTaskInterfaceAssocTable set Attribute =? where ProcessDefId=? and ActivityId=? and InterfaceType IN(?)"); // changes for Bug 62833
                         pstmt1.setString(1, "W");
                         pstmt1.setInt(2, processDefId);
                         pstmt1.setInt(3, activityId);
                         pstmt1.setString(4, "F");
                         int resUpdate=pstmt1.executeUpdate();
                         if (pstmt1 != null) { 
                             pstmt1.close();
                             pstmt1= null;
                          }	
                         //If HTMLForm is associated with an activity then that Associated also needs to be inserted into WFTaskInterfaceAssocTable
                         Statement stmt1 = null;
                         ResultSet rs1 = null;

                         stmt1 = con.createStatement();
                         //Query to represnt that Form is associated with the activity or not
                         //If entry present in ActivityAssociationTable and not present in WFFOrm_Table, it means its a HTMLForm
                         rs1= stmt1.executeQuery("Select 1 from ActivityAssociationTable where ProcessDefId = "+processDefId+" And ActivityId = "+activityId+""
                                 + " And DefinitionType = 'N' And DefinitionId = 3 ");
                         if(rs1.next()){
                             Statement stmt2 = null;
                             ResultSet rs2 = null;
                             stmt2 = con.createStatement();
                             rs2= stmt2.executeQuery("Select 1 from activityinterfaceassoctable where ProcessDefId = "+processDefId+" And ActivityId = "
                                     +activityId+" And INTERFACETYPE = 'F' ");
                             if(!rs2.next()){  //// changes for Bug 62833
                                    if (pstmt1 != null) { 
                                        pstmt1.close();
                                        pstmt1= null;
                                    }
                                    pstmt1 = con.prepareStatement("insert into WFTaskInterfaceAssocTable (ProcessDefId,ActivityId,TaskId,InterfaceId,"+
                                              "InterfaceType,Attribute) Values(?,?,?,0,'F','W')");             
                                    pstmt1.setInt(1, processDefId);
                                    pstmt1.setInt(2, activityId);
                                    pstmt1.setInt(3, taskId);
                                    pstmt1.execute();
                                    if (pstmt1 != null) { 
                                        pstmt1.close();
                                        pstmt1= null;
                                    }
                                     
                             }
                            if (rs2 != null) { 
                                rs2.close();
                                rs2= null;
                            }
                             if (stmt2 != null) { 
                                stmt2.close();
                                stmt2 = null;
                             }
                        }
                        if (pstmt1 != null) { 
                            pstmt1.close();
                            pstmt1= null;
                        }
                        if (stmt1 != null) { 
                            stmt1.close();
                            stmt1= null;
                        }
                        if (rs1 != null) { 
                            rs1.close();
                            rs1= null;
                        }



                // End of part-2 ---------------------------------------------------------------------------------

                //Part-3 code to insert association of task with activity into WFActivityInterfaceAsscTable

                         pstmt=con.prepareStatement("insert into RTACTIVITYINTERFACEASSOCTABLE (ProcessInstanceId,WorkItemId,Processdefid,ActivityId, ActivityName, InterfaceElementId,InterfaceType,Attribute, TriggerName, ProcessVariantId) values(?,?,?,?,?,?,?,?,?,?)");
                         WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
                         pstmt.setInt(2,workItemId);
                         pstmt.setInt(3,processDefId);
                         pstmt.setInt(4,activityId);
                         WFSUtil.DB_SetString(5, activityName, pstmt, dbType);
                         pstmt.setInt(6,taskId);
                         WFSUtil.DB_SetString(7, "J", pstmt, dbType);	
                         WFSUtil.DB_SetString(8, "", pstmt, dbType);	
                         WFSUtil.DB_SetString(9, "", pstmt, dbType);
                         pstmt.setInt(10,processVariantId);
                         pstmt.execute();
                         if (pstmt!= null) { 
                            pstmt.close();
                            pstmt = null;
                         }
                //End of Part-3 ----------------------------------------------------------------------------------
                //	if(isCreatedNewTemplate){
                         /*if(noOfTemplateFields >0){
                            pstmt=con.prepareStatement(createQuery.toString());
                            pstmt.execute();
                            if (pstmt!= null) { 
                                 pstmt.close();
                                            pstmt = null;
                            }
                         } */           

                    //}
                         
                        // FomBuffer handling in WFAddTask 
                         String deviceType="";
                         if(templateId!=0){
                        	 pstmt=con.prepareStatement("Select DeviceType from  TaskTemplateFormDefTable where TemplateId=? and StatusFlag='P'");
                        	 pstmt.setInt(1,templateId);
                        	 rs=pstmt.executeQuery();
                        	 if(rs.next()){
                        		 deviceType=rs.getString("DeviceType");
                        	 }
                        	 if(rs!=null){
                        		 rs.close();
                        	 }
                        	 if(pstmt!=null){
                        		 pstmt.close();
                        	 }
                         }
                         if ((dbType == JTSConstant.JTS_MSSQL) || (dbType == JTSConstant.JTS_DB2) || (dbType == JTSConstant.JTS_POSTGRES)) {
                             if(deviceType!=null && deviceType.length()!=0){
                            	 pstmt = con.prepareStatement("Insert Into WFTaskFormTable (processdefId,taskId,FormBuffer,DeviceType) Values (?,?,?,?) ");	 
                             }
                             else{
                            	 pstmt = con.prepareStatement("Insert Into WFTaskFormTable (processdefId,taskId,FormBuffer) Values (?,?,?) ");	 
                             }
                         } else if (dbType == JTSConstant.JTS_ORACLE) {
                        	 if(deviceType!=null && deviceType.length()!=0){
                        		 pstmt = con.prepareStatement("Insert Into WFTaskFormTable (processdefId,taskId,FormBuffer,DeviceType) Values (?,?,EMPTY_CLOB(),?)");					 
                             }
                             else{
                            	 pstmt = con.prepareStatement("Insert Into WFTaskFormTable (processdefId,taskId,FormBuffer) Values (?,?,EMPTY_CLOB())");					 
                             }
                             
                         }
                         pstmt.setInt(1, processDefId);
                         pstmt.setInt(2, taskId);
                     if ((dbType == JTSConstant.JTS_MSSQL) || (dbType == JTSConstant.JTS_DB2) || (dbType == JTSConstant.JTS_POSTGRES)) {
                             pstmt.setCharacterStream(3, new java.io.StringReader(bufferVal), bufferVal.length());
                      }
                     
                     if(deviceType!=null && deviceType.length()!=0){
                    	 if ((dbType == JTSConstant.JTS_MSSQL) || (dbType == JTSConstant.JTS_DB2) || (dbType == JTSConstant.JTS_POSTGRES)) {
                    	 pstmt.setString(4, deviceType); 
                    	 }
                    	 else if((dbType == JTSConstant.JTS_ORACLE)){
                    		 pstmt.setString(3, deviceType); 
                    	 }
                     }
                     pstmt.execute();
                     pstmt.close();
                     pstmt = null;
                     if (dbType == JTSConstant.JTS_ORACLE){
                         Statement stmt = con.createStatement();
                         String filterString="processdefId =" +processDefId + "and taskId =" +taskId+ "" ; 
                         WFSUtil.writeOracleCLOB(con, stmt, "WFTaskFormTable", "FormBuffer", filterString, bufferVal);
                         stmt.close();
                         stmt = null;
                         /*if (commit) {
                             con.commit();
                             con.setAutoCommit(true);
                             commit = false;
                         }*/
                     }  
                     }else{
                        mainCode = WFSError.WF_OPERATION_FAILED;
                        subCode =  WFSError.WF_TASKNAME_ALR_EXISTS;
                        subject = WFSErrorMsg.getMessage(mainCode);
                        descr = WFSErrorMsg.getMessage(subCode);
                        errType = WFSError.WF_TMP;
                    }
                    
                    //Expiry and escalation defining for the Adhoc Tasks starts from here
                    if(mainCode==0){
	                    XMLParser xmlParser = new XMLParser();
	                    String strVal = null;
	                    
	                    //Check if the expiry is defined for the task
	                    if("Y".equalsIgnoreCase(parser.getValueOf("ExpiryFlag"))){
	                    	xmlParser.setInputXML(parser.getValueOf("Expiry"));
	                    	
	                    	durationId = getMaxDurationId(con, processDefId, dbType) + 1;
	                		pstmt = con.prepareStatement("Insert Into WFDurationTable(ProcessDefId, DurationId, WFDays, VariableId_Days, VarFieldId_Days, "
	                				+ "WFHours, VariableId_Hours, VarFieldId_Hours, WFMinutes, VariableId_Minutes, VarFieldId_Minutes, WFSeconds, "
	                				+ "VariableId_Seconds, VarFieldId_Seconds) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
	                		pstmt.setInt(1, processDefId);
	                		pstmt.setInt(2, durationId);
	                		
	                		//DAY
	                		strVal = xmlParser.getValueOf("ExpWFDays");
	                		strVal = ( strVal != null && !strVal.isEmpty()) ? strVal : "0";
	                		WFSUtil.DB_SetString(3, strVal, pstmt, dbType);
	                		strVal = xmlParser.getValueOf("ExpVariableId_Days");
	                		pstmt.setInt(4, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		strVal = xmlParser.getValueOf("ExpVarFieldId_Days");
	                		pstmt.setInt(5, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		
	                		//HOUR
	                		strVal = xmlParser.getValueOf("ExpWFHours");
	                		strVal = ( strVal != null && !strVal.isEmpty()) ? strVal : "0";
	                		WFSUtil.DB_SetString(6, strVal, pstmt, dbType);
	                		strVal = xmlParser.getValueOf("ExpVariableId_Hours");
	                		pstmt.setInt(7, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		strVal = xmlParser.getValueOf("ExpVarFieldId_Hours");
	                		pstmt.setInt(8, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		
	                		//MINUTE
	                		strVal = xmlParser.getValueOf("ExpWFMinutes");
	                		strVal = ( strVal != null && !strVal.isEmpty()) ? strVal : "0";
	                		WFSUtil.DB_SetString(9, strVal, pstmt, dbType);
	                		strVal = xmlParser.getValueOf("ExpVariableId_Minutes");
	                		pstmt.setInt(10, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		strVal = xmlParser.getValueOf("ExpVarFieldId_Minutes");
	                		pstmt.setInt(11, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		
	                		//SECOND
	                		strVal = xmlParser.getValueOf("ExpWFSeconds");
	                		strVal = ( strVal != null && !strVal.isEmpty()) ? strVal : "0";
	                		WFSUtil.DB_SetString(12, strVal, pstmt, dbType);
	                		strVal = xmlParser.getValueOf("ExpVariableId_Seconds");
	                		pstmt.setInt(13, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		strVal = xmlParser.getValueOf("ExpVarFieldId_Seconds");
	                		pstmt.setInt(14, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	
	                		pstmt.executeUpdate();
	                		
	                		pstmt = con.prepareStatement("Insert Into wftaskexpiryoperation (ProcessDefId, TaskId, NeverExpireFlag, "
	                				+ "ExpireUntillVariable, ExtObjID, ExpCalFlag, Expiry, ExpiryOperation, ExpiryOpType, ExpiryOperator, UserType, "
	                				+ "VariableId, VarFieldId, Value, TriggerID) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
	                		pstmt.setInt(1, processDefId);
	                		pstmt.setInt(2, taskId);
	                		WFSUtil.DB_SetString(3, "Y", pstmt, dbType);
	                		WFSUtil.DB_SetString(4, xmlParser.getValueOf("ExpireUntillVariable"), pstmt, dbType);
	                		strVal = xmlParser.getValueOf("ExtObjID");
	                		pstmt.setInt(5, (strVal != null && !strVal.isEmpty())? Integer.parseInt(strVal) : 0);	                		
	                		WFSUtil.DB_SetString(6, xmlParser.getValueOf("ExpCalFlag"), pstmt, dbType);
	                		pstmt.setInt(7, durationId);
	                		strVal = xmlParser.getValueOf("ExpiryOperation");
	                		pstmt.setInt(8, (strVal != null && !strVal.isEmpty())? Integer.parseInt(strVal) : 0);
	                		WFSUtil.DB_SetString(9, xmlParser.getValueOf("ExpiryOpType"), pstmt, dbType);
	                		strVal = xmlParser.getValueOf("ExpiryOperator");
	                		pstmt.setInt(10, (strVal != null && !strVal.isEmpty())? Integer.parseInt(strVal) : 0);
	                		WFSUtil.DB_SetString(11, xmlParser.getValueOf("ExpUserType"), pstmt, dbType);
	                		strVal = xmlParser.getValueOf("ExpVariableId");
	                		pstmt.setInt(12, (strVal != null && !strVal.isEmpty())? Integer.parseInt(strVal) : 0);
	                		strVal = xmlParser.getValueOf("ExpVarFieldId");
	                		pstmt.setInt(13, (strVal != null && !strVal.isEmpty())? Integer.parseInt(strVal) : 0);
	                		WFSUtil.DB_SetString(14, xmlParser.getValueOf("ExpValue"), pstmt, dbType);
	                		pstmt.setInt(15, 0);
	                		pstmt.executeUpdate();
	                        pstmt.close();
	                        pstmt = null;
	                    }
	                    //Check if the escalation is defined for the task
	                    int noOfEscRules = parser.getNoOfFields("TaskRule");
	                    boolean firstTag = true;
	                    while(noOfEscRules > 0){
	                    	noOfEscRules = noOfEscRules - 1;
	                    	if(firstTag){
	                    		xmlParser.setInputXML(parser.getFirstValueOf("TaskRule"));
	                    		firstTag = false;
	                    	}else{
	                    		xmlParser.setInputXML(parser.getNextValueOf("TaskRule"));
	                    	}
	                    	durationId = getMaxDurationId(con, processDefId, dbType) + 1;
	                		pstmt = con.prepareStatement("Insert Into WFDurationTable(ProcessDefId, DurationId, WFDays, VariableId_Days, VarFieldId_Days, "
	                				+ "WFHours, VariableId_Hours, VarFieldId_Hours, WFMinutes, VariableId_Minutes, VarFieldId_Minutes) values (?,?,?,?,?,?,?,?,?,?,?)");
	                		pstmt.setInt(1, processDefId);
	                		pstmt.setInt(2, durationId);
	                		
	                		//Day and its details
	                		strVal = xmlParser.getValueOf("WFDays");
	                		strVal = ( strVal != null && !strVal.isEmpty()) ? strVal : "0";
	                		WFSUtil.DB_SetString(3, strVal, pstmt, dbType);
	                		strVal = xmlParser.getValueOf("VariableId_Days");
	                		pstmt.setInt(4, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		strVal = xmlParser.getValueOf("VarFieldId_Days");
	                		pstmt.setInt(5, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		
	                		//Hour and its details
	                		strVal = xmlParser.getValueOf("WFHours");
	                		strVal = ( strVal != null && !strVal.isEmpty()) ? strVal : "0";
	                		WFSUtil.DB_SetString(6, strVal, pstmt, dbType);
	                		strVal = xmlParser.getValueOf("VariableId_Hours");
	                		pstmt.setInt(7, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		strVal = xmlParser.getValueOf("VarFieldId_Hours");
	                		pstmt.setInt(8, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		
	                		//Minute and its details
	                		strVal = xmlParser.getValueOf("WFMinutes");
	                		strVal = ( strVal != null && !strVal.isEmpty()) ? strVal : "0";
	                		WFSUtil.DB_SetString(9, strVal, pstmt, dbType);
	                		strVal = xmlParser.getValueOf("VariableId_Minutes");
	                		pstmt.setInt(10, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		strVal = xmlParser.getValueOf("VarFieldId_Minutes");
	                		pstmt.setInt(11, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);

	                		pstmt.executeUpdate();

	                		//Data save into MailTriggerTable
	                		int triggerId = getMaxTriggerId(con, processDefId, dbType) + 1;
	                		pstmt = con.prepareStatement("Insert into MailTriggerTable(ProcessDefId, TriggerID, Subject, FromUser, FromUserType, "
	                				+ "ExtObjIDFromUser, VariableIdFrom, VarFieldIdFrom, ToUser, ToType, ExtObjIDTo, VariableIdTo, VarFieldIdTo, "
	                				+ "CCUser, CCType, ExtObjIDCC, VariableIdCc, VarFieldIdCc, Message, BCCUser, BCCType, ExtObjIDBCC, VariableIdBCc, "
	                				+ "VarFieldIdBCc, MailPriority, MailPriorityType, ExtObjIdMailPriority, VariableIdMailPriority, VarFieldIdMailPriority) "
	                				+ "values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
	                		pstmt.setInt(1, processDefId);
	                		pstmt.setInt(2, triggerId);
	                		WFSUtil.DB_SetString(3, StringEscapeUtils.unescapeHtml(xmlParser.getValueOf("Subject")), pstmt, dbType);
	                		
	                		//FROMUser and its details
	                		WFSUtil.DB_SetString(4, xmlParser.getValueOf("FromUser"), pstmt, dbType);
	                		WFSUtil.DB_SetString(5, xmlParser.getValueOf("FromUserType"), pstmt, dbType);
	                		strVal = xmlParser.getValueOf("ExtObjIDFromUser");
	                		pstmt.setInt(6, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		strVal = xmlParser.getValueOf("VariableIdFrom");
	                		pstmt.setInt(7, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		strVal = xmlParser.getValueOf("VarFieldIdFrom");
	                		pstmt.setInt(8, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		
	                		//TOUser and its details
	                		WFSUtil.DB_SetString(9, xmlParser.getValueOf("ToUser"), pstmt, dbType);
	                		WFSUtil.DB_SetString(10, xmlParser.getValueOf("ToType"), pstmt, dbType);
	                		strVal = xmlParser.getValueOf("ExtObjIDTo");
	                		pstmt.setInt(11, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		strVal = xmlParser.getValueOf("VariableIdTo");
	                		pstmt.setInt(12, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		strVal = xmlParser.getValueOf("VarFieldIdTo");
	                		pstmt.setInt(13, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		
	                		//CCUser and its details
	                		WFSUtil.DB_SetString(14, xmlParser.getValueOf("CCUser"), pstmt, dbType);
	                		WFSUtil.DB_SetString(15, xmlParser.getValueOf("CCType"), pstmt, dbType);
	                		strVal = xmlParser.getValueOf("ExtObjIDCC");
	                		pstmt.setInt(16, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		strVal = xmlParser.getValueOf("VariableIdCc");
	                		pstmt.setInt(17, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		strVal = xmlParser.getValueOf("VarFieldIdCc");
	                		pstmt.setInt(18, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	
	                		WFSUtil.DB_SetString(19, StringEscapeUtils.unescapeHtml(xmlParser.getValueOf("Message")), pstmt, dbType);
	                		
	                		//BCCUser and its details
	                		WFSUtil.DB_SetString(20, xmlParser.getValueOf("BCCUser"), pstmt, dbType);
	                		WFSUtil.DB_SetString(21, xmlParser.getValueOf("BCCType"), pstmt, dbType);
	                		strVal = xmlParser.getValueOf("ExtObjIDBCC");
	                		pstmt.setInt(22, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		strVal = xmlParser.getValueOf("VariableIdBCc");
	                		pstmt.setInt(23, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		strVal = xmlParser.getValueOf("VarFieldIdBCc");
	                		pstmt.setInt(24, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		
	                		//Mail Priority and its details
	                		WFSUtil.DB_SetString(25, xmlParser.getValueOf("MailPriority"), pstmt, dbType);
	                		WFSUtil.DB_SetString(26, xmlParser.getValueOf("MailPriorityType"), pstmt, dbType);
	                		strVal = xmlParser.getValueOf("ExtObjIdMailPriority");
	                		pstmt.setInt(27, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		strVal = xmlParser.getValueOf("VariableIdMailPriority");
	                		pstmt.setInt(28, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		strVal = xmlParser.getValueOf("VarFieldIdMailPriority");
	                		pstmt.setInt(29, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		
	                		pstmt.executeUpdate();
	                		
	                		//Data Save into WFTaskRuleOperationTable
	                		pstmt = con.prepareStatement("Insert into WFTaskRuleOperationTable (ProcessDefId, ActivityId, TaskId, RuleId, "
	                				+ "OperationType, Param1, Type1, ExtObjID1, VariableId_1, VarFieldId_1, Param2, Type2, ExtObjID2, VariableId_2, "
	                				+ "VarFieldId_2, Param3, Type3, ExtObjID3, VariableId_3, VarFieldId_3, Operator, AssignedTo, OperationOrderId, RuleCalFlag ) "
	                				+ "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
	                		pstmt.setInt(1, processDefId);
	                		pstmt.setInt(2, -1);
	                		pstmt.setInt(3, taskId);
	                		strVal = xmlParser.getValueOf("RuleId");
	                		pstmt.setInt(4, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		strVal = xmlParser.getValueOf("OperationType");
	                		pstmt.setInt(5, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		
	                		//Param1 and its details
	                		WFSUtil.DB_SetString(6, Integer.toString(triggerId), pstmt, dbType);
	                		WFSUtil.DB_SetString(7, "V", pstmt, dbType);
	                		pstmt.setInt(8, 0);
	                		pstmt.setInt(9, 0);
	                		pstmt.setInt(10, 0);
	                		
	                		//Param2 and its details
	                		strVal = xmlParser.getValueOf("Param2");
	                		strVal = ( strVal != null && !strVal.isEmpty()) ? strVal : "CurrentDateTime";
	                		WFSUtil.DB_SetString(11, strVal, pstmt, dbType);
	                		strVal = xmlParser.getValueOf("Type2");
	                		strVal = ( strVal != null && !strVal.isEmpty()) ? strVal : "S";
	                		WFSUtil.DB_SetString(12, strVal, pstmt, dbType);
	                		strVal = xmlParser.getValueOf("ExtObjID2");
	                		pstmt.setInt(13, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		strVal = xmlParser.getValueOf("VariableId_2");
	                		pstmt.setInt(14, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		strVal = xmlParser.getValueOf("VarFieldId_2");
	                		pstmt.setInt(15, ( strVal != null && !strVal.isEmpty()) ? Integer.parseInt(strVal) : 0);
	                		
	                		//Param3 and its details
	                		WFSUtil.DB_SetString(16, "<Expression>" + durationId + "</Expression><Mode>Mail</Mode>", pstmt, dbType);
	                		WFSUtil.DB_SetString(17, "V", pstmt, dbType);
	                		pstmt.setInt(18, 0);
	                		pstmt.setInt(19, 0);
	                		pstmt.setInt(20, 0);
	                		pstmt.setInt(21, 0);
	                		pstmt.setNull(22, java.sql.Types.VARCHAR);
	                		pstmt.setInt(23, 0);
	                		
	                		//RuleCalFlag
	                		WFSUtil.DB_SetString(24, xmlParser.getValueOf("RuleCalFlag"), pstmt, dbType);
	                		pstmt.executeUpdate();
	                		pstmt.close();
	                		pstmt = null;
	                	}
	                }
	                /*Added changes for defining Adhoc expiry and Escalation till here*/
                    if(mainCode==0){
                    	XMLParser tempParser=new XMLParser();
                    	tempParser.setInputXML(CreateXML.WFChangeTaskProperty(engine,sessionID,processDefId,processInstanceId,activityId,workItemId,taskId,parser.getValueOf("IsMandatory","N",true)));
                    	WFSUtil.changeTaskProperty(con,user,tempParser,gen);
                    }
		} else {
                    mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                    subCode = 0;
                    subject = WFSErrorMsg.getMessage(mainCode);
                    descr = WFSErrorMsg.getMessage(subCode);
                    errType = WFSError.WF_TMP;
		}
		if(mainCode == 0){
                     WFSUtil.generateTaskLog(engine, con,dbType, processInstanceId,WFSConstant.WFL_TaskAdded, workItemId, processDefId,
                                                activityId,null,0,userID, user.getname(),null, taskId,0,strDate);
                     if (!con.getAutoCommit()) {
                         con.commit();
                         con.setAutoCommit(true);
                         commit = false;
                    }
                  //  outputXML = new StringBuffer(500);
                    outputXML.append(gen.createOutputFile("WFAddTask"));
                    outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                    outputXML.append(tempXML.toString());
                    outputXML.append(gen.closeOutputFile("WFAddTask"));
               }
	} catch (SQLException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_SQL;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_FAT;
		if (e.getErrorCode() == 0) {
			if (e.getSQLState().equalsIgnoreCase("08S01")) {
				descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
			}
		} else {
			descr = e.getMessage();
		}
	} catch (NumberFormatException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_ILP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (NullPointerException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_SYS;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (JTSException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = e.getErrorCode();
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.getMessage();
	} catch (Exception e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} finally {
		try {
                    if (pstmt != null) {
                        pstmt.close();
                        pstmt = null;
                    }
                    if(commit){
                        con.rollback();
                        con.setAutoCommit(true);
                    }
		} catch (Exception e) {
		}
		
	}
	if (mainCode != 0) {
		String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
		outputXML.append( errorString);
	}
	return outputXML.toString();
}

//----------------------------------------------------------------------------------------------------
//Function Name 		    :	WFGetTemplateList 
//Date Written (DD/MM/YYYY) :	14-05-2015
//Author					:	Rishiram Meel  
//Input Parameters			:	Connection , XMLParser , XMLGenerator
//Output Parameters			:   none
//Return Values				:	String (output xml)
//Description				:   API to  Get List Of Template for a ProcessDefId  .
//----------------------------------------------------------------------------------------------------
public String WFGetTemplateList(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
	StringBuilder outputXML = new StringBuilder();
	StringBuffer tempXml=null; 
	PreparedStatement pstmt = null;
	boolean commit =false;
	boolean noMoreFlag=false;
	ResultSet rs = null;
	int mainCode = 0;
	int subCode = 0;
	String subject = null;
	String descr = null;
	String errType = WFSError.WF_TMP;
	String engine ="";
    String option = parser.getValueOf("Option","",false);
	String sortStr = null;
	String sortOrder=parser.getValueOf("SortOrder","A",true);
	String pdaFlag = parser.getValueOf("PDAFlag","N",true);
	if (sortOrder.equalsIgnoreCase("D")) {
		sortStr = " DESC ";
	} else {
		sortStr = " ASC ";
	}
	String orderByStr=" ORDER BY TemplateName " + sortStr +" , TemplateId "+ sortStr ;

	try {
		engine = parser.getValueOf("EngineName");
		int dbType = ServerProperty.getReference().getDBType(engine);
		int sessionID = parser.getIntOf("SessionId", 0, false);
		//int processDefId = parser.getIntOf("ProcessDefId", 0, false);
		WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
		int userID = 0;
        char pType = '\0';
		String userName="";
		if (user != null) {	
			if (con.getAutoCommit()){
				con.setAutoCommit(false);
				commit = true;
			}
			  tempXml = new StringBuffer();
				userName = user.getname();
				//Added filter for PDAFlag to support the OFME Calls
				if("Y".equalsIgnoreCase(pdaFlag)){
					List<Integer> templateList = new ArrayList<Integer>();
					pstmt = con.prepareStatement("select distinct TemplateId from TaskTemplateFormDefTable where DeviceType = 'A'");
					rs = pstmt.executeQuery();
					while(rs.next()){
						templateList.add(rs.getInt(1));
					}
					rs.close();
					pstmt.close();
					pstmt = con.prepareStatement("select * from TaskTemplateLibraryDefTable " + orderByStr );
					rs = pstmt.executeQuery();
					while(rs.next()){
						int templateId = rs.getInt("TemplateId");
						if(templateList.contains(templateId)){
							tempXml.append("\n<TemplateList>\n");
							tempXml.append(gen.writeValueOf("TemplateName",  rs.getString("TemplateName")));
							tempXml.append(gen.writeValueOf("TemplateId",  String.valueOf(templateId)));
							tempXml.append("\n</TemplateList>\n");
						    noMoreFlag = true;
						}
					}
					pstmt.close();
				}else{
					pstmt = con.prepareStatement("select * from TaskTemplateLibraryDefTable " + orderByStr );			
					//pstmt.setInt(1, processDefId); 
					//WFSUtil.DB_SetString(2, "Y", pstmt, dbType);
					//pstmt.setInt(3, 0);
				    pstmt.execute();
					rs = pstmt.getResultSet();
					while(rs.next()){
						tempXml.append("\n<TemplateList>\n");
						tempXml.append(gen.writeValueOf("TemplateName",  rs.getString("TemplateName")));
						tempXml.append(gen.writeValueOf("TemplateId",  String.valueOf(rs.getInt("TemplateId"))));
						tempXml.append("\n</TemplateList>\n");
					    noMoreFlag = true;
					}
					pstmt.close();
				}
				if(!noMoreFlag){
	                mainCode = WFSError.WM_NO_MORE_DATA;
	                subCode = 0;
	                subject = WFSErrorMsg.getMessage(mainCode);
	                descr = WFSErrorMsg.getMessage(subCode);
	                errType = WFSError.WF_TMP;
				}
			
		} else {
			mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
			subCode = 0;
			subject = WFSErrorMsg.getMessage(mainCode);
			descr = WFSErrorMsg.getMessage(subCode);
			errType = WFSError.WF_TMP;
		}
		if (mainCode == 0) {
			if (!con.getAutoCommit()) {
				con.commit();
				con.setAutoCommit(true);
				commit = false;
			}
		//	outputXML = new StringBuffer(500);
			outputXML.append(gen.createOutputFile("WFGetTemplateList"));
			outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
			outputXML.append("<TemplateLists>");
			outputXML.append(tempXml);
			outputXML.append("</TemplateLists>\n");
			outputXML.append(gen.closeOutputFile("WFGetTemplateList"));
		}
	} catch (SQLException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_SQL;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_FAT;
		if (e.getErrorCode() == 0) {
			if (e.getSQLState().equalsIgnoreCase("08S01")) {
				descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
			}
		} else {
			descr = e.getMessage();
		}
	} catch (NumberFormatException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_ILP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (NullPointerException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_SYS;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (JTSException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = e.getErrorCode();
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.getMessage();
	} catch (Exception e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} finally {
		try {
			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
			if(commit){
				//con.rollback();
				con.setAutoCommit(true);
				}
		} catch (Exception e) {
		}
		
	}
	if (mainCode != 0) {
		String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
		outputXML.append( errorString);
	}
	return outputXML.toString();
}

//----------------------------------------------------------------------------------------------------
//Function Name 		    :	WFGetTemplateField 
//Date Written (DD/MM/YYYY) :	14-05-2015
//Author					:	Rishiram Meel  
//Input Parameters			:	Connection , XMLParser , XMLGenerator
//Output Parameters			:   none
//Return Values				:	String (output xml)
//Description				:   API to  Get Template field  for a TemplateId   .
//----------------------------------------------------------------------------------------------------
public String WFGetTemplateField(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
	StringBuilder outputXML = new StringBuilder();  
	StringBuffer tempXml=null; 
	StringBuffer formBufferXml=null; 
	StringBuffer templateBufferXml=null; 
	StringBuffer expiryXml = null;
	StringBuffer escalationXml = null;
	PreparedStatement pstmt = null;
	PreparedStatement pstmt1 = null;
	boolean commit =false;
	ResultSet rs = null;
	ResultSet rs1 = null;
	int mainCode = 0;
	int subCode = 0;
	String subject = null;
	String descr = null;
	String errType = WFSError.WF_TMP;
	String engine ="";
    String option = parser.getValueOf("Option","",false);
	String encodedBinaryData = null;
	try {
		engine = parser.getValueOf("EngineName");
		int dbType = ServerProperty.getReference().getDBType(engine);
		int sessionID = parser.getIntOf("SessionId", 0, false);
		//int processDefId = parser.getIntOf("ProcessDefId", 0, false);
		int templateId=parser.getIntOf("TemplateId",0,false);
		//processDefId=templateId==1?0:processDefId;
		WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
		int userID = 0;
      char pType = '\0';
		String userName="";
		if (user != null) {	
			if (con.getAutoCommit()){
				con.setAutoCommit(false);
				commit = true;
			}
		   	tempXml = new StringBuffer();
		   	formBufferXml=new StringBuffer();
		   	templateBufferXml=new StringBuffer();
		   	String deviceType="";
		     Object[] result = null;
             pstmt = con.prepareStatement("Select FormBuffer,DeviceType from TaskTemplateFormDefTable "+WFSUtil.getTableLockHintStr(dbType)+" where templateId =? ");//for storing form buffer 
             pstmt.setInt(1, templateId);
             pstmt.execute();
             rs = pstmt.getResultSet();
             formBufferXml.append("<FormInterface><Definition>\n");
             if (rs.next()) {
            	 formBufferXml.append("<Form>\n");
            	 formBufferXml.append("<FormBuffer>");
                 int formsize = 0;
                 //----------------------------------------------------------------------------
                 // Changed By											:	Prashant
                 // Reason / Cause (Bug No if Any)	: Bug No TSR_3.0.1_003
                 // Change Description							: directly append bytearray to xml
                 //----------------------------------------------------------------------------
                 //			outFile.write(text);
                 result = WFSUtil.getBIGData(con, rs, "FormBuffer", dbType, "8859_1");
                 formBufferXml.append((String) result[0]);
                 formsize = ((Integer) result[1]).intValue();
                 //		  outFile.flush();
                 //		  outFile.close();
                 //		  java.io.File outFile1 = new java.io.File("HOWHOWOut.ngf");
                 //		  java.io.File inFile = new java.io.File("HOWHOW.ngf");

                 //		  Reduce32 reduce = new Reduce32();
                 //		  short sTemp = 0;
                 //		  try{
                 //			sTemp = reduce.NGAP_ExpandFile(inFile.getAbsolutePath(), outFile1.getAbsolutePath());
                 //		  }
                 //		  catch(Exception e){
                 //			  WFSUtil.printErr(parser,"", e);
                 //		  }
                 formBufferXml.append("</FormBuffer>");

                 //----------------------------------------------------------------------------
                 // Changed By											:	Prashant
                 // Reason / Cause (Bug No if Any)	: return length of formbuffer
                 // Change Description							: return length of formbuffer
                 //----------------------------------------------------------------------------
                 formBufferXml.append(gen.writeValueOf("LengthFormBuffer", formsize + ""));
                 deviceType =rs.getString("DeviceType");
                 formBufferXml.append(gen.writeValueOf("DeviceType", deviceType));
                 formBufferXml.append("</Form>\n");
                 if(deviceType.equalsIgnoreCase(WFSConstant.DEVICE_TYPE_IFORM)){
                     encodedBinaryData = "N";	
                 }
                 else{
                 	encodedBinaryData = "Y";	
                 }
               }
            
             formBufferXml.append(gen.writeValueOf("EncodedBinaryData", encodedBinaryData));
             formBufferXml.append("</Definition></FormInterface>\n");
             if(pstmt!=null){
                pstmt.close();
                pstmt = null;
             }
             if(rs!=null){
                rs.close();
                rs = null;
             }
        	 //Changes for : Returning Global template Metadata in WFGetTemplateField
        	 pstmt = con.prepareStatement("Select Description,IsRepeatable,Goal,Instructions,TATCalFlag,Cost,NotifyEmail,TATDays,TATHours,TATMinutes from TaskTemplateLibraryDefTable" +WFSUtil.getTableLockHintStr(dbType)+ " where TemplateId=?"); // changes for Bug 59235.
        	 pstmt.setInt(1,templateId);
             pstmt.execute();
             rs = pstmt.getResultSet();
             templateBufferXml.append("<TaskInfo>\n");
             if (rs.next()) {
            	 result = WFSUtil.getBIGData(con, rs, "Description", dbType, "8859_1");
            	 templateBufferXml.append(gen.writeValue("Description", (String) result[0])); 
            	 templateBufferXml.append(gen.writeValue("IsRepeatable", rs.getString("IsRepeatable")));
            	 templateBufferXml.append(gen.writeValue("Goal", rs.getString("Goal")));
            	 templateBufferXml.append(gen.writeValue("Instructions", WFSUtil.handleSpecialCharInXml(rs.getString("Instructions"))));
            	 templateBufferXml.append(gen.writeValue("TATCalFlag", rs.getString("TATCalFlag")));
            	 templateBufferXml.append(gen.writeValue("Cost", rs.getString("Cost")));
            	 templateBufferXml.append(gen.writeValue("NotifyEmail", rs.getString("NotifyEmail")));
            	 templateBufferXml.append(gen.writeValue("TATDays", String.valueOf(rs.getInt("TATDays"))));
            	 templateBufferXml.append(gen.writeValue("TATHours", String.valueOf(rs.getInt("TATHours"))));
            	 templateBufferXml.append(gen.writeValue("TATMinutes",String.valueOf(rs.getInt("TATMinutes"))));
            	 pstmt1 = con.prepareStatement("Select AdvisorOrderId,UserName from TaskTemplateAdvisorTable " +WFSUtil.getTableLockHintStr(dbType)+" Where TemplateId = ?");
                 pstmt1.setInt(1,templateId);
                 rs1 = pstmt1.executeQuery();
                 templateBufferXml.append("\n<Consultants>\n");
                 while(rs1.next()){
                	 templateBufferXml.append("<Consultant>\n");
                	 templateBufferXml.append(gen.writeValue("UserName", rs1.getString(2)));
                	 templateBufferXml.append(gen.writeValue("ConsultantOrderId", rs1.getString(1)));
                	 templateBufferXml.append("\n</Consultant>\n");
                 }
                 templateBufferXml.append("</Consultants>\n");
                 if(pstmt1!=null){
                    pstmt1.close();
                    pstmt1 = null;
                 }
                 if(rs1!=null){
                     rs1.close();
                     rs1 = null;
                 }
             }
             templateBufferXml.append("</TaskInfo>\n");
              if(pstmt!=null){
                 pstmt.close();
                 pstmt = null;
              }
              if(rs!=null){
                  rs.close();
                  rs = null;
              }
        	 
        	 pstmt = con.prepareStatement("select * from TaskTempFieldLibraryDefTable where  TemplateId=? ");			
				//pstmt.setInt(1, processDefId); 
				pstmt.setInt(1, templateId); 
			    pstmt.execute();
				rs = pstmt.getResultSet();
				  while(rs.next()){
				    tempXml.append("\n<TemplateField>\n");
				    tempXml.append(gen.writeValueOf("TemplateVariableId",  String.valueOf(rs.getInt("TemplateVariableId"))));
				    tempXml.append(gen.writeValueOf("TaskVariableName",  rs.getString("TaskVariableName")));
				    tempXml.append(gen.writeValueOf("DisplayName",  rs.getString("DisplayName")));
				    tempXml.append(gen.writeValueOf("VariableType",  String.valueOf(rs.getInt("VariableType"))));
				    tempXml.append(gen.writeValueOf("OrderId",  String.valueOf(rs.getInt("OrderId"))));
				    tempXml.append(gen.writeValueOf("ControlType",  String.valueOf(rs.getInt("ControlType"))));
				    tempXml.append(gen.writeValueOf("DBLinking",  rs.getString("DBLinking")));
				    tempXml.append("\n<ControlValues>\n");
				    if(rs.getInt("ControlType")==3){
				    	 pstmt1 = con.prepareStatement("select * from TaskTempLibraryControlValues where TemplateId=? and TemplateVariableId=? ");
				    	// pstmt1.setInt(1, processDefId); 
					     pstmt1.setInt(1, templateId); 
					     pstmt1.setInt(2, rs.getInt("TemplateVariableId")); 
					     pstmt1.execute();
						 rs1 = pstmt1.getResultSet();
						 while(rs1.next()){
							 tempXml.append(gen.writeValueOf("ControlValue", rs1.getString("ControlValue")));
						 }
						 pstmt1 .close();
				    }
				    tempXml.append("</ControlValues>");
					tempXml.append("\n</TemplateField>");
	            }
				/* Adding the logic to send the task expiry details for the template */
	              if(rs!=null){
	                  rs.close();
	                  rs = null;
	              }
	              if(pstmt!=null){
	                 pstmt.close();
	                 pstmt = null;
	              }
	              if(rs1!=null){
	                  rs1.close();
	                  rs1 = null;
	              }
	              if(pstmt1!=null){
	                 pstmt1.close();
	                 pstmt1 = null;
	              }
	              pstmt = con.prepareStatement("select E.ExpireUntillVariable, E.ExtObjID, E.ExpCalFlag, E.ExpiryOperation, E.ExpiryOpType, "
	              		+ "E.ExpiryOperator, E.UserType, E.VariableId, E.VarFieldId, E.Value, E.TriggerID, D.WFYears, D.VariableId_Years, "
	              		+ "D.VarFieldId_Years, D.WFMonths, D.VariableId_Months, D.VarFieldId_Months, D.WFDays, D.VariableId_Days, D.VarFieldId_Days, "
	              		+ "D.WFHours, D.VariableId_Hours, D.VarFieldId_Hours, D.WFMinutes, D.VariableId_Minutes, D.VarFieldId_Minutes, D.WFSeconds, "
	              		+ "D.VariableId_Seconds, D.VarFieldId_Seconds from TaskTempExpiryOperation E " +WFSUtil.getTableLockHintStr(dbType)
	              		+ ",TaskTempDurationTable D" +WFSUtil.getTableLockHintStr(dbType)
	              		+ " where E.TemplateId = D.TemplateId and E.Expiry = D.DurationId and E.TemplateId = ? and E.NeverExpireFlag = 'Y'");
	              pstmt.setInt(1, templateId);
	              rs = pstmt.executeQuery();
            	  expiryXml = new StringBuffer();
	              if(rs.next()){
	            	  expiryXml.append("\n<Expiry>");
	            	  //Expiry Variables
	            	  expiryXml.append("<ExpiryFlag>Y</ExpiryFlag>");
	            	  expiryXml.append("<ExpiryOperator>" + rs.getString("ExpiryOperator") + "</ExpiryOperator>");
	            	  expiryXml.append("<ExpireUntillVariable>" + rs.getString("ExpireUntillVariable") + "</ExpireUntillVariable>");
	            	  expiryXml.append("<ExtObjID>" + rs.getString("ExtObjID") + "</ExtObjID>");
	            	  expiryXml.append("<ExpCalFlag>" + rs.getString("ExpCalFlag") + "</ExpCalFlag>");
	            	  //Time variables
	            	  expiryXml.append("<ExpWFDays>" + rs.getString("WFDays") + "</ExpWFDays>");
	            	  expiryXml.append("<ExpVariableId_Days>" + rs.getString("VariableId_Days") + "</ExpVariableId_Days>");
	            	  expiryXml.append("<ExpVarFieldId_Days>" + rs.getString("VarFieldId_Days") + "</ExpVarFieldId_Days>");
	            	  expiryXml.append("<ExpWFHours>" + rs.getString("WFHours") + "</ExpWFHours>");
	            	  expiryXml.append("<ExpVariableId_Hours>" + rs.getString("VariableId_Hours") + "</ExpVariableId_Hours>");
	            	  expiryXml.append("<ExpVarFieldId_Hours>" + rs.getString("VarFieldId_Hours") + "</ExpVarFieldId_Hours>");
	            	  expiryXml.append("<ExpWFMinutes>" + rs.getString("WFMinutes") + "</ExpWFMinutes>");
	            	  expiryXml.append("<ExpVariableId_Minutes>" + rs.getString("VariableId_Minutes") + "</ExpVariableId_Minutes>");
	            	  expiryXml.append("<ExpVarFieldId_Minutes>" + rs.getString("VarFieldId_Minutes") + "</ExpVarFieldId_Minutes>");
	            	  expiryXml.append("<ExpWFSeconds>" + rs.getString("WFSeconds") + "</ExpWFSeconds>");
	            	  expiryXml.append("<ExpVariableId_Seconds>" + rs.getString("VariableId_Seconds") + "</ExpVariableId_Seconds>");
	            	  expiryXml.append("<ExpVarFieldId_Seconds>" + rs.getString("VarFieldId_Seconds") + "</ExpVarFieldId_Seconds>");
	            	  
	            	  expiryXml.append("<ExpiryOperation>" + rs.getString("ExpiryOperation") + "</ExpiryOperation>");
	            	  expiryXml.append("<ExpiryOpType>" + rs.getString("ExpiryOpType") + "</ExpiryOpType>");
	            	  expiryXml.append("<ExpUserType>" + rs.getString("UserType") + "</ExpUserType>");
	            	  expiryXml.append("<ExpValue>" + rs.getString("Value") + "</ExpValue>");
	            	  expiryXml.append("<ExpVariableId>" + rs.getString("VariableId") + "</ExpVariableId>");
	            	  expiryXml.append("<ExpVarFieldId>" + rs.getString("VarFieldId") + "</ExpVarFieldId>");
	            	  expiryXml.append("\n</Expiry>");
		} else {
	            	  expiryXml.append("\n<Expiry><ExpiryFlag>N</ExpiryFlag></Expiry>");
	              }
	              if(rs!=null){
	                  rs.close();
	                  rs = null;
	              }
	              if(pstmt!=null){
	                 pstmt.close();
	                 pstmt = null;
	              }
				/* Adding the logic to send the task expiry details for the template till here */
	              
	            /* Adding the logic to send the task escalation details for the template starts here */
	            escalationXml = new StringBuffer();
	            escalationXml.append("\n<TaskRules>");
	            //Bug 78895 Fixed for Postgres - varchar and integer can be compared in all DBs other postgres
	            String compareString = "";
	            if(dbType != JTSConstant.JTS_POSTGRES){
	            	compareString = " R.Param1 = T.TriggerId ";
	            }else{
	            	compareString = " CAST(coalesce(R.Param1, '0') AS integer) = T.TriggerId ";
	            }
	            pstmt = con.prepareStatement("select R.RuleId, R.OperationType, R.Param2, R.Type2, R.ExtObjID2, R.VariableId_2, R.VarFieldId_2, "
	            		+ "R.Param3, R.RuleCalFlag, T.Subject, T.FromUser, T.FromUserType, T.ExtObjIDFromUser, T.VariableIdFrom, T.VarFieldIdFrom, T.ToUser, "
	            		+ "T.ToType, T.ExtObjIDTo, T.VariableIdTo, T.VarFieldIdTo, T.CCUser, T.CCType, T.ExtObjIDCC, T.VariableIdCc, T.VarFieldIdCc, "
	            		+ "T.Message, T.BCCUser, T.BCCType, T.ExtObjIDBCC, T.VariableIdBCc, T.VarFieldIdBCc, T.MailPriority, T.MailPriorityType, "
	            		+ "T.ExtObjIdMailPriority, T.VariableIdMailPriority, T.VarFieldIdMailPriority from "
	            		+ " TaskTempRuleOperationTable R" +WFSUtil.getTableLockHintStr(dbType) + ", TaskTempMailTriggerTable T" +WFSUtil.getTableLockHintStr(dbType)
	            		+ " where R.TemplateId = T.TemplateId and " + compareString + " and R.TemplateId = ?");
	            pstmt.setInt(1, templateId);
	            rs = pstmt.executeQuery();
	            while(rs.next()){
	            	escalationXml.append("\n<TaskRule>");
	            	escalationXml.append("\n<RuleId>" + rs.getString("RuleId") + "</RuleId>");
	            	escalationXml.append("\n<RuleOperation>");
	            	escalationXml.append("<OperationType>" + rs.getString("OperationType") + "</OperationType>");
	            	escalationXml.append("<Param2>" + rs.getString("Param2") + "</Param2>");
	            	escalationXml.append("<Type2>" + rs.getString("Type2") + "</Type2>");
	            	escalationXml.append("<ExtObjID2>" + rs.getString("ExtObjID2") + "</ExtObjID2>");
	            	escalationXml.append("<VariableId_2>" + rs.getString("VariableId_2") + "</VariableId_2>");
	            	escalationXml.append("<VarFieldId_2>" + rs.getString("VarFieldId_2") + "</VarFieldId_2>");
	            	escalationXml.append("<RuleCalFlag>" + rs.getString("RuleCalFlag") + "</RuleCalFlag>");
	            	escalationXml.append("</RuleOperation>");
	            	escalationXml.append("\n<Duration>");
	            	XMLParser xp = new XMLParser(rs.getString("Param3"));
	            	String durString = xp.getValueOf("Expression");
	            	int durationId = (durString != null && !durString.isEmpty()) ? Integer.parseInt(durString):0;
	            	if(durationId > 0){
	            		pstmt1 = con.prepareStatement("select WFYears, VariableId_Years, VarFieldId_Years, WFMonths, VariableId_Months, "
	            				+ "VarFieldId_Months, WFDays, VariableId_Days, VarFieldId_Days, WFHours, VariableId_Hours, VarFieldId_Hours, "
	            				+ "WFMinutes, VariableId_Minutes, VarFieldId_Minutes, WFSeconds, VariableId_Seconds, VarFieldId_Seconds "
	            				+ "from TaskTempDurationTable where templateid = ? and durationid = ?");
	            		pstmt1.setInt(1, templateId);
	            		pstmt1.setInt(2, durationId);
	            		rs1 = pstmt1.executeQuery();
	            		if(rs1.next()){
	            			escalationXml.append("<WFDays>" + rs1.getString("WFDays") + "</WFDays>");
	            			escalationXml.append("<VariableId_Days>" + rs1.getString("VariableId_Days") + "</VariableId_Days>");
	            			escalationXml.append("<VarFieldId_Days>" + rs1.getString("VarFieldId_Days") + "</VarFieldId_Days>");
	            			escalationXml.append("<WFHours>" + rs1.getString("WFHours") + "</WFHours>");
	            			escalationXml.append("<VariableId_Hours>" + rs1.getString("VariableId_Hours") + "</VariableId_Hours>");
	            			escalationXml.append("<VarFieldId_Hours>" + rs1.getString("VarFieldId_Hours") + "</VarFieldId_Hours>");
	            			escalationXml.append("<WFMinutes>" + rs1.getString("WFMinutes") + "</WFMinutes>");
	            			escalationXml.append("<VariableId_Minutes>" + rs1.getString("VariableId_Minutes") + "</VariableId_Minutes>");
	            			escalationXml.append("<VarFieldId_Minutes>" + rs1.getString("VarFieldId_Minutes") + "</VarFieldId_Minutes>");
	            		}
	  	              	if(rs1!=null){
		                  rs1.close();
		                  rs1 = null;
	  	              	}
	  	              	if(pstmt1!=null){
			              pstmt1.close();
			              pstmt1 = null;
	  	              	}
	            	}else{
	            		mainCode = WFSError.WF_OPERATION_FAILED;
	            		subCode = WFSError.WFS_ILP;
	            		subject = WFSErrorMsg.getMessage(mainCode);
	            		errType = WFSError.WF_TMP;
	            		descr = "Duration Expression parsing failed while creating output XML";
	            	}
	            	escalationXml.append("</Duration>");
	            	escalationXml.append("\n<EscToMail>");
	            	escalationXml.append("<Subject>" + StringEscapeUtils.escapeHtml(rs.getString("Subject")) + "</Subject>");
	            	escalationXml.append("<FromUser>" + rs.getString("FromUser") + "</FromUser>");
	            	escalationXml.append("<FromUserType>" + rs.getString("FromUserType") + "</FromUserType>");
	            	escalationXml.append("<ExtObjIDFromUser>" + rs.getString("ExtObjIDFromUser") + "</ExtObjIDFromUser>");
	            	escalationXml.append("<VariableIdFrom>" + rs.getString("VariableIdFrom") + "</VariableIdFrom>");
	            	escalationXml.append("<VarFieldIdFrom>" + rs.getString("VarFieldIdFrom") + "</VarFieldIdFrom>");
	            	escalationXml.append("<ToUser>" + rs.getString("ToUser") + "</ToUser>");
	            	escalationXml.append("<ToType>" + rs.getString("ToType") + "</ToType>");
	            	escalationXml.append("<ExtObjIDTo>" + rs.getString("ExtObjIDTo") + "</ExtObjIDTo>");
	            	escalationXml.append("<VariableIdTo>" + rs.getString("VariableIdTo") + "</VariableIdTo>");
	            	escalationXml.append("<VarFieldIdTo>" + rs.getString("VarFieldIdTo") + "</VarFieldIdTo>");
	            	escalationXml.append("<CCUser>" + rs.getString("CCUser") + "</CCUser>");
	            	escalationXml.append("<CCType>" + rs.getString("CCType") + "</CCType>");
	            	escalationXml.append("<ExtObjIDCC>" + rs.getString("ExtObjIDCC") + "</ExtObjIDCC>");
	            	escalationXml.append("<VariableIdCc>" + rs.getString("VariableIdCc") + "</VariableIdCc>");
	            	escalationXml.append("<VarFieldIdCc>" + rs.getString("VarFieldIdCc") + "</VarFieldIdCc>");
	            	escalationXml.append("<Message>" + StringEscapeUtils.escapeHtml(rs.getString("Message")) + "</Message>");
	            	escalationXml.append("<BCCUser>" + rs.getString("BCCUser") + "</BCCUser>");
	            	escalationXml.append("<BCCType>" + rs.getString("BCCType") + "</BCCType>");
	            	escalationXml.append("<ExtObjIDBCC>" + rs.getString("ExtObjIDBCC") + "</ExtObjIDBCC>");
	            	escalationXml.append("<VariableIdBCc>" + rs.getString("VariableIdBCc") + "</VariableIdBCc>");
	            	escalationXml.append("<VarFieldIdBCc>" + rs.getString("VarFieldIdBCc") + "</VarFieldIdBCc>");
	            	escalationXml.append("<MailPriority>" + rs.getString("MailPriority") + "</MailPriority>");
	            	escalationXml.append("<MailPriorityType>" + rs.getString("MailPriorityType") + "</MailPriorityType>");
	            	escalationXml.append("<ExtObjIdMailPriority>" + rs.getString("ExtObjIdMailPriority") + "</ExtObjIdMailPriority>");
	            	escalationXml.append("<VariableIdMailPriority>" + rs.getString("VariableIdMailPriority") + "</VariableIdMailPriority>");
	            	escalationXml.append("<VarFieldIdMailPriority>" + rs.getString("VarFieldIdMailPriority") + "</VarFieldIdMailPriority>");
	            	escalationXml.append("</EscToMail>");
	            	escalationXml.append("\n</TaskRule>");
	            }
            	escalationXml.append("\n</TaskRules>");
	            if(rs!=null){
	            	rs.close();
	            	rs = null;
	            }
	            if(pstmt!=null){
	            	pstmt.close();
	            	pstmt = null;
	            }
	            /* Adding the logic to send the task escalation details for the template starts here */
		} else {
			mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
			subCode = 0;
			subject = WFSErrorMsg.getMessage(mainCode);
			descr = WFSErrorMsg.getMessage(subCode);
			errType = WFSError.WF_TMP;
		}
		if (mainCode == 0) {
			if (!con.getAutoCommit()) {
				con.commit();
				con.setAutoCommit(true);
				commit = false;
			}
			//outputXML = new StringBuffer(500);
			outputXML.append(gen.createOutputFile("WFGetTemplateField"));
			outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
			outputXML.append(formBufferXml);
			outputXML.append(templateBufferXml);
			outputXML.append("<TemplateFields>");
			outputXML.append(tempXml);
			outputXML.append("</TemplateFields>\n");
			outputXML.append(expiryXml);
			outputXML.append(escalationXml);
			outputXML.append(gen.closeOutputFile("WFGetTemplateField"));
		}
	} catch (SQLException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_SQL;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_FAT;
		if (e.getErrorCode() == 0) {
			if (e.getSQLState().equalsIgnoreCase("08S01")) {
				descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
			}
		} else {
			descr = e.getMessage();
		}
	} catch (NumberFormatException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_ILP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (NullPointerException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_SYS;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (JTSException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = e.getErrorCode();
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.getMessage();
	} catch (Exception e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} finally {
		try {
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
			if (pstmt1 != null) {
				pstmt1.close();
				pstmt1 = null;
			}
			if (rs!= null) {
				rs.close();
				rs = null;
			}
			if (rs1 != null) {
				rs1.close();
				rs1 = null;
			}
			if(commit){
				//con.rollback();
				con.setAutoCommit(true);
				}
		} catch (Exception e) {
		}
		
	}
	if (mainCode != 0) {
		String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
		outputXML.append( errorString);
	}
	return outputXML.toString();
}


//----------------------------------------------------------------------------------------------------
//Function Name 				:	WFGetTaskListForCalendar
//Date Written (DD/MM/YYYY)     :	08-06-2015
//Author						:	Mohnish Chopra  
//Input Parameters				:	Connection , XMLParser , XMLGenerator
//Output Parameters				:   none
//Return Values					:	String (output xml)
//Description					:   API to get list of initiated and completed tasks for Calendar.
//----------------------------------------------------------------------------------------------------
public String WFGetTaskListForCalendar(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
	
	
    PreparedStatement pstmt = null;
    PreparedStatement pstmt1 = null;
    Statement stmt1 = null;
    ResultSet rs = null;
    ResultSet rs1 = null;
    int mainCode = 0;
    int subCode = 0;
    String subject = null;
    String descr = null;
    String errType = WFSError.WF_TMP;
    String engine = parser.getValueOf("EngineName");
    String option = parser.getValueOf("Option","",false);
    int counter =1;
    boolean noMoreFlag =true;
    StringBuffer outputXML = new StringBuffer();
    try {
            int sessionID = parser.getIntOf("SessionId", 0, false);
            String processInstanceId = parser.getValueOf("ProcessInstanceId","",true);
            int workitemId = parser.getIntOf("WorkitemId", 0, true);
            int processDefId = parser.getIntOf("ProcessDefId", 0, false);
            int activityId = parser.getIntOf("ActivityId",0,false);
            StringBuffer completedTaskListXML = new StringBuffer(500);
            StringBuffer initiatedTaskListXML = new StringBuffer(500);
            StringBuffer tempXML = new StringBuffer(500);
            int dbType = ServerProperty.getReference().getDBType(engine);
            WFParticipant user = WFSUtil.WFCheckSession(con, sessionID); 
            if (user != null) {
                   pstmt = con.prepareStatement("Select a.dueDate duedate, a.actionDateTime completedDate ," +
                   		" a.TaskStatus status,a.taskId taskId,b.taskName taskName,a.AssignedTo assignedTo, a.SubTaskId+1 subtaskid, a.Priority priority from " +
                   		" WFTaskStatusTable a inner join WFTaskDefTable b" +
                   		" on a.ProcessDefId = b.ProcessDefId and a.TaskId=b.TaskId " +
                   		" where a.ProcessInstanceId =? and a.WorkItemId = ? and a.ProcessDefId = ? " +
                   		" and a.ActivityId = ? and TaskStatus IN (? ,?)");
                    WFSUtil.DB_SetString(1,processInstanceId , pstmt, dbType);
                    pstmt.setInt(2,workitemId);
                    pstmt.setInt(3,processDefId);
                    pstmt.setInt(4,activityId);
                    pstmt.setInt(5,2);
                    pstmt.setInt(6,3);
                    rs= pstmt.executeQuery();
                    while(rs.next()){
                    	noMoreFlag=false;
                    	int priority = rs.getInt("Priority");
                    	int taskStatus = rs.getInt("status");
                    	String taskName = rs.getString("taskName");
                    	String dueDate= rs.getString("dueDate");
                    	String completionDate = rs.getString("completedDate");
                    	int subTaskId =rs.getInt("SubTaskId");
                    	String assignedTo =rs.getString("AssignedTo");
                    	
                    	if(taskStatus == 2){
                    		initiatedTaskListXML.append("<Task>");
                    		initiatedTaskListXML.append(gen.writeValueOf("TaskName", taskName));
                    		initiatedTaskListXML.append(gen.writeValueOf("AssignedTo", assignedTo));
                    		initiatedTaskListXML.append(gen.writeValueOf("DueDate", dueDate));
                    		initiatedTaskListXML.append(gen.writeValueOf("InstanceNumber", String.valueOf(subTaskId)));
                    		initiatedTaskListXML.append(gen.writeValueOf("Priority", String.valueOf(priority)));
                    		initiatedTaskListXML.append("</Task>");

                    	}  else if (taskStatus ==3){
                    		completedTaskListXML.append("<Task>");
                    		completedTaskListXML.append(gen.writeValueOf("TaskName", taskName));
                    		completedTaskListXML.append(gen.writeValueOf("AssignedTo", assignedTo));
                    		completedTaskListXML.append(gen.writeValueOf("CompletedDate", completionDate));
                    		completedTaskListXML.append(gen.writeValueOf("InstanceNumber", String.valueOf(subTaskId)));
                    		completedTaskListXML.append(gen.writeValueOf("Priority", String.valueOf(priority)));
                    		completedTaskListXML.append("</Task>");
                    	}
                    }
                    
                    tempXML.append("<InitiatedTasks>");
                    tempXML.append(initiatedTaskListXML);
                    tempXML.append("</InitiatedTasks>");
                    tempXML.append("<CompletedTasks>");
                    tempXML.append(completedTaskListXML);
                    tempXML.append("</CompletedTasks>");
            }else {
            	mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
            	subCode = 0;
            	subject = WFSErrorMsg.getMessage(mainCode);
            	descr = WFSErrorMsg.getMessage(subCode);
            	errType = WFSError.WF_TMP;
            }
            if((noMoreFlag)&&(mainCode!=WFSError.WM_INVALID_SESSION_HANDLE)){
            	mainCode = WFSError.WM_NO_MORE_DATA;
            	subCode = 0;
            	subject = WFSErrorMsg.getMessage(mainCode);
            	descr = WFSErrorMsg.getMessage(subCode);
            	errType = WFSError.WF_TMP;
            }
            if (mainCode == 0) { 
                    outputXML = new StringBuffer(500);
                    outputXML.append(gen.createOutputFile("WFGetTaskListForCalender"));
                    outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                    outputXML.append(tempXML);
                    outputXML.append(gen.closeOutputFile("WFGetTaskListForCalender"));
            }
    } catch (SQLException e) { 
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                    if (e.getSQLState().equalsIgnoreCase("08S01")) {
                            descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
                    }
            } else {
                    descr = e.getMessage();
            }
    } catch (NumberFormatException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
    } catch (NullPointerException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
    } catch (WFSException e) { //WFS_7.1_032
            mainCode = e.getMainErrorCode();
            subCode = e.getSubErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = e.getTypeOfError();
            descr = e.getErrorDescription();
    } catch (JTSException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
    } catch (Exception e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
    }finally {
            try {
                    if (rs != null) { 
                         rs.close();
                         rs = null;
                    }
                    if (rs1 != null) { 
                         rs1.close();
                         rs1 = null;
                    }

            } catch (Exception ignored) {}
            try {
                    if (pstmt != null) {
                         pstmt.close();
                         pstmt = null;
                    }
                    if (pstmt1 != null) {
                         pstmt1.close();
                         pstmt1 = null;
                    }
                    if (stmt1 != null) {
                        stmt1.close();
                        stmt1 = null;
                    }
            } catch (Exception ignored) {}

           
    }
    if (mainCode != 0) {
        String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
		return errorString;

    }
    return outputXML.toString();
}

//----------------------------------------------------------------------------------------------------
//Function Name 				:	WFReassignTask
//Date Written (DD/MM/YYYY)     :	29-06-2017
//Author						:	Ambuj  
//Input Parameters				:	Connection , XMLParser , XMLGenerator
//Output Parameters				:   none
//Return Values					:	String (output xml)
//Description					:   API to reassign the Case Management Task to another user.
//----------------------------------------------------------------------------------------------------
	public String WFReassignTask(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
		StringBuilder outputXml = new StringBuilder();
		PreparedStatement pstmt = null;
		PreparedStatement pstmt1 = null;
		Statement stmt = null;
		ResultSet rs = null;
		ResultSet rs1 = null;
		int mainCode = 0;     
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
		String engine = null;
		boolean commit = false;
		boolean notifyByEmail = false;
		String userEmail ="";
		String ccUserEmail = "";
		String strQry= null;
		HashMap<String, String> mapForTaskAttributes = new HashMap<String, String>();
		HashMap<Integer, WFTaskInfoClass> taskDataMap = new HashMap<Integer, WFTaskInfoClass>();
		String option = parser.getValueOf("Option", "", false);
		String dueDate = "";
		String instruction = "";
		String urn ="";
		try {
			engine = parser.getValueOf("EngineName");
			int sessionID = parser.getIntOf("SessionId", 0, false);
			String processInstanceId = parser.getValueOf("ProcessInstanceId", "", false);
			int workItemId = parser.getIntOf("WorkItemId", 1, true);
			int processDefId = parser.getIntOf("ProcessDefId", 0, false);
			int activityId = parser.getIntOf("ActivityId", 0, false);
			int taskId = parser.getIntOf("TaskId", 0, false);
			int subTaskId = parser.getIntOf("SubTaskId", 0, false);
			int taskType = parser.getIntOf("TaskType", 0, false);
			int dbType = ServerProperty.getReference().getDBType(engine);
			String sourceUser = parser.getValueOf("SourceUser", "", false);
			String targetUser = parser.getValueOf("TargetUser", "", false);
			String comments = parser.getValueOf("Comments", "", false);
			String lockStatus = null;
			String taskInitiator = "";
			String assignedTo = "";
			int targetId=0;
			int Q_DivertedByUserId = 0;
			String Q_DivertedByUserName = "";
			// Check if current session is valid?
			WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
			if ((participant != null && participant.gettype() == 'U')||(participant.gettype()=='P')) {
				int userId = participant.getid();
				String userName = participant.getname();
				boolean isValidUser = false;
				boolean hasUpdatePrivileges = false;

				if (con.getAutoCommit())
					con.setAutoCommit(false);

				// Check if user is Case Manager or Case Initiator
				// (hasTaskUpdatePrivileges method)
				hasUpdatePrivileges = WFSUtil.hasTaskUpdatePrivileges(con, dbType, processDefId, processInstanceId,
						workItemId, activityId, taskId, subTaskId, userId, userName);

		         pstmt=con.prepareStatement( "Select URN  from WFINSTRUMENTTABLE " + WFSUtil.getTableLockHintStr(dbType) + " where processInstanceId= ? and WorkItemId= ?");
		         WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType); 
		         pstmt.setInt(2,workItemId);
		         pstmt.execute();
		         rs = pstmt.getResultSet();
		         if(rs.next()){
		        	 urn = rs.getString("URN");
		         }
		         if(pstmt!=null){
		        	 pstmt.close();
		        	 pstmt = null;
		         }
		         if(rs!=null){
		        	 rs.close();
		        	 rs = null;
		         }
				// If user is current Case Worker?
				if (!hasUpdatePrivileges) {
					pstmt = con
							.prepareStatement("select DueDate, Instructions from WFTaskStatusTable " + WFSUtil.getTableLockHintStr(dbType)
									+ "where ProcessInstanceId= ? and WorkItemId= ? and ProcessDefId= ? and ActivityId= ? and TaskId= ? and subtaskid= ? "
									+ "and UPPER(AssignedTo)= ? ");
					WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
					pstmt.setInt(2, workItemId);
					pstmt.setInt(3, processDefId);
					pstmt.setInt(4, activityId);
					pstmt.setInt(5, taskId);
					pstmt.setInt(6, subTaskId);
					WFSUtil.DB_SetString(7, userName.toUpperCase(), pstmt, dbType);
					pstmt.executeQuery();
					rs = pstmt.getResultSet();
					if (rs.next()) {
						isValidUser = true;
						dueDate = rs.getString("DueDate");
						instruction =  rs.getString("Instructions");
					}
	                if(rs!=null){
					rs.close();
	                	rs=null;
	                }
	                if(pstmt!=null){
					pstmt.close();
	                	pstmt=null;
				}
				}
				String caseManager = WFSUtil.getCaseManager(con, processInstanceId, processDefId, workItemId, dbType, engine);
				 HashMap<Integer,String>allowReassignmentMap=new HashMap<Integer,String>();
				 allowReassignmentMap=WFSUtil.getColumnValueFromWFTaskStatusTable("AllowReassignment",processInstanceId,con,processDefId,activityId,dbType,String.valueOf(taskId));
				if (((hasUpdatePrivileges || isValidUser) && ((allowReassignmentMap==null || (allowReassignmentMap.get(taskId)).equals("Y"))||(caseManager.equalsIgnoreCase(userName))))||(participant.gettype()=='P')) {

					pstmt = con.prepareStatement("select LockStatus, InitiatedBy, AssignedTo from WFTaskStatusTable " + WFSUtil.getTableLockHintStr(dbType)
					+ "where ProcessInstanceId= ? and WorkItemId= ? and ProcessDefId= ? and ActivityId= ? and TaskId= ? and subtaskid= ? ");
					WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
					pstmt.setInt(2, workItemId);
					pstmt.setInt(3, processDefId);
					pstmt.setInt(4, activityId);
					pstmt.setInt(5, taskId);
					pstmt.setInt(6, subTaskId);
					pstmt.executeQuery();
					rs = pstmt.getResultSet();
					if (rs.next()) {
						lockStatus = rs.getString("LockStatus");
						taskInitiator= rs.getString("InitiatedBy");
						assignedTo = rs.getString("AssignedTo");
					}
	                if(rs!=null){
	                	rs.close();
	                	rs=null;
	                }
	                if(pstmt!=null){
	                	pstmt.close();
	                	pstmt=null;
	                }
					// Check if the task is unlocked, Assuming lockStatus can never be null
	                	//UT BugFix - If the same user has locked the task then it should allow reassignment.
						//if (!lockStatus.isEmpty() && !lockStatus.trim().equalsIgnoreCase("Y")) {
						if((lockStatus == null) || ("N".equalsIgnoreCase(lockStatus.trim())) || ("Y".equalsIgnoreCase(lockStatus.trim()) && userName.equalsIgnoreCase(assignedTo))||((participant.gettype()=='P'))){
							// Validate the source user and target user
							// Check if target user exists in the Database
							pstmt = con.prepareStatement(" select UserIndex from WFUserView "+ WFSUtil.getTableLockHintStr(dbType)
									+ " where UPPER(UserName) = ? ");
							WFSUtil.DB_SetString(1, targetUser.toUpperCase(), pstmt, dbType);
							pstmt.executeQuery();
							rs = pstmt.getResultSet();
							if (rs.next()) {
								targetId = rs.getInt("UserIndex");
							}
							else {
								mainCode = WFSError.WF_ERR_TARGET_USER_NOT_EXIST;
								subCode = 0;
								subject = WFSErrorMsg.getMessage(mainCode);
								descr = WFSErrorMsg.getMessage(subCode);
								errType = WFSError.WF_TMP;
							}
			                if(rs!=null){
							rs.close();
			                	rs=null;
			                }
			                if(pstmt!=null){
							pstmt.close();
			                	pstmt=null;
			                }
			                if (targetId > 0) {
			                int divertId = WFSUtil.getDivert(con, targetId, dbType,processDefId,activityId);
			                if(divertId != targetId){
			                	pstmt = con
										.prepareStatement("Select Username from WFUserView where UserIndex = ?");
								pstmt.setInt(1, divertId);
								pstmt.execute();
								rs = pstmt.getResultSet();
									if (rs != null && rs.next()) {
										Q_DivertedByUserName = targetUser;
										targetUser = rs.getString("UserName").trim();
										Q_DivertedByUserId = targetId;
										targetId = divertId;
									}
									else{
										mainCode = WFSError.WM_INVALID_TARGET_USER;
										subCode = 0;
										subject = WFSErrorMsg.getMessage(mainCode);
										descr = WFSErrorMsg.getMessage(subCode);
										errType = WFSError.WF_TMP;
									}
			                }
			                }
			                else{
			                	mainCode = WFSError.WM_INVALID_TARGET_USER;
								subCode = 0;
								subject = WFSErrorMsg.getMessage(mainCode);
								descr = WFSErrorMsg.getMessage(subCode);
								errType = WFSError.WF_TMP;
			                }
							if (!sourceUser.equalsIgnoreCase(targetUser)) {

								if (mainCode == 0) {
									// If user is not case Manager, it only
									// reassign the task
								if (!hasUpdatePrivileges) {
										pstmt1 = con.prepareStatement(
												" Update WFTaskStatusTable set AssignedBy= ?, AssignedTo= ?, LockStatus =?, Q_DivertedByUserId=?, ActionDateTime= " + WFSUtil.getDate(dbType)
														+ " where ProcessInstanceId= ? and WorkItemId= ? and ProcessDefId= ? "
														+ " and ActivityId= ? and TaskId= ? and subtaskid= ?");
										WFSUtil.DB_SetString(1, participant.gettype()=='P'?"System":userName, pstmt1, dbType);
										WFSUtil.DB_SetString(2, targetUser, pstmt1, dbType);
										WFSUtil.DB_SetString(3, "N", pstmt1, dbType);
										WFSUtil.DB_SetString(4, processInstanceId, pstmt1, dbType);
										pstmt1.setInt(4, Q_DivertedByUserId);
										WFSUtil.DB_SetString(5, processInstanceId, pstmt1, dbType);
										pstmt1.setInt(6, workItemId);
										pstmt1.setInt(7, processDefId);
										pstmt1.setInt(8, activityId);
										pstmt1.setInt(9, taskId);
										pstmt1.setInt(10, subTaskId);
										pstmt1.executeUpdate();
										pstmt1.close();
										pstmt1 = null;

									} else {
										dueDate = parser.getValueOf("DueDate", null, true);
										int priority = parser.getIntOf("Priority", 1, true);
										boolean canInitiate = ((String) parser.getValueOf("CanInitiate", "N", true))
												.equalsIgnoreCase("Y");
										boolean showCaseVisual = ((String) parser.getValueOf("ShowCaseVisual", "N",
												true)).equalsIgnoreCase("Y");
										instruction = parser.getValueOf("Instruction", "", true);

										int noOfInterfaceFields = parser.getNoOfFields("Interface");
										int noOfTaskDataFields = parser.getNoOfFields("Data");
										XMLParser interfaceParser = new XMLParser();
										XMLParser taskDataParser = new XMLParser();
										ArrayList interfaceList = new ArrayList();
										ArrayList taskDataList = new ArrayList();
										String interfaceName = "";
										int interfaceId = 0;
										String interfaceType = "";
										String attribute = "";

										pstmt1 = con.prepareStatement(
												" Update WFTaskStatusTable set TaskStatus = 2, AssignedBy= ?, AssignedTo= ?, LockStatus =?, Q_DivertedByUserId=?, DueDate= "
														+ WFSUtil.TO_DATE(dueDate, true, dbType)
														+ ", Priority= ?, CanInitiate= ?, ShowCaseVisual= ?, Instructions= ?, ActionDateTime= " + WFSUtil.getDate(dbType)
														+ " where ProcessInstanceId= ? and WorkItemId= ? and ProcessDefId= ? "
														+ " and ActivityId= ? and TaskId= ? and subtaskid= ?");
										WFSUtil.DB_SetString(1, userName, pstmt1, dbType);
										WFSUtil.DB_SetString(2, targetUser, pstmt1, dbType);
										WFSUtil.DB_SetString(3, "N", pstmt1, dbType);
										pstmt1.setInt(4, Q_DivertedByUserId);
										pstmt1.setInt(5, priority);
										WFSUtil.DB_SetString(6, canInitiate ? "Y" : "N", pstmt1, dbType);
										WFSUtil.DB_SetString(7, showCaseVisual ? "Y" : "N", pstmt1, dbType);
										WFSUtil.DB_SetString(8, instruction, pstmt1, dbType);
										WFSUtil.DB_SetString(9, processInstanceId, pstmt1, dbType);
										pstmt1.setInt(10, workItemId);
										pstmt1.setInt(11, processDefId);
										pstmt1.setInt(12, activityId);
										pstmt1.setInt(13, taskId);
										pstmt1.setInt(14, subTaskId);
										pstmt1.executeUpdate();
										pstmt1.close();
										pstmt1 = null;

										// Interface needs to be set again for
										// Workitem in
										// WFRTTaskInterfaceAssocTable
										if (noOfInterfaceFields > 0) {
											interfaceList.add(parser.getFirstValueOf("Interface"));
											for (int i = 1; i < noOfInterfaceFields; i++) {
												interfaceList.add(parser.getNextValueOf("Interface"));
											}
											interfaceList.add(parser.getFirstValueOf("Interface"));

											// Delete the enteries present in
											// WFRTTaskInterfaceAssocTable and
											// Insert the new associations of
											// interfaces.
											pstmt1 = con.prepareStatement(
													" Delete  from WFRTTaskInterfaceAssocTable where ProcessInstanceId = ?"
															+ " And WorkitemId = ? And ProcessDefId = ? And ActivityId = ? And  TaskId = ?");
											WFSUtil.DB_SetString(1, processInstanceId, pstmt1, dbType);
											pstmt1.setInt(2, workItemId);
											pstmt1.setInt(3, processDefId);
											pstmt1.setInt(4, activityId);
											pstmt1.setInt(5, taskId);
											pstmt1.execute();

											if (pstmt1 != null) {
												pstmt1.close();
												pstmt1 = null;
											}

											pstmt1 = con.prepareStatement(
													"Insert Into WFRTTaskInterfaceAssocTable(ProcessinstanceId, WorkItemId,"
															+ " ProcessDefId, ActivityId, TaskId, InterfaceId, InterfaceType, Attribute) Values ( ?,?,?,?,?,?,?,?)");

											for (int i = 0; i < noOfInterfaceFields; i++) {
												interfaceParser.setInputXML((String) interfaceList.get(i));
												interfaceId = interfaceParser.getIntOf("Id", 0, true);
												interfaceType = interfaceParser.getValueOf("Type");
												interfaceName = interfaceParser.getValueOf("Name");
												attribute = interfaceParser.getValueOf("Attribute");

												WFSUtil.DB_SetString(1, processInstanceId, pstmt1, dbType);
												pstmt1.setInt(2, workItemId);
												pstmt1.setInt(3, processDefId);
												pstmt1.setInt(4, activityId);
												pstmt1.setInt(5, taskId);
												pstmt1.setInt(6, interfaceId);
												WFSUtil.DB_SetString(7, interfaceType, pstmt1, dbType);
												WFSUtil.DB_SetString(8, attribute, pstmt1, dbType);
												pstmt1.addBatch();
											}
											pstmt1.executeBatch();
											if (pstmt1 != null) {
												pstmt1.close();
											}
										}
									//Changes for Adhoc Task **Mohnish **
										String scope = "P";
										boolean useSeparateTable = true;
						                if(taskId>0){
						                	String taskQry = "Select Scope,UseSeparateTable from WFTaskDefTable where  ProcessDefId =? And TaskId = ?";
						                	pstmt = con.prepareStatement(taskQry);
						                	pstmt.setInt(1, processDefId);
						                	pstmt.setInt(2, taskId);
						                	rs = pstmt.executeQuery();
						                	if(rs.next()){
						                		scope= rs.getString("Scope");
						                		useSeparateTable = ("Y").equalsIgnoreCase(rs.getString("UseSeparateTable"));
						                	}
						                }
						                if(rs!=null){
						                	rs.close();
						                	rs=null;
						                }
						                if(pstmt!=null){
						                	pstmt.close();
						                	pstmt=null;
						                }
										// Saving the task data
										if (noOfTaskDataFields > 0) {
											int templateVarId = 0;
											String taskVarName = "";
											String value = "";
											int variableType = 0;
											taskDataList.add(parser.getFirstValueOf("Data"));
											for (int i = 1; i < noOfTaskDataFields; i++) {
												taskDataList.add(parser.getNextValueOf("Data"));
											}
											taskDataList.add(parser.getFirstValueOf("Data"));
											for (int i = 0; i < noOfTaskDataFields; i++) {
												taskDataParser.setInputXML((String) taskDataList.get(i));
												templateVarId = taskDataParser.getIntOf("TemplateVariableId", 0, true);
												taskVarName = taskDataParser.getValueOf("TaskVariableName");
												value = taskDataParser.getValueOf("Value");
												variableType = taskDataParser.getIntOf("VariableType", 0, false);
												taskDataMap.put(templateVarId, new WFTaskInfoClass(templateVarId,
														taskVarName, value, variableType));
											}
											//Changes for Adhoc Task **Mohnish**
											mainCode = WFSUtil.setTaskData(con, participant, engine, dbType,
													processDefId, processInstanceId, workItemId, activityId, taskId,
													subTaskId, taskType, taskDataMap, false, new Boolean[]{false},scope,useSeparateTable,false);//internalServiceFlag=false
											if (mainCode != 0) {
												// Handle new error code to
												// represent Error while Saving
												// Task Data
												mainCode = WFSError.WF_TASK_DATA_NOTSAVED;
												subCode = 0;
												subject = WFSErrorMsg.getMessage(mainCode);
												descr = WFSErrorMsg.getMessage(mainCode);
												errType = WFSError.WF_TMP;

											}
										}

									}
									if (mainCode == 0) {
										// Get the targetUserId from the
										// targetUserName
										String targetUserDetails[] = WFSUtil.getIdForName(con, dbType, targetUser, "U");
										int targetUserId = Integer.parseInt(targetUserDetails[1]);
										int queueId = 0;										
										// Save the comment into WFCommentsTable
										if (!comments.equals("")) {
											pstmt1 = con.prepareStatement(
													"insert into WFCommentsTable(ProcessDefId, ActivityId, ProcessInstanceId, "
															+ "WorkItemId, ProcessVariantId, TaskId, SubTaskId, CommentsBy, CommentsByName, CommentsTo, "
															+ "CommentsToName, Comments, CommentsType, ActionDateTime) "
															+ "values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "
															+ WFSUtil.getDate(dbType) + ")");
											pstmt1.setInt(1, processDefId);
											pstmt1.setInt(2, activityId);
											WFSUtil.DB_SetString(3, processInstanceId, pstmt1, dbType);
											pstmt1.setInt(4, workItemId);
											pstmt1.setInt(5, 0);
											pstmt1.setInt(6, taskId);
											pstmt1.setInt(7, subTaskId);
											pstmt1.setInt(8, userId);
											WFSUtil.DB_SetString(9, participant.gettype()=='P'?"System":userName, pstmt1, dbType);
											pstmt1.setInt(10, targetUserId);
											WFSUtil.DB_SetString(11, targetUser, pstmt1, dbType);
											WFSUtil.DB_SetString(12, comments, pstmt1, dbType);
											pstmt1.setInt(13, WFSConstant.CONST_COMMENTS_REASSIGN);
											pstmt1.execute();
											pstmt1.close();
											pstmt1 = null;
										}
										if(participant.gettype()!='P') {

										mapForTaskAttributes.put("ProcessInstanceId", processInstanceId);
										mapForTaskAttributes.put("WorkItemId", String.valueOf(workItemId));
										if(urn!=null&&!urn.equalsIgnoreCase("")){
											mapForTaskAttributes.put("URN", urn);
										}else{
											mapForTaskAttributes.put("URN", processInstanceId);
										}
										
										mapForTaskAttributes.put("ProcessDefId", String.valueOf(processDefId));
										mapForTaskAttributes.put("ActivityId", String.valueOf(activityId));
										mapForTaskAttributes.put("TaskId", String.valueOf(taskId));
										mapForTaskAttributes.put("SubTaskId", String.valueOf(subTaskId));
										mapForTaskAttributes.put("EngineName", engine);
										mapForTaskAttributes.put("Instructions", instruction);
										mapForTaskAttributes.put("ActivityType", String.valueOf(32));
										mapForTaskAttributes.put("Comments", comments);
										mapForTaskAttributes.put("DueDate", dueDate);
										mapForTaskAttributes.put("AssignedOn", WFSUtil.dbDateTime(con, dbType));
										mapForTaskAttributes.put("AssignedTo", targetUser);// AssignedTo
										mapForTaskAttributes.put("AssignedBy", userName);// AssignedBy
										mapForTaskAttributes.put("OAPWebServerAddress",	parser.getValueOf("OAPWebServerAddress", "", false));
										mapForTaskAttributes.put("WebServerAddress",parser.getValueOf("WebServerAddress", "", false));

										pstmt1 = con.prepareStatement(
												"Select a.processname, b.activityname from ProcessDefTable a " + WFSUtil.getTableLockHintStr(dbType) + " inner join activitytable b " + WFSUtil.getTableLockHintStr(dbType) + " on a.processdefid = b.processdefid and a.processdefid = ? and b.activityid = ?");
										pstmt1.setInt(1, processDefId);
										pstmt1.setInt(2, activityId);
										rs = pstmt1.executeQuery();
										if (rs.next()) {
											mapForTaskAttributes.put("RouteName", rs.getString("processname"));
											mapForTaskAttributes.put("ActivityName", rs.getString("activityname"));
										}
										if (pstmt1 != null) {
											pstmt1.close();
											pstmt1 = null;
										}
										if (rs != null) {
											rs.close();
											rs = null;
										}
										pstmt1 = con.prepareStatement(
												"Select TaskName From WFTaskDefTable where ProcessDefId =? and TaskId =?");
										pstmt1.setInt(1, processDefId);
										pstmt1.setInt(2, taskId);
										rs = pstmt1.executeQuery();
										if (rs.next()) {
											mapForTaskAttributes.put("TaskName", rs.getString("TaskName"));
										}
										if (pstmt1 != null) {
											pstmt1.close();
											pstmt1 = null;
										}
										if (rs != null) {
											rs.close();
											rs = null;
										}
										
										//revoke + reassign task mail
										
										//for reassign mail
								        strQry = "Select MailId From wfuserview Where upper(UserName) = ? ";
								        pstmt1 = con.prepareStatement(strQry);
								        WFSUtil.DB_SetString(1, targetUser.toUpperCase(), pstmt1, dbType);
										rs = pstmt1.executeQuery();
								        while (rs != null && rs.next()) {
								          userEmail = userEmail + rs.getString(1) + ";";
								        }
										if (rs != null) {
											rs.close();
											rs = null;
										}
										if (pstmt1 != null) {
											pstmt1.close();
											pstmt1 = null;
										}
										
										// (ccmailid support)
								        strQry = "Select MailId From wfuserview Where upper(UserName) = ? ";
								        pstmt1 = con.prepareStatement(strQry);
										WFSUtil.DB_SetString(1, caseManager.toUpperCase(), pstmt1, dbType);
										rs = pstmt1.executeQuery();
										while (rs != null && rs.next()) {
									          ccUserEmail = ccUserEmail + rs.getString(1) + ";";
									        }
										if (rs != null) {
											rs.close();
											rs = null;
										}
										if (pstmt1 != null) {
											pstmt1.close();
											pstmt1 = null;
										}
										
								        strQry = "Select distinct Q_QueueId from wfinstrumenttable " + WFSUtil.getTableLockHintStr(dbType) + " where processinstanceid = ? and workitemId = ?";
								        pstmt1 = con.prepareStatement(strQry);
										WFSUtil.DB_SetString(1, processInstanceId, pstmt1, dbType);
										pstmt1.setInt(2, workItemId);
										rs = pstmt1.executeQuery();
										if (rs.next()) {
											queueId = rs.getInt(1);
										}
										if (userEmail != null && userEmail.length()>0) {
											HashMap<String, String> mailStringAttributes = new HashMap<String, String>(); 
											HashMap<String, Integer> mailIntAttributes = new HashMap<String, Integer>();
											mailStringAttributes.put("CabinetName", engine);
											mailStringAttributes.put("MailTo", userEmail.toString());
											if(ccUserEmail != null && !("".equals(ccUserEmail))) {
											mailStringAttributes.put("MailCC", ccUserEmail.toString());
											}else {
												mailStringAttributes.put("MailCC", null);
											}
											mailStringAttributes.put("MailAttachmentIndex", null);
											mailStringAttributes.put("MailAttachmentNames", null);
											mailStringAttributes.put("MailStatus", "N");
											mailStringAttributes.put("MailStatusComments", null);
											mailStringAttributes.put("MailInsertedBy", null);
											mailStringAttributes.put("MailActionType", "TaskNotification");
											mailStringAttributes.put("MailAttachmentExtensions", null);
											mailStringAttributes.put("PropertyName", "ReassignTask");
											mailStringAttributes.put("ProcessInstanceId", processInstanceId);
											mailIntAttributes.put("MailPriority", 1);
											mailIntAttributes.put("ProcessDefID", processDefId);
											mailIntAttributes.put("WorkItemId", workItemId);
											mailIntAttributes.put("ActivityId", activityId);
											mailIntAttributes.put("DbType", dbType);
											mailIntAttributes.put("NoOfTrials", 0);
											mapForTaskAttributes.put("QueueId", Integer.toString(queueId));
											mapForTaskAttributes.put("sourceUser", sourceUser);
											EmailTemplateUtil.addTaskToMailQueue(con, mapForTaskAttributes, mailIntAttributes, mailStringAttributes);						
											
										}
										if (pstmt1 != null) {
											pstmt1.close();
											pstmt1 = null;
										}
										if (rs != null) {
											rs.close();
											rs = null;
										}

										// Audit log
										WFSUtil.generateTaskLog(engine, con, dbType, processInstanceId, WFSConstant.WFL_TaskReassigned, workItemId, processDefId, 
												activityId, "", 0, userId, participant.gettype() =='P'?"System":userName, targetUser, taskId, subTaskId, WFSUtil.dbDateTime(con, dbType));
										if(Q_DivertedByUserId != 0)
										{
											WFSUtil.generateTaskLog(engine, con, dbType, processInstanceId, WFSConstant.WFL_TaskDiverted, workItemId, processDefId, 
													activityId, "", 0, userId, participant.gettype() =='P'?"System":userName, targetUser+","+Q_DivertedByUserName, taskId, subTaskId, WFSUtil.dbDateTime(con, dbType));
										}
										
										userEmail = "";
										ccUserEmail = "";
										//for revoke mail
								        strQry = "Select MailId From wfuserview Where upper(UserName) = ? ";
								        pstmt1 = con.prepareStatement(strQry);
										WFSUtil.DB_SetString(1, sourceUser.toUpperCase(), pstmt1, dbType);
										rs = pstmt1.executeQuery();
								        while (rs != null && rs.next()) {
								          userEmail = userEmail + rs.getString(1) + ";";
								        }
										if (rs != null) {
											rs.close();
											rs = null;
										}
										if (pstmt1 != null) {
											pstmt1.close();
											pstmt1 = null;
										}
										
										// (ccmailid support)
								        strQry = "Select MailId From wfuserview Where upper(UserName) = ? ";
								        pstmt1 = con.prepareStatement(strQry);
										WFSUtil.DB_SetString(1, caseManager.toUpperCase(), pstmt1, dbType);
										rs = pstmt1.executeQuery();
										while (rs != null && rs.next()) {
									          ccUserEmail = ccUserEmail + rs.getString(1) + ";";
									        }
										if (rs != null) {
											rs.close();
											rs = null;
										}
										if (pstmt1 != null) {
											pstmt1.close();
											pstmt1 = null;
										}
										
								        strQry = "Select distinct Q_QueueId from wfinstrumenttable " + WFSUtil.getTableLockHintStr(dbType) + " where processinstanceid = ? and workitemId = ?";
								        pstmt1 = con.prepareStatement(strQry);
										WFSUtil.DB_SetString(1, processInstanceId, pstmt1, dbType);
										pstmt1.setInt(2, workItemId);
										rs = pstmt1.executeQuery();
										if (rs.next()) {
											queueId = rs.getInt(1);
										}
										if (userEmail != null && userEmail.length()>0) {
											HashMap<String, String> mailStringAttributes = new HashMap<String, String>(); 
											HashMap<String, Integer> mailIntAttributes = new HashMap<String, Integer>();
											mailStringAttributes.put("CabinetName", engine);
											mailStringAttributes.put("MailTo", userEmail.toString());
											if(ccUserEmail != null && !("".equals(ccUserEmail))) {
											mailStringAttributes.put("MailCC", ccUserEmail.toString());
											}else {
												mailStringAttributes.put("MailCC", null);
											}
											mailStringAttributes.put("MailAttachmentIndex", null);
											mailStringAttributes.put("MailAttachmentNames", null);
											mailStringAttributes.put("MailStatus", "N");
											mailStringAttributes.put("MailStatusComments", null);
											mailStringAttributes.put("MailInsertedBy", null);
											mailStringAttributes.put("MailActionType", "TaskNotification");
											mailStringAttributes.put("MailAttachmentExtensions", null);
											mailStringAttributes.put("PropertyName", "RevokeTask");
											mailStringAttributes.put("ProcessInstanceId", processInstanceId);
											mailIntAttributes.put("MailPriority", 1);
											mailIntAttributes.put("ProcessDefID", processDefId);
											mailIntAttributes.put("WorkItemId", workItemId);
											mailIntAttributes.put("ActivityId", activityId);
											mailIntAttributes.put("DbType", dbType);
											mailIntAttributes.put("NoOfTrials", 0);
											mapForTaskAttributes.put("QueueId", Integer.toString(queueId));
											mapForTaskAttributes.put("sourceUser", sourceUser);
											EmailTemplateUtil.addTaskToMailQueue(con, mapForTaskAttributes, mailIntAttributes, mailStringAttributes);						
											
										}
										}
										if (pstmt1 != null) {
											pstmt1.close();
											pstmt1 = null;
										}
										if (rs != null) {
											rs.close();
											rs = null;
										}

										// Audit log
										WFSUtil.generateTaskLog(engine, con, dbType, processInstanceId, WFSConstant.WFL_TaskRevoked, workItemId, processDefId, 
												activityId, "", 0, userId, participant.gettype() =='P'?"System":userName, targetUser, taskId, subTaskId, WFSUtil.dbDateTime(con, dbType));
									}
								}
							} else {
								mainCode = WFSError.WM_INVALID_TARGET_USER;
								subCode = 0;
								subject = WFSErrorMsg.getMessage(mainCode);
								descr = WFSErrorMsg.getMessage(subCode);
								errType = WFSError.WF_TMP;
							}
						} else {
							mainCode = WFSError.WF_TASK_LOCKED;
							subCode = 0;
							subject = WFSErrorMsg.getMessage(mainCode);
							descr = WFSErrorMsg.getMessage(subCode);
							errType = WFSError.WF_TMP;
						}
				} else {
					mainCode = WFSError.WF_NO_AUTHORIZATION;
					subCode = 0;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}
			} else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}

			// Construct the output XML
			if (mainCode == 0) {
				// Commit the transaction
				if (!con.getAutoCommit()) {
					con.commit();
					con.setAutoCommit(true);
				}
				
				outputXml.append(gen.createOutputFile("WFReassignTask"));
				outputXml.append("<Option>" + option + "</Option>");
				outputXml.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXml.append(gen.closeOutputFile("WFReassignTask"));
			}
		} catch (SQLException e) {
			WFSUtil.printErr(engine, "", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if (e.getErrorCode() == 0) {
				if (e.getSQLState().equalsIgnoreCase("08S01")) {
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
				}
			} else {
				descr = e.getMessage();
			}
		} catch (NumberFormatException e) {
			WFSUtil.printErr(engine, "", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (NullPointerException e) {
			WFSUtil.printErr(engine, "", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch (JTSException e) {
			WFSUtil.printErr(engine, "", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = e.getErrorCode();
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.getMessage();

		} catch (Exception e) {
			WFSUtil.printErr(engine, "", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} finally {
			try {
				if (!con.getAutoCommit()) {
					con.rollback();
					con.setAutoCommit(true);
				}
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (pstmt != null) {
					pstmt.close();
					pstmt = null;
				}
				if (pstmt1 != null) {
					pstmt1.close();
					pstmt1 = null;
				}
			} catch (Exception e) {
			}
			
		}
		if (mainCode != 0) {
			String strReturn = WFSUtil.generalError(option, engine, gen, mainCode, subCode, errType, subject,
					descr);
			outputXml.append( strReturn);
		}
		return outputXml.toString();
	}
	
	//----------------------------------------------------------------------------------------------------
	//Function Name 				:	WFInitiateProcessTask
	//Date Written (DD/MM/YYYY)     :	29-08-2017
	//Author						:	Kumar Kimil
	//Input Parameters				:	Connection , XMLParser , XMLGenerator
	//Output Parameters				:   none
	//Return Values					:	String (output xml)
	//Description					:   API to Initate Usermonitor Process Task.
	//----------------------------------------------------------------------------------------------------
	public String WFInitiateProcessTask(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
		
		
	    PreparedStatement pstmt = null;
	    PreparedStatement pstmt1 = null;
	    Statement stmt1 = null;
	    ResultSet rs = null;
	    ResultSet rs1 = null;
	    int mainCode = 0;
	    int subCode = 0;
	    String subject = null;
	    String descr = null;
	    String errType = WFSError.WF_TMP;
	    String engine = parser.getValueOf("EngineName");
	    String option = parser.getValueOf("Option","",false);
	    String processInstanceId = "";
		int workItemId = 0;
		int sessionID = 0;
		WFParticipant user = null;
        String taskMode = "";
     	int processdefid = 0;
        int activityId;
        int taskId=0;
        int taskType=0;
        int subTaskId=0;
	    StringBuilder outputXML = new StringBuilder();
	    try {
           
            sessionID = parser.getIntOf("SessionId", 0, false);
            engine = parser.getValueOf("EngineName");
             processdefid = parser.getIntOf("ProcessDefId", 0, false);
             activityId = parser.getIntOf("ActivityId", 0, false);
             taskId = parser.getIntOf("TaskId", 0, false);
             subTaskId = parser.getIntOf("SubTaskId", 0, false);
             processInstanceId = parser.getValueOf("ProcessInstanceId","",false);
             workItemId = parser.getIntOf("WorkItemId", 1, true);
             taskType=parser.getIntOf("TaskType", 1, true);
             taskMode = parser.getValueOf("TaskMode","",false);
            String appServerIP = WFServerProperty.getSharedInstance().getCallBrokerData().getProperty(WFSConstant.CONST_BROKER_APP_SERVER_IP);
      	   int appServerPort = Integer.parseInt(WFServerProperty.getSharedInstance().getCallBrokerData().getProperty(WFSConstant.CONST_BROKER_APP_SERVER_PORT));
      	   String appServerType = WFServerProperty.getSharedInstance().getCallBrokerData().getProperty(WFSConstant.CONST_BROKER_APP_SERVER_TYPE);
            WFRuleEngine wfRuleEngine = WFRuleEngine.getSharedInstance();
       	   wfRuleEngine.initialize(appServerIP, appServerPort, appServerType);

			WFProcess wfProcess = wfRuleEngine.getProcessInfo(processdefid, engine);
			user=WFSUtil.WFCheckSession(con, sessionID); 
			int dbType = ServerProperty.getReference().getDBType(engine);
			 if(user!=null){
				 WFWorkitem wfWorkitem = WFRoutingUtil.getWorkitemForTask(con, wfProcess, processInstanceId, workItemId, processdefid,
		  				   engine, DatabaseTransactionServer.charSet, wfRuleEngine.getRegInfo(),sessionID, user.getid(),false);
				 String initiateWIInSubTask="";
				 String strQry1 = "Select InitiateWI From WFTaskDefTable " + WFSUtil.getTableLockHintStr(dbType) + " Where ProcessDefId = ? And TaskId = ? ";
		            pstmt = con.prepareStatement(strQry1);
		            pstmt.setInt(1, processdefid);
		            pstmt.setInt(2, taskId);
		            rs = pstmt.executeQuery();
		            if(rs.next()){
		                initiateWIInSubTask=rs.getString("InitiateWI");
		            }
		            if(pstmt!= null){
		                pstmt.close();
		                pstmt = null;
		            }
		            if(rs!= null){
		                rs.close();
		                rs = null;
		            }
             	mainCode=synchronousTaskRouting(con,wfWorkitem,wfRuleEngine,engine,gen,taskId,taskType,taskMode,subTaskId, user.getid(),dbType,initiateWIInSubTask);
			 }
			 else{
					mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
					subCode = 0;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}
         	if(mainCode==0){
         		outputXML.append(gen.createOutputFile("WFInitiateProcessTask"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(WFSUtil.getSubProcessDetail(con, taskId, processInstanceId, processdefid));
				outputXML.append(gen.closeOutputFile("WFInitiateProcessTask"));
         	}
            
           
         } catch (SQLException e) { 
	            WFSUtil.printErr(engine,"", e);
	            mainCode = WFSError.WM_INVALID_FILTER;
	            subCode = WFSError.WFS_SQL;
	            subject = WFSErrorMsg.getMessage(mainCode);
	            errType = WFSError.WF_FAT;
	            if (e.getErrorCode() == 0) {
	                    if (e.getSQLState().equalsIgnoreCase("08S01")) {
	                            descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
	                    }
	            } else {
	                    descr = e.getMessage();
	            }
	    } catch (NumberFormatException e) {
	            WFSUtil.printErr(engine,"", e);
	            mainCode = WFSError.WF_OPERATION_FAILED;
	            subCode = WFSError.WFS_ILP;
	            subject = WFSErrorMsg.getMessage(mainCode);
	            errType = WFSError.WF_TMP;
	            descr = e.toString();
	    } catch (NullPointerException e) {
	            WFSUtil.printErr(engine,"", e);
	            mainCode = WFSError.WF_OPERATION_FAILED;
	            subCode = WFSError.WFS_SYS;
	            subject = WFSErrorMsg.getMessage(mainCode);
	            errType = WFSError.WF_TMP;
	            descr = e.toString();
	    } catch (WFSException e) { //WFS_7.1_032
	            mainCode = e.getMainErrorCode();
	            subCode = e.getSubErrorCode();
	            subject = WFSErrorMsg.getMessage(mainCode);
	            errType = e.getTypeOfError();
	            descr = e.getErrorDescription();
	    } catch (JTSException e) {
	            WFSUtil.printErr(engine,"", e);
	            mainCode = WFSError.WF_OPERATION_FAILED;
	            subCode = e.getErrorCode();
	            subject = WFSErrorMsg.getMessage(mainCode);
	            errType = WFSError.WF_TMP;
	            descr = e.getMessage();
	    } catch (Exception e) {
	            WFSUtil.printErr(engine,"", e);
	            mainCode = WFSError.WF_OPERATION_FAILED;
	            subCode = WFSError.WFS_EXP;
	            subject = WFSErrorMsg.getMessage(mainCode);
	            errType = WFSError.WF_TMP;
	            descr = e.toString();
	    } finally {
	            try {
	                    if (rs != null) { 
	                         rs.close();
	                         rs = null;
	                    }
	                    if (rs1 != null) { 
	                         rs1.close();
	                         rs1 = null;
	                    }

	            } catch (Exception ignored) {}
	            try {
	                    if (pstmt != null) {
	                         pstmt.close();
	                         pstmt = null;
	                    }
	                    if (pstmt1 != null) {
	                         pstmt1.close();
	                         pstmt1 = null;
	                    }
	                    if (stmt1 != null) {
	                        stmt1.close();
	                        stmt1 = null;
	                    }
	            } catch (Exception ignored) {}

	           
	    }
	    if (mainCode != 0) {
			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			outputXML.append( errorString);
        }
	    return outputXML.toString();
	}

    //----------------------------------------------------------------------------------------------------
    //	Function Name 					:	WFGetCatalogMethodInfo
    //	Date Written (DD/MM/YYYY)                       :	27/12/2019
    //	Author						:	Chitranshi Nitharia
    //	Input Parameters				:	Connection , XMLParser , XMLGenerator
    //	Output Parameters				:       none
    //	Return Values					:	String
    //	Description					:       Return Details Of System Catalog Fnctions
    //----------------------------------------------------------------------------------------------------
    public String WFGetCatalogMethodInfo(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
        StringBuffer outputXML = new StringBuffer("");
        PreparedStatement pstmt = null;
        PreparedStatement pstmt1 = null;
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        String strEngine = parser.getValueOf("EngineName");
        String scope;
        int methodCount = 0;
        ResultSet RS1 = null;
        ResultSet RS = null;
        try {
            int iSessionID = parser.getIntOf("SessionId", 0, false);
            int iProcessDefID = parser.getIntOf("ProcessDefId", 0, true);
            int iDbType = ServerProperty.getReference().getDBType(strEngine);
            String iMethodType = parser.getValueOf("MethodType", "S", true);
            WFParticipant objUser;
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.newDocument();
            int imethodIndex;
            if (iProcessDefID == 0) {
                scope = "G";
            } else {
                scope = "L";
            }
            objUser = WFSUtil.WFCheckSession(con, iSessionID);
            if (objUser == null) {
                throw new WFSException(WFSError.WM_INVALID_SESSION_HANDLE, 0, WFSError.WF_TMP, WFSErrorMsg.getMessage(mainCode), WFSErrorMsg.getMessage(mainCode));
            }
            Element Methods = doc.createElement("Methods");

            String strSQL = "SELECT EXTMETHODINDEX , EXTMETHODNAME,EXTAPPNAME,EXTAPPTYPE,RETURNTYPE FROM EXTMETHODDEFTABLE " + WFSUtil.getTableLockHintStr(iDbType) + " WHERE PROCESSDEFID = ? AND EXTAPPTYPE = ?";
            pstmt = con.prepareStatement(strSQL);
            pstmt.setInt(1, iProcessDefID);
            pstmt.setString(2, iMethodType);
            pstmt.execute();
            RS = pstmt.getResultSet();
            while (RS.next()) {
                imethodIndex = RS.getInt("extmethodindex");

                Element Method = doc.createElement("Method");

                Attr attr = doc.createAttribute("MethodIndex");
                attr.setValue(String.valueOf(imethodIndex));
                Method.setAttributeNode(attr);

                attr = doc.createAttribute("MethodName");
                attr.setValue(RS.getString("EXTMETHODNAME"));
                Method.setAttributeNode(attr);

                attr = doc.createAttribute("AppName");
                attr.setValue(RS.getString("EXTAPPNAME"));
                Method.setAttributeNode(attr);

                attr = doc.createAttribute("AppType");
                attr.setValue(iMethodType);
                Method.setAttributeNode(attr);

                attr = doc.createAttribute("ReturnType");
                attr.setValue(RS.getString("RETURNTYPE"));
                Method.setAttributeNode(attr);

                attr = doc.createAttribute("Scope");
                attr.setValue(scope);
                Method.setAttributeNode(attr);

                Element Params = doc.createElement("Parameters");

                strSQL = "SELECT EXTMETHODPARAMINDEX , PARAMETERNAME ,PARAMETERTYPE,DATASTRUCTUREID,PARAMETERSCOPE,UNBOUNDED FROM EXTMETHODPARAMDEFTABLE " + WFSUtil.getTableLockHintStr(iDbType) + " WHERE PROCESSDEFID = ? AND EXTMETHODINDEX = ?";
                pstmt1 = con.prepareStatement(strSQL);
                pstmt1.setInt(1, iProcessDefID);
                pstmt1.setInt(2, imethodIndex);
                pstmt1.execute();
                RS1 = pstmt1.getResultSet();
                while (RS1.next()) {
                    Element Param = doc.createElement("Parameter");

                    attr = doc.createAttribute("ParamIndex");
                    attr.setValue(RS1.getString("EXTMETHODPARAMINDEX"));
                    Param.setAttributeNode(attr);

                    attr = doc.createAttribute("ParamName");
                    attr.setValue(RS1.getString("PARAMETERNAME"));
                    Param.setAttributeNode(attr);

                    attr = doc.createAttribute("ParamType");
                    attr.setValue(RS1.getString("PARAMETERTYPE"));
                    Param.setAttributeNode(attr);

                    attr = doc.createAttribute("DataStructureId");
                    attr.setValue(RS1.getString("DATASTRUCTUREID"));
                    Param.setAttributeNode(attr);

                    attr = doc.createAttribute("ParamScope");
                    attr.setValue(RS1.getString("PARAMETERSCOPE"));
                    Param.setAttributeNode(attr);

                    attr = doc.createAttribute("Unbounded");
                    attr.setValue(RS1.getString("UNBOUNDED"));
                    Param.setAttributeNode(attr);

                    Params.appendChild(Param);
                }
                RS1.close();
                RS1 = null;
                pstmt1.close();
                pstmt1 = null;
                Method.appendChild(Params);
                Methods.appendChild(Method);
                methodCount++;
            }
            RS.close();
            RS = null;
            pstmt.close();
            pstmt = null;
            doc.appendChild(Methods);
            outputXML = new StringBuffer(500);
            outputXML.append(gen.createOutputFile("WFGetCatalogMethodInfo"));
            outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
            outputXML.append(WFXMLUtil.removeXMLHeader(doc, strEngine));
            outputXML.append("<RetrievedCount>").append(methodCount).append("</RetrievedCount>\n");
            outputXML.append(gen.closeOutputFile("WFGetCatalogMethodInfo"));
        } catch (SQLException e) {
            WFSUtil.printErr(strEngine, "", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            descr = e.getMessage();
        } catch (NumberFormatException e) {
            WFSUtil.printErr(strEngine, "", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(strEngine, "", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (JTSException e) {
            WFSUtil.printErr(strEngine, "", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
        } catch (Exception e) {
            WFSUtil.printErr(strEngine, "", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr(strEngine, "", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
            try {
                if (RS1 != null) {
                    RS1.close();
                }
            } catch (Exception e) {
            }
            try {
                if (pstmt1 != null) {
                    pstmt1.close();
                }
            } catch (Exception e) {
            }
            try {
                if (RS != null) {
                    RS.close();
                }
            } catch (Exception e) {
            }
            try {
                if (pstmt != null) {
                    pstmt.close();
                }
            } catch (Exception e) {
            }
        }
        if (mainCode != 0) {
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();
    }

} // class WMProcessDefinition

class trigger {
	public int iTriggerId;
	public String strTriggerName;
	public String strTriggerType;
	public String strTriggerTypeName;
	public String strDescription;
	public String strAssociatedTAId;
}

class Activity {
	public int iActivityId;
	public int iBlockId;
	public int iActivityType;
	public String strActivityName;
	public String strDescription;
	public String strNeverExpireFlag;
	// --------------------------------------------------------------------------------------
	// Changed On  : 07/03/2005
	// Changed By  : Ruhi Hira
	// Description : SrNo-2, Omniflow 6.0, Feature: DynamicRuleModification,
	//					DataType for column Expiry changed.
	//
	// --------------------------------------------------------------------------------------
	// public String strExpiry;

	// --------------------------------------------------------------------------------------
	// Changed On  : 05/09/2007
	// Changed By  : Shilpi S
	// Description : SrNo-6, Omniflow 7.1, Feature: DatePrecision till minutes
	//
	// --------------------------------------------------------------------------------------
	public WFDuration expiryDuration;
	public String strExpiryActivity;
	public int iTargetActivity;
	public String strAllowReassignment;
	public int iCollectNoOfInstances;
	public String strPrimaryActivity;
	public String strExpireOnPrimaryFlag;
	public int iTriggerId;
	public String strHoldExecutable;
	public String strHoldTillVariable;
	public int iExtObjId;
	public String strMainClientInterface;
	public String strServerInterface;
	public String strWebclientInterface;
	public int iActivityTurnAroundTime;
	//public int iActivityTurnAroundTime;
	public WFDuration actTATDuration;
	public String strAppExecutionFlag;
	public String strAppExecutionValue;
	public int iExpiryOperator;
	public String tatCalFlag;
	public String expCalFlag;
	public String deleteOnCollectFlag;
	public int associatedActivityId;
}

//SrNo-6
class RuleCondition {
	public String strRuleType;
	public int iRuleOrderId;
	public int iRuleId;
	public int iConditionOrderId;
	public String strParam1;
	public String strType1;
	public int iExtObjId1;
	public String strVariableId_1;
	public String strVarFieldId_1;
	public String strParam2;
	public String strType2;
	public int iExtObjId2;
	public String strVariableId_2;
	public String strVarFieldId_2;
	public String strOperator;
	public String strLogicalOp;
}
class FormDetails{
	public int interfaceId;
	public String interfaceType;
	public String Attribute;
	public String formName;	
	
	public FormDetails(int interfaceId,String interfaceType,String Attribute,String formName)
	{
		this.interfaceId=interfaceId;
		this.interfaceType=interfaceType;
		this.Attribute=Attribute;
		this.formName=formName;
	}		
		
	public boolean equals(Object obj)
	   {
		if (obj instanceof FormDetails) {
	            FormDetails fd = (FormDetails) obj;
	            return (fd.interfaceId == this.interfaceId);
	        } else {
	            return false;
	        }
	    }
	   
	   
	   @Override
	   public int hashCode()
	   {
	      int hash = 2;
	      hash=  2* hash + this.interfaceId;
	      return hash;
	   }

	}