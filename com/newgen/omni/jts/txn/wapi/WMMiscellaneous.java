//		        NEWGEN SOFTWARE TECHNOLOGIES LIMITED
//	Group                       : Application  Products
//	Product / Project	        : WorkFlow
//	Module			            : Transaction Server
//	File Name		            : WMMiscellaneous.java
//	Author			            : Advid K. Parmar
//	Date written (DD/MM/YYYY)   : 18/06/2002
//	Description		            : Used for reporting history related calls
//----------------------------------------------------------------------------------------------------
//			            CHANGE HISTORY
//----------------------------------------------------------------------------------------------------
// Date			Change By		Change Description (Bug No. (If Any))
// (DD/MM/YYYY)
//------------------------------------------------hash----------------------------------------------------
//  03/06/2004	    Krishan		    WSE_5.0.1_004
//  16/06/2004	    Krishan Dutt	Bug No WSE_I_5.0.1_124
//  21/06/2004	    Dinesh Parikh	Batching in workitemhistory is incorrect.
//  08/09/2004	    Krishan		    wfs_5_001 (For removing JMS) and new calls added
//  22/09/2004	    Ruhi Hira	    Attribute String formation corrected in WFCompleteWIthSet.
//  09/04/2005	    Harmeet Kaur	WFS_6_004
//  10/05/2005	    Ruhi Hira	    SrNo-1.
//  20/05/2005	    Ashish Mangla	Automatic Cache updation
//  06/06/2005	    Ashish Mangla	WFS_6_016, Also return data in the history for new actionId for process registered / 													unregistered , checkin, checkOut, undo CheckOut
//  15/06/2005	    Ashish Mangla	WFS_6_025, Audit Log for 'C' type operation added
//  4/08/2005	    Mandeep Kaur	SRNo-2(Bug Ref # WFS_5_044)
//  16/08/2005      Mandeep kaur    SRNo-3(Bug Ref # WFS_5_044)
//  05/01/2006	    Harmeet Kaur	CacheActionObject called from WFSETACTIONLIST,WFActionCache Table stmts commented
//  18/01/2006	    Harmeet Kaur	Bug WFS_6.1.2_034 Query modified for Oracle
//  19/01/2006	    Harmeet Kaur	Bug WFS_6.1.2_037
//  19/01/2006      Ruhi Hira       Bug # WFS_6.1.2_039.
//  09/02/2006	    Ashish Mangla	Bug # WFS_6.1_046
//  15/02/2006	    Ashish Mangla	WFS_6.1.2_049 (Changed WMUser.WFCheckSession by WFSUtil.WFCheckSession)
//  21/02/2006	    Ahsan Javed		Bug # WFS_6.1_048 - pass correct processdefid while getting data from cache
//  09/05/2006	    Ashish Mangla	Bug # WFS_6.1.2_067 (Batching in WI history)
//  05/05/2006      Ahsan Javed     BUG WFS_5_091	Error in Upload Workitem.(see tracking
//  03/05/2006	    Ahsan Javed		Bug WFS_5_114   Error in avg. processing time report for all processing case.
//  30/05/2006      Ashish Mangla	SRNo-4 (Hourly Report Support)
//  06/07/2006	    Ashish Mangla	WFS_6.1.2_069 (Transaction count not setting to 0)
//  13/07/2006	    Virochan		Bug 31 - Bugzilla. Used WFSUtil's getLockHintStr()
//  13/07/2006	    Virochan		Bug 33 - Bugzilla. Used WFSUtil's getLockHintStr()
//  19/07/2006	    Ahsan Javed		Coded for getBatchSize
//  18/08/2006	    Ruhi Hira       Bugzilla Id 54.
//  23/08/2006	    Ahsan Javed		Bugzilla # 131
//  23/08/2006	    Ahsan Javed 	Bugzilla Bug 133
//  24/08/2006	    Ashish Mangla	Bugzilla Bug 141
//  25/08/2006	    Ahsan Javed		Bugzilla Bug 112
//  16/10/2006	    Ahsan Javed		Bugzilla Bug 265
//  20/11/2006	    Varun Bhansaly  PROVIDE SUPPORT FOR CALENDER FEATURE
//  17/01/2007      Varun Bhansaly	Bugzilla Id 54 (Provide Dirty Read Support for DB2 Database)
//  08/02/2007      Varun Bhansaly	Bugzilla Id 468 (Output of WFGetWorkAuditHistory has option WFGetProcessLoadHistory)
//  10/05/2007      Varun Bhansaly  Bugzilla Id 683 (Requirement of WFFetchProcessDefinition in WorkFlow)
//  12/05/2007      Ruhi Hira       (CompleteWithSet - Distribute).
//  12/05/2007      Ruhi Hira       SrNo-5 (Changes in Reports for Calendar, all calculation done at server).
//  19/06/2007      Ruhi Hira       Bugzilla Bug 1175.
//  22/06/2007      Varun Bhansaly  Bugzilla Id 1233 (00:00:00 for time in O/P XML for WFUploadWorkItem [Oracle])
//  17/07/2007      Varun Bhansaly  Bugzilla Id 1447
//                                  (Introduce WorkItem from Webdesktop using Single Call WFUploadWorkItem)
//  19/07/2007      Ruhi Hira       Bugzilla Bug 1492.
//  04/09/2007      Shilpi S        SrNo-6, Omniflow7.1 date precision till minutes.
//  05/09/2007      Ruhi Hira       SrNo-7, Synchronous routing of workitems.
//  19/10/2007		Varun Bhansaly	SrNo-8, Use WFSUtil.printXXX instead of System.out.println()
//									System.err.println() & printStackTrace() for logging.
//  05/09/2007      Ruhi Hira       SrNo-9, Synchronous routing of workitems code commented for upload.
//	19/11/2007		Varun Bhansaly	WFSUtil.getBIGData() to be used instead of getBinaryStream
//  23/11/2007      Shilpi S        Bug#1688
//  23/11/2007		Tirupati Srivastava	   changes made to make code compatible with postgreSQL
//	19/12/2007		Varun Bhansaly	API WFUploadWorkItem() modified to Upload WIs in PostgreSQL.
//  1/1/2008        Shilpi S        Bug # 1716
//  15/01/2008		Vikram Kumbhar	Bugzilla Bug 2774 Maker Checker Functionality
//  28/08/2008      Varun Bhansaly  Optimization in WFUploadWorkItem, use of cache to prepare query string.
//  12/09/2008      Varun Bhansaly  For an queue variable attribute, consider default values only if default value exists 
//                                  and no value is given for that queue variable.
//	01/12/2008		Ashish Mangla	Bugzilla Bug 7052 null was appending in prefx suffix (moved outside else)
//	10/12/2008		Ashish Mangla	Bugzilla Bug 7224 (WFCompleteAuthorization error in complete multipe authorization in single call)
//	16/12/2008		Ashish Mangla	Bugzilla Bug 7176
//	21/12/2008		Ashish Mangla	Bugzilla Bug 7088 (QueueFilter modification using maker checker)
//	21/12/2008		Ashish Mangla	Bugzilla Bug 5805 (Processmanager User tab Admin / Workitem history)
//  15/04/2009		Shilpi Srivastava SrNo-10, in uploadWorkitem take processName information , a nonmandatory information, also.	 
//  25/05/2009		Shweta Tyagi    SrNo-11, New Api for creating WFGetWorkitemDataExt webservice.
//  26/06/2009		Saurabh Kamal    SrNo-12, Change in WFUploadWorkItem for PDA Support(OFME)  
//  26/06/2009		Shilpi S		Bug # 9862, WFS_7.1_022 If DMS Session of Process Server becomes invalid OmniDocs Calls fail still workitem is created while ItemIndex remains Null - Replicatecd from 7.1
//	06/07/2009		Ashish Mangla	Logging of new actionids supported. (WFS_8.0_015)
//	10/7/2009		Nishant Singh	WFS_7.1_035 Error "wfuploadworkitem does not exist".Data type declare in procedure are not equivalent to  data types used when calling procedure from WFUploadworkitem API.
//	23/07/2009		Vikas Saraswat/	WFS_8.0_017	Error "Class Cast Exception" while uploading workitems whose TATCalFlag is set to "N"
//					Indraneel Dasgupta
//	27/07/2009		Saurabh Kamal	WFS_8.0_019 New API WFGetServerTimeZone
//	14/08/2009		Saurabh Kamal	Bugzilla bug 10325 :: Ambiguous process defnition in OFMECreateProcessInstance
//  31/08/2009      Shilpi S        WFS_8.0_026, workitem specific calendar
//	07/10/09		Indraneel		WFS_8.0_039	Support for Personal Name along with username in fetching worklist, 									workitem history, setting reminder,refer/reassign workitem and search.
//  06/11/2009		Preeti Awasthi	WFS_8.0_055 New APIs added for Export Purge Utility.
//	16/11/2009		Preeti Awasthi	WFS_8.0_057 Workitem should not complete if CompleteAlso flag is 'N' in WFCompleteWithSet
//  29/01/2010		Preeti Awasthi	 WFS_8.0_080: Support of complex variables in WFUploadWorkitem
//	10/02/2010		Saurabh Kamal	[OTMS]Change in SetActionData
//  10/02/2010		Vikas Saraswat	WFS_8.0_084 Form Fragment functionality
// 18/01/2010       Prateek Verma    API to update contents of MailTriggerTable.
// 27/01/2010       Prateek Verma    API to update contents of TemplateDefinitionTable.
//	26/04/2010		Saurabh Kamal	Bugzilla Bug 12508, Transaction has not commited properly.
//	25/03/2011		Bhavneet Kaur	Bugzilla Bug 1242, Transaction handling in WFUploadWorkitem API.
//  23/06/2011      Abhishek Gupta  Bug 27304 - Upload fails after some time as user Session gets invalid.
//  22/11/2011		Preeti Awasthi  Bug 29321 cannot rollback transaction when autocommit is not set [Ref Bug 1242]
//  01/02/2012		Vikas Saraswat	Bug 30380 - removing extra prints from console.log of omniflow_logs 
 // 17/04/2012		Hitesh Kumar 	Replicated	WFS_8.0_106	Audit Log Report should contains details about users of a particular group
//	17/05/2012		Bhavneet Kaur	Bug 31967- [WFUploadWorkItem] ProcessInstance must not be created if SetAttribute call fails
// 05/07/2012     	Bhavneet Kaur   Bug 33029 Cabinet Based Logging for Console, Error, PSError, PSXML & PSOut logs
// 18/09/2012     	Bhavneet Kaur   Bug 33029 Cabinet Based Logging for Console, Error, PSError, PSXML & PSOut logs
//	23/04/2012		Preeti Awasthi	[Replicated]WFS_8.0_150 Purge utility getting stopped after an hour if utility status was no more workitem
//  03/03/2011      Abhishek Gupta  ActionId and Activity filter in WFGetWorkItemHistory API.
//  12/02/2011		Prateek Verma	Support of log4j.xml in logviewer[WFSetLogLevel API]
//  23/06/2011      Abhishek Gupta  Bug 27304 - Upload fails after some time as user Session gets invalid.
//  22/11/2011		Preeti Awasthi  Bug 29321 cannot rollback transaction when autocommit is not set [Ref Bug 1242]
//  01/08/2012      Abhishek Gupta  Bug 33280 - enable/disable cabinet action is not working. Flag introduced for fetching non-admin actionid list.
//  01/08/2012      Abhishek Gupta  Bug 34113 - In audit log, no description for WFL_Add_Calendar actionId.
//  01/08/2012      Abhishek Gupta  Bug 34582 - Batching support in WFGetWorkAuditHistory API.
//  07/01/2013		Sajid Khan		Bug 37345 - Audit log Issue.
//	07/01/2013		Shweta Singhal	Right Management Auditing 
//  16/01/2013		Sajid Khan		Bug 37731 - AuditTrail for Process State Change for registered Processes .
//  19/01/2013		Sajid Khan		Bug 37845 - Rejecter name not present in adminlogtable.
//	23/01/2013		Sajid Khan		Bug 38002 - History is not generated for operation 'Add Variable in Quick Search     Manangement' in Audit log
//	23/01/2013		Sajid Khan		Bug 38003 - History is not generated for operation 'Delete Variable in Quick Search     Manangement' in Audit log
//  23/01/2013		Sajid Khan		Bug 37995 - While deleted mapped alias from Process Variable Mapping, Alias name is not showing in description of Audit Log 
// 28/01/2013		Shweta Singhal	Bug 38051 : ProjectId required for logging of unregister Process.
//28/01/2013		Sajid Khan		Bug 38036 - No History generated for operation 'Set Attribute' 
//28/01/2013		Sajid Khan		Bug 38037 - No history generated for operation 'Delete Process Instance' 
//28/01/2013		Sajid Khan		Bug 38042 - No history generated for operation 'Reinitiate Workitem' 
//01/02/2013		Preeti Awasthi	[Replicate] Bug 38166 - History is not generating if workitem is completed using WFCompleteWithSet API
//20/02/2013		Deepti Bachiyani Bug 38427- Making groupId field of method WFGetHistoryNew non-mandatory
//03/05/2013		Shweta Singhal	Process Variant Support Changes
//10/06/2013		Sajid Khan		Bug 40347 - No history is generated for "CHange Process state " operation under USER tab
//11/06/2013        Shweta Singhal  Bug 40308- GetActionList is not returning the actions in sorted order
//17/06/2013        Shweta Singhal  GetActionList change for Variant support
//04/09/2013        Kahkeshan       Bug 41686  Logging of all the queries in DEBUG mode
//11/09/2013		Mohnish Chopra	Changes done for Process Variant Auditing  
//18/12/2013		Kahkeshan		Code Optimization Changes for WFCompleteWithSet API
//23/12/2013		Sajid Khan		Messae Agent Optimization.
//03/02/2014		Shweta Singhal  Intense transaction log for WFUploadWorkitem
//12/02/2014		Shweta Singhal  TableName changed in get history calls
//21/02/2014		Anwar Danish	Changes done for Bug Id 43190
//04/03/2014            Sajid Khan      Bug 43490 - Error in WFGetActionList call 
//11/03/2014		Mohnish Chopra	Defect in WFCompleteWithSet
//30-04-2014		Sajid Khan		Bug 44536 - Audit Log configuration is not working.
//03-05-2014		Sajid Khan		Bug 44499 - INT to BIGINT changes for Audit Tables.
//27-05-2014		Sajid Khan		Bug 44919 - WFGetWorkItemHistory should return audit trail of all attributes along with Workitem Operations.
//27/05/2014        Kanika Manik    PRD Bug 42494 - BCC support at each email sending modules
// 28/05/2014       Anwar Danish    PRD Bug 42795 merged - Activity wise customization of sending mail priority
//05/06/2014        Kanika Manik    PRD	Bug 42177 - Restriction of SQL Injection in APIs 
//10/06/2014        Mohnish Chopra  API's WFSetSystemProperties and WFGetSystemProperties added
//10/06/2014        Kanika Manik    PRD Bug 43028 - Support for encrypting the password before inserting the same into WFExportInfoTable through WFSetExportCabinetInfo API and fetch the decrypted value of same field from WFExportInfoTable through WFGetExportCabinetInfo API
//11/06/2014        Kanika Manik    PRD Bug 42888 - Logical Error in WFCompleteWithSet API : Value of variables(updateS and updateE) in code are not initialized to false for each iteration in Loop iterating on ProcessInstanceIds.
//11/06/2014        Kanika Manik    PRD Bug 45003 - Front end handling and history generation need to be done for admin action ids.
//21-06-2014(sat)	Sajid Khan		Bug 44712 - Audit Log for processes should not show on which user doesn't have rights.
//24/06/2014        Kanika Manik    PRD Bug 42887 - Support for Attribute logging based on BatchSize(max number of processinstance to be completed) and value of AuditRequired Tag in input xml in WFCompleteWithSet API.
//24/06/2014        Kanika Manik    PRD Bug 42889 - Incorrect handling for Attribute Logging in WFCompleteWithSet API : For Each ProcessInstance, message inserted in WFMessageTable for Attribute logging is incorrect. Each time message contains Attribute xml of last ProcessInstance tag in input xml.
//30/04/2014      Anwar Danish       PRD Bug 45001 merged - Add new action ids, handle also at front end configuration screen and history generation functionality.
//09-07-2014	   Sajid Khan		 Bug 47229 - API Suport of WFGetObjectPrpety and WFSetObjectProperty.
//21/08/2014		Mohnish Chopra	Changes for PRDP Bug 45824 - Incorrect workitem logging through WFCompleteWithSet API
//03/11/2014		Hitesh Singla	Bug 51606 - export cabinet n purge criteria options should be removed 
//27/07/2015		Anwar Danish	PRDP Bug 51341 merged . 
// 07/08/2015       Anwar Danish    PRD Bug 50715 merged - Various Issues in Admin Audit Log and Workitem Audit Log
//07/08/2015        Anwar Danish   PRD Bug 51527 merged - Add functionality for deletion of Audit Logs after archive
//03-06-2015        Sajid Khan      WFGetTaskHistory API Introduced for fetching the history for a task.
//26/08/2015		Mohnish Chopra	Changes for Case Visualisation in WFGetTaskHistory 
//28/08/2015		Amar Sharma		Added new API's WFHandleEventFunc and WFGetMonthEvents for Event Handling in calendar 
//16 Nov 2015		Sajid Khan		Hold Workstep Enhancement
//16/11/2015		Mohnish Chopra	Changes for Case Management --Adding New API's WFSetCaseDataVariableMapping and WFGetCaseDataVariableMapping
//									for Detailed view in Case Basket 
//23 Nov 2015		Sajid Khan		Hold/Unhold Auditing and history generation.
//02 Dec 2016       Sajid Khan      Bug 57635 - blank line in history of workitem 
//28-12-2015		Kirti Wadhwa    changes for Bug 57652 - while diversion, tasks should also be diverted along with the workitems in WFGetTaskHistory and ActionPrint().
//									Handling of actionId 707 is Done.
//24/02/2016		Kirti Wadhwa    Changes for Bug 58995 - unable to create new WI. In CreateProcessInstance in OFME, workstageid is required.CreateProcessInstance uses 
//                                  WFUploadWorkItem API for its o/p XML. So activity id is added in o/p XML as WorkStageId.
//21/03/2016		Mohnish Chopra	Bug 59642 - Weblogic+RHEL+oracle:getting error in history of WI in CWD
//22/07/2016		Kirti Wadhwa    Changes in WFGetWorkItemHistoryNew for Bug 62959 - Postgres : Unable to save wokritem history in all formats.
//01/08/2016        RishiRam Meel   Changes done for Bug 63355 - Workitem information in Workitem History are missing 
//02/08/2016        Rishiram Meel   Changes done Bug 63414 - Postgres : Workitem information is missing in description in audit log for linked operation
//08/08/2016		Mohnish Chopra	Changes for Bug 62748 - Postgre | Decision workstep is coming in Case Visulaization which should not be the case
//11/08/2016		Mohnish Chopra	Logging of change in Queue Filter 
//06/09/2016		Mohnish Chopra	Bug 64113 - License Key based IBPS:click on Case Visualization it shows "the request filter is invalid "
//06/09/2016		Mohnish Chopra	Bug 64132 - License Key based IBPS:Process queue variables are not shown under Audit log Configuration
//28/02/2017		Mohnish Chopra	Bug 67582 - iBPS 3.0 SP-2 +SQL: "java.lang.NullPointerException" is showing if click on link to view modified data
//	17/03/2017		Sweta Bansal	Changes done for removing support of CurrentRouteLogTable in the system.
//18/04/2017            Sajid Khan      Bug 68647 - Auditing for Attributes set are not done through WFCompleteWithSet API
//19/04/2017		  	Rakesh K Saini	Bug 66398 - Support of WFChangeWorkItemPriority API to get the Priority Level audting when Workitem priority is changed
//30-04-2017            Sajid Khan      Bug 59213-Changes have been made to fetch the message text for workitem history from WFSShared.jar instead of NGUtility.jar
//01-05-2017            Sajid Khan      Bug 58270 -Auditing of Attribute set is not being done through WFUPloadWorkitem API
//05-05-2017            Sajid Khan      Bug 58399 - Need an option to view refer, reassign and ad-hoc routing comments in workitem properties
// 09/05/2017		Rakesh K Saini	Bug 56761 - Seperating configuration data and Application parameters from WFAppContext.xml file by dividing the file into two files. 1. WFAppContext.xml 2. WFAppConfigParam.xml
//07/05/2017		Kumar Kimil      		Bug 55927 - Support for API Wise Synchronous Routing.
//03/05/2017			Rakesh K Saini		Bug 55559 - Audit log functionality implemented for action IDs 80, 84, 85, 107, 124, 125, 126
//19/05/2017		Mohnish Chopra		Prdp bug 68582 - Optimization in CompleteWithSet
//25/05/2017        Kumar Kimil     Transfer Data for IBPS(WFAttributeMessageHistoryTable)
//02/06/2017        Kumar Kimil     Archival UT Defects  
//03/07/2017        Ambuj Tripathi	Changes to remove the redundent union queries
//04/07/2017		Shubhankur Manuja	Changes related to WFDeclineTask API -- Changes related to new actionID 708.
//11/07/2017		Shubhankur Manuja	Changes relted to include rejection comments in WFGetTaskHistory API.
//27/07/2017		Sajid Khan			Bug 70830 Unable to create a workitem in a subprocess.
//03/08/2017		Kumar Kimil     	Bug 70043 - Entry for action id 200 is getting inserted while performing the reassign operation from webdesktop
//28/08/2017		Ambuj Tripathi     	Added the changes for Adding the action id for Task Expiry and task reassignement.
//28/08/2017		Ambuj Tripathi     	Removed the tag value for Task Status history in case of Task Expiry Action.
//11/08/2017 		Mohnish Chopra		Changes for Case Summary document generation requirement
//17/08/2017		Sajid Khan			Bug 71014 - Issue in workitem creation with InitiateALso = Y in Synchrounos Routing Mode for POSTGRES - iBPS SP1			
//18/08/2017		Mohnish Chopra		Changes for Case management - Added APIs WFGetCaseInfoVariables and WFSetCaseInfoVariables
//18/08/2017		Mohnish Chopra		Changes for Case management - In WFUpdateRoutingInfo, forceful login for dmssession is done
//18/08/2017		Mohnish Chopra		Changes for Case Summary document generation requirement UT defect
//21/082017         Kumar Kimil         WFChangeTaskProperty- API for Making Task Mandatory/Optional at Runtime
//22/08/2017		Mohnish Chopra		Changes for Case Management Case Information variable -Added API's WFSetCaseInfoVariables and WFGetCaseInfoVariables
//22/08/2017		Mohnish Chopra		Changes for Case Management Requirement(Document to be visible in case when 
//										task is completed)  Added API  WFSetCaseDocumentStatus
//25/08/2017		Mohnish Chopra		WFGenerateCaseSummaryReport api added for Case summary document report
//25/08/2017		Ambuj Tripathi		Getter/Setter APIs added for UserGroup feature in case management.
//30/08/2017		Ambuj Tripathi		WFGetTaskHistory API changed to display the comments in case of Task Reassignment, Approval and Rejection
//31/08/2017		Ambuj Tripathi		WFGetWorkItemHistoryNew API changed to display the comments in case of Task Reassignment, Approval and Rejection at the workitem level
//13/09/2017        Kumar Kimil         Output xml of WFChangeTaskProperty changed
//20/09/2017		Mohnish Chopra		Changes for Sonar issues
//28/09/2017		Ambuj Tripathi			Bug fix for bug#72202 Unable to reassign the Task getting error "Requested Operation Failed"
//29/09/2017		Shubhankur Manuja	Bug#72228 Special chars handling in various cases.
//04/10/2017		Kumar Kimil   Bug 70859 - Tag is shown in history
//04/10/2017		Ambuj Tripathi   	Bug#72218 EAp 6.2+SQl:- Task Preferences functionality not working
//05/10/2017		Ambuj Tripathi   	Bug 71846 - On Case Workstep generate WI history click on Next batch it shows error- Fixed by adding taskID and subtaskID in query for getting the history from wfcurrentroutelogtable and historyroutelogtable.
//05/10/2017		Ambuj Tripathi   	Bug 72105-Specification issue While revoking a task, it doesn't ask for any confirmation. Added changes in WFGetTaskHistory to display the revoke comments.
//16/10/2017		Ambuj Tripathi		Sonar changes for Setting/Getting task preferences and case preferences APIs(WFSetTaskUserGroup/WFGetTaskUserGroup, WFGetCasePreferences/WFSetCasePreferences)
//24/10/2017        Kumar Kimil         Case Registration requirement--Upload Workitem changes
//07/11/2017        Ambuj Tripathi      Case Registration requirement--Changes in WFGetWorkItemHistoryNew API for getting the URN tag in API XML Output
//08/11/2017        Kumar Kimil         Bug 73360 - Workitem History property is showing error
//14/11/2017		Mohnish Chopra		Changes for URN in Case summary document
//14/11/2017		Mohnish Chopra		Changes for helpdesk team -- Full user name should be displayed in CaseSummary document
//17/11/2017        Ambuj Tripathi        Case registration changes for adding URN in the XML output of APIs
//17/11/2017        Kumar Kimil         Bug 73520 - weblogic+oracle: Queue name is not getting changed when maker checker request is approved
//21/11/2017        Kumar Kimil         Bug 72904 - Color coding in Legends showing incorrect.
//22/11/2017        Kumar Kimil         Multiple Precondition enhancement
//29/11/2017		Mohd Faizan         Bug 73653 - Jboss EAP 6.4 + Postgres:-Not able to set Case Preferences
//27/11/2017		Mohnish Chopra	Bug 72529 - EAP6.4+SQL: Case summary document is not generating if user adhoc route the WI 
//01/12/2017        Mohd Faizan		Bug 73856 - EAP+Postgres: No space between words in history related to expired WI
//07/12/2017		Ambuj Tripathi	Bug#71971 merging :: Sessionid and other important input parameters to be added in output xml response of important APIs
//08/12/2017		Mohnish Chopra	Prdp Bug 71731 - Audit log generation for change/set user preferences
//13/12/2017		Ambuj Tripathi	Bug#73937 Not able to approve "Enabled the process" request getting error"The requested operation failed."
//13/12/2017		Ambuj Tripathi	Added URN in WFGetWorkitemHistory Action description and in WFGetAttributeMessage API
//17/12/2017      Kumar Kimil           Bug 73921 - Suggestion:EAP+Postgres: Functional issues in Queue Maker checker
//18/12/2017      Ambuj Tripathi        URN Changes for getting the correct action description and o/p of wfgetattributemessage API
//21/12/2017		Shubhankur Manuja	Bug 74277 - Not able to see workItemHistory while any variable contains special characters to be parsed in Output XML.
//22/12/2017		Ambuj Tripathi		Changes done to remove sonar findings(changed the order of calling SP for different DB)
//28/12/2017      Kumar Kimil           Bug 73725 - Jboss EAP 6.4 + Postgres +SSL :-In Case of Synchronous/Asynchronous Task type in process Task there should be a provision of viewing the linked sub process
//11/01/2018		Ambuj Tripathi		PRDP Bug Merging for bug#68414 Added API to change activity name of any activity in the process.
//15/01/2018		Ambuj Tripathi		Sonar bug fixing for the Rule : Multiline blocks should be enclosed in curly braces
//24/02/2018        Sajid Khan      Bug 75470 - Error in WFUploadWorktiem API for a specific case 
//25/02/2018        Kumar Kimil     Bug 75373 - EAP+SQL 6.4: Getting error in WI history and saving formats are not working.
//30/01/2018        Kumar Kimil     Bug 75613 - While changing authorization flag from 'Y' to 'N', list of users along with queue names should get displayed in case of pending requests
//30/01/2018        Ambuj Tripathi  [Bug 71944] Temp files generated in wdtemp folder are not getting deleted
//05/02/2018        Kumar Kimil     Bug 75720 - Arabic:-Incorrect validation message displayed on importing document on case workitem
//07/02/2018        Ambuj Tripathi  Bug 75385 - Arabic ibps 4: Validation message is trimmed and in English
//08/02/2018        Ambuj Tripathi  Bug 75714 - Arabic:-Case summary document and its content not showing in Arabic language.
//08/02/2018        Ambuj Tripathi  Removed escape of special characters from the encoded buffer after discussions with WebTeam.(No need of it)
//13/02/2018        Ambuj Tripathi  Bug 75815 - Enhancement in Case summary document(Added changes for case member tag)
//15/02/2018		Mohd Faizan		Bug 76093 - EAP7+sql: User filter is not working for 'Set preferences' audit log option 
//16/02/2018        Kumar Kimil     Bug 76015 - EAP7+sql: Unable to generate audit trail for Variant.
//16/02/2018		Ambuj Tripathi	Bug 75815 - Enhancement in Case summary document.
//22/02/2018		Ambuj Tripathi	Bug 75515 - Arabic ibps 4: Validation message is coming in English and that out of colored area 
//05/03/2018		Ambuj Tripathi	Bug 76323 - jboss+Oracle :-Rights are not approved on Queue .
//13/03/2017		Mohnish Chopra	Bug 76558 - Discarded By name is shown incorrectly in Workitem History (edit)
//28/03/2018		Ambuj Tripathi	Bug 76621 - EAP6.4+SQL: Improper error message is getting displayed (when subproces is disabled)
//12/04/2018		Ambuj Triapthi	Changes in seach API to send the variable-alias pair in Search API for OFME(Added new API, WFGetVarAliasMappingOnQueue)
//22/04/2018		Ambuj Tripathi	Bug 75613 - While changing authorization flag from 'Y' to 'N', list of users along with queue names should get displayed in case of pending requests - The actual output was not getting returned.
//30/04/2018        Kumar Kimil     Bug 77348 - Issue in case summary document.
//03/05/2018		Ambuj Tripathi	Bug 77303 - New Added task not getting reflecting in case visualization.
//19/05/2018		Ambuj Tripathi	PMWeb Requirement : When user clicks on GenerateCaseSummary Link after selecting the workitem on which GenerateCaseSummary permission flag is No, No Authorization error will be returned from WFGenerateCaseSummaryReport API
//03/07/2018		Ambuj Tripathi	Bug 78208 - NOLOCK is missing in WFSessionView, WFUserView and PSRegisterationTable
//11/07/2018		Ambuj Tripathi	[Bug 78939] Mobile(iOS):-Case summary document not generated. -- Changes are in previous commit.
//17/07/2018		Ambuj Tripathi	Bug 78929 - Case management:-Not able to see case visualization getting blank error screen. 
//20/08/2018		Ambuj Tripathi	Optimization changes for Bank Audi-(sending extra details in UploadWorkitem API, no call to GetWorkitemData Ext)
//28/08/2019		Ambuj Tripathi	Sharepoint related changes - inserting default property into systemproperties table.
//10/08/2018		Mohnish Chopra	Bug 79705 - iBPS 3.0 SP1+Oracle : Workitem history is not generating properly if there are multiple child workitems for that workitem (edit)
//01/10/2018  		Ambuj Tripathi		Changes related to sharepoint support
//21/11/2018		Ravi Ranjan		Bug 80130 - Case visualization showing incorrect if using gateways
//19/12/2018        Shubham Singla  Bug 82057 -�iBPS 3.0 SP1:When user is attempting to get the history of a workitem , user is getting the error as "The entitiy name must be followed by & in entity reference"
//08/03/2019		Mohnish Chopra	Internal Bug fixed- Long Integer value not getting parsed by XML parser because of OD version upgrade.
//08/03/2019		Mohnish Chopra	Bug 83485 - iBPS 4.0 : &amp; is coming instead of & in instructions of Case Summary document .
//16/04/2019        Shubham Singla  Bug 84195 - Ibps 4.0 : In Case visualization assignee resource name coming as undefined for each task.
//17/04/2019        Shubham Singla  Bug 83717 - Support is required to move/save external variables and complex variables data to Secondary cabinet based on some flag SecondaryDBFlag
//29/04/2019		Ambuj Tripathi	Bug 84390 - Error occuring while completing task
//20/06/2019        Shubham Singla  Changes for bug 79027
//09/09/2019		Ravi Ranjan Kumar	[Bug 86122] French Locale(iBPS 3.0 sp-2):-Data showing in English in Audit log window.
//10/09/2019		Ravi Ranjan Kumar[Bug 86050] French Locale(iBPS 3.0 sp-2):-History and property of Workitem is showing in English.
//25/10/2019		Ambuj Tripathi	Landing page (Criteria Management) Requirement.
//07/11/2019		Ravi Ranjan Kumar	Bug 87624 - Unable to Save Workitem properties .
//15/11/2019        Sourabh Tantuway Bug 88227 - iBPS 4.0 SP0 : Workitem history is not getting downloaded while clicking on save button. It is showing no history present even if API output is returning history.
//18/11/2019		Ambuj Tripathi		Internal Bug Fix - (Criteria Management) Adding LastModifiedOn for caching purpose at webend.
//19/11/1029		Ambuj Tripathi		Changes in WFGetVarMappingData API to send the orderBy column for Aliases defined over queue.
//19/11/2019		Ambuj Tripathi		Changes in GetVarMappingData API send the lastModifiedOn for catching the output of this API.
//20/11/2019		Ambuj Tripathi		Changes in WFSetReportCriteria API to correct the duplicate Criteria Name check logic.
//10/12/2019	Ravi Ranjan Kumar PRDP Bug Merging(Bug 87270 - Handling done to execute product API's even if API name in input xml has different case.)
//12/20/2019       Shubham  Singla     Bug 89064 - Issue is coming while saving workitem histroy of the workitem present in archival cabinet.
//20/12/2019	Ambuj Tripathi	Changes for DataExchange Functionality
//20/12/2019		Mohnish Chopra		Debug flag sent to setAttributesExt from WFUploadworkitem was always true . Hence, correcting the same.
//01/03/2019		Ambuj Tripathi		Changes for returning the rights string in Criteria List API.
//03/01/2020		Sourabh Tantuway    bug 89652 : iBPS 4.0 : Requirement for customString.properties file to be loaded from a folder , instead of jar file .
//07/01/2020		Ravi Ranjan Kumar	Bug 89660 - Unable to Initiate link sub process getting error "Invalid process instance id"
//13/01/2020	Ravi Ranjan Kumar	Bug 89950 - Support for Multilingual in Criteria Name, Filter Name and display Name
//27/01/2020	Ravi Ranjan Kumar	Bug 89872 - Unable to delete multiple objects getting Blank error message. 
//02/01/2020        Shubham Singla   Bug 89628 - when "Click here to see modified data" is clicked on workitem hiistory, then "No Data Found" message is getting displayed although values are present in WFAttributeMessageTable .
//02/01/2020        Shubham Singla   Bug 89615 - Adding "Document" Tag in output of WFUploadWorkItem call as it has been a gap between OF and iBPS API.
//03/01/2020        Shubham Singla   Bug 89666 - iBPS 4.0:Support to forcefully complete any workitem from WFCompleteWithSet.
//31/01/2020		Ambuj Tripathi	 Bug 90425 - Unable to create criteria getting error "The Requested filter is invalid".
//31/01/2020        Ravi Raj Mewara  Bug 89368 - Duplicate Event showing in My calendar
//04/02/2020        Ravi raj Mewara  Bug 88641 - Able to save the different process variable with the same name in Case Detail Configuration and Configure case information variable in application variable
//05/02/2020		Shahzad Malik	 Bug 90535 - Product query optimization
//11/02/2020		Ambuj Tripathi	 Bug 90425 - Unable to create criteria getting error "The Requested filter is invalid".
//06/04/2020        Ravi Ranjan Kumar PRDP Bug Merging Bug 87085 - Handling for new Admin action id 508,509,510 in Audit log report
//14/04/2020		Ravi Ranjan Kumar	Bug 91656 - Batching not getting enable for user tab in Audit Log and description showing NULL.
//20/04/2020		Ambuj Tripathi		[Bug 91749] Queue Authorization : Comments not displayed when approve or reject a new/modified queue
//20/04/2020		Ambuj Tripathi		Bug 91830 - Comment value is being displayed null on Configuration window.
//08/06/2020		Mohnish Chopra		Unlock action id added in WFComlpeteWithSet for Omniapp participant report.
//09/07/2020		Mohnish Chopra		Bug 93231 - Validation required in WMAssignWorkItemAttributes API
//22/07/2020	Ravi Ranjan Kumar	Bug 93516 - Arabic : Process name not displayed in WI properties; instead question marks are displayed
//04/08/2020        Sourabh Tantuway   Bug 93910 - iBPS 4.0 : Workitem history is not coming correctly for actionId 16
//24/08/2020        Sourabh Tantuway  Bug 94275 - iBPS 4.0: After upgrade from OF to iBPS, workitem history of omniflow workitems is not showing properly for action Id 16. Also not able to download WI history for some cases(Action description tag is empty for action id 16)
//14/09/2020        Ravi Raj Mewara   Bug 94544 - iBPS 4.0 SP1 +SQL : External attribute's values more than 4000 in length is not getting distributes to different variables in WFUploadWorkitem procedure 
//23/09/2020		Ravi Ranjan Kumar	Bug 94682 - UI issue in Audit logs window.
//12/01/2021        chitranshi nitharia    Added changes for upload error handling.
//22/01/2021      Satyanarayan Sharma     Handling of new actionId for Purging workitem in process.
//04/02/2021  Ravi Raj Mewara   Bug 97673 - iBPS 5.0 SP1 : Support to filter the data in criteria management as per the user logged in.
//11/02/2021      Satyanarayan Sharma     To handle special character � 
//18/02/2021    Shubham Singla  Bug 98176 - iBPS 5.0 SP1:-Workitem history is not coming correctly for exceptions.
//11/05/2021    Ravi Raj Mewara  Bug 98602 - iBPS 5.0 SP1 Patch 3 Language Pack (German) : Event created and assigned to a user not visible for that user
//23/07/2021    Sourabh Tantuway Bug 100417 - iBPS 5.0 SP1: workitem history is not getting downloaded for some workitems which are migrated from omniflow to iBPS
//01/09/2021 Satyanarayan Sharma   Bug 100973 - iBPS5.0SP2-When prefix is null in workitem name then hyphen Required in processInstanceId or not.
//01/09/2021    Ravi Raj Mewara  Bug 100974 - iBPS 5.0 SP2 : Code changes to return AliasRule in WFGetVarMappingData API for Color coding support
//25/08/2021  Satyanarayan Sharma Bug 100869 - iBPS4.0SP1-Arabic name doc coming as ??? in wfuploadworkitem.
//25/08/2021  Satyanarayan Sharma Bug 100869 - iBPS4.0SP1-Arabic name doc coming as ??? in wfuploadworkitem.
//24/03/2022 	Rishabh Jain 		Support of addition of documentype in the registered process
//24/09/2022	    Shubham Srivastava   Bug 115112 - Unable to see added queue in Queue management.(Changes to provide the rights to queue maker and checker while maker checker is enabled)
//05/03/2023	    Shubham Srivastava  Bug 127903 - Support to hide Mail details of the Recipient in WorkitemAudit,when mail triggers.
//09/05/2023		Aqsa Hashmi			Bug128097 - Gaps in wfcompletewithset for rights on queueid for particular WI

//-----------------------------------------------------------------------------------------------------------------

package com.newgen.omni.jts.txn.wapi;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.net.URLClassLoader;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.sql.Types;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.ResourceBundle;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.apache.commons.collections.map.MultiValueMap;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.StringEscapeUtils;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.itextpdf.text.pdf.PdfReader;
import com.newgen.omni.jts.cache.CachedActionObject;
import com.newgen.omni.jts.cache.CachedObjectCollection;
import com.newgen.omni.jts.cmgr.XMLGenerator;
import com.newgen.omni.jts.cmgr.XMLParser;
import com.newgen.omni.jts.constt.JTSConstant;
import com.newgen.omni.jts.constt.WFSConstant;
import com.newgen.omni.jts.dataObject.WFAdminLogValue;
import com.newgen.omni.jts.dataObject.WFCalAssocData;
import com.newgen.omni.jts.dataObject.WFDuration;
import com.newgen.omni.jts.dataObject.WFFieldInfo;
import com.newgen.omni.jts.dataObject.WFReportInfo;
import com.newgen.omni.jts.dataObject.WFUserInfo;
import com.newgen.omni.jts.dataObject.WFVariabledef;
import com.newgen.omni.jts.excp.JTSDBError;
import com.newgen.omni.jts.excp.JTSException;
import com.newgen.omni.jts.excp.JTSSQLError;
import com.newgen.omni.jts.excp.WFSError;
import com.newgen.omni.jts.excp.WFSErrorMsg;
import com.newgen.omni.jts.excp.WFSException;
import com.newgen.omni.jts.security.EncodeImage;
import com.newgen.omni.jts.srvr.DatabaseTransactionServer;
import com.newgen.omni.jts.srvr.ServerProperty;
import com.newgen.omni.jts.srvr.WFFindClass; //WFS_7.1_006
import com.newgen.omni.jts.srvr.WFServerProperty;
import com.newgen.omni.jts.txn.wapi.common.WfsStrings;
import com.newgen.omni.jts.util.VariableClass;
import com.newgen.omni.jts.util.WFCaseDataVariableMap;
import com.newgen.omni.jts.util.WFRoutingUtil;
import com.newgen.omni.jts.util.WFSUtil;
import com.newgen.omni.jts.util.WFTMSUtil;
import com.newgen.omni.jts.util.WFWebServiceBuilder;
import com.newgen.omni.jts.util.WFXMLUtil;
import com.newgen.omni.jts.util.WorkerThread;
import com.newgen.omni.jts.util.dx.WFDataExchangeActivity;
import com.newgen.omni.jts.util.dx.WFWorkitem;
import com.newgen.omni.jts.util.json.JSONObject;
import com.newgen.omni.util.cal.WFCalUtil;
import com.newgen.omni.wf.casedoc.CaseSummaryDocument;
import com.newgen.omni.wf.util.SPISDocumentTxn;
import com.newgen.omni.wf.util.app.NGEjbClient;
import com.newgen.omni.wf.util.data.Location;
//import com.newgen.omni.wf.util.app.res.ResourceBundles;
import com.newgen.omni.wf.util.misc.Utility; //WFS_7.1_006
import com.newgen.omni.wf.util.misc.WFConfigLocator;
import com.newgen.omni.wf.util.misc.WFUtility;
import com.newgen.omni.wf.util.xml.WFXmlList;
import com.newgen.omni.wf.util.xml.api.CreateXML;
import com.newgen.omni.wf.util.xml.exception.WFException;
import com.newgen.omni.wf.wfdms.WFDMSImpl;

public class WMMiscellaneous extends com.newgen.omni.jts.txn.NGOServerInterface implements Serializable {
//----------------------------------------------------------------------------------------------------
//	Function Name				:	execute
//	Date Written (DD/MM/YYYY)	:	18/06/2002
//	Author						:	Advid
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:   none
//	Return Values				:	String
//	Description					:   Reads the Option from the input XML and invokes the
//									    Appropriate function .
//----------------------------------------------------------------------------------------------------
    public String execute(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
        String option = parser.getValueOf("Option", "", false);
        String outputXml = null;
        if (("WFGetWorkItemHistory").equalsIgnoreCase(option)) {
        	outputXml = WFGetWorkItemHistoryNew(con, parser, gen);
        } else if (("WFGetQueueLoadHistory").equalsIgnoreCase(option)) {
            outputXml = WFGetQueueLoadHistory(con, parser, gen);
        } else if (("WFGetProcessLoadHistory").equalsIgnoreCase(option)) {
            outputXml = WFGetProcessLoadHistory(con, parser, gen);
        } else if (("WFGetWorkAuditHistory").equalsIgnoreCase(option)) {
            outputXml = WFGetWorkAuditHistory(con, parser, gen);
        } else if (("WFGetIdforName").equalsIgnoreCase(option)) {
            outputXml = WFGetIdforName(con, parser, gen);
        } else if (("WFParticipantReport").equalsIgnoreCase(option)) {
            outputXml = WFParticipantReport(con, parser, gen);
        } else if (("WFProcessingtimeReport").equalsIgnoreCase(option)) {
            outputXml = WFProcessingtimeReport(con, parser, gen);
        } else if (("WFUploadWorkItem").equalsIgnoreCase(option)) {
            outputXml = WFUploadWorkItem(con, parser, gen);
        } else if (("WFCompleteWithSet").equalsIgnoreCase(option)) {
            outputXml = WFCompleteWithSet(con, parser, gen);
        } else if (("WFGetHistory").equalsIgnoreCase(option)) {
        	outputXml = WFFetchHistory(con, parser, gen);
        } else if (("WFGetActionList").equalsIgnoreCase(option)) {
            outputXml = WFGetActionList(con, parser, gen);
        } else if (("WFSetActionList").equalsIgnoreCase(option)) {
            outputXml = WFSetActionList(con, parser, gen);
        } else if (("WFFetchProcessDefinition").equalsIgnoreCase(option)) {
            outputXml = WFFetchProcessDefinition(con, parser, gen);
        } else if (("WFGetAuthorizationList").equalsIgnoreCase(option)) { // Bugzilla Bug 2774
            outputXml = WFGetAuthorizationList(con, parser, gen);
        } else if (("WFCompleteAuthorization").equalsIgnoreCase(option)) { // Bugzilla Bug 2774
            outputXml = WFCompleteAuthorization(con, parser, gen);
        } else if (("WFCreateWebservicesExt").equalsIgnoreCase(option)) { 
            outputXml = WFCreateWebservicesExt(con, parser, gen);
        } else if (("WFUpdateRoutingInfo").equalsIgnoreCase(option)) {  //WFS_7.1_006
            //outputXml = WFUpdateRoutingInfo(con, parser, gen);
        } else if (("WFGetServerTimeZone").equalsIgnoreCase(option)) {  
            //outputXml = WFGetServerTimeZone(con, parser, gen);
		} else if(("WFSetExportCabinetInfo").equals(option)) { //WFS_8.0_055
			outputXml = WFSetExportCabinetInfo(con, parser, gen); 
        } else if(("WFGetExportCabinetInfo").equalsIgnoreCase(option)) { //WFS_8.0_055
			//outputXml = WFGetExportCabinetInfo(con, parser, gen);
		} else if(("WFCheckPurgeUserSession").equalsIgnoreCase(option)) { //WFS_8.0_055
			//outputXml = WFCheckPurgeUserSession(con, parser, gen);
		} else if(("WFSetSourceCabinetInfo").equalsIgnoreCase(option)) { //WFS_8.0_055
			outputXml = WFSetSourceCabinetInfo(con, parser, gen);
		} else if(("WFGetSourceCabinetInfo").equalsIgnoreCase(option)) { //WFS_8.0_055
			//outputXml = WFGetSourceCabinetInfo(con, parser, gen); 
        } else if(("WFGetFragmentInfo").equalsIgnoreCase(option)) { //WFS_8.0_084
			outputXml = WFGetFragmentInfo(con, parser, gen);
        }  else if (("WFUpdateMailTrigger").equalsIgnoreCase(option)) {
            outputXml = WFUpdateMailTrigger(con, parser, gen);
        } else if (("WFUpdateTemplateDefinition").equalsIgnoreCase(option)) {
            outputXml = WFUpdateTemplateDefinition(con, parser, gen);
        } else if (("WFGetWSDLList").equalsIgnoreCase(option)) {
            outputXml = WFGetWSDLList(con, parser, gen);
        } else if (("WFSetWSDLInfo").equalsIgnoreCase(option)) {
            outputXml = WFSetWSDLInfo(con, parser, gen);
        } else if (("WFSetLogLevel").equalsIgnoreCase(option)) {
            outputXml = WFSetLogLevel(con,parser, gen);
		} else if(("WFAddToSMSQueue").equalsIgnoreCase(option)) {
            outputXml = WFAddToSMSQueue(con, parser, gen);
        } else if(("WFGetSMSQueueItem").equalsIgnoreCase(option)) {
            outputXml = WFGetSMSQueueItem(con, parser, gen);
        } else if(("WFSMSQueueItemUpdateStatus").equalsIgnoreCase(option)) {
            outputXml = WFSMSQueueItemUpdateStatus(con, parser, gen);            
		}else if(("WFGetAttributeMessage").equalsIgnoreCase(option)) {
            outputXml = WFGetAttributeMessage(con, parser, gen);            
		}else if(("WFSetSystemProperties").equalsIgnoreCase(option)) {
            outputXml = WFSetSystemProperties(con, parser, gen);            
		}else if(("WFGetSystemProperties").equalsIgnoreCase(option)) {
            outputXml = WFGetSystemProperties(con, parser, gen);            
		}else if(("WFGetObjectProperty").equalsIgnoreCase(option)) {
            outputXml = WFGetObjectProperty(con, parser, gen);
		}else if(("WFSetObjectProperty").equalsIgnoreCase(option)) {
            outputXml = WFSetObjectProperty(con, parser, gen);
		}else if(("WFGetTaskHistory").equalsIgnoreCase(option)) {
            outputXml = WFGetTaskHistory(con, parser, gen);
		}else if(("WFHandleEvent").equalsIgnoreCase(option)) {
            outputXml = WFHandleEventFunc(con, parser, gen);
		}else if (("WFGetMonthEvents").equalsIgnoreCase(option)) {
			outputXml = GetMonthEventsFunc(con, parser, gen);
        }else if (("WFDeleteWorkitemHistory").equalsIgnoreCase(option)) {
        	//outputXml = WFDeleteWorkitemHistoryNew(con, parser, gen);
		}else if (("WFGetHoldEvents").equalsIgnoreCase(option)) {
			outputXml = WFGetHoldEvents (con, parser, gen);
        }else if (("WFGetCaseDataVariableMapping").equalsIgnoreCase(option)) {
			outputXml = WFGetCaseDataVariableMapping(con, parser, gen);
        }else if (("WFSetCaseDataVariableMapping").equalsIgnoreCase(option)) {
			outputXml = WFSetCaseDataVariableMapping(con, parser, gen);
        }else if (("WFGetCaseSummaryReport").equalsIgnoreCase(option)) {
			outputXml = WFGetCaseSummaryReport(con, parser, gen);
        }else if (("WFGetCaseInfoVariables").equalsIgnoreCase(option)) {
			outputXml = WFGetCaseInfoVariables(con, parser, gen);
        }else if (("WFSetCaseInfoVariables").equalsIgnoreCase(option)) {
			outputXml = WFSetCaseInfoVariables(con, parser, gen);
        }else if (("WFSetCaseDocumentStatus").equalsIgnoreCase(option)) {
			outputXml = WFSetCaseDocumentStatus(con, parser, gen);
        }else if (("WFChangeTaskProperty").equalsIgnoreCase(option)) {
			outputXml = WFChangeTaskProperty(con, parser, gen);
        }else if (("WFGenerateCaseSummaryReport").equalsIgnoreCase(option)) {
			outputXml = WFGenerateCaseSummaryReport(con, parser, gen);
        }else if (("WFSetTaskUserGroup").equalsIgnoreCase(option)) {
			outputXml = WFSetTaskUserGroup(con, parser, gen);
        }else if (("WFGetTaskUserGroup").equalsIgnoreCase(option)) {
			outputXml = WFGetTaskUserGroup(con, parser, gen);
        }else if (("WFSetCasePreferences").equalsIgnoreCase(option)) {
			outputXml = WFSetCasePreferences(con, parser, gen);
        }else if (("WFGetCasePreferences").equalsIgnoreCase(option)) {
			outputXml = WFGetCasePreferences(con, parser, gen);
        }else if(("WFCaseSummaryQueueItemFail").equalsIgnoreCase(option)) {
			outputXml = WFCaseSummaryQueueItemFail(con, parser, gen);
        }else if(("WFCaseSummaryQueueItemSuccess").equalsIgnoreCase(option)) {
			outputXml = WFCaseSummaryQueueItemSuccess(con, parser, gen);
        }else if(("WFChangeActivityName").equalsIgnoreCase(option)){
        	outputXml=WFChangeActivityName(con,parser,gen);
        }else if(("WFCheckRestAssociation").equalsIgnoreCase(option)){
        	outputXml=WFCheckRestAssociation(con,parser,gen);
        }else if(("WFGetVarAliasMappingOnQueue").equalsIgnoreCase(option)){
        	outputXml=WFGetVarAliasMappingOnQueue(con,parser,gen);
        }else if(("WFChangeWorkItemDBStatus").equalsIgnoreCase(option)){
        	outputXml=WFChangeWorkItemDBStatus(con,parser,gen);
        }else if(("WFSetReportCriteria").equalsIgnoreCase(option)){
			outputXml=WFSetReportCriteria(con,parser,gen);
		}else if(("WFGetReportCriteria").equalsIgnoreCase(option)){
			outputXml=WFGetReportCriteria(con,parser,gen);
		}else if(("WFGetReportCriteriaList").equalsIgnoreCase(option)){
			outputXml=WFGetReportCriteriaList(con,parser,gen);
		}else if(("WFGetVarMappingData").equalsIgnoreCase(option)){
			outputXml=WFGetVarMappingData(con,parser,gen);
		}else if(("WFSetVarMappingData").equalsIgnoreCase(option)){
			outputXml=WFSetVarMappingData(con,parser,gen);
		}else if(("WFExecuteDataExchange").equals(option)){
			outputXml=WFExecuteDataExchange(con,parser,gen);
		}else {
            outputXml = gen.writeError("WMMiscellaneous", WFSError.WF_INVALID_OPERATION_SPECIFICATION, 0, WFSErrorMsg.getMessage(WFSError.WF_INVALID_OPERATION_SPECIFICATION), null, WFSError.WF_TMP);
        }
        return outputXml;
    }
   
//----------------------------------------------------------------------------------------------------
//	Function Name 				:	WFChangeWorkItemDBStatus
//	Date Written (DD/MM/YYYY)	:	18/04/19
//	Author						:	Shubham Singla
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:   none
//	Return Values				:	String
//	Description					:   Updates SecondaryDBFlag in WFINSTRUMENTTABLE
//----------------------------------------------------------------------------------------------------   

public String WFChangeWorkItemDBStatus (Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
    	PreparedStatement pstmt = null;
    	StringBuilder outputXML = new StringBuilder();
    	int mainCode = 0;
    	int subCode = 0;
    	String subject = null;
    	String descr = null;
    	String errType = WFSError.WF_TMP;
    	String engine = parser.getValueOf("EngineName");
		String option = parser.getValueOf("Option", "", false);
    	String processInstanceList = "";
    	int noOfWorkItems = 0;
    	String secondaryDBFlag=null;
    	int rowsAffected=0; 
    	try {
    		int sessionID = parser.getIntOf("SessionId", 0, false);
    		int dbType = ServerProperty.getReference().getDBType(engine);
    		int counter=0;
    		WFParticipant user = WFSUtil.WFCheckSession(con, sessionID); 
    		processInstanceList = parser.getValueOf("ProcessInstanceList", "N", false);	
    		if (user != null) {
    			int userId=user.getid();
    			if(!processInstanceList.equals("")){
    				noOfWorkItems = parser.getNoOfFields("ProcessInstanceId");
    			}
    			if (con.getAutoCommit()) {
    				con.setAutoCommit(false);
    			}
    			secondaryDBFlag=parser.getValueOf("SecondaryDBFlag","",false);
    			if(!secondaryDBFlag.equalsIgnoreCase("U") && !secondaryDBFlag.equalsIgnoreCase("D"))
    			{
    				mainCode = WFSError.WF_OPERATION_FAILED;
    	    		subCode = WFSError.WFS_ILP;
    	    		subject = WFSErrorMsg.getMessage(mainCode);
    	    		errType = WFSError.WF_TMP;
    	    		descr =  WFSErrorMsg.getMessage(subCode);
    	    		String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
    	    		return	errorString ;    				
    			}
    			String query="Update WFInstrumentTable Set SecondaryDBFlag = ? where ProcessInstanceID = ?";
    			pstmt = con.prepareStatement(query);
    			while(noOfWorkItems>0){
    				String pId=null;
    				if(counter==0)
    				{
    					pId=parser.getFirstValueOf("ProcessInstanceId");
    					counter++;
    				}
    				else{
    					pId=parser.getNextValueOf("ProcessInstanceId");
    				}
    				WFSUtil.DB_SetString(1, secondaryDBFlag, pstmt, dbType);
    				WFSUtil.DB_SetString(2, pId, pstmt, dbType);
    				pstmt.addBatch();
    				noOfWorkItems--;
    				WFSUtil.generateLog(engine, con, WFSConstant.WFL_SetSecondaryDBFlag, pId, 0, 
							0, 0, null, 0, userId, user.getname(), 0, secondaryDBFlag, null, null, null, null);
				
    				
    			}
    			int []count=pstmt.executeBatch();	
    			for(int i=0;i<count.length;i++)
    			{
    				rowsAffected+=count[i];
    			}
    			if (pstmt != null) {
    				pstmt.close();
    				pstmt = null;
    			} 
    		}
    		else {
    			mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
    			subCode = 0;
    			subject = WFSErrorMsg.getMessage(mainCode);
    			descr = WFSErrorMsg.getMessage(subCode);
    			errType = WFSError.WF_TMP;
    		}
    		if (mainCode == 0) {

    			if (!con.getAutoCommit()) {
    				con.commit();
    				con.setAutoCommit(true);
    			}
    			
    			outputXML.append(gen.createOutputFile("WFChangeWorkItemDBStatus"));
				outputXML.append(gen.writeValueOf("Count", Integer.toString(rowsAffected)));
    			outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
    			outputXML.append(gen.closeOutputFile("WFChangeWorkItemDBStatus"));
    		}

    				
    	}
    	catch (SQLException e) {
    		WFSUtil.printErr(engine,"", e);
    		mainCode = WFSError.WM_INVALID_FILTER;
    		subCode = WFSError.WFS_SQL;
    		subject = WFSErrorMsg.getMessage(mainCode);
    		errType = WFSError.WF_FAT;
    		if (e.getErrorCode() == 0)
    			if (e.getSQLState().equalsIgnoreCase("08S01"))
    				descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
    			else
    				descr = e.getMessage();
    	} catch (NumberFormatException e) {
    		WFSUtil.printErr(engine,"", e);
    		mainCode = WFSError.WF_OPERATION_FAILED;
    		subCode = WFSError.WFS_ILP;
    		subject = WFSErrorMsg.getMessage(mainCode);
    		errType = WFSError.WF_TMP;
    		descr = e.toString();
    	} catch (NullPointerException e) {
    		WFSUtil.printErr(engine,"", e);
    		mainCode = WFSError.WF_OPERATION_FAILED;
    		subCode = WFSError.WFS_SYS;
    		subject = WFSErrorMsg.getMessage(mainCode);
    		errType = WFSError.WF_TMP;
    		descr = e.toString();
    	} catch (WFSException e) {
    		mainCode = WFSError.WM_NO_MORE_DATA;
    		subCode = 0;
    		subject = WFSErrorMsg.getMessage(mainCode);
    		descr = WFSErrorMsg.getMessage(subCode);
    		errType = WFSError.WF_TMP;
    	} catch (JTSException e) {
    		WFSUtil.printErr(engine,"", e);
    		mainCode = WFSError.WF_OPERATION_FAILED;
    		subCode = e.getErrorCode();
    		subject = WFSErrorMsg.getMessage(mainCode);
    		errType = WFSError.WF_TMP;
    		descr = e.getMessage();
    	} catch (Exception e) {
    		WFSUtil.printErr(engine,"", e);
    		mainCode = WFSError.WF_OPERATION_FAILED;
    		subCode = WFSError.WFS_EXP;
    		subject = WFSErrorMsg.getMessage(mainCode);
    		errType = WFSError.WF_TMP;
    		descr = e.toString();
    	}  finally {
    		try {
    			if (!con.getAutoCommit()) {
    				con.rollback();
    				con.setAutoCommit(true);
    			}
    		} catch (SQLException e1) {
    			// TODO Auto-generated catch block
    		}
    		try {
    			if (pstmt != null) {
    				pstmt.close();
    				pstmt = null;
    			}
    		} catch (Exception e) {}
    		
    	}
    	if (mainCode != 0) {

			String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
			outputXML.append(errorString);
		}
    	return outputXML.toString();
  }     

//----------------------------------------------------------------------------------------------------
//	Function Name 				:	WFGetAttributeMessage
//	Date Written (DD/MM/YYYY)	:	11/12/13
//	Author						:	Sajid Khan
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:   none
//	Return Values				:	String
//	Description					:   Gets the Message for Attirbutes that has been set on a ProcessInstance.
//----------------------------------------------------------------------------------------------------
public String WFGetAttributeMessage(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
		String engine = parser.getValueOf("EngineName", "", false);
		String fieldId = parser.getValueOf("FieldId", "", false);
		long messageId = Long.parseLong(fieldId);
		int dbType = ServerProperty.getReference().getDBType(engine);
        
		StringBuffer outputXML = null;
        PreparedStatement pstmt = null;
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
		ResultSet rs = null;
		int sessionID = parser.getIntOf("SessionId", 0, false);
		StringBuffer tempXML = new StringBuffer();
		String attrMessage = null;
		 String targetCabinetName="";
	        String strOption=null;
	        Connection tarConn=null;
	        Connection finalConn=null;
		try{
			Object[] result = null;
			WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
            if (participant != null) {
			if (con.getAutoCommit()) {
                con.setAutoCommit(false);
						}
			String targetCabinetNameForAudit = WFSUtil.getTargetCabinetName(con);
		     Boolean tarHistoryLog = WFSUtil.checkIfHistoryLoggingOnTarget(targetCabinetNameForAudit);
			String ArchiveSearch= parser.getValueOf("ArchiveSearch","N",true);
            if((ArchiveSearch!=null && ArchiveSearch.equalsIgnoreCase("Y"))|| (tarHistoryLog)) {
               strOption=parser.getValueOf("Option");
               pstmt=con.prepareStatement("Select PropertyValue from WFSYSTEMPROPERTIESTABLE where PropertyKey = ?");
               pstmt.setString(1,"ARCHIVALCABINETNAME");
               rs= pstmt.executeQuery();
               if(rs.next()){
               	targetCabinetName=WFSUtil.getFormattedString(rs.getString("PropertyValue"))	;
               }
               else{

                   mainCode = WFSError.WF_ARCHIVAL_CABINET_NOT_SET;
                   subCode = 0;
                   subject = WFSErrorMsg.getMessage(mainCode);
                   descr = WFSErrorMsg.getMessage(subCode);
                   errType = WFSError.WF_TMP;
   			
               	//throw new WFSException(mainCode, subCode, errType, subject, descr);
   				String errorString = WFSUtil.generalError(strOption, engine, gen,mainCode, subCode,errType, subject,descr);
   				return errorString;
               	
               }
               if(rs!=null){
               	rs.close();
               	rs=null;
               }
               if(pstmt!=null){
               	pstmt.close();
               	pstmt=null;
               }
               tarConn=WFSUtil.createConnectionToTargetCabinet(targetCabinetName,strOption,engine);
               if(tarConn!=null)
               WFSUtil.printOut(engine,"Connection with Target Cabinet "+targetCabinetName+" is established.");
		 }
            if((ArchiveSearch!=null && ArchiveSearch.equalsIgnoreCase("Y"))|| (tarHistoryLog)) {
           	 finalConn= tarConn;
            }
            else{
           	 finalConn=con;
            }
            if (finalConn.getAutoCommit()) {
            	finalConn.setAutoCommit(false);
						}
			pstmt = finalConn.prepareStatement("Select Message from WFAttributeMessageTable " + WFSUtil.getTableLockHintStr(dbType) + "  Where MessageId = ?");
			pstmt.setLong(1, messageId);
			pstmt.execute();
            rs = pstmt.getResultSet();
			if (rs.next()) {
                    result = WFSUtil.getBIGData(finalConn, rs, "Message", dbType, DatabaseTransactionServer.charSet);
					attrMessage = WFSUtil.handleSpecialCharInJson((String)result[0]);
					WFSUtil.printOut(engine,"Result>>attrMessage>>WFGetAttributeMessage API>>>>"+attrMessage);
					tempXML.append(gen.writeValueOf("Message", attrMessage));
					WFSUtil.printOut(engine,"Message Value >>>>WFGetAttributeMessage API>>>>"+tempXML.toString());
             }else{
            	 
            	 pstmt = finalConn.prepareStatement("Select Message from WFAttributeMessageHistoryTable " + WFSUtil.getTableLockHintStr(dbType) + "  Where MessageId = ?");
     			pstmt.setLong(1, messageId);
     			pstmt.execute();
                 rs = pstmt.getResultSet();
     			if (rs.next()) {
                         result = WFSUtil.getBIGData(finalConn, rs, "Message", dbType, DatabaseTransactionServer.charSet);
     					attrMessage = WFSUtil.handleSpecialCharInJson((String)result[0]);
     					WFSUtil.printOut(engine,"Result>>attrMessage>>WFGetAttributeMessage API>>>>"+attrMessage);
     					tempXML.append(gen.writeValueOf("Message", attrMessage));
     					WFSUtil.printOut(engine,"Message Value >>>>WFGetAttributeMessage API>>>>"+tempXML.toString());
                  }else{
                 	 
     			        mainCode = WFSError.WM_NO_MORE_DATA;
                         subCode = 0;
                         subject = WFSErrorMsg.getMessage(mainCode);
                         descr = WFSErrorMsg.getMessage(subCode);
                         errType = WFSError.WF_TMP;
                  
     			 }
             
			 }
			 }else{
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            } if(mainCode == 0){
                outputXML = new StringBuffer();
                outputXML.append(gen.createOutputFile("WFGetAttributeMessage"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append(tempXML);
                outputXML.append(gen.closeOutputFile("WFGetAttributeMessage"));
            }
               
			
		}catch (SQLException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Exception e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
            try {
                if (!con.getAutoCommit()) {
                    con.setAutoCommit(true);
                }
                if (!finalConn.getAutoCommit()) {
                	finalConn.setAutoCommit(true);
                }
                
            } catch (SQLException sqle) {
            }
            try {
                if (rs != null) {
                    rs.close();
                    rs = null;
                }
            } catch (SQLException sqle) {
            }
            try {
                if (pstmt != null) {
                    pstmt.close();
                    pstmt = null;
                }
                if(tarConn!=null){
                tarConn.close();
                tarConn=null;
                finalConn=null;
                }
            } catch (Exception e) {
            }
           
        }
        if (mainCode != 0) {
            WFSUtil.printOut(engine,gen.writeError("WFGetAttributeMessage", mainCode, subCode, errType,
                    WFSErrorMsg.getMessage(mainCode), descr));
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();

	}

    public String WFGetWorkItemHistoryNew(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
        StringBuffer outputXML = new StringBuffer("");
        PreparedStatement pstmt = null;
        PreparedStatement pstmt1 = null; 
        int mainCode = 0;
        int subCode = 0;
        String subject = null; 
        String descr = null;
        String errType = WFSError.WF_TMP;
        ResultSet rs = null;
        ResultSet rs1 = null;
        String engine ="";
		char char21 = 21;
		String string21 = "" + char21;
		String locale = "";
        String dateFormat = "";
        Locale loc = null;
        String actionText = null;
        String targetCabinetName="";
        String strOption=null;
        Connection tarConn=null;
        Connection finalConn=null;
		Boolean isActionTextValid=true;
		String targetCabinetNameForAudit = null;
        try {
            int sessionID = parser.getIntOf("SessionId", 0, false);
			WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
            locale = getLocale(user);
            engine = parser.getValueOf("EngineName");
            int dbType = ServerProperty.getReference().getDBType(engine);
            String procInstID = parser.getValueOf("ProcessInstanceId", "", false);
            String lastvalue = parser.getValueOf("LastValue", "", true);
            String historyType = parser.getValueOf("HistoryType", "H", true);
            char sortOrder = parser.getCharOf("SortOrder", 'A', true);
            int noofrecords = parser.getIntOf("NoOfRecordsToFetch", ServerProperty.getReference().getBatchSize(), true);
            if (noofrecords > ServerProperty.getReference().getBatchSize() || noofrecords <= 0) //Added by Ahsan Javed for getBatchSize
                noofrecords = ServerProperty.getReference().getBatchSize();
            String logId = parser.getValueOf("LogId", "0", true);
            String detailAuditTrail = parser.getValueOf("DetailAuditTrail","N",true);
			String scope = "";
			String enableMultiLingual = parser.getValueOf("EnableMultiLingual", "N", true);
			boolean escapeSpecialChar = parser.getValueOf("EscapeSpecialChar", "N", true).equalsIgnoreCase("Y");		
			boolean userHistory = parser.getValueOf("HistoryOption", "", true).equalsIgnoreCase("U");
		    String urnFlag = parser.getValueOf("URNFlag", "N", true);
		    boolean TATOnly = (parser.getValueOf("TATOnly", "N", true)).equalsIgnoreCase("Y"); //SHUBHAM
             /*  New tags added to XML : 
                                        <ActivityId></ActivityId>
                                        <ActivityName></ActivityName>
                                        <RoutingActionsOnly></RoutingActionsOnly>
                                        <ActionIds>
                                            <ActionId></ActionId>
                                            <ActionId></ActionId>
                                            <ActionId></ActionId>
                                        </ActionIds>
            */
//            String processDefId = parser.getValueOf("ProcessDefId", "", true);
            String activityId = parser.getValueOf("ActivityId", "", true);
            String activityName = parser.getValueOf("ActivityName", "", true);
            String actionIdXML = parser.getValueOf("ActionIds", "", true);
            String routeFlag = parser.getValueOf("RoutingActionsOnly", "N", true);
            String routeFlagFilter = routeFlag.equalsIgnoreCase("Y") ? " and ActionId in (4, 7) " : "";
            
            StringBuffer activityFilter = new StringBuffer();
            StringBuffer actionIdFilter = new StringBuffer();
            XMLParser parser1 = new XMLParser();
            if(!routeFlag.equalsIgnoreCase("Y")) {
                //  Generating Action Id filter.
                parser1.setInputXML(actionIdXML);
                int actionIdCount = parser1.getNoOfFields("ActionId");
                
                ArrayList actionIdFilterList = new ArrayList();
                String actionIdStr = "";
                
                actionIdStr = parser1.getFirstValueOf("ActionId");
                if(!actionIdStr.trim().equals(""))
                    actionIdFilterList.add(actionIdStr);
                    
                for(int iCount = 2; iCount <= actionIdCount; iCount++){
                    actionIdStr = parser1.getNextValueOf("ActionId");
                    if(!(actionIdStr.trim().equals("")))
                        actionIdFilterList.add(actionIdStr);
                }

                Iterator it = actionIdFilterList.iterator();
                if(it.hasNext()){
                    actionIdFilter.append(" and ActionId in (");
                    actionIdFilter.append((String)it.next());
                    while(it.hasNext()) {
                        actionIdFilter.append(", ");
                        actionIdFilter.append((String)it.next());
                    }
                    actionIdFilter.append(") ");
                }
                
                actionIdFilterList = null;
                it = null;
            }
            //  Parsing activityName for Activity filter.
            if(!activityId.equals(""))
                activityFilter.append(" and ActivityId = " + WFSUtil.TO_STRING(activityId, true, dbType));
            else if(!activityName.equals(""))
                activityFilter.append(" and ActivityName = " + WFSUtil.TO_STRING(activityName, true, dbType));
            
            WFSUtil.printOut(engine,"[WFGetWorkItemHistoryNew] actionIdFilter : " + actionIdFilter);
            WFSUtil.printOut(engine,"[WFGetWorkItemHistoryNew] activityFilter : " + activityFilter);
            WFSUtil.printOut(engine,"[WFGetWorkItemHistoryNew] routeFlagFilter : " + routeFlagFilter);
            
			String lastvalueStr = "";
            String srtby = "";
            StringBuffer tempXml = new StringBuffer(100);
            StringBuffer duptempXml = new StringBuffer("");
            String returnActionDescription = parser.getValueOf("ActionDescription","N",true);           
            switch (sortOrder) {
                case 'A':
                    if (!lastvalue.equals("")) {
                        lastvalueStr = " and (actiondatetime > " + WFSUtil.TO_DATE(lastvalue, true, dbType) + " OR ( actiondatetime = " + WFSUtil.TO_DATE(lastvalue, true, dbType) + " And LogId > " + logId + " ) ) ";
                    }
                    srtby = " ASC";
                    break;
                case 'D':
                    if (!lastvalue.equals("")) {
                        lastvalueStr = " and (actiondatetime < " + WFSUtil.TO_DATE(lastvalue, true, dbType) + " OR ( actiondatetime = " + WFSUtil.TO_DATE(lastvalue, true, dbType) + " And LogId < " + logId + " ) ) ";
                    }
                    srtby = " DESC";
                    break;
            }
            targetCabinetNameForAudit = WFSUtil.getTargetCabinetName(con);
			WFSUtil.printOut(engine,"Target Cabinet Name : " + targetCabinetNameForAudit);
			Boolean tarHistoryLog = WFSUtil.checkIfHistoryLoggingOnTarget(targetCabinetNameForAudit);
            WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
            if (participant != null) {
            	 String ArchiveSearch= parser.getValueOf("ArchiveSearch","N",true);
                 if(ArchiveSearch!=null && ArchiveSearch.equalsIgnoreCase("Y")) {
	                strOption=parser.getValueOf("Option");
	                pstmt=con.prepareStatement("Select PropertyValue from WFSYSTEMPROPERTIESTABLE where PropertyKey = ?");
	                pstmt.setString(1,"ARCHIVALCABINETNAME");
	                rs= pstmt.executeQuery();
	                if(rs.next()){
	                	targetCabinetName=WFSUtil.getFormattedString(rs.getString("PropertyValue"))	;
	                }
	                else{

	                    mainCode = WFSError.WF_ARCHIVAL_CABINET_NOT_SET;
	                    subCode = 0;
	                    subject = WFSErrorMsg.getMessage(mainCode);
	                    descr = WFSErrorMsg.getMessage(subCode);
	                    errType = WFSError.WF_TMP;
	    			
	                	//throw new WFSException(mainCode, subCode, errType, subject, descr);
	    				String errorString = WFSUtil.generalError(strOption, engine, gen,mainCode, subCode,errType, subject,descr);
	    				return errorString;
	                	
	                }
	                if(rs!=null){
	                	rs.close();
	                	rs=null;
	                }
	                if(pstmt!=null){
	                	pstmt.close();
	                	pstmt=null;
	                }
	                tarConn=WFSUtil.createConnectionToTargetCabinet(targetCabinetName,strOption,engine);
	                if(tarConn!=null)
	                WFSUtil.printOut(engine,"Connection with Target Cabinet "+targetCabinetName+" is established.");
			 }
                 if((ArchiveSearch!=null && ArchiveSearch.equalsIgnoreCase("Y"))|| (tarHistoryLog)) {
                	 finalConn= tarConn;
                 }
                 else{
                	 finalConn=con;
                 }
                int userID = participant.getid();
                char pType = participant.gettype();
				scope = participant.getscope();
                if(!scope.equalsIgnoreCase("ADMIN") && locale == null && participant.getlocale() != null && !("").equals(participant.getlocale()))
                    locale = participant.getlocale();
				//OF Optimization
                if(dbType!=JTSConstant.JTS_POSTGRES){
                	if(tarHistoryLog && ArchiveSearch.equalsIgnoreCase("N") ){
                  		 pstmt = con.prepareStatement(" Select CreatedByName , CreatedDateTime , ProcessDefId, 'WFHistoryRouteLogTable' as tableName, URN from WFInstrumentTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessInstanceId = ?  and workitemid = 1 "
               					+ " UNION ALL Select CreatedByName , CreatedDateTime , ProcessDefId , 'WFHistoryRouteLogTable' as tableName, URN from QueueHistoryTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessInstanceId = ?  and workitemid = 1 "
               					+ WFSUtil.getQueryLockHintStr(dbType));
                  		}else{
                      pstmt = finalConn.prepareStatement(" Select CreatedByName , CreatedDateTime , ProcessDefId, 'WFCurrentRouteLogTable' as tableName, URN from WFInstrumentTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessInstanceId = ?  and workitemid = 1 "
   					+ " UNION ALL Select CreatedByName , CreatedDateTime , ProcessDefId , 'WFHistoryRouteLogTable' as tableName, URN from QueueHistoryTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessInstanceId = ?  and workitemid = 1 "
   					+ WFSUtil.getQueryLockHintStr(dbType));
                  	}
                }else{
                    pstmt = finalConn.prepareStatement(" (Select " + WFSUtil.getFetchPrefixStr(dbType, 1) + " CreatedByName , CreatedDateTime , ProcessDefId, 'WFCurrentRouteLogTable' as tableName , workitemid, URN from WFInstrumentTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessInstanceId = ?  order by workitemid asc " + WFSUtil.getFetchSuffixStr(dbType, 1, WFSConstant.QUERY_STR_AND)
					+ ") UNION ALL Select CreatedByName , CreatedDateTime , ProcessDefId , 'WFHistoryRouteLogTable' as tableName , workitemid, URN from QueueHistoryTable " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessInstanceId = ?  order by workitemid asc "
					+ WFSUtil.getQueryLockHintStr(dbType));
                
                }
                WFSUtil.DB_SetString(1, procInstID, pstmt, dbType);
                WFSUtil.DB_SetString(2, procInstID, pstmt, dbType);
                pstmt.execute();
                rs = pstmt.getResultSet();
                String userIndex = null;
                String userName = null;
                String personalName = null;
                String familyName = "";
                if (rs.next()) {	/*WFS_8.0_039*/
                    userName = rs.getString("CreatedByName");
                    WFUserInfo userInfo = (WFUserInfo) CachedObjectCollection.getReference().getCacheObject(finalConn, engine, 0, WFSConstant.CACHE_CONST_UserCache, "userName" + string21 + userName).getData();
                    if (userInfo !=null){
                            personalName = userInfo.getPersonalName();
                            familyName = userInfo.getFamilyName();
                            if(familyName == null)
                            {
                            familyName = "";
                            }
                    } else {
                            personalName = "";
                            familyName = ""; 
                    }
                    //tempXml.append(gen.writeValueOf("CreatedBy", rs.getString("CreatedByName")));
                    tempXml.append(gen.writeValueOf("CreatedBy", userName));
                    tempXml.append(gen.writeValueOf("CreatedByPersonalName", personalName + " " + familyName));
                    tempXml.append(gen.writeValueOf("CreatedDateTime", rs.getString("CreatedDateTime")));
                    int procDefId = rs.getInt("ProcessDefId");
                    String tableName = rs.getString(4);
                    String urn = rs.getString("URN");
                    rs.close();

                    pstmt.close();

                    String processName = CachedObjectCollection.getReference().getProcessName(finalConn, engine, procDefId);
                    tempXml.append(gen.writeValueOf("ProcessName", processName));
                if (historyType.equalsIgnoreCase("H") || historyType.equalsIgnoreCase("B")) {
                    StringBuffer queryBuff = new StringBuffer(100);
                    //Coded for DB2
					if((locale == null) || (locale != null && locale.equalsIgnoreCase("en-us")) ||((locale != null && locale.equalsIgnoreCase("en_us")))|| !enableMultiLingual.equalsIgnoreCase("Y"))
                    queryBuff.append("Select * from (Select " + WFSUtil.getFetchPrefixStr(dbType, noofrecords + 1)
                                + " ActivityId, Activityname, UserId, UserName, ActionId,  ActionDateTime, AssociatedFieldId, AssociatedFieldName, NewValue, WorkItemId, LogId,TaskId,SubTaskId,AssociatedDateTime, ProcessingTime,TAT,DelayTime  from " //shubham
                            + WFSUtil.TO_SANITIZE_STRING(tableName, false) + WFSUtil.getTableLockHintStr(dbType) + " Where ProcessInstanceId = ? " + actionIdFilter + activityFilter  + routeFlagFilter + lastvalueStr
                            + " ORDER BY ActionDateTime " + srtby + ", LOGID " + srtby + " ) A "
                            + WFSUtil.getFetchSuffixStr(dbType, noofrecords + 1, WFSConstant.QUERY_STR_WHERE)); //Bugzilla Bug 141	As removed for Oracle 9i
					else
						queryBuff.append("Select A.*, EntityName from (Select " + WFSUtil.getFetchPrefixStr(dbType, noofrecords + 1)
                            + " ActivityId, Activityname, UserId, UserName, ActionId,  ActionDateTime, AssociatedFieldId, AssociatedFieldName, NewValue, WorkItemId, LogId, processdefid,TaskId,SubTaskId,AssociatedDateTime,ProcessingTime,TAT,DelayTime  from "
                            + WFSUtil.TO_SANITIZE_STRING(tableName, false) + WFSUtil.getTableLockHintStr(dbType) + " Where ProcessInstanceId = ? " + actionIdFilter + activityFilter  + routeFlagFilter + lastvalueStr
                            + " ORDER BY ActionDateTime " + srtby + ", LOGID " + srtby + " ) A LEFT OUTER JOIN WFMultiLingualTable B on A.ActivityId = B.EntityId and A.processdefid = B.processdefid and EntityType = 3 and Locale = '" + WFSUtil.TO_SANITIZE_STRING(locale, false) + "'"
                            + WFSUtil.getFetchSuffixStr(dbType, noofrecords + 1, WFSConstant.QUERY_STR_WHERE));			
                    pstmt = finalConn.prepareStatement(queryBuff.toString());
                    WFSUtil.DB_SetString(1, procInstID, pstmt, dbType);
                    pstmt.execute();
                    rs = pstmt.getResultSet();
                    tempXml.append("<HistoryList>\n");
						if (TATOnly) {                                                    // shubham
							int i = 0;
							while (rs != null && rs.next()) {

								int actid = rs.getInt("ActionId");

								if (actid == WFSConstant.WFL_StartProcessInstance
										|| actid == WFSConstant.WFL_WorkItemCompleted
										|| actid == WFSConstant.WFL_WorkItemExpired
										|| actid == WFSConstant.WFL_AdHocRouted) {
									duptempXml.append("<HistoryInfo>\n");

									activityName = rs.getString("Activityname"); 
									if (locale != null
											&& !(locale.equalsIgnoreCase("en-us") || locale.equalsIgnoreCase("en_us"))
											&& enableMultiLingual.equalsIgnoreCase("Y")) {
										String entityName = rs.getString("EntityName");
										if (!rs.wasNull())
											activityName = entityName;
									}
									duptempXml.append(gen.writeValueOf("ActivityId", rs.getString("ActivityId")));
									if (escapeSpecialChar) {
										activityName = WFSUtil.handleSpecialCharInXml(activityName);
									}
									duptempXml.append(gen.writeValueOf("ActivityName", activityName));
									duptempXml.append(gen.writeValueOf("ActionDateTime", rs.getString("ActionDateTime")));
									duptempXml.append(gen.writeValueOf("UserId", rs.getString("UserId")));
									userName = rs.getString("UserName");
									duptempXml.append(gen.writeValueOf("Username", userName));
									duptempXml.append(gen.writeValueOf("ActionId", String.valueOf(actid)));
									duptempXml.append(gen.writeValueOf("AssociatedDateTime", String.valueOf(rs.getInt("AssociatedDateTime"))));
									duptempXml.append(gen.writeValueOf("ProcessingTime",
											String.valueOf(rs.getInt("ProcessingTime"))));
									duptempXml.append(gen.writeValueOf("TAT", String.valueOf(rs.getInt("TAT"))));
									duptempXml.append(
											gen.writeValueOf("DelayTime", String.valueOf(rs.getInt("DelayTime"))));
									duptempXml.append("</HistoryInfo>\n");
									duptempXml.append("</HistoryList>\n");

								}

							}
							tempXml.append(duptempXml);
						}

						else { // SHUBHAM
                    int i = 0;
                    int tot = 0;
					duptempXml = new StringBuffer("");
					boolean espCharHandledForMailtrigger;
                    while (rs != null && rs.next()) {
                    espCharHandledForMailtrigger=false;
                    if (i < noofrecords) {
						duptempXml = new StringBuffer("");
						duptempXml.append("<HistoryInfo>\n");
                        int actid = rs.getInt("ActionId");
                        Object[] result = null;
                        String attrMessage = null;
//                        if(detailAuditTrail.equalsIgnoreCase("Y")){
//                            if(actid == WFSConstant.WFL_AttributeHasBeenSet){
//                                XMLParser parser2 = new XMLParser();
//                                ArrayList attribList = new ArrayList();
//                                Object[] result = null;
//                                String attrMessage = null;
//                                String attribName = null;
//                                String attribVal = null;
//                                if(rs1!= null){
//                                    rs1.close();
//                                    rs1 = null;
//                                }
//                                if(pstmt1 !=null){
//                                    pstmt1.close();
//                                    pstmt1 = null;
//                                }
//                                 pstmt1 = con.prepareStatement("Select  Message from WFAttributeMessageTable "+WFSUtil.getTableLockHintStr(dbType)+" Where MessageId = ? ");
//                                 pstmt1.setString(1,rs.getString("AssociatedFieldId"));
//                                 rs1 = pstmt1.executeQuery();
//                                 if(rs1.next()){
//                                     result = WFSUtil.getBIGData(con, rs1, "Message", dbType, DatabaseTransactionServer.charSet);
//                                     attrMessage = (String)result[0];
//                                     //JSONObject json = new JSONObject(attrMessage);
//                                     String xml = WFSUtil.convertJsonToXml(attrMessage);
//                                     parser2.setInputXML(xml);
//                                     String attribXml = parser2.getValueOf("Attributes");
//                                     int noOfFields = parser2.getNoOfFields("Attribute");
//                                     if(noOfFields > 0){
//                                         attribList.add(parser2.getFirstValueOf("Attribute"));
//                                         for(int k = 1; k < noOfFields; k++) {
//                                            attribList.add(parser2.getNextValueOf("Attribute"));
//                                         }
//                                         attribList.add(parser2.getFirstValueOf("Attribute"));
//                                         for(int k = 0;  k< noOfFields; k++){
//                                            tempXml.append("<HistoryInfo>\n");
//                                            tempXml.append(gen.writeValueOf("ActivityId", rs.getString("ActivityId")));
//                                            tempXml.append(gen.writeValueOf("ActivityName", rs.getString("Activityname")));
//                                            tempXml.append(gen.writeValueOf("UserId", rs.getString("UserId")));
//                                            userName = rs.getString("UserName");
//                                            userInfo = (WFUserInfo) CachedObjectCollection.getReference().getCacheObject(con, engine, 0, WFSConstant.CACHE_CONST_UserCache, "userName#"+userName).getData();
//                                            if (userInfo !=null){
//                                                    personalName = userInfo.getPersonalName();
//                                            }else {
//                                                    personalName = null;
//                                            }
//                                            tempXml.append(gen.writeValueOf("Username", userName));
//                                            tempXml.append(gen.writeValueOf("PersonalName", personalName));
//                                            tempXml.append(gen.writeValueOf("ActionId", "16"));
//                                            tempXml.append(gen.writeValueOf("ActionDateTime", rs.getString("ActionDateTime")));
//                                            tempXml.append(gen.writeValueOf("FieldId", rs.getString("AssociatedFieldId")));
//                                            parser2.setInputXML((String) attribList.get(k));
//                                            attribName = parser2.getValueOf("Name");
//                                            attribVal = parser2.getValueOf("Value");
//                                            String fieldName = null;
//                                            fieldName = fieldName = "<Name>" + attribName + "</Name>"
//                                                            + "<Value>" + attribVal + "</Value>";
//                                            tempXml.append(gen.writeValue("FieldName", fieldName));
//                                            tempXml.append(gen.writeValueOf("WorkItemId", rs.getString("WorkItemId")));
//                                            tempXml.append(gen.writeValueOf("LogId", rs.getString("LogId")));
//                                            tempXml.append("</HistoryInfo>\n");
//                                            i++;
//                                         }
//                                     }
//
//                                 }
//                            }else{
//                                tempXml.append("<HistoryInfo>\n");
//                                tempXml.append(gen.writeValueOf("ActivityId", rs.getString("ActivityId")));
//                                tempXml.append(gen.writeValueOf("ActivityName", rs.getString("Activityname")));
//                                tempXml.append(gen.writeValueOf("UserId", rs.getString("UserId")));
//                                userName = rs.getString("UserName");	/*WFS_8.0_039*/
//                                userInfo = (WFUserInfo) CachedObjectCollection.getReference().getCacheObject(con, engine, 0, WFSConstant.CACHE_CONST_UserCache, "userName#"+userName).getData();
//                                if (userInfo !=null){
//                                    personalName = userInfo.getPersonalName();
//                                }else {
//                                    personalName = null;
//                                }
//
//                                if (! (actid == WFSConstant.WFL_ProcessInstanceRouted || actid == WFSConstant.WFL_ProcessInstanceDistributed)) {
//                                    tempXml.append(gen.writeValueOf("Username", userName));
//                                    tempXml.append(gen.writeValueOf("PersonalName", personalName));
//                                }
//                                tempXml.append(gen.writeValueOf("ActionId", String.valueOf(actid)));
//                                tempXml.append(gen.writeValueOf("ActionDateTime", rs.getString("ActionDateTime")));
//                                tempXml.append(gen.writeValueOf("FieldId", rs.getString("AssociatedFieldId")));
//                                String fieldName = rs.getString("AssociatedFieldName");
//                                String newValue = rs.getString("NewValue");
//                                switch(actid) {
//                                    case WFSConstant.WFL_Exception_Raised:
//                                    case WFSConstant.WFL_Exception_Cleared:
//                                        fieldName = "<ExceptionName>" + fieldName + "</ExceptionName>"
//                                                    + "<ExceptionComments>" + newValue + "</ExceptionComments>";
//                                        break;
//                                    case WFSConstant.WFL_ToDoItemStatus_Modified:
//                                        fieldName = "<Name>" + fieldName + "</Name>"
//                                                    + "<Value>" + newValue + "</Value>";
//                                        break;
//                                }
//                                tempXml.append(gen.writeValueOf("FieldName", fieldName));
//                                if(actid ==  WFSConstant.WFL_WorkItemReferred || actid == WFSConstant.WFL_WorkItemWithDrawn || actid == WFSConstant.WFL_WorkItemReassigned ) {
//                                    userInfo = null ;	/*WFS_8.0_039*/
//                                    personalName = "";
//                                    userInfo = (WFUserInfo) CachedObjectCollection.getReference().getCacheObject(con, engine, 0, WFSConstant.CACHE_CONST_UserCache, "userName#"+fieldName).getData();
//                                    if (userInfo !=null){
//                                            personalName = userInfo.getPersonalName();
//                                    } else {
//                                            personalName = null;
//                                    }
//                                    tempXml.append(gen.writeValueOf("PersonalFieldName",personalName));
//                                }
//                                tempXml.append(gen.writeValueOf("WorkItemId", rs.getString("WorkItemId")));
//                                tempXml.append(gen.writeValueOf("LogId", rs.getString("LogId")));
//                                tempXml.append("</HistoryInfo>\n");
//                                i++;
//                                }
//                        }
                      //  else{                           
							activityName = rs.getString("Activityname");
							if(locale != null && !(locale.equalsIgnoreCase("en-us") ||locale.equalsIgnoreCase("en_us"))  && enableMultiLingual.equalsIgnoreCase("Y"))
							{
								String entityName = rs.getString("EntityName");
     						    if(!rs.wasNull())
									activityName = entityName;
							}
							duptempXml.append(gen.writeValueOf("ActivityId", rs.getString("ActivityId")));
							if(escapeSpecialChar){
								activityName = WFSUtil.handleSpecialCharInXml(activityName);
							}
							duptempXml.append(gen.writeValueOf("ActivityName", activityName));
							duptempXml.append(gen.writeValueOf("UserId", rs.getString("UserId")));
							userName = rs.getString("UserName");	/*WFS_8.0_039*/
							
                            userInfo = (WFUserInfo) CachedObjectCollection.getReference().getCacheObject(finalConn, engine, 0, WFSConstant.CACHE_CONST_UserCache, "userName" + string21 + userName).getData();
                            if (userInfo !=null){
                                personalName = userInfo.getPersonalName();
                                familyName = userInfo.getFamilyName();
                                if(familyName == null)
                                {
                                familyName = "";
                                }
                        } else {
                                personalName = "";
                                familyName = ""; 
                        }

                            if (! (actid == WFSConstant.WFL_ProcessInstanceRouted || actid == WFSConstant.WFL_ProcessInstanceDistributed)) {
                                duptempXml.append(gen.writeValueOf("Username", userName));
                                duptempXml.append(gen.writeValueOf("PersonalName", personalName + " " + familyName));
                            }
                            duptempXml.append(gen.writeValueOf("ActionId", String.valueOf(actid)));
                            duptempXml.append(gen.writeValueOf("ActionDateTime", rs.getString("ActionDateTime")));
                            duptempXml.append(gen.writeValueOf("FieldId", rs.getString("AssociatedFieldId")));
                            String fieldName = rs.getString("AssociatedFieldName");
                            String newValue = rs.getString("NewValue");
                            
                            switch(actid) {   //shubham
                            case WFSConstant.WFL_StartProcessInstance:
                            case WFSConstant.WFL_WorkItemCompleted:
                            case WFSConstant.WFL_WorkItemExpired:
                            case WFSConstant.WFL_AdHocRouted:
                            	
                            	duptempXml.append(gen.writeValueOf("ProcessingTime", String.valueOf(rs.getInt("ProcessingTime"))));
                            	duptempXml.append(gen.writeValueOf("TAT", String.valueOf(rs.getInt("TAT"))));
                            	duptempXml.append(gen.writeValueOf("DelayTime", String.valueOf(rs.getInt("DelayTime"))));
                            	break;
                            }
                            switch(actid) {
							    case WFSConstant.WFL_TaskAdded:
                                case WFSConstant.WFL_TaskCompleted:
                                case WFSConstant.WFL_TaskInitiated:
                                case WFSConstant.WFL_TaskRevoked:
                                case WFSConstant.WFL_TaskDataHasBeenSet:
                                case WFSConstant.WFL_TaskDiverted:	
								case WFSConstant.WFL_TaskDeclined:
								case WFSConstant.WFL_TaskReassigned:
								case WFSConstant.WFL_TaskExpired:
								case WFSConstant.WFL_TaskEscalated:
								case WFSConstant.WFL_TaskUnlocked:
								case WFSConstant.WFL_TaskApproved:
								case WFSConstant.WFL_TaskRejected:
                                     duptempXml.append(gen.writeValueOf("TaskId", String.valueOf(rs.getInt("TaskId"))));
                                     duptempXml.append(gen.writeValueOf("SubTaskId", rs.getString("SubTaskId")));
                                     duptempXml.append(gen.writeValueOf("TaskName", newValue));
                                     userInfo = null ;	/*WFS_8.0_039*/
                                     userInfo = (WFUserInfo) CachedObjectCollection.getReference().getCacheObject(finalConn, engine, 0, WFSConstant.CACHE_CONST_UserCache, "userName" + string21 +fieldName).getData();
                                     if (userInfo !=null){
                                         personalName = userInfo.getPersonalName();
                                         familyName = userInfo.getFamilyName();
                                         if(familyName == null)
                                         {
                                         familyName = "";
                                         }
                                     	 } else {
                                         personalName = "";
                                         familyName = ""; 
                                     	 }
                                     		duptempXml.append(gen.writeValueOf("PersonalFieldName",personalName + " " + familyName));    
                                     //AssociatedFieldName will have information about AssignedTo User
                                     //UserName will have information about AssignedBy Information
                                     //NewValue will have TaskName information.
                                    break;
                                case WFSConstant.WFL_Exception_Raised:
                                case WFSConstant.WFL_Exception_Cleared:
                                	XMLParser fieldNameXML=new XMLParser(fieldName);
                                	String exceptionName="";
                                	if(escapeSpecialChar){
                                    	//fieldName = WFSUtil.handleSpecialCharInXml(fieldName);
                                		exceptionName=fieldNameXML.getValueOf("ExceptionName");
                                		exceptionName =  WFSUtil.handleSpecialCharInXml(exceptionName);
                                		
        							}
                                	fieldName =   "<ExceptionName>" + exceptionName + "</ExceptionName>";
                                	fieldName =   fieldName + "<ExceptionComments>" + WFSUtil.handleSpecialCharInXml(newValue) + "</ExceptionComments>";
                                    break;
                                case WFSConstant.WFL_ToDoItemStatus_Modified:
                                	break;//WFL_Attribute_Set Case was also executing <Name> and <Value> was getting appended twice as break was not present 
                                case WFSConstant.WFL_Attribute_Set:
                                	if(escapeSpecialChar){
                                    	fieldName = WFSUtil.handleSpecialCharInXml(fieldName);
                                    	newValue = WFSUtil.handleSpecialCharInXml(newValue);
        							}
                                    fieldName = "<Name>" + fieldName + "</Name>"
                                                + "<Value>" + newValue + "</Value>";
                                    break;
                                case WFSConstant.WFL_WorkitemHolded:
                                case WFSConstant.WFL_WorkitemUnholded:
                                    duptempXml.append(gen.writeValueOf("HoldType", newValue));
                                    break;
                                case WFSConstant.WFL_AttributeHasBeenSet:
                                    if(detailAuditTrail.equalsIgnoreCase("Y")){
                                        duptempXml.append(gen.writeValueOf("DetailAuditTrail", "Y"));
                                        if(rs1!= null){
                                            rs1.close();
                                            rs1 = null;
                                        }
                                        if(pstmt1 !=null){
                                            pstmt1.close();
                                            pstmt1 = null;
                                        }
                                        if (ArchiveSearch.equalsIgnoreCase("N")){
                                            pstmt1 = finalConn.prepareStatement("Select  Message from WFAttributeMessageTable "+WFSUtil.getTableLockHintStr(dbType)+" Where MessageId = ? ");
                                            }
                                            else{
                                            pstmt1 = finalConn.prepareStatement("Select  Message from WFAttributeMessageTable "+WFSUtil.getTableLockHintStr(dbType)+" Where MessageId = ? union all Select  Message from WFATTRIBUTEMESSAGEHISTORYTABLE "+WFSUtil.getTableLockHintStr(dbType)+" Where MessageId = ?");
                                                
                                            }
                                          if(dbType == JTSConstant.JTS_POSTGRES){ //change for Bug 62959 
                                            	pstmt1.setInt(1,rs.getInt("AssociatedFieldId"));
                                            	if (ArchiveSearch.equalsIgnoreCase("Y")){
                                            	pstmt1.setInt(2,rs.getInt("AssociatedFieldId"));
                                            	}
                                            }else{
                                            pstmt1.setString(1,rs.getString("AssociatedFieldId"));
                                            if (ArchiveSearch.equalsIgnoreCase("Y")){
                                            pstmt1.setString(2,rs.getString("AssociatedFieldId"));
                                            }
                                            }
                                        rs1 = pstmt1.executeQuery();
                                         if(rs1.next()){
                                            result = WFSUtil.getBIGData(finalConn, rs1, "Message", dbType, DatabaseTransactionServer.charSet);
                                            fieldName = WFSUtil.handleSpecialCharInJson((String)result[0]);
                                         }
                                    }else{
                                        duptempXml.append(gen.writeValueOf("DetailAuditTrail", "N"));
                                    }
                                 break;
                                case WFSConstant.WFL_Import_Data:                        	
                         		case WFSConstant.WFL_Export_Data:
                         			duptempXml.append(newValue);
                         			break;
                            }
							if(escapeSpecialChar && actid != 112 && actid != 9 && actid != 15 && actid != 75 && actid != 16 && actid != 10){
								fieldName = WFSUtil.handleSpecialCharInXml(fieldName);
							}
							/*Changes for Bug 59642 - Weblogic+RHEL+oracle:getting error in history of WI in CWD
							 *Document name was having special characters and action id was 18 i.e. WFL_DocumentTypeAdded 
							 *  
							 *  */
							/*if(escapeSpecialChar&&(actid == 18)){
								fieldName = WFSUtil.handleSpecialCharInXml(fieldName);
							}*/
								
							if(fieldName!=null && fieldName.contains("<MailSubject>") && fieldName.contains("<MailTo>")&& fieldName.contains("<MailFrom>")){
								XMLParser mailStringParser=new XMLParser(fieldName);
								String mailSubject="";
								mailSubject=WFSUtil.handleSpecialCharInXml(mailStringParser.getValueOf("MailSubject"));
								mailStringParser.changeValue("MailSubject", mailSubject);
								fieldName=String.valueOf(new StringBuffer(mailStringParser.toString()));
								
								String mailFrom="";
								mailFrom=WFSUtil.handleSpecialCharInXml(mailStringParser.getValueOf("MailFrom"));
								mailStringParser.changeValue("MailFrom", mailFrom);
								fieldName=String.valueOf(new StringBuffer(mailStringParser.toString()));
								
								String mailTo="";
								mailTo=WFSUtil.handleSpecialCharInXml(mailStringParser.getValueOf("MailTo"));
								mailStringParser.changeValue("MailTo", mailTo);
								fieldName=String.valueOf(new StringBuffer(mailStringParser.toString()));
								
								String mailCC="";
								mailCC=WFSUtil.handleSpecialCharInXml(mailStringParser.getValueOf("MailCC"));
								mailStringParser.changeValue("MailCC", mailCC);
								fieldName=String.valueOf(new StringBuffer(mailStringParser.toString()));
								espCharHandledForMailtrigger=true;
								
							}
								duptempXml.append(gen.writeValueOf("FieldName",fieldName));	
							
                            if(actid ==  WFSConstant.WFL_WorkItemReferred || actid == WFSConstant.WFL_WorkItemWithDrawn || actid == WFSConstant.WFL_WorkItemReassigned ) {
                                userInfo = null ;	/*WFS_8.0_039*/
                              
                                userInfo = (WFUserInfo) CachedObjectCollection.getReference().getCacheObject(finalConn, engine, 0, WFSConstant.CACHE_CONST_UserCache, "userName" + string21 +fieldName).getData();
                                if (userInfo !=null){
                                    personalName = userInfo.getPersonalName();
                                    familyName = userInfo.getFamilyName();
                                    if(familyName == null)
                                    {
                                    familyName = "";
                                    }
                            } else {
                                    personalName = "";
                                    familyName = ""; 
                            }
                                duptempXml.append(gen.writeValueOf("PersonalFieldName",personalName + " " + familyName));
                            }
                            if(actid >=5000 && actid<=6000){
                            	duptempXml.append(gen.writeValueOf("ProcessDefId", String.valueOf(procDefId)));
                            	duptempXml.append(gen.writeValueOf("NewValue", String.valueOf(newValue)));
                            	duptempXml.append(gen.writeValueOf("TaskId",  rs.getString("TaskId")));
                            	duptempXml.append(gen.writeValueOf("SubTaskId",  rs.getString("SubTaskId")));
                            }
                            duptempXml.append(gen.writeValueOf("WorkItemId", rs.getString("WorkItemId")));
                            duptempXml.append(gen.writeValueOf("LogId", rs.getString("LogId")));
                            duptempXml.append(gen.writeValueOf("ProcessInstanceId", procInstID));
                            duptempXml.append(gen.writeValueOf("URN", urn));
                            duptempXml.append("</HistoryInfo>\n");
							
							if(locale!=null&&!"".equals(locale) && returnActionDescription.equalsIgnoreCase("Y")){
								WFXmlList workItemList = new WFXmlList(duptempXml.toString(),"HistoryInfo",0,duptempXml.length());
								if(locale.indexOf("-") != -1)
									loc = new Locale(locale.substring(0, locale.indexOf("-")),
										locale.substring(locale.indexOf("-")+1, locale.length()));
								else{
									if(locale.indexOf("_")==-1){
										loc = new Locale(locale);
									}else{
										 String[] parts = locale.split("_");
										 loc=new Locale(parts[0], parts[1]);
									}
								}
								//	loc = new Locale(locale);
								//resourceBundle.prepareBundles(loc);
								dateFormat = parser.getValueOf("DateFormat", "dd/mm/yyyy", true);
								ResourceBundle resourceBundle = null ;
								if(actid >=5000 && actid<=6000){
										String configLocation = WFConfigLocator.getInstance().getPath(Location.IBPS_CONFIG); //Bug 89652 loading customSting.properties file from a separate folder
										if (!configLocation.endsWith(File.separator)) {
											configLocation = configLocation + File.separator;
										}
										String configFilePath = configLocation + "wfsconfig" + File.separator + "CustomString"; //separate folder to place CustomString.properties file
										File fl = new File(configFilePath);
										java.net.URL[] urls= {fl.toURI().toURL()};
										ClassLoader urlLoader = new URLClassLoader(urls);
									    resourceBundle = java.util.ResourceBundle.getBundle( "CustomString" , loc, urlLoader ); // bug 86257 for custom action IDs
										if (workItemList.getVal("ActionId") != "") {
											actionText = actionPrint(Integer.parseInt(workItemList.getVal("ActionId")),
													workItemList, dateFormat, false, resourceBundle, urn, urnFlag, con,
													dbType);
										} else {                                                                    // To handle special character �
											String tag = "ActionId";
											int startIndex = duptempXml.toString().indexOf("<" + tag + ">", 0);

											String actionID = duptempXml.toString().substring(
													(startIndex + tag.length() + 2),
													duptempXml.toString().indexOf("</" + tag + ">", 0));
											actionText = actionPrint(Integer.parseInt(actionID),
													workItemList, dateFormat, false, resourceBundle, urn, urnFlag, con,
													dbType) ;

										}
								}else{
										resourceBundle = java.util.PropertyResourceBundle.getBundle("WfsString", loc); // bug 86257 for normal action IDs
										if (workItemList.getVal("ActionId") != "") {
										actionText = actionPrint(Integer.parseInt(workItemList.getVal("ActionId")), workItemList,dateFormat,false,resourceBundle,urn,urnFlag,con,dbType);
										} else {                                                                // To handle special character �
											String tag = "ActionId";
											int startIndex = duptempXml.toString().indexOf("<" + tag + ">", 0);

											String actionID = duptempXml.toString().substring(
													(startIndex + tag.length() + 2),
													duptempXml.toString().indexOf("</" + tag + ">", 0));
											actionText = actionPrint(Integer.parseInt(actionID), workItemList,dateFormat,false,resourceBundle,urn,urnFlag,con,dbType);
											
								}
								}
								
								if(actid != 75){
									if(escapeSpecialChar && !espCharHandledForMailtrigger){
										actionText = WFSUtil.handleSpecialCharInXml(actionText);
									}
								}	
								
								actionText = "<ActionDescription>"+actionText+"</ActionDescription>";
									duptempXml.insert(duptempXml.lastIndexOf("</HistoryInfo>\n"), actionText);
							}
								tempXml.append(duptempXml);
							
								i++;
                        //}
                }
                    		tot++;
                }
                tempXml.append("</HistoryList>\n");
                tempXml.append(gen.writeValueOf("TotalCount", String.valueOf(tot)));
                tempXml.append(gen.writeValueOf("RetrievedCount", String.valueOf(i)));
                tempXml.append("\n");
             }}
             
                if (historyType.equalsIgnoreCase("C") || historyType.equalsIgnoreCase("B")) {
                        StringBuilder strQuery = new StringBuilder();
                        strQuery.append(" SELECT * FROM (");
                        strQuery.append(" SELECT CommentsId, Comments, CommentsBy, CommentsByName, CommentsTo, CommentsToName, CommentsType,");
                        strQuery.append(" ActionDateTime, ActivityName FROM WFCommentsTable").append(WFSUtil.getTableLockHintStr(dbType)).append(",ActivityTable").append(WFSUtil.getTableLockHintStr(dbType));
                        strQuery.append(" WHERE WFCommentsTable.ProcessDefId = ActivityTable.ProcessDefId");
                        strQuery.append(" AND WFCommentsTable.ActivityId = ActivityTable.ActivityId AND ProcessInstanceId = ?");
                        strQuery.append(" UNION");
                        strQuery.append(" SELECT CommentsId, Comments, CommentsBy, CommentsByName, CommentsTo, CommentsToName, CommentsType,");
                        strQuery.append(" ActionDateTime, ActivityName FROM WFCommentsHistoryTable").append(WFSUtil.getTableLockHintStr(dbType)).append(",ActivityTable").append(WFSUtil.getTableLockHintStr(dbType));
                        strQuery.append(" WHERE WFCommentsHistoryTable.ProcessDefId = ActivityTable.ProcessDefId");
                        strQuery.append(" AND WFCommentsHistoryTable.ActivityId = ActivityTable.ActivityId AND ProcessInstanceId = ?");
                        strQuery.append(" ) A ORDER BY CommentsId DESC");
                        WFSUtil.printOut(engine, "[WMMiscellaneous] [WFGetWorkItemHistoryNew] Query to fetch comments data >>> " + strQuery);
                        WFSUtil.printOut(engine, "[WMMiscellaneous] [WFGetWorkItemHistoryNew] ProcessInstanceId >>> " + procInstID);
                        pstmt = finalConn.prepareStatement(strQuery.toString());
                        WFSUtil.DB_SetString(1, procInstID, pstmt, dbType);
                        WFSUtil.DB_SetString(2, procInstID, pstmt, dbType);
                        pstmt.execute();
                        rs = pstmt.getResultSet();
                        tempXml.append("<CommentData>");
                        while (rs != null && rs.next()) {
                            tempXml.append("<CommentInfo>");
                            tempXml.append(gen.writeValue("Comment", WFSUtil.handleSpecialCharInXml(rs.getString("Comments"))));
                            tempXml.append(gen.writeValue("CommentBy", rs.getString("CommentsBy")));
                            userName = rs.getString("CommentsByName");
                            userInfo = (WFUserInfo) CachedObjectCollection.getReference().getCacheObject(finalConn, engine, 0, WFSConstant.CACHE_CONST_UserCache, "userName"+string21 + userName).getData();
                            
                            if (userInfo !=null){
                                personalName = userInfo.getPersonalName();
                                familyName = userInfo.getFamilyName();
                                if(familyName == null)
                                {
                                familyName = "";
                                }
                        } else {
                                personalName = "";
                                familyName = ""; 
                        }
                            tempXml.append(gen.writeValue("CommentByName", userName));
                            tempXml.append(gen.writeValue("CommentByPersonalName", personalName + " " + familyName));
                            tempXml.append(gen.writeValue("CommentTo", rs.getString("CommentsTo")));
                            userName = rs.getString("CommentsToName");
                            userInfo = (WFUserInfo) CachedObjectCollection.getReference().getCacheObject(finalConn, engine, 0, WFSConstant.CACHE_CONST_UserCache, "userName#" + userName).getData();
                            
                            if (userInfo !=null){
                                personalName = userInfo.getPersonalName();
                                familyName = userInfo.getFamilyName();
                                if(familyName == null)
                                {
                                familyName = "";
                                }
                        } else {
                                personalName = "";
                                familyName = ""; 
                        }
                            tempXml.append(gen.writeValue("CommentToName", userName));
                            tempXml.append(gen.writeValue("CommentToPersonalName", personalName + " " + familyName));
                            tempXml.append(gen.writeValue("CommentType", rs.getString("CommentsType")));
                            tempXml.append(gen.writeValue("CommentDateTime", rs.getString("ActionDateTime")));
                            tempXml.append(gen.writeValue("ActivityName", rs.getString("ActivityName")));
                            tempXml.append("</CommentInfo>");
                        }
                        tempXml.append("</CommentData>\n");
                    }
                    
            } else {
                mainCode = WFSError.WM_INVALID_PROCESS_INSTANCE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
                }
            } else {
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            if (mainCode == 0) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFGetWorkItemHistory"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append(tempXml);
                outputXML.append(gen.closeOutputFile("WFGetWorkItemHistory"));
            }
        } catch (SQLException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (JTSException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
        } catch (Exception e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
        	try{
				if(rs!=null){
					rs.close();
					rs=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
        	try{
				if(rs1!=null){
					rs1.close();
					rs1=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
        	try{
				if(pstmt!=null){
					pstmt.close();
					pstmt=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
        	try{
				if(pstmt1!=null){
					pstmt1.close();
					pstmt1=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
            try {
                if(tarConn!=null){
                	tarConn.close();
                	tarConn=null;
                	finalConn=null; 
                }
            } catch (Exception e) {
            	WFSUtil.printErr(engine,"", e);
            }
            
        }
        if (mainCode != 0) {
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();
    }

//----------------------------------------------------------------------------------------------------
//	Function Name			 				:	WFParticipantReport
//	Date Written (DD/MM/YYYY)	:	04/05/2003
//	Author										:	Advid K. Parmar
//	Input Parameters					:	Connection , XMLParser , XMLGenerator
//	Output Parameters					: none
//	Return Values							:	String
//	Description								: Gets the participant report
//----------------------------------------------------------------------------------------------------
    public String WFParticipantReport(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
    	 StringBuffer outputXML = new StringBuffer("");
        PreparedStatement pstmt = null;
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        Statement stmt = null;
        ResultSet rs=null;
        String temptable = null;
        String engine= "";
        try {
            int sessionID = parser.getIntOf("SessionId", 0, false);
            engine = parser.getValueOf("EngineName");
            int procDefID = parser.getIntOf("ProcessDefinitionID", 0, false);
            int ActivityId = parser.getIntOf("ActivityID", 0, true);
            int UserId = parser.getIntOf("UserID", 0, true);
            char reportDuration = parser.getCharOf("Duration", '\0', true);
            engine= parser.getValueOf("EngineName");
            String from = parser.getValueOf("From", "", true);
            String to = parser.getValueOf("To", "", true);
            if (to.indexOf(" ") == -1) {
                to += " 23:59:59.999";
            }
            int dbType = ServerProperty.getReference().getDBType(engine);
            /**
             * Changed On  : May 12th 2007
             * Changed By  : Ruhi Hira
             * Description : calculate dates at server for reports, SrNo-5.
             */
            if (reportDuration != '\0') {
                String[] temp = WFSUtil.dateCalculator(reportDuration, WFSConstant.CONST_TYPE_DAY, dbType, parser);
                from = temp[0];
                to = temp[1];
            }
            String dateCtr = (!from.equals("")) ? " AND ActionDateTime > " + WFSUtil.TO_DATE(from, true, dbType) : " ";
            dateCtr += (!to.equals("")) ? " AND ActionDateTime <= " + WFSUtil.TO_DATE(to, true, dbType) : " ";
            String exeStr = "";
            String activityStr = "";
            String userStr = "";
            StringBuffer tempXml = new StringBuffer(100);
            WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
            if (participant != null) {
                int userID = participant.getid();
                char pType = participant.gettype();
                if (ActivityId > 0) {
                    activityStr = " and activityid=" + ActivityId;

                }
                if (UserId > 0) {
                    userStr = " and userId=" + UserId;
                }
                stmt = con.createStatement();
                /* Bugzilla Id 54, Query lock hint for DB2, 18/08/2006 - Ruhi Hira */
                String execStr = "select activityid, activityname, userid, username, sum(totalwicount) as Totalworkitems, "
                    + "sum (Totalprocessingtime) as  Totalprocessingtime, sum (TotalDuration) as TotalDuration, "
                    + "processdefid from summarytable " + WFSUtil.getTableLockHintStr(dbType) + " where actionid in (27,2) and processdefid = " // Tirupati Srivastava : changes made to make code compatible with postgreSQL
                    + procDefID + activityStr + userStr + dateCtr
                    + "group by processdefid, activityid, activityname, userid, username "
                    + WFSUtil.getQueryLockHintStr(dbType);
                 rs = stmt.executeQuery(execStr);
                int oldActivityId = 0;
                int activityId = 0;
                int olduserId = 0;
                int userId = 0;
                int act = 0;
                int usr = 0;
                boolean appendTags = false;
                tempXml.append("<ProcessingTimes>");
                while (rs.next()) {
                    oldActivityId = activityId;
                    activityId = rs.getInt(1);
                    if (oldActivityId != activityId) {
                        act++;
                        if (oldActivityId != 0) {
                            tempXml.append("</ActivityProcessingTimes>");
                            tempXml.append("</ProcessingTime>");
                        }
                        tempXml.append("<ProcessingTime>");
                        tempXml.append(gen.writeValueOf("WorkStepId", String.valueOf(activityId)));
                        tempXml.append(gen.writeValueOf("WorkStepName", rs.getString(2)));
                        tempXml.append("<ActivityProcessingTimes>");
                    }
                    appendTags = true;
                    olduserId = userId;
                    userId = rs.getInt(3);
                    String unam = rs.getString(4);
                    tempXml.append("<ActivityProcessingTime>");
                    if (olduserId != userId) {
                        usr++;
                    }
                    tempXml.append(gen.writeValueOf("UserId", String.valueOf(userId)));
                    tempXml.append(gen.writeValueOf("UserName", unam));

                    int WorkitemsProcessed = rs.getInt(5);
                    tempXml.append(gen.writeValueOf("NoOfWorkItems", String.valueOf(WorkitemsProcessed)));
                    if (WorkitemsProcessed != 0) {
                        tempXml.append(gen.writeValueOf("AverageTime", String.valueOf(rs.getLong(6)))); //Bug#1688
                        tempXml.append(gen.writeValueOf("AverageDuration", String.valueOf(rs.getLong(7)))); //Bug#1688
                    } else {
                        tempXml.append(gen.writeValueOf("AverageTime", ""));
                        tempXml.append(gen.writeValueOf("AverageDuration", ""));
                    }
                    tempXml.append("</ActivityProcessingTime>");
                }
                if (rs != null) {
                    rs.close();
                }
                if (appendTags) {
                    tempXml.append("</ActivityProcessingTimes>");
                    tempXml.append("</ProcessingTime>");
                    tempXml.append(gen.writeValueOf("CountActivity", String.valueOf(act)));
                    tempXml.append(gen.writeValueOf("CountUser", String.valueOf(usr)));
                } else {
                    mainCode = WFSError.WM_NO_MORE_DATA;
                    subCode = 0;
                    subject = WFSErrorMsg.getMessage(mainCode);
                    descr = WFSErrorMsg.getMessage(subCode);
                    errType = WFSError.WF_TMP;
                }
                tempXml.append("</ProcessingTimes>");
            } else {
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            if (mainCode == 0) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFParticipantReport"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append(tempXml);
                outputXML.append("<From>");
                outputXML.append(from);
                outputXML.append("</From>");
                outputXML.append("<To>");
                outputXML.append(to);
                outputXML.append("</To>");
                outputXML.append(gen.closeOutputFile("WFParticipantReport"));
            } else if (mainCode == 18) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFParticipantReport"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append("<From>");
                outputXML.append(from);
                outputXML.append("</From>");
                outputXML.append("<To>");
                outputXML.append(to);
                outputXML.append("</To>");
                outputXML.append(gen.closeOutputFile("WFParticipantReport"));
            }
        } catch (SQLException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (JTSException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
        } catch (Exception e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
        	try{
				if(rs!=null){
					rs.close();
					rs=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
            try {
                if (pstmt != null) { //Bug WFS_6_004 - Statement closed in finally.
                    pstmt.close();
                    pstmt = null;
                }
            } catch (Exception e) {}
            try {
                if (stmt != null) {
                    stmt.close();
                    stmt = null;
                }
            } catch (Exception ignored) {}
           
        }
        if (mainCode != 0 && mainCode != 18) {
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();
    }

//----------------------------------------------------------------------------------------------------
//	Function Name			 				:	WFProcessingtimeReport
//	Date Written (DD/MM/YYYY)	:	04/05/2003
//	Author										:	Advid K. Parmar
//	Input Parameters					:	Connection , XMLParser , XMLGenerator
//	Output Parameters					: none
//	Return Values							:	String
//	Description								: Gets the processingtime report
//----------------------------------------------------------------------------------------------------
    public String WFProcessingtimeReport(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
    	 StringBuffer outputXML = new StringBuffer("");
        PreparedStatement pstmt = null;
        ResultSet rs=null;
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        Statement stmt = null;
        String temptable = null;
        String engine="";
        try {
            int sessionID = parser.getIntOf("SessionId", 0, false);
            engine = parser.getValueOf("EngineName");
            int procDefID = parser.getIntOf("ProcessDefinitionID", 0, true);
            String from = parser.getValueOf("From", "", true);
            String to = parser.getValueOf("To", "", true);
            if (to.indexOf(" ") == -1) {
                to += " 23:59:59.999";
            }
            int dbType = ServerProperty.getReference().getDBType(engine);
            char reportDuration = parser.getCharOf("Duration", '\0', true);
            /**
             * Changed On  : May 12th 2007
             * Changed By  : Ruhi Hira
             * Description : calculate dates at server for reports, SrNo-5.
             */
            if (reportDuration != '\0') {
                String[] temp = WFSUtil.dateCalculator(reportDuration, WFSConstant.CONST_TYPE_DAY, dbType, parser);
                from = temp[0];
                to = temp[1];
            }
            String dateCtr = (!from.equals("")) ? " AND ActionDateTime > " + WFSUtil.TO_DATE(from, true, dbType) : " ";
            dateCtr += (!to.equals("")) ? " AND ActionDateTime <= " + WFSUtil.TO_DATE(to, true, dbType) : " ";
            String exeStr = "";
            String procStr = "";
            String groupbystr = "";
            StringBuffer tempXml = new StringBuffer(100);
            String columnstr = "";
            String tableName = null;
            WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
            if (participant != null) {
                int userID = participant.getid();
                char pType = participant.gettype();
                String actionIdStr = "";
                if (procDefID > 0) {
                    procStr = " processdefId = " + procDefID;
                    groupbystr = " ,activityName,activityid";
                    columnstr = " ,activityName ";
                    tableName = "WFActivityReportTable";
                } else { //Bug WFS_5_114
                    actionIdStr = "actionid = 20"; //Bug WFS_5_114
                    tableName = "SummaryTable";
                }
                stmt = con.createStatement();
                // WSE_5.0.1_004  - Begin
                // Bug WFS_5_114
                String temp3 = "select (select processname" + WFSUtil.concat(dbType) + "'('" +
                    WFSUtil.concat(dbType) + WFSUtil.TO_CHAR("versionno", 6, dbType)
                    + WFSUtil.concat(dbType) +
                    "')' from processdeftable " + WFSUtil.getTableLockHintStr(dbType) + " where processdefid = " + tableName + ".processdefid ),processdefid " + columnstr + "  ," +
                    "sum(Totalwicount) as Totalwicount,  sum (Totalprocessingtime) as Totalprocessingtime,sum (TotalDuration) as TotalDuration from "
                    + tableName + " where " + actionIdStr + procStr + dateCtr + "group by processdefid" + groupbystr;
                // WSE_5.0.1_004  - End
                rs = stmt.executeQuery(temp3);
                int oldprocessdefId = 0;
                int processdefId = 0;
                int countprocess = 0;
                int countactivity = 0;
                String activityName = "";
                String oldactivityName = "";

                tempXml.append("<ProcessingTimes>");
                while (rs.next()) {
                    String pName = rs.getString(1);
                    oldprocessdefId = processdefId;
                    processdefId = rs.getInt(2);
                    if (oldprocessdefId != processdefId) {
                        countprocess++;
                        if (oldprocessdefId != 0) {
                            tempXml.append("</ActivityProcessingTimes>");
                            tempXml.append("</ProcessingTime>");
                        }
                        tempXml.append("<ProcessingTime>");
                        tempXml.append(gen.writeValueOf("ProcessName", pName));
                        tempXml.append(gen.writeValueOf("ProcessDefId", String.valueOf(processdefId)));
                        tempXml.append("<ActivityProcessingTimes>");
                    }
                    if (!columnstr.equals("")) {
                        oldactivityName = activityName;
                        activityName = rs.getString(3);
                        if (!activityName.equals(oldactivityName)) {
                            countactivity++;
                        }
                        tempXml.append("<ActivityProcessingTime>");
                        tempXml.append(gen.writeValueOf("ActivityName", activityName));
                        int WorkitemsProcessed = rs.getInt(4);
                        tempXml.append(gen.writeValueOf("NoOfWorkItems", String.valueOf(WorkitemsProcessed)));
                        if (WorkitemsProcessed != 0) {
                            tempXml.append(gen.writeValueOf("AverageTime", String.valueOf(rs.getLong(5)))); //Bug#1688
                            tempXml.append(gen.writeValueOf("AverageDuration", String.valueOf(rs.getLong(6)))); //Bug#1688
                        } else {
                            tempXml.append(gen.writeValueOf("AverageTime", ""));
                            tempXml.append(gen.writeValueOf("AverageDuration", ""));
                        }
                        tempXml.append("</ActivityProcessingTime>");
                    } else {
                        int WorkitemsProcessed = rs.getInt(3);
                        tempXml.append(gen.writeValueOf("NoOfWorkItems", String.valueOf(WorkitemsProcessed)));
                        if (WorkitemsProcessed != 0) {
                            tempXml.append(gen.writeValueOf("AverageTime", String.valueOf(rs.getLong(4)))); //Bug#1688
                            tempXml.append(gen.writeValueOf("AverageDuration", String.valueOf(rs.getLong(5)))); //Bug#1688
                        } else {
                            tempXml.append(gen.writeValueOf("AverageTime", ""));
                            tempXml.append(gen.writeValueOf("AverageDuration", ""));
                        }
                    }
                }
                if (countprocess > 0) {
                    tempXml.append("</ActivityProcessingTimes>");
                    tempXml.append("</ProcessingTime>");
                    tempXml.append("</ProcessingTimes>");
                    tempXml.append(gen.writeValueOf("CountProcess", String.valueOf(countprocess)));
                    tempXml.append(gen.writeValueOf("CountActivity", String.valueOf(countactivity)));
                } else {
                    mainCode = WFSError.WM_NO_MORE_DATA;
                    subCode = 0;
                    subject = WFSErrorMsg.getMessage(mainCode);
                    descr = WFSErrorMsg.getMessage(subCode);
                    errType = WFSError.WF_TMP;
                }
                if (rs != null) {
                    rs.close();
                }
            } else {
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            if (mainCode == 0) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFProcessingtimeReport"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append(tempXml);
                outputXML.append("<From>");
                outputXML.append(from);
                outputXML.append("</From>");
                outputXML.append("<To>");
                outputXML.append(to);
                outputXML.append("</To>");
                outputXML.append(gen.closeOutputFile("WFProcessingtimeReport"));
            } else if (mainCode == 18) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFProcessingtimeReport"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append("<From>");
                outputXML.append(from);
                outputXML.append("</From>");
                outputXML.append("<To>");
                outputXML.append(to);
                outputXML.append("</To>");
                outputXML.append(gen.closeOutputFile("WFProcessingtimeReport"));
            }
        } catch (SQLException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (JTSException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
        } catch (Exception e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
        	try{
				if(rs!=null){
					rs.close();
					rs=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
            try {
                if (stmt != null) {
                    stmt.close();
                    stmt = null;
                }
            } catch (Exception e) {}
            try { //Bug WFS_6_004 - Statement closed in finally.
                if (pstmt != null) {
                    pstmt.close();
                    pstmt = null;
                }
            } catch (Exception ignored) {}
           
        }
        if (mainCode != 0 && mainCode != 18) {
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();
    }

//----------------------------------------------------------------------------------------------------
//	Function Name 						:	WFGetQueueLoadHistory
//	Date Written (DD/MM/YYYY)			:	18/06/2002
//	Author								:	Advid Parmar
//	Input Parameters					:	Connection , XMLParser , XMLGenerator
//	Output Parameters					:   none
//	Return Values						:	String
//	Description							:   Reports the queue load history
//
//----------------------------------------------------------------------------------------------------
    public String WFGetQueueLoadHistory(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
    	 StringBuffer outputXML = new StringBuffer("");
        PreparedStatement pstmt = null;
        Statement stmt = null;
        int mainCode = 0;
        ResultSet rs = null;
        int subCode = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        String engine="";
        try {
            int sessionID = parser.getIntOf("SessionId", 0, false);
            int queueId = parser.getIntOf("QueueId", 0, false);
            String fromDate = parser.getValueOf("From", "", true);
            engine= parser.getValueOf("EngineName");
            String toDate = parser.getValueOf("To", "", true);
            if (toDate.indexOf(" ") == -1) {
                toDate += " 23:59:59.999";
            }
            char repType = parser.getCharOf("ReportType", WFSConstant.CONST_TYPE_DAY, true);
            char reportDuration = parser.getCharOf("Duration", '\0', true);
            int dbType = ServerProperty.getReference().getDBType(engine);
			String tableName = "WFRouteLogView";	/** @todo for backward compatiblity, variable to be initialized on the basis of flag.*/
			String queueCol = " QueueId ";			/** @todo for backward compatiblity, variable to be initialized on the basis of flag.*/
            int uid = 0;
            /**
             * Changed On  : May 12th 2007
             * Changed By  : Ruhi Hira
             * Description : calculate dates at server for reports, SrNo-5.
             */
            if (reportDuration != '\0') {
                String[] temp = WFSUtil.dateCalculator(reportDuration, repType, dbType, parser);
                fromDate = temp[0];
                toDate = temp[1];
            }

            String exeStr = "";
            String datefromPart = "";
            String datefromPart1 = "";
            String datepart = "";
            String datetoPart = "";
            String datetoPart1 = "";
            String activitystr = "";
            String processstr = "";
            String fromlessString = "";
            String fromdateString = "";
            String todateString = "";
            String finalexeStr = "";
            StringBuffer tempstrbuf = new StringBuffer(100);
            int i = 0;
            WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);

            StringBuffer tempXml = new StringBuffer(100);
            if (user != null && user.gettype() == 'U') {
                if (!fromDate.equals("")) {
                    fromdateString = " and actiondatetime>=" + WFSUtil.TO_DATE(fromDate, true, dbType);
                    fromlessString = "  actiondatetime<=" + WFSUtil.TO_DATE(fromDate, true, dbType) + " or ";
                }
                if (!toDate.equals("")) {
                    todateString = " and actiondatetime<=" + WFSUtil.TO_DATE(toDate, true, dbType);
                } else {
                    todateString = " and actiondatetime<=" + WFSUtil.getDate(dbType) + "+1";
                }
                stmt = con.createStatement();
                rs = stmt.executeQuery("Select userid from queuedeftable " + WFSUtil.getTableLockHintStr(dbType) + " ,queueusertable " + WFSUtil.getTableLockHintStr(dbType) + "  where queuedeftable.queueid=queueusertable.queueid and queuedeftable.queuetype='U' and queuedeftable.queueid=" + queueId);
                if (rs.next()) {
                    uid = rs.getInt(1);
                }
                if (rs != null) {
                    rs.close();
                }
                stmt.close();
                WFReportInfo repInfo = null;
                repInfo = WFSUtil.getReportGroupBy(repType, dbType, "actionDatetime"); //SRNo-4
                datepart = repInfo.getInterval();
                datefromPart = repInfo.getFromDate();
                datetoPart = repInfo.getToDate();
                /*	************************************************************************************	*/
                /*		Change By	: Krishan Dutt Dixit													*/
                /*		Reason		: Query changed according to Oracle datetime methods					*/
                /*		Date		: 16/06/2004															*/
                /*		Bug No.		: WSE_I_5.0.1_124														*/
                /*	************************************************************************************	*/
                if (uid == 0) {
                    // 	Active Users count should be 0
                    // Tirupati Srivastava : changes made to make code compatible with postgreSQL
                    finalexeStr = " select a.datepart, a.fromdate, a.todate, a.terminated, a.Processed, "
                        + "0 as queueload, a.aborted, a.expired, a.New1 "
                        + " from ( select  " + datepart + " as datepart, " + datefromPart + " as fromdate, " + datetoPart
                        + " as todate, sum(totalwicount * (1 - abs(sign ( actionid - " + WFSConstant.WFL_ProcessInstanceTerminated + ")))) as terminated,"
                        + "	(sum(totalwicount * (1 - abs(sign (actionid - 27)))) + sum(totalwicount * (1 - abs(sign ( actionid - 2)))) ) as Processed"
                        + ",sum(totalwicount * (1 - abs(sign (actionid - " + WFSConstant.WFL_ProcessInstanceAborted + ")))) as aborted"
                        + ",sum(totalwicount * (1 - abs(sign (actionid - " + WFSConstant.WFL_WorkItemExpired + ")))) as expired ,"
                        + "(sum(totalwicount * (1 - abs(sign (actionid - 4)))) + sum(totalwicount * (1 - abs(sign ( actionid - 6)))) + sum(totalwicount*(1-abs(sign ( actionid - 1)))) ) as New1"
                        + " from summarytable T "
                        + WFSUtil.getTableLockHintStr(dbType) + " where T.queueid=" + queueId + fromdateString + todateString
                        + "	group by " + datefromPart + " , "
                        + datetoPart + " , " + datepart + " ) a ORDER BY 1 ASC"
                        + WFSUtil.getQueryLockHintStr(dbType);
                    switch (dbType) {
                        case JTSConstant.JTS_MSSQL:
                            //Bug 31- Bugzilla
                            exeStr = " select (select count(distinct processinstanceid) from " + tableName + WFSUtil.getTableLockHintStr(dbType)
                                + " where ( actionid=" + WFSConstant.WFL_ProcessInstanceRouted
                                + " or actionid=" + WFSConstant.WFL_ProcessInstanceDistributed + " or actionid=" + WFSConstant.WFL_CreateProcessInstance + ") and " + queueCol + "= " + queueId
                                + " and actiondatetime<" + WFSUtil.TO_DATE(fromDate, true, dbType) + " ) - "
                                + WFSUtil.isnull(dbType) + "  ( (select  count(distinct processinstanceid) from " + tableName + WFSUtil.getTableLockHintStr(dbType)
                                + " where "
                                + queueCol + "= " + queueId + " and actionid in ( " + WFSConstant.WFL_WorkItemCompleted + "," + WFSConstant.WFL_ProcessInstanceTerminated + "," + WFSConstant.WFL_ProcessInstanceAborted + "," + WFSConstant.WFL_StartProcessInstance + "," + WFSConstant.WFL_WorkItemExpired + " ) "
                                + " and actiondatetime<" + WFSUtil.TO_DATE(fromDate, true, dbType) + " ),0) ";
                            break;
                        case JTSConstant.JTS_POSTGRES:

                            // Tirupati Srivastava : changes made to make code compatible with postgreSQL
                            exeStr = " select (select count(distinct processinstanceid) from " + tableName + WFSUtil.getTableLockHintStr(dbType)
                                + " where ( actionid=" + WFSConstant.WFL_ProcessInstanceRouted
                                + " or actionid=" + WFSConstant.WFL_ProcessInstanceDistributed + " or actionid=" + WFSConstant.WFL_CreateProcessInstance + ") and " + queueCol + "= " + queueId
                                + " and actiondatetime<" + WFSUtil.TO_DATE(fromDate, true, dbType) + " ) - "
                                + WFSUtil.isnull(dbType) + "  ( (select  count(distinct processinstanceid) from " + tableName
                                + " where "
                                + queueCol + "= " + queueId + " and actionid in ( " + WFSConstant.WFL_WorkItemCompleted + "," + WFSConstant.WFL_ProcessInstanceTerminated + "," + WFSConstant.WFL_ProcessInstanceAborted + "," + WFSConstant.WFL_StartProcessInstance + "," + WFSConstant.WFL_WorkItemExpired + " ) "
                                + " and actiondatetime<" + WFSUtil.TO_DATE(fromDate, true, dbType) + " ),0) ";
                            break;
                        case JTSConstant.JTS_ORACLE:
                            exeStr = " select (select count(*) from " + tableName
                                + "  where ( actionid=" + WFSConstant.WFL_ProcessInstanceRouted
                                + " or actionid=" + WFSConstant.WFL_ProcessInstanceDistributed + " or actionid=" + WFSConstant.WFL_CreateProcessInstance + ") and " + queueCol + "= " + queueId
                                + " and actiondatetime<" + WFSUtil.TO_DATE(fromDate, true, dbType) + " ) - "
                                + WFSUtil.isnull(dbType) + "  ( (select  sum(1-abs(sign ( actionid - " + WFSConstant.WFL_WorkItemCompleted
                                + ")))+ sum(1-abs(sign ( actionid - " + WFSConstant.WFL_ProcessInstanceTerminated + "))) "
                                + "	 + sum(1-abs(sign ( actionid - " + WFSConstant.WFL_ProcessInstanceAborted
                                + "))) + sum(1-abs(sign ( actionid - " + WFSConstant.WFL_StartProcessInstance
                                + "))) + sum(1-abs(sign ( actionid - " + WFSConstant.WFL_WorkItemExpired + "))) "
                                + " from " + tableName 
                                + " where " + queueCol + "= " + queueId
                                + " and actiondatetime<" + WFSUtil.TO_DATE(fromDate, true, dbType) + " ),0) " + WFSUtil.getDummyTableName(dbType);
                            break;
                        case JTSConstant.JTS_DB2: //Coded For DB2
                            exeStr = " select (select count(*) from " + tableName
                                + "  where ( actionid=" + WFSConstant.WFL_ProcessInstanceRouted
                                + " or actionid=" + WFSConstant.WFL_ProcessInstanceDistributed + " or actionid=" + WFSConstant.WFL_CreateProcessInstance + ") and " + queueCol + "= " + queueId
                                + " and actiondatetime<" + WFSUtil.TO_DATE(fromDate, true, dbType) + " ) - "
                                + WFSUtil.isnull(dbType) + "  ( (select  sum(1-abs(sign ( actionid - " + WFSConstant.WFL_WorkItemCompleted
                                + ")))+ sum(1-abs(sign ( actionid - " + WFSConstant.WFL_ProcessInstanceTerminated + "))) "
                                + "	 + sum(1-abs(sign ( actionid - " + WFSConstant.WFL_ProcessInstanceAborted
                                + "))) + sum(1-abs(sign ( actionid - " + WFSConstant.WFL_StartProcessInstance
                                + "))) + sum(1-abs(sign ( actionid - " + WFSConstant.WFL_WorkItemExpired + "))) "
                                + " from " + tableName
                                + " where " + queueCol + "= " + queueId
                                + " and actiondatetime<" + WFSUtil.TO_DATE(fromDate, true, dbType) + " ),0) " + WFSUtil.getDummyTableName(dbType)
                                + WFSUtil.getQueryLockHintStr(dbType);
                            break;
                    }
                } else {
                    // 	Active Users count should be 0
                    // Tirupati Srivastava : changes made to make code compatible with postgreSQL
                    finalexeStr = " select  a.datepart,a.fromdate,a.todate,a.terminated, a.Processed,"
                        + "0  as queueload,a.aborted,a.expired,a.New1"
                        + "  from (  select  " + datepart + " as datepart, " + datefromPart + " as fromdate, " + datetoPart
                        + " as todate , sum(totalwicount*(1-abs(sign ( actionid - " + WFSConstant.WFL_ProcessInstanceTerminated + ")))) as terminated,"
                        + "	(sum(totalwicount*(1-abs(sign ( actionid - 27)))) + sum(totalwicount*(1-abs(sign ( actionid - 2)))) ) as Processed"
                        + ",sum(totalwicount*(1-abs(sign ( actionid - " + WFSConstant.WFL_ProcessInstanceAborted + ")))) as aborted"
                        + ",sum(totalwicount*(1-abs(sign ( actionid - " + WFSConstant.WFL_WorkItemExpired + ")))) as expired,"
                        + "(sum(totalwicount*(1-abs(sign ( actionid - 4)))) + sum(totalwicount*(1-abs(sign ( actionid - 6)))) + sum(totalwicount*(1-abs(sign ( actionid - 1)))) ) as New1"
                        + " from summarytable T "
                        + WFSUtil.getTableLockHintStr(dbType) + "  where T.userId= " + uid + fromdateString + todateString
                        + "	group by " + datefromPart + " , "
                        + datetoPart + " , " + datepart + " ) a ORDER BY 1 ASC" + WFSUtil.getQueryLockHintStr(dbType);

                    switch (dbType) {
                        case JTSConstant.JTS_MSSQL:
                            exeStr = " select (select count(distinct processinstanceid) from " + tableName + WFSUtil.getTableLockHintStr(dbType)
                                + " where ( actionid=" + WFSConstant.WFL_ProcessInstanceRouted
                                + " or actionid=" + WFSConstant.WFL_ProcessInstanceDistributed + " or actionid=" + WFSConstant.WFL_CreateProcessInstance + " or actionid=" + WFSConstant.WFL_WorkItemLock + " ) and userId= " + uid
                                + " and actiondatetime<" + WFSUtil.TO_DATE(fromDate, true, dbType) + " ) - "
                                + WFSUtil.isnull(dbType) + "  ( (select  count(distinct processinstanceid) from " + tableName + WFSUtil.getTableLockHintStr(dbType)
                                + " where  userId= " + uid + " and actionid in (" + WFSConstant.WFL_WorkItemCompleted + "," + WFSConstant.WFL_ProcessInstanceTerminated + "," + WFSConstant.WFL_ProcessInstanceAborted + "," + WFSConstant.WFL_StartProcessInstance + "," + WFSConstant.WFL_WorkItemExpired + " ) "
                                + " and actiondatetime<" + WFSUtil.TO_DATE(fromDate, true, dbType) + " ),0) ";
                            break;
                        case JTSConstant.JTS_POSTGRES:

                            // Tirupati Srivastava : changes made to make code compatible with postgreSQL
                            exeStr = " select (select count(distinct processinstanceid) from " + tableName
                                + " where ( actionid=" + WFSConstant.WFL_ProcessInstanceRouted
                                + " or actionid=" + WFSConstant.WFL_ProcessInstanceDistributed + " or actionid=" + WFSConstant.WFL_CreateProcessInstance + " or actionid=" + WFSConstant.WFL_WorkItemLock + " ) and userId= " + uid
                                + " and actiondatetime<" + WFSUtil.TO_DATE(fromDate, true, dbType) + " ) - "
                                + WFSUtil.isnull(dbType) + "  ( (select  count(distinct processinstanceid) from " + tableName
                                + " where  userId= " + uid + " and actionid in (" + WFSConstant.WFL_WorkItemCompleted + "," + WFSConstant.WFL_ProcessInstanceTerminated + "," + WFSConstant.WFL_ProcessInstanceAborted + "," + WFSConstant.WFL_StartProcessInstance + "," + WFSConstant.WFL_WorkItemExpired + " ) "
                                + " and actiondatetime<" + WFSUtil.TO_DATE(fromDate, true, dbType) + " ),0) ";
                            break;
                        case JTSConstant.JTS_ORACLE:
                            exeStr = " select (select count(*) from " + tableName
                                + " where ( actionid=" + WFSConstant.WFL_ProcessInstanceRouted
                                + " or actionid=" + WFSConstant.WFL_ProcessInstanceDistributed + " or actionid=" + WFSConstant.WFL_CreateProcessInstance + "or actionid=" + WFSConstant.WFL_WorkItemLock + ") and userId= " + uid
                                + " and actiondatetime<" + WFSUtil.TO_DATE(fromDate, true, dbType) + " ) - "
                                + WFSUtil.isnull(dbType) + "  ( (select  sum(1-abs(sign ( actionid - " + WFSConstant.WFL_WorkItemCompleted
                                + ")))+ sum(1-abs(sign ( actionid - " + WFSConstant.WFL_ProcessInstanceTerminated + "))) "
                                + "	 + sum(1-abs(sign ( actionid - " + WFSConstant.WFL_ProcessInstanceAborted
                                + "))) + sum(1-abs(sign ( actionid - " + WFSConstant.WFL_StartProcessInstance
                                + "))) + sum(1-abs(sign ( actionid - " + WFSConstant.WFL_WorkItemExpired + "))) "
                                + " from " + tableName
                                + " where " + " userid= " + uid
                                + " and actiondatetime<" + WFSUtil.TO_DATE(fromDate, true, dbType) + " ),0) " + WFSUtil.getDummyTableName(dbType);
                            break;
                        case JTSConstant.JTS_DB2: //Coded For DB2
                            exeStr = " select (select count(*) from " + tableName
                                + " where ( actionid=" + WFSConstant.WFL_ProcessInstanceRouted
                                + " or actionid=" + WFSConstant.WFL_ProcessInstanceDistributed + " or actionid=" + WFSConstant.WFL_CreateProcessInstance + "or actionid=" + WFSConstant.WFL_WorkItemLock + ") and userId= " + uid
                                + " and actiondatetime<" + WFSUtil.TO_DATE(fromDate, true, dbType) + " ) - "
                                + WFSUtil.isnull(dbType) + "  ( (select  sum(1-abs(sign ( actionid - " + WFSConstant.WFL_WorkItemCompleted
                                + ")))+ sum(1-abs(sign ( actionid - " + WFSConstant.WFL_ProcessInstanceTerminated + "))) "
                                + "	 + sum(1-abs(sign ( actionid - " + WFSConstant.WFL_ProcessInstanceAborted
                                + "))) + sum(1-abs(sign ( actionid - " + WFSConstant.WFL_StartProcessInstance
                                + "))) + sum(1-abs(sign ( actionid - " + WFSConstant.WFL_WorkItemExpired + "))) "
                                + " from " + tableName
                                + " where " + " userid= " + uid
                                + " and actiondatetime<" + WFSUtil.TO_DATE(fromDate, true, dbType) + " ),0) " + WFSUtil.getDummyTableName(dbType);
                            break;
                    }
                }
                pstmt = con.prepareStatement(exeStr);
                pstmt.execute();
                rs = pstmt.getResultSet();
                if (rs.next()) {
                    tempXml.append(gen.writeValueOf("Total", String.valueOf(rs.getInt(1))));
                }
                if (rs != null) {
                    rs.close();
                }
                pstmt = con.prepareStatement(finalexeStr);
                pstmt.execute();
                rs = pstmt.getResultSet();
                tempXml.append("\n<ResultList>\n");
                while (rs.next()) {
                    i++;
                    tempXml.append("\n<Result>\n");
                    tempXml.append(gen.writeValueOf("Unit", String.valueOf(rs.getInt(1))));
                    tempXml.append(gen.writeValueOf("MinDate", rs.getString(2)));
                    tempXml.append(gen.writeValueOf("MaxDate", rs.getString(3)));
                    tempXml.append(gen.writeValueOf("Terminated", String.valueOf(rs.getInt(4))));
                    tempXml.append(gen.writeValueOf("Processed", String.valueOf(rs.getInt(5))));
                    tempXml.append(gen.writeValueOf("ActiveUsers", String.valueOf(rs.getInt(6))));
                    //Active Users coloumn for  users who have unlocked the workitem.(Actionid for locking removed)
                    tempXml.append(gen.writeValueOf("Aborted", String.valueOf(rs.getInt(7))));
                    tempXml.append(gen.writeValueOf("Expired", String.valueOf(rs.getInt(8))));
                    tempXml.append(gen.writeValueOf("New", String.valueOf(rs.getInt(9))));
                    tempXml.append("\n</Result>\n");
                }
                if (i > 0) {
                    tempXml.append("</ResultList>\n");
                }
            } else {
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            if (mainCode == 0) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFGetQueueLoadHistory"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append("<From>");
                outputXML.append(fromDate);
                outputXML.append("</From>");
                outputXML.append("<To>");
                outputXML.append(toDate);
                outputXML.append("</To>");
                outputXML.append(tempXml);
                outputXML.append(gen.closeOutputFile("WFGetQueueLoadHistory"));
            } else if (mainCode == 18) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFGetQueueLoadHistory"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append("<From>");
                outputXML.append(fromDate);
                outputXML.append("</From>");
                outputXML.append("<To>");
                outputXML.append(toDate);
                outputXML.append("</To>");
                outputXML.append(gen.closeOutputFile("WFGetQueueLoadHistory"));
            }
        } catch (SQLException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (JTSException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
        } catch (Exception e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
        	try{
				if(rs!=null){
					rs.close();
					rs=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
            try {
                if (stmt != null) {
                    stmt.close();
                    stmt = null;
                }
            } catch (Exception e) {
            	WFSUtil.printErr(engine,"", e);
            }
            try { //Bug WFS_6_004 - Statement closed in finally.
                if (pstmt != null) {
                    pstmt.close();
                    pstmt = null;
                }
            } catch (Exception ignored) {
            	WFSUtil.printErr(engine,"", ignored);
            }
           
        }
        if (mainCode != 0 && mainCode != 18) {
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();
    }

//----------------------------------------------------------------------------------------------------
//	Function Name 						:	WFGetProcessLoadHistory
//	Date Written (DD/MM/YYYY)			:	18/06/2002
//	Author								:	Advid Parmar
//	Input Parameters					:	Connection , XMLParser , XMLGenerator
//	Output Parameters					:   none
//	Return Values						:	String
//	Description							:   Reports the process load history
//
//----------------------------------------------------------------------------------------------------
    public String WFGetProcessLoadHistory(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
    	 StringBuffer outputXML = new StringBuffer("");
        PreparedStatement pstmt = null;
        int mainCode = 0;
        int subCode = 0;
        ResultSet rs = null;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        String engine ="";
        
        try {
            int sessionID = parser.getIntOf("SessionId", 0, false);
            int processdefId = parser.getIntOf("ProcessDefinitionId", 0, false);
            String fromDate = parser.getValueOf("From", "", true);
            String toDate = parser.getValueOf("To", "", true);
            engine= parser.getValueOf("EngineName");
            if (toDate.indexOf(" ") == -1) {
                toDate += " 23:59:59.999";
            }
            char repType = parser.getCharOf("ReportType", WFSConstant.CONST_TYPE_DAY, true);
            char reportDuration = parser.getCharOf("Duration", '\0', true);
            int dbType = ServerProperty.getReference().getDBType(engine);
            /**
             * Changed On  : May 12th 2007
             * Changed By  : Ruhi Hira
             * Description : calculate dates at server for reports, SrNo-5.
             */
            if (reportDuration != '\0') {
                String[] temp = WFSUtil.dateCalculator(reportDuration, repType, dbType, parser);
                fromDate = temp[0];
                toDate = temp[1];
            }
            String exeStr = "";
            String datefromPart = "";
            String datepart = "";
            String datetoPart = "";
            String activitystr = "";
            String processstr = "";
            String fromdateString = "";
            String fromlessString = "";
            String todateString = "";
            StringBuffer tempstrbuf = new StringBuffer(100);
            int i = 0;
            WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
            StringBuffer tempXml = new StringBuffer(100);
            if (user != null && user.gettype() == 'U') {
                if (!fromDate.equals("")) {
                    fromdateString = " and actiondatetime>=" + WFSUtil.TO_DATE(fromDate, true, dbType);
                    fromlessString = "  actiondatetime<=" + WFSUtil.TO_DATE(fromDate, true, dbType) + " or ";
                } else {
                    fromlessString = "  ";
                }
                if (!toDate.equals("")) {
                    todateString = "  actiondatetime<=" + WFSUtil.TO_DATE(toDate, true, dbType);
                } else {
                    todateString = "  actiondatetime<= " + WFSUtil.getDate(dbType) + "+1";
                }
                WFReportInfo repInfo = null;
                repInfo = WFSUtil.getReportGroupBy(repType, dbType, "actionDatetime"); //SRNo-4
                datepart = repInfo.getInterval();
                datefromPart = repInfo.getFromDate();
                datetoPart = repInfo.getToDate();
                exeStr = "select sum(totalwicount*(1-abs(sign ( actionid - 1))))-sum(totalwicount*(1-abs(sign ( actionid - 20 ))))"
                    + " - sum(totalwicount*(1-abs(sign ( actionid - 25 ))))-sum(totalwicount*(1-abs(sign ( actionid - 5 )))) "
                    + " from summarytable " + WFSUtil.getTableLockHintStr(dbType) + "where actionid in(1,5,20,25) and processdefid=" + processdefId
                    + " and  ( actiondatetime<=" + WFSUtil.TO_DATE(fromDate, true, dbType) + ")"
                    + WFSUtil.getQueryLockHintStr(dbType);
                pstmt = con.prepareStatement(exeStr);
                pstmt.execute();
                rs = pstmt.getResultSet();
                if (rs.next()) {
                    tempXml.append(gen.writeValueOf("Total", String.valueOf(rs.getInt(1))));
                }
                exeStr = " select " + datepart + " , " + datefromPart + " , "
                    + datetoPart + " , " + " sum(totalwicount * (1 - abs(sign ( actionid - " + WFSConstant.WFL_CreateProcessInstance + ")))), sum(totalwicount*(1-abs(sign ( actionid - " + WFSConstant.WFL_ProcessInstanceCompleted + ")))) "
                    + ", sum(totalwicount * (1 - abs(sign ( actionid - " + WFSConstant.WFL_ProcessInstanceTerminated + " )))) "
                    + ", sum(totalwicount * (1 - abs(sign ( actionid - " + WFSConstant.WFL_ProcessInstanceAborted + " )))) " // Bugzilla Bug 112
                    + " from summarytable T "
                    + WFSUtil.getTableLockHintStr(dbType) + " where actionid in(1,20,25,5) and processdefid=" + processdefId + fromdateString + " and "
                    + todateString + " group by  " + datefromPart + "," + datetoPart + " , " + datepart + " order by " + datepart
                    + WFSUtil.getQueryLockHintStr(dbType);
                pstmt = con.prepareStatement(exeStr);
                pstmt.execute();
                rs = pstmt.getResultSet();
                tempXml.append("\n<ResultList>\n");
                while (rs.next()) {
                    i++;
                    tempXml.append("\n<Result>\n");
                    tempXml.append(gen.writeValueOf("Unit", String.valueOf(rs.getInt(1))));
                    tempXml.append(gen.writeValueOf("MinDate", rs.getString(2)));
                    tempXml.append(gen.writeValueOf("MaxDate", rs.getString(3)));
                    tempXml.append(gen.writeValueOf("New", String.valueOf(rs.getInt(4))));
                    tempXml.append(gen.writeValueOf("Completed", String.valueOf(rs.getInt(5))));
                    tempXml.append(gen.writeValueOf("Terminated", String.valueOf(rs.getInt(6))));
                    tempXml.append(gen.writeValueOf("Aborted", String.valueOf(rs.getInt(7))));
                    tempXml.append("\n</Result>\n");
                }
                if (i > 0) {
                    tempXml.append("</ResultList>\n");
                } else {
                    mainCode = WFSError.WM_NO_MORE_DATA;
                    subCode = 0;
                    subject = WFSErrorMsg.getMessage(mainCode);
                    descr = WFSErrorMsg.getMessage(subCode);
                    errType = WFSError.WF_TMP;
                }
            } else {
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            if (mainCode == 0) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFGetProcessLoadHistory"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append("<From>");
                outputXML.append(fromDate);
                outputXML.append("</From>");
                outputXML.append("<To>");
                outputXML.append(toDate);
                outputXML.append("</To>");
                outputXML.append(tempXml);
                outputXML.append(gen.closeOutputFile("WFGetProcessLoadHistory"));
            } else if (mainCode == 18) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFGetProcessLoadHistory"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append("<From>");
                outputXML.append(fromDate);
                outputXML.append("</From>");
                outputXML.append("<To>");
                outputXML.append(toDate);
                outputXML.append("</To>");
                outputXML.append(gen.closeOutputFile("WFGetProcessLoadHistory"));
            }
        } catch (SQLException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (JTSException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
        } catch (Exception e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
        	try{
				if(rs!=null){
					rs.close();
					rs=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}

            try {
                if (pstmt != null) {
                    pstmt.close();
                    pstmt = null;
                }
            } catch (Exception e) {
            	WFSUtil.printErr(engine,"", e);
            }
           
        }
        if (mainCode != 0 && mainCode != 18) {
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();
    }

//----------------------------------------------------------------------------------------------------
//	Function Name 						:	WFGetWorkAuditHistory
//	Date Written (DD/MM/YYYY)			:	18/06/2002
//	Author								:	Advid Parmar
//	Input Parameters					:	Connection , XMLParser , XMLGenerator
//	Output Parameters					:   none
//	Return Values						:	String
//	Description							:   Reports the work audit history
//
//----------------------------------------------------------------------------------------------------
    public String WFGetWorkAuditHistory(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
    	 StringBuffer outputXML = new StringBuffer("");
        PreparedStatement pstmt = null;
        int mainCode = 0;
        int subCode = 0;
        ResultSet rs = null;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        String engine="";
        try {
        	
            int sessionID = parser.getIntOf("SessionId", 0, false);
            int userId = parser.getIntOf("UserId", 0, false);
            String exeStr = "";
            String datefromPart = "";
            String datepart = "";
            String datetoPart = "";
            String activitystr = "";
            String processstr = "";
            String fromdateString = "";
            String fromlessString = "";
            String todateString = "";
            engine = parser.getValueOf("EngineName");
            int dbType = ServerProperty.getReference().getDBType(engine);
            StringBuffer tempstrbuf = new StringBuffer(100);
            int i = 0;
            StringBuffer tempXml = new StringBuffer(100);
            WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
			String tableName = "WFRouteLogView";	/** @todo for backward compatiblity, variable to be initialized on the basis of flag.*/
            //  Batching support starts here.
            String lastvalue = parser.getValueOf("LastValue", "", true);
            char sortOrder = parser.getCharOf("SortOrder", 'A', true);
            int noofrecords = parser.getIntOf("NoOfRecordsToFetch", ServerProperty.getReference().getBatchSize(), true);
            if (noofrecords > ServerProperty.getReference().getBatchSize() || noofrecords <= 0) //Added by Ahsan Javed for getBatchSize
                noofrecords = ServerProperty.getReference().getBatchSize();
            String logId = parser.getValueOf("LogId", "0", true);
            String lastvalueStr = "";
            String srtby = "";
//            StringBuffer tempXml = new StringBuffer(100);
            switch (sortOrder) {
                case 'A':
                    if (!lastvalue.equals("")) {
                        lastvalueStr = " and (actiondatetime > " + WFSUtil.TO_DATE(lastvalue, true, dbType) + " OR ( actiondatetime = " + WFSUtil.TO_DATE(lastvalue, true, dbType) + " And LogId > " + logId + " ) ) ";
                    }
                    srtby = " ASC";
                    break;
                case 'D':
                    if (!lastvalue.equals("")) {
                        lastvalueStr = " and (actiondatetime < " + WFSUtil.TO_DATE(lastvalue, true, dbType) + " OR ( actiondatetime = " + WFSUtil.TO_DATE(lastvalue, true, dbType) + " And LogId < " + logId + " ) ) ";
                    }
                    srtby = " DESC";
                    break;
            }
			if (user != null && user.gettype() == 'U') {
                exeStr = "Select processinstanceid, workitemid, ProcessDefId, activityname, username, actionid, "
                    + " actiondatetime, LogId from " + tableName + WFSUtil.getTableLockHintStr(dbType) 
					+ " where actionid in (32,33,34) and associatedfieldid = ?"
                    + lastvalueStr 
                    + " ORDER BY ActionDateTime " + srtby + ", LOGID " + srtby;
/*                    + " order by processinstanceid, workitemid, actiondatetime "
                    + WFSUtil.getQueryLockHintStr(dbType);*/
                pstmt = con.prepareStatement(exeStr);
				pstmt.setInt(1, userId);
                pstmt.execute();
                rs = pstmt.getResultSet();
                tempXml.append("\n<ResultList>\n");

				int tot = 0;
				String processName = null;
				String auditStatus = null;
                while (rs.next()) {
                    if(i < noofrecords) {
						tempXml.append("\n<Result>\n");
						tempXml.append(gen.writeValueOf("RegistrationNumber", rs.getString(1)));
						tempXml.append(gen.writeValueOf("WorkItemId", rs.getString(2)));
						int processDefId = rs.getInt("ProcessDefId");
						processName = CachedObjectCollection.getReference().getProcessName(con, engine, processDefId);
						tempXml.append(gen.writeValueOf("ProcessName", processName));
						tempXml.append(gen.writeValueOf("ActivityName", rs.getString(4)));
						tempXml.append(gen.writeValueOf("AuditorName", rs.getString(5)));
						int actionId = rs.getInt("actionid");
						auditStatus = (actionId == 32 ? "Reject" : (actionId == 33 ? "Accept" : "Set"));
						tempXml.append(gen.writeValueOf("AuditStatus", auditStatus));
						tempXml.append(gen.writeValueOf("ActionDatetime", rs.getString(7)));
						tempXml.append(gen.writeValueOf("LogId", rs.getString(8)));
                        tempXml.append("\n</Result>\n");
                        i++;
                    }
                    tot++;
					
                }
                if (i > 0) {
					tempXml.append("</ResultList>\n");
                    tempXml.append(gen.writeValueOf("TotalCount", String.valueOf(tot)));
                    tempXml.append(gen.writeValueOf("RetrievedCount", String.valueOf(i)));
                } else {
                    mainCode = WFSError.WM_NO_MORE_DATA;
                    subCode = 0;
                    subject = WFSErrorMsg.getMessage(mainCode);
                    descr = WFSErrorMsg.getMessage(subCode);
                    errType = WFSError.WF_TMP;
                }
            } else {
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            if (mainCode == 0) {
                outputXML = new StringBuffer(500);
                /* Changed By Varun Bhansaly on 08/02/2007 for Bugzilla Bug Id 468 */
                outputXML.append(gen.createOutputFile("WFGetWorkAuditHistory"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append(tempXml);
                /* Changed By Varun Bhansaly on 08/02/2007 for Bugzilla Bug Id 468 */
                outputXML.append(gen.closeOutputFile("WFGetWorkAuditHistory"));
            }
        } catch (SQLException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (JTSException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
        } catch (Exception e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
        	try{
				if(rs!=null){
					rs.close();
					rs=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}

            try {
                if (pstmt != null) {
                    pstmt.close();
                    pstmt = null;
                }
            } catch (Exception e) {}
           
        }
        if (mainCode != 0) {
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();
    }

//----------------------------------------------------------------------------------------------------
//	Function Name 						:	WFGetIdforName
//	Date Written (DD/MM/YYYY)			:	18/06/2002
//	Author								:	Advid Parmar
//	Input Parameters					:	Connection , XMLParser , XMLGenerator
//	Output Parameters					:   none
//	Return Values						:	String
//	Description							:   Returns the Id of object type depending on name
//
//----------------------------------------------------------------------------------------------------
    public String WFGetIdforName(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
    	 StringBuffer outputXML = new StringBuffer("");
        PreparedStatement pstmt = null;
        int mainCode = 0;
        int subCode = 0;
        
		String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        String engine ="";
        try {
            int sessionID = parser.getIntOf("SessionId", 0, false);
            String exeStr = "";
            engine = parser.getValueOf("EngineName");
            String objectType = parser.getValueOf("ObjectType", "", false);
            String objectName = parser.getValueOf("ObjectName", "", false);
            int dbType = ServerProperty.getReference().getDBType(engine);
            StringBuffer tempXml = new StringBuffer(100);
            WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
            if (user != null) {
                String[] strArray = WFSUtil.getIdForName(con,dbType,objectName, objectType, parser);
				if (strArray != null) {
					tempXml.append(gen.writeValueOf(strArray[0], strArray[1]));
                } else {
                    mainCode = WFSError.WM_NO_MORE_DATA;
                    subCode = 0;
                    subject = WFSErrorMsg.getMessage(mainCode);
                    descr = WFSErrorMsg.getMessage(subCode);
                    errType = WFSError.WF_TMP;
                }
            } else {
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            if (mainCode == 0) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFGetIdforName"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append(tempXml);
                outputXML.append(gen.closeOutputFile("WFGetIdforName"));
            }
        } catch (SQLException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (JTSException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
        } catch (Exception e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
            try {
                if (pstmt != null) {
                    pstmt.close();
                    pstmt = null;
                }
            } catch (Exception e) {}
           
        }
        if (mainCode != 0) {
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();
    }
	
//	 private String WFDeleteWorkitemHistoryNew(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException
//    {
//        StringBuffer outputXML = null;
//        ResultSet rs = null;
//        int mainCode = 0;
//        int subCode = 0;
//        String subject = null;
//        String descr = null;
//        String errType = WFSError.WF_TMP;
//        PreparedStatement pstmt = null;        
//        try
//        {
//            int sessionID = parser.getIntOf("SessionId", 0, false);
//            String engine = parser.getValueOf("EngineName");
//            String procInstID = parser.getValueOf("processinstanceid");
//            int dbType = ServerProperty.getReference().getDBType(engine);
//            
//            //WFSUtil.printOut(procInstID);
//            //WFSUtil.printOut(engine);            
//            WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
//           if (participant != null)
//           {
//                pstmt = con.prepareStatement("delete from wfcurrentroutelogtable where processinstanceid = ? ");
//                WFSUtil.DB_SetString(1, procInstID, pstmt, dbType);                     
//                pstmt.execute();
//                rs = pstmt.getResultSet();
//                if(rs != null)
//                {
//                 rs.close(); 
//                 rs = null;
//                }
//                if(pstmt != null) 
//                {
//		 pstmt.close();
//		 pstmt = null;
//                }
//          }
//          else
//          {
//            mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
//            subCode = 0;
//            subject = WFSErrorMsg.getMessage(mainCode);
//            descr = WFSErrorMsg.getMessage(subCode);
//            errType = WFSError.WF_TMP;
//          }
//           
//          if(mainCode == 0) 
//          {
//            outputXML = new StringBuffer(500);
//            outputXML.append(gen.createOutputFile("WFDeleteWorkitemHistory"));
//            outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
//            outputXML.append(gen.closeOutputFile("WFDeleteWorkitemHistory"));
//          }      
//      }
//        catch (SQLException e) {
//            WFSUtil.printErr("", e);
//            mainCode = WFSError.WM_INVALID_FILTER;
//            subCode = WFSError.WFS_SQL;
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_FAT;
//            if (e.getErrorCode() == 0) {
//                if (e.getSQLState().equalsIgnoreCase("08S01")) {
//                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
//                }
//            } else {
//                descr = e.getMessage();
//            }
//        } catch (NumberFormatException e) {
//            WFSUtil.printErr("", e);
//            mainCode = WFSError.WF_OPERATION_FAILED;
//            subCode = WFSError.WFS_ILP;
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_TMP;
//            descr = e.toString();
//        } catch (NullPointerException e) {
//            WFSUtil.printErr("", e);
//            mainCode = WFSError.WF_OPERATION_FAILED;
//            subCode = WFSError.WFS_SYS;
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_TMP;
//            descr = e.toString();
//        } catch (WFSException e) {
//            mainCode = WFSError.WM_NO_MORE_DATA;
//            subCode = 0;
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_TMP;
//            descr = WFSErrorMsg.getMessage(subCode);
//        } catch (JTSException e) {
//            mainCode = WFSError.WF_OPERATION_FAILED;
//            subCode = e.getErrorCode();
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_TMP;
//            descr = e.getMessage();
//        } catch (Exception e) {
//            WFSUtil.printErr("", e);
//            mainCode = WFSError.WF_OPERATION_FAILED;
//            subCode = WFSError.WFS_EXP;
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_TMP;
//            descr = e.toString();
//        } catch (Error e) {
//            WFSUtil.printErr("", e);
//            mainCode = WFSError.WF_OPERATION_FAILED;
//            subCode = WFSError.WFS_EXP;
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_TMP;
//            descr = e.toString();
//        }
//        
//        finally {
//            try {
//		if (pstmt != null) {
//                    pstmt.close();
//                    pstmt = null;
//                }
//            }
//            catch (Exception e) {}
//            
//             try {
//		if (rs != null) {
//                    rs.close();
//                    rs = null;
//                }
//            }
//            catch (Exception e) {}
//            if (mainCode != 0) {
//                throw new WFSException(mainCode, subCode, errType, subject, descr);
//            }
//        }
//       return outputXML.toString();
//        
//    }

    /******************************************************************************************************************************
     Function Name		:	WFUploadWorkItem
     Date Written 		:	06/05/2004
     Author				:	Dinesh Parikh
     Input Parameters	:	Connection , XMLParser , XMLGenerator
     Output Parameters	:   None
     Return Values		:	String
     Description		:   Upload a workitem in Omniflow through omnicapture (Accepts data as a single value)
                         SrNo-6
     ******************************************************************************************************************************/
    public String WFUploadWorkItem(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
        int subCode = 0;
        int mainCode = 0;
        ResultSet rs = null;
        String descr = null;
        String subject = null;
        String tmpString = null; //WFS_5_091
   //     StringBuffer Query = null;
        StringBuffer outputXML = new StringBuffer("");
        Statement stmt = null;
        CallableStatement cstmt = null;
        PreparedStatement pstmt = null;
        String errType = WFSError.WF_TMP;
        String cursorName = "";
		String processName = null;
		ArrayList columns = new ArrayList();
		String queryString = new String();
		Boolean printQueryFlag = true;
        String queryCallable = null;
        long startTime = 0l;
        long endTime = 0l;
        String engine ="";
        String csName = "";
        String tableName = "";
        String importDataId = "";
        String columnString = "";
		char chr21 = 21;
		String string21 = "" + chr21;
		String urn = null;
		StringBuilder inputParamInfo = new StringBuilder();
        boolean returnExtraData = false;
        String isWorkItemExtInfo = null;
        Date currentDateTime = null;
		PreparedStatement pstmt1 = null;
		ResultSet rs1 = null;
        String sVarValidationRequired;
        String sDbMsg = "";
        String sDbTblNm = "";
        try {
            startTime = System.currentTimeMillis();
            int sessionID = parser.getIntOf("SessionId", 0, false);
            engine = parser.getValueOf("EngineName");
            int queueId = parser.getIntOf("QueueId", 0, true); 
            char pdaFlag = parser.getCharOf("PDAFlag", 'N', true);
            sVarValidationRequired = parser.getValueOf("VarValidationRequried", "N", true);
            WFSUtil.setValidationCheck(sVarValidationRequired);
         //   boolean bSynchronousRoutingFlag = false;
			boolean userDefFlag = parser.getValueOf("UserDefVarFlag", "N", true).equalsIgnoreCase("Y");	
			isWorkItemExtInfo = parser.getValueOf("IsWorkItemExtInfo", "N", true);
			String psFlag = parser.getValueOf("PSFlag","N",true);
			boolean isValidationRequired = parser.getValueOf("IsValidationRequired", "N", true).equalsIgnoreCase("Y");
            int dbType = ServerProperty.getReference().getDBType(engine);
            String newDocIndx = ""; //WFS_7.1_072
			String newDocName = ""; //WFS_7.1_072
			String imgIndx = "";//WFS_7.1_072
			String documentIndexes = "";//WFS_7.1_072
			StringBuffer strDocIndxs = null;//WFS_7.1_072
			String char21 = new String(new byte[]{21});//WFS_7.1_072
			String char25 = new String(new byte[]{25});//WFS_7.1_072
            
            //  Added By     : Varun Bhansaly
            //  Added On     : 20/11/2006
            //  Description  : To provide support for Calendar Feature in Omniflow70
            //SrNo-10
		//	String hyphenRequired = parser.getValueOf("RegHyphen","Y",true);
		//	WFSUtil.printOut(engine,"ssss hyphenRequired	:	"+hyphenRequired);
			 String hyphenRequiredFlag = WFSUtil.isRegHyphen();
            int processDefID = parser.getIntOf("ProcessDefId", 0, true) ;
            boolean debug = parser.getValueOf("DebugFlag", "N", true).equalsIgnoreCase("Y");			
			WFParticipant wfparticipant = WMUser.WFCheckUpdateSession(con, sessionID, dbType);
			inputParamInfo.append(gen.writeValueOf("SessionId", String.valueOf(sessionID)));
			inputParamInfo.append(gen.writeValueOf("UserName", (wfparticipant == null ? "" : wfparticipant.getname())));
            endTime = System.currentTimeMillis();
            String sharepointFlag = parser.getValueOf("SharepointFlag","N",true);
            int libraryId = 0;
            String dmsUserName = "";
            String dmsPass_word = "";
            String docName = "";
            String docPath = "";
            if (sharepointFlag.equalsIgnoreCase("Y")){
                libraryId = parser.getIntOf("LibraryId", 0, true);
                dmsUserName = parser.getValueOf("DMSUserName","",false);
                dmsPass_word = parser.getValueOf("DMSPassword","",false);
            }
            String locale="en_US";
        //    StringBuffer strDocIndxs = null;
            String targetCabinetName = WFSUtil.getTargetCabinetName(con);
			boolean tarHistoryLog= WFSUtil.checkIfHistoryLoggingOnTarget(targetCabinetName);
            if(wfparticipant != null)
            {
            	locale=wfparticipant.getlocale();
            	if(locale==null || (locale!=null && locale.trim().isEmpty())){
            		locale="en_US";
            	}
            	
            	
                String moveRowToHistoryFlag = parser.getValueOf("MoveRowToHistory", "N", true);
                if (moveRowToHistoryFlag.equalsIgnoreCase("Y")) {
                    csName = parser.getValueOf("CSName", "", false);
                    tableName = parser.getValueOf("TableName", "", false);
                    importDataId = parser.getValueOf("ImportDataId", "", false);
                    columnString = parser.getValueOf("ColumnString", "", false);
                }
                HashMap hashIdInsertionIdMap = new HashMap();
		StringBuffer tempXML =new StringBuffer(100);
		StringBuffer extraXML =new StringBuffer(1000);
		int userID = wfparticipant.getid();
                if(debug)
                    WFSUtil.writeLog("WFClientServiceHandlerBean", "WFUploadWorkitem_parsing", startTime, endTime, 0, "", "", engine,(endTime-startTime),sessionID, userID); 
				if(pdaFlag == 'Y' && processDefID == 0){				
                    queryString = "SELECT DISTINCT ProcessDefId from QueueStreamTable " + WFSUtil.getTableLockHintStr(dbType) + "  , QueueDefTable " + WFSUtil.getTableLockHintStr(dbType) + "  where QueueDefTable.QueueType = 'I' and QueueDefTable.QueueId = QueueStreamTable.QueueId and QueueDefTable.QueueId = ? ";
					pstmt = con.prepareStatement(queryString);
                    pstmt.setInt(1, queueId);
                    columns.add(queueId);
					WFSUtil.jdbcExecute(null,sessionID,userID,queryString,pstmt,columns,printQueryFlag,engine);
                    rs = pstmt.getResultSet();
                    int resultRowCount = 0;
                    if(rs != null){
                        while(rs.next()){                    
                            if(resultRowCount > 0){
                                mainCode = WFSError.WM_AMBIGUOUS_PROCESS_DEFINITION;                            
                                subCode = 0;
                                subject = WFSErrorMsg.getMessage(mainCode);                            
                                descr = WFSErrorMsg.getMessage(subCode);                                
                            }else{
                                processDefID = rs.getInt(1);
                            }
                            resultRowCount++;
                        }
                        rs.close();
                        rs = null;
                    }
                    pstmt.close();
                    pstmt = null;                
				}
			//Bugzilla bug 10325
				int introductionActivityId = 0;
				String introductionActivityName = "";
				if(queueId != 0){				
					String strPrimaryActivity = "";
					int resultRowCount = 0;
					queryString = "SELECT QueueDefTable.QueueId,ActivityTable.ActivityId, ActivityName, PrimaryActivity FROM"
							+" ActivityTable,QueueDefTable " + WFSUtil.getTableLockHintStr(dbType) + "  ,QueueStreamTable " + WFSUtil.getTableLockHintStr(dbType) + "  "
							+" WHERE ActivityTable.processdefid = ? AND ActivityTable.processdefid = QueueStreamTable.processdefid "
							+" AND ActivityType = "+WFSConstant.ACT_INTRODUCTION+" and QueueStreamTable.ActivityId = ActivityTable.ActivityId and QueueDefTable.QueueId = QueueStreamTable.queueid and"
							+" QueueDefTable.queueid = ? ";
					pstmt = con.prepareStatement(queryString);
					pstmt.setInt(1, processDefID);
					pstmt.setInt(2, queueId);
					columns = new ArrayList();
					columns.add(processDefID);
					columns.add(queueId);
					WFSUtil.jdbcExecute(null,sessionID,userID,queryString,pstmt,columns,printQueryFlag,engine);
					rs = pstmt.getResultSet();
                    startTime = System.currentTimeMillis();
					if(rs != null){
						while(rs.next()){
							strPrimaryActivity = rs.getString("PrimaryActivity");
							if(resultRowCount > 0){							
								if("Y".equalsIgnoreCase(strPrimaryActivity)){
									introductionActivityId = rs.getInt("ActivityId");                    
									introductionActivityName = rs.getString("ActivityName");
									break;
								}							
							}else{
								introductionActivityId = rs.getInt("ActivityId");                    
								introductionActivityName = rs.getString("ActivityName");
								strPrimaryActivity = rs.getString("PrimaryActivity");
								if("Y".equalsIgnoreCase(strPrimaryActivity)){
									break;
								}
							}
						resultRowCount++;	
						}
						if(resultRowCount > 1 && !"Y".equalsIgnoreCase(strPrimaryActivity)){						
							mainCode = WFSError.WM_INVALID_PROCESS_DEFINITION;
							subCode = WFSError.WM_INVALID_ACTIVITY_DEFINITION;
							subject = WFSErrorMsg.getMessage(mainCode);                            
							descr = WFSErrorMsg.getMessage(subCode);					
						}
                                                if (introductionActivityName == null || introductionActivityName.trim().isEmpty()) {
                                                mainCode = WFSError.WF_ERROR_NON_INTRODUCTION_QUEUEID;
                                                subCode = WFSError.WF_ERROR_NON_INTRODUCTION_QUEUEID;
                                                subject = WFSErrorMsg.getMessage(mainCode);
                                                descr = WFSErrorMsg.getMessage(subCode) + "-" + queueId;
                                            }
					}
                    endTime = System.currentTimeMillis();
                    if(debug)
                        WFSUtil.writeLog("WFClientServiceHandlerBean", "WFUploadWorkitem_parsing_primary_activity", startTime, endTime, 0, "", "", engine,(endTime-startTime),sessionID, userID);  
			}			
			boolean isMandatory = true;	
			String procType = "S";
			if(mainCode == 0){  
				if (processDefID == 0) {
					processName = parser.getValueOf("ProcessName", null, false);
					queryString = "Select *  From ProcessDefTable prcTable " + WFSUtil.getTableLockHintStr(dbType) + "  Where ProcessName = ? and VersionNo = ( Select MAX(VersionNo) From ProcessDefTable " + WFSUtil.getTableLockHintStr(dbType) + " Where ProcessName = prcTable.ProcessName)";
					pstmt = con.prepareStatement(queryString);
					pstmt.setInt(1, processDefID);
					columns = new ArrayList();
					columns.add(processDefID);
					WFSUtil.jdbcExecute(null,sessionID,userID,queryString,pstmt,columns,printQueryFlag,engine);
					rs = pstmt.getResultSet();
					if (rs != null && rs.next()) {
						processDefID = rs.getInt("ProcessDefId");
						procType = rs.getString("ProcessType");
					}
					
					if(rs != null){
						rs.close();
						rs = null;
					}
					if(pstmt != null){
						pstmt.close();
						pstmt = null;
					}
					if(procType.equalsIgnoreCase("M"))
						isMandatory = false;
					else
						isMandatory = true;
				}
	//          Added By Varun Bhansaly On 17/07/2007 for Bugzilla Id 1447
				String initiateAlso = parser.getValueOf("InitiateAlso", "Y", true);
				String synchronousRouting = parser.getValueOf("SynchronousRouting");
                boolean synchRouteflag = false;
                if(initiateAlso.equalsIgnoreCase("Y")){
                    if(synchronousRouting.equalsIgnoreCase("Y")){
                        synchRouteflag = true;
                    }else if(synchronousRouting.equalsIgnoreCase("")){ //SynchronousRouting tag is not present
                            synchRouteflag = WFSUtil.isSyncRoutingMode();      
                    }
                }
                if(initiateAlso.equalsIgnoreCase("N") && isWorkItemExtInfo.equalsIgnoreCase("Y"))
                    returnExtraData = true;
				int outFolderIndex = -1; //Bugzilla Bug 265
				String outFolderIndexSP = "-1";
				String outFolderName = null;
				String outCurrDate = null;
				int activityID = 0;
				int durationId = 0;
				int paramIndex = -1;
				int initiateFromActivityId = 0;
				String strInitiateFrom = "";
				//SrNo-6
				//Bug # 1716
				queryString = " SELECT PROCESSTURNAROUNDTIME, TATCalFlag, " + WFSUtil.getDate(dbType) + " as CurrDateTime, PROCESSSTATE, ProcessName, VERSIONNO, ProcessType FROM PROCESSDEFTABLE " + WFSUtil.getTableLockHintStr(dbType) + "WHERE PROCESSDEFID = ? ";
				pstmt = con.prepareStatement(queryString);
				pstmt.setInt(1, processDefID);
				columns = new ArrayList();
				columns.add(processDefID);
				WFSUtil.jdbcExecute(null,sessionID,userID,queryString,pstmt,columns,printQueryFlag,engine);
				rs = pstmt.getResultSet();
				currentDateTime = null;
				java.sql.Timestamp nextDateTime = null;
				java.util.Date nextDate = null;
				Calendar cal = null;
				int processTurnAroundTime = 0;
				String tatCalFlag = null;
				String strValue = "";
				String userDefinedName = "";
				String defaultValue = "";
				int loopCounter = -1;
				String processState = "";
				String procName = "";
				String processInstanceId = null;
				String parentFolderIndx = "-1";
				String vaidateQuery = "";
                int dataDefIndx = -1;
				int mainGroupId = -1;
				WFFieldInfo wfFieldInfo = null;
				String queueName = "";
				int streamId = -1;
				int proceVersion = -1;
				if (rs.next()) 
				{
					durationId = rs.getInt(1);
					tatCalFlag = rs.getString(2);
					currentDateTime = (java.util.Date) rs.getTimestamp("CurrDateTime");
					processState = rs.getString(4);
					procName = rs.getString(5);
					proceVersion = rs.getInt(6);
					procType = rs.getString("ProcessType");
	//               If PROCESSTURNAROUNDTIME is NULL then expectedProcessDelay will be set to NULL, nextDateTime = null
					if(processState.trim().toUpperCase().equalsIgnoreCase("ENABLED"))
					{
						if (rs != null) {
							rs.close();
							rs = null;
						}
						if (pstmt != null) {
							pstmt.close();
							pstmt = null;
						}
						if(procType.equalsIgnoreCase("M"))
							isMandatory = false;
						else
							isMandatory = true;
						int procVariantId = parser.getIntOf("VariantId", 0, isMandatory);	// Process Variant Support
                        if(con.getAutoCommit())
                            con.setAutoCommit(false);
						/**	Changed By  : Ruhi Hira
						 *	Changed On	: 10/05/2005
						 *	Description : SrNo-1, Oracle support.*/
						if ( (dbType == JTSConstant.JTS_ORACLE))  {
                            queryCallable = "{call WFGenerateRegistration(?,?,?,?,?,?,?,?,?,?,?)}";
                        }else{
                            queryCallable = "{call WFGenerateRegistration(?,?,?,?,?,?,?,?,?)}";
                        }
                        cstmt = con.prepareCall(queryCallable);					
						cstmt.setInt(1, userID);
						cstmt.setInt(2, processDefID);						
						strValue = parser.getValueOf("ValidationRequired");
						if (strValue.equals("")) {
							cstmt.setNull(3, Types.VARCHAR);
						} else {
							cstmt.setString(3, strValue);
						}
						if(queueId != 0){					
							initiateFromActivityId = introductionActivityId;
							strInitiateFrom = introductionActivityName;
						}else{
							initiateFromActivityId = parser.getIntOf("InitiateFromActivityId", 0, true);
							strInitiateFrom = parser.getValueOf("InitiateFromActivityName");
						}
						cstmt.setInt(4, initiateFromActivityId);                
						if (initiateFromActivityId == 0 && strInitiateFrom.equals("")) {
							queryString = "SELECT ActivityId , ActivityName FROM ActivityTable " + WFSUtil.getTableLockHintStr(dbType) + "  WHERE ProcessDefId = ? AND ActivityType = ? AND PrimaryActivity = " + WFSUtil.TO_STRING("Y", true, dbType);
							pstmt = con.prepareStatement(queryString);
							pstmt.setInt(1, processDefID);
							pstmt.setInt(2, WFSConstant.ACT_INTRODUCTION);
							columns = new ArrayList();
							columns.add(processDefID);
							columns.add(WFSConstant.ACT_INTRODUCTION);
							WFSUtil.jdbcExecute(null,sessionID,userID,queryString,pstmt,columns,printQueryFlag,engine);
							rs = pstmt.getResultSet();
							if (rs != null && rs.next()) {
								activityID = rs.getInt("ActivityId");
								strInitiateFrom = rs.getString("ActivityName");
								rs.close();
								rs = null;
							}
							pstmt.close();
							pstmt = null;
						} else if (initiateFromActivityId != 0) {
							/** do we check if activity sent in the input is Introduction activity ? - Varun Bhansaly */
							activityID = initiateFromActivityId;
						}
						if (strInitiateFrom.equals("")) {
							cstmt.setNull(5, Types.VARCHAR);
						} else {
							cstmt.setString(5, strInitiateFrom);
						}
						strValue = parser.getValueOf("DataDefName");
						if (strValue.equals("")) {
							cstmt.setNull(6, Types.VARCHAR);
						} else {
							cstmt.setString(6, strValue);
						}
                        cstmt.setInt(7,procVariantId);//Process Variant Support Changes
						cstmt.setString(8,psFlag);
						if ( (dbType == JTSConstant.JTS_ORACLE)) {
							cstmt.registerOutParameter(9, java.sql.Types.INTEGER);
							cstmt.registerOutParameter(10, oracle.jdbc.OracleTypes.CURSOR);
							cstmt.registerOutParameter(11, oracle.jdbc.OracleTypes.VARCHAR);
						}else{
							cstmt.setString(9,hyphenRequiredFlag);
						}
						//cstmt.setQueryTimeout(ServerProperty.getReference().getQueryTimeout(engine));
                        
                        //cstmt.execute();
                        WFSUtil.jdbcCallableExecute(cstmt, engine, queryCallable);
                        if ( (dbType == JTSConstant.JTS_ORACLE)) {
							mainCode = cstmt.getInt(9);
                            WFSUtil.printOut(engine,"WFGenerateRegistration	mainCode	:	"+mainCode);							
							if(mainCode == 0) {
								rs = (ResultSet) cstmt.getObject(10);
								if(rs != null && rs.next()) {
									processInstanceId = rs.getString("ProcessInstanceId");
									parentFolderIndx = rs.getString("ParentFolderIndex");
									dataDefIndx = rs.getInt("DataDefinitionIndex");									
									activityID = rs.getInt("ActivityId");									
									mainGroupId = rs.getInt("MainGroupId");
									strInitiateFrom = rs.getString("ActivityName");
									queueId = rs.getInt("QueueId");
									queueName = rs.getString("QueueName");									
									vaidateQuery = rs.getString("ValidateQuery");
									streamId = rs.getInt("StreamId");
									urn=rs.getString("URN");
									WFSUtil.printOut(engine,"WFGeneratetRegistration : outFolderName : "+processInstanceId+" parentFolderIndx : "+parentFolderIndx+" validateQury : "+vaidateQuery+" activityID : "+activityID+" dataDefIndx : "+dataDefIndx+"activityname : "+strInitiateFrom);
								}
							}else if(mainCode == 19){							
								mainCode = WFSError.WM_INSUFFICIENT_BUFFER_SIZE;
								subCode = WFSError.WF_REGSEQ_OUTOF_RANGE;
								subject = WFSErrorMsg.getMessage(mainCode);
								descr = WFSErrorMsg.getMessage(subCode);
								errType = WFSError.WF_TMP;
								throw new WFSException(mainCode, subCode, errType, subject, descr, inputParamInfo.toString());
							}
                                                        // 50074 -- when parent folder entry missing in routefolderdef table this code is returned from procedure.
                                                 else if (mainCode == -50074) {
                                                    mainCode = WFSError.WF_ENTRY_MISSING_IN_ROUTEFOLDERDEFTABLE;
                                                    subCode = WFSError.WF_ENTRY_MISSING_IN_ROUTEFOLDERDEFTABLE;
                                                    subject = WFSErrorMsg.getMessage(mainCode);
                                                    descr = WFSErrorMsg.getMessage(subCode);
                                                    errType = WFSError.WF_TMP;
                                                    throw new WFSException(mainCode, subCode, errType, subject, descr, inputParamInfo.toString());
                                                } else if (mainCode == 4014) {
                                                    sDbTblNm = cstmt.getString(11);
                                                    mainCode = WFSError.WF_ERROR_SQUENCE_NOT_FOUND;
                                                    subCode = WFSError.WF_ERROR_SQUENCE_NOT_FOUND;
                                                    subject = WFSErrorMsg.getMessage(mainCode);
                                                    descr = WFSErrorMsg.getMessage(subCode) + " " + sDbTblNm;
                                                    throw new WFSException(mainCode, subCode, errType, subject, descr, inputParamInfo.toString());
                                                } 
                                                 else if (mainCode == 300) {
                                                    mainCode = WFSError.WF_ERROR_NO_RIGHTS_ON_QUEUE;
                                                    subCode = WFSError.WF_ERROR_NO_RIGHTS_ON_QUEUE;
                                                    subject = WFSErrorMsg.getMessage(mainCode);
                                                    descr = WFSErrorMsg.getMessage(subCode);
                                                    throw new WFSException(mainCode, subCode, errType, subject, descr, inputParamInfo.toString());
                                                }
						}
						else {
							rs = cstmt.getResultSet();
							if (rs != null && rs.next()) {
                                if (dbType == JTSConstant.JTS_POSTGRES) {
                                    stmt = con.createStatement();
                                    cursorName = rs.getString(1);
                                    rs.close();
                                    rs = stmt.executeQuery("Fetch All In \"" + WFSUtil.TO_SANITIZE_STRING(cursorName, true) + "\"");
                                    if (rs != null) {
                                        rs.next();
                                    }
                                }                            
								mainCode = rs.getInt(1);
								if(mainCode == 0) {
									processInstanceId = rs.getString(2);
									parentFolderIndx = rs.getString(3);
									dataDefIndx = rs.getInt(4);
									activityID = rs.getInt(5);
									mainGroupId = rs.getInt(6);
									strInitiateFrom = rs.getString(7);
									queueId = rs.getInt(8);
									queueName = rs.getString(9);									
									vaidateQuery = rs.getString(10);
									streamId = rs.getInt(11);
									urn=rs.getString("URN");
									WFSUtil.printOut(engine,"WFGeneratetRegistration : SQL : outFolderName : "+processInstanceId+" parentFolderIndx : "+parentFolderIndx+" validateQury : "+vaidateQuery+" activityID : "+activityID+" dataDefIndx : "+dataDefIndx+" activityname : " + strInitiateFrom + " mainGroupId : " + mainGroupId + "queueId : " + queueId + " queueName : " + queueName + " streamId : " + streamId);
								}else if(mainCode == 19){							
								mainCode = WFSError.WM_INSUFFICIENT_BUFFER_SIZE;
								subCode = WFSError.WF_REGSEQ_OUTOF_RANGE;
								subject = WFSErrorMsg.getMessage(mainCode);
								descr = WFSErrorMsg.getMessage(subCode);
								errType = WFSError.WF_TMP;
								throw new WFSException(mainCode, subCode, errType, subject, descr, inputParamInfo.toString());
								}else if (mainCode == -50074) {
                                                                mainCode = WFSError.WF_ENTRY_MISSING_IN_ROUTEFOLDERDEFTABLE;
                                                                subCode = WFSError.WF_ENTRY_MISSING_IN_ROUTEFOLDERDEFTABLE;
                                                                subject = WFSErrorMsg.getMessage(mainCode);
                                                                descr = WFSErrorMsg.getMessage(subCode);
                                                                errType = WFSError.WF_TMP;
                                                                throw new WFSException(mainCode, subCode, errType, subject, descr, inputParamInfo.toString());
                                                            } else if (mainCode == 4014) {
                                                                sDbTblNm = rs.getString(2);
                                                                mainCode = WFSError.WF_ERROR_SQUENCE_NOT_FOUND;
                                                                subCode = WFSError.WF_ERROR_SQUENCE_NOT_FOUND;
                                                                subject = WFSErrorMsg.getMessage(mainCode);
                                                                descr = WFSErrorMsg.getMessage(subCode) + " " + sDbTblNm;
                                                                throw new WFSException(mainCode, subCode, errType, subject, descr, inputParamInfo.toString());
                                                            } else if (mainCode == 300) {
                                                                mainCode = WFSError.WF_ERROR_NO_RIGHTS_ON_QUEUE;
                                                                subCode = WFSError.WF_ERROR_NO_RIGHTS_ON_QUEUE;
                                                                subject = WFSErrorMsg.getMessage(mainCode);
                                                                descr = WFSErrorMsg.getMessage(subCode);
                                                                throw new WFSException(mainCode, subCode, errType, subject, descr, inputParamInfo.toString());
                                                            }	
								
							}																						
						}
						cstmt = null;
						 /* Sharepoint related changes */
						if(sharepointFlag.equalsIgnoreCase("Y")){
							WFDMSImpl wfDms = null;
                            StringBuffer inputXML = new StringBuffer();
                            StringBuffer inputAddFolderXML = new StringBuffer();
                            StringBuffer tempXml = new StringBuffer();
                            String outputAddFolderXML = null;
                            String outputAddDocumentXML = null;
                            int userId = 0;

                            XMLParser parser1 = new XMLParser();
                            inputAddFolderXML.append(gen.writeValue("EngineName", engine));
                            inputAddFolderXML.append(gen.writeValue("SessionId", sessionID+""));
                            inputAddFolderXML.append(gen.writeValue("ParentFolderIndex", parentFolderIndx));
                            inputAddFolderXML.append(gen.writeValue("FolderName", processInstanceId));
                            inputAddFolderXML.append(gen.writeValue("ProcessDefId", processDefID+""));
                            inputAddFolderXML.append(gen.writeValue("DMSUserName", dmsUserName));
                            inputAddFolderXML.append(gen.writeValue("DMSPassword", dmsPass_word));
                            inputAddFolderXML.append(gen.writeValue("LibraryId", libraryId+""));
                            parser1.setInputXML(inputAddFolderXML.toString());
                            wfDms = (WFDMSImpl) Class.forName("com.newgen.omni.wf.wfdms.SharePointOperation").newInstance();
                            outputAddFolderXML = wfDms.addFolder(parser1, dmsUserName, dmsPass_word);
                            parser1.setInputXML(outputAddFolderXML);
                            int status = parser1.getIntOf("Status", 0, false);
                            if(status != 0){
                            	descr = parser1.getValueOf("Error", "", true);
                                String folderGUID = parser1.getValueOf("GUID", "", true);
                                mainCode = WFSError.WF_SHAREPOINT_ERROR;
                                subCode = WFSError.WF_SHAREPOINT_ERROR;
                                errType = WFSError.WF_TMP;
                                subject = WFSErrorMsg.getMessage(mainCode);
                                if(folderGUID != null && !folderGUID.equalsIgnoreCase(""))
                                    descr = "<FolderIndex>"+folderGUID+"</FolderIndex>";
									throw new WFSException(mainCode, subCode, errType, subject, descr);
                            	} else {
                                	outFolderIndexSP = parser1.getValueOf("Output");
	                                tempXml.append(gen.writeValueOf("FolderIndex", outFolderIndexSP));
    	                            tempXml.append(gen.writeValueOf("ParentFolderIndex", parentFolderIndx));
									int noOfDocs = parser.getNoOfFields("DocumentName", 0, Integer.MAX_VALUE);
									if(noOfDocs != 0){
										String serverIP = (String) WFServerProperty.getSharedInstance().getCallBrokerData().get(WFSConstant.CONST_BROKER_APP_SERVER_IP);
										String serverPort = (String) WFServerProperty.getSharedInstance().getCallBrokerData().get(WFSConstant.CONST_BROKER_APP_SERVER_PORT);
										String serverType = (String) WFServerProperty.getSharedInstance().getCallBrokerData().get(WFSConstant.CONST_BROKER_APP_SERVER_TYPE);
										int startn = 0;
										int endn = 0;
										int startp = 0;
										int endp = 0;
										for (int i = 0; i < noOfDocs; i++) {
											docName = parser.getValueOf("DocumentName",endn,0);
											startn = parser.getTagStartIndex("DocumentName", startn, endn);
											endn =parser.getTagEndIndex("DocumentName", startn, endn);
											docPath = parser.getValueOf("DocumentPath",endp,0);
											startp = parser.getTagStartIndex("DocumentPath", startp, endp);
											endp =parser.getTagEndIndex("DocumentPath", startp, endp);
											outputAddDocumentXML = SPISDocumentTxn.addDocument_MT(serverIP, Integer.parseInt(serverPort), serverType, engine, processDefID, libraryId, outFolderIndexSP, docName, docPath, dmsUserName, dmsPass_word);

											if(outputAddDocumentXML !=null && outputAddDocumentXML.length() > 0) {
	                                            strDocIndxs.append("<Document><DocumentName>").append(docName).append("</DocumentName>");
    		                                    strDocIndxs.append("<DocumentIndex>").append(outputAddDocumentXML).append("</DocumentIndex></Document>");
                                           	}
										}
									}
								}
							}
						//if(mainCode == 0) {
							if(con.getAutoCommit())
                              con.setAutoCommit(false);
							strDocIndxs = new StringBuffer(50);
							if (dbType == JTSConstant.JTS_POSTGRES) { //Bugzilla Bug 265
								queryCallable = "{call WFUploadWorkItem(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
							} else if (dbType == JTSConstant.JTS_ORACLE) { //Bugzilla Bug 265
                                queryCallable = "{call WFUploadWorkItem(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";								
							} else if (dbType == JTSConstant.JTS_MSSQL) { //Bugzilla Bug 265
								queryCallable = "{call WFUploadWorkItem(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
							}
                            cstmt = con.prepareCall(queryCallable); //Bugzilla Bug 265
							cstmt.setInt(1, userID);
							cstmt.setString(2,processInstanceId);
							cstmt.setInt(3, processDefID);
							
						/*if(queueId != 0){					
							initiateFromActivityId = introductionActivityId;
							strInitiateFrom = introductionActivityName;
						}else{
							initiateFromActivityId = parser.getIntOf("InitiateFromActivityId", 0, true);
							strInitiateFrom = parser.getValueOf("InitiateFromActivityName");
						}*/
							cstmt.setInt(4, activityID);                
						/*if (initiateFromActivityId == 0 && strInitiateFrom.equals("")) {
							pstmt = con.prepareStatement("SELECT ActivityId FROM ActivityTable WHERE ProcessDefId = ? AND ActivityType = ? AND PrimaryActivity = " + WFSUtil.TO_STRING("Y", true, dbType));
							pstmt.setInt(1, processDefID);
							pstmt.setInt(2, WFSConstant.ACT_INTRODUCTION);
							pstmt.execute();
							rs = pstmt.getResultSet();
							if (rs != null && rs.next()) {
								activityID = rs.getInt("ActivityId");
								rs.close();
								rs = null;
							}
							pstmt.close();
							pstmt = null;
						} else if (initiateFromActivityId != 0) {
							/** do we check if activity sent in the input is Introduction activity ? - Varun Bhansaly */
							/*activityID = initiateFromActivityId;
						}*/
						if (strInitiateFrom.equals("")) {
							cstmt.setNull(5, Types.VARCHAR);
						} else {
							cstmt.setString(5, strInitiateFrom);
						}
						strValue = parser.getValueOf("ValidationRequired");
						if (strValue.equals("")) {
							cstmt.setNull(6, Types.VARCHAR);
						} else {
							cstmt.setString(6, strValue);
						}
						/*strValue = parser.getValueOf("DataDefName");
						if (strValue.equals("")) {
							cstmt.setNull(7, Types.VARCHAR);
						} else {
							cstmt.setString(7, strValue);
						}*/
						cstmt.setInt(7, dataDefIndx);
						strValue = parser.getValueOf("Fields");
						for (int paramCounter = 8; paramCounter < 18; paramCounter++) {
							if (strValue.length() > 8000) {
								//Bug no WFS_5_091--------------------Begin
								tmpString = strValue.substring(0, 8000);
								if ( (tmpString.lastIndexOf( (char) 25) + 1) == tmpString.length()) {
									cstmt.setString(paramCounter, tmpString);
								} else {
									tmpString = tmpString.substring(0, tmpString.lastIndexOf( (char) 25) + 1);
									cstmt.setString(paramCounter, tmpString);
								}
								strValue = strValue.substring(tmpString.length());
								//Bug no WFS_5_091------------------------End
							} else if (strValue.length() > 0) {
								cstmt.setString(paramCounter, strValue);
								strValue = "";
							} else {
								cstmt.setNull(paramCounter, Types.VARCHAR);
							}
						}
						strValue = parser.getValueOf("Documents");
						for (int paramCounter = 18; paramCounter < 23; paramCounter++) {
							if (strValue.length() > 4000) {
								cstmt.setString(paramCounter, strValue.substring(0, 4000));
								strValue = strValue.substring(4000);
							} else if (strValue.length() > 0) {
								cstmt.setString(paramCounter, strValue);
								strValue = "";
							} else {
								cstmt.setNull(paramCounter, Types.VARCHAR);
							}
						}
                                            String jMessage = "";
						strValue = parser.getValueOf("Attributes");
						/** @@todo check for empty attributes....*/
						String priorityDefault = ""; 
						/** 
						 *  Optimization of WFUploadWorkItem, Prepare query string for queue variable + external table variables,
						 *  pass this string to the SP, similarly prepare and pass to the SP message buffer to be inserted into WFMessageTable.
						 */
						StringBuffer qdtColBuffer = new StringBuffer();
						StringBuffer qdtValueBuffer = new StringBuffer();
						StringBuffer extColBuffer = new StringBuffer(); 
						StringBuffer extValueBuffer = new StringBuffer();
						StringBuffer routeLogTableBuffer = new StringBuffer();
						StringBuffer cmplxBuffer = new StringBuffer();
						String extColString = "";
						HashMap successMap = new HashMap();
						HashMap cmplxMap = new HashMap();
						////Process Variant Support
						String key = activityID + string21 + procVariantId;
                        startTime = System.currentTimeMillis();
                        WFVariabledef cacheAttr = (WFVariabledef)CachedObjectCollection.getReference().getCacheObject(con, engine, processDefID, WFSConstant.CACHE_CONST_Variable, key).getData();
						HashMap cachemap = cacheAttr.getAttribMap();
                        ArrayList defaultValAttribs = cacheAttr.getDefaultValueAttributes();
                        endTime = System.currentTimeMillis();
                        if(debug)
                            WFSUtil.writeLog("WFClientServiceHandlerBean", "WFUploadWorkitem_Variable_cache", startTime, endTime, 0, "", "", engine,(endTime-startTime),sessionID, userID);  
                                                
						if (defaultValAttribs == null) { 
							WFSUtil.printOut(engine,"[WMMiscellaneous] This workstep has no default attributes yet !!!");
							defaultValAttribs = new ArrayList();
							queryString = "SELECT UserDefinedName, DefaultValue FROM VarMappingTable " + WFSUtil.getTableLockHintStr(dbType) + "   WHERE ProcessDefId = ? and VariableScope != " + WFSUtil.TO_STRING("I", true, dbType) + " AND DefaultValue IS NOT NULL AND " + WFSUtil.DB_LEN("DefaultValue", dbType) + " > 0" ;
							pstmt = con.prepareStatement(queryString) ;
							pstmt.setInt(1, processDefID);
							columns = new ArrayList();
							columns.add(processDefID);
							WFSUtil.jdbcExecute(null,sessionID,userID,queryString,pstmt,columns,printQueryFlag,engine);
							rs = pstmt.getResultSet();
							if (rs != null) {
								while (rs.next()) {
									userDefinedName = rs.getString("UserDefinedName");
                                                                        WFSUtil.printOut(engine,"<WFUploadWorkitem> userDefinedName>>"+userDefinedName);
									defaultValue = rs.getString("DefaultValue");
									if (defaultValue != null && !defaultValue.equals("")) {
										wfFieldInfo = (WFFieldInfo)cachemap.get(userDefinedName.toUpperCase());
										if (wfFieldInfo != null) {	
											wfFieldInfo.setDefaultValue(defaultValue);
											defaultValAttribs.add(userDefinedName.toUpperCase());
										}
									}
								}
								cacheAttr.setDefaultValueAttributes(defaultValAttribs);
								rs.close();
								rs = null;
							}
							pstmt.close();
							pstmt = null;
						}
						String tempName = null;
						for (int counter = 0; counter < defaultValAttribs.size(); counter++) {
							tempName = (String) defaultValAttribs.get(counter);
							successMap.put(tempName, ((WFFieldInfo)cachemap.get(tempName)).getDefaultValue()) ;
						}

						//split values using StringTokenizer on Chr(21) chr(25)
						//make qdtColBuffer, qdtValueBuffer //including defaultvalues for attributes.... [PriorityLevel to be send separately]
						//Make extColBuffer, extValueBuffer
						String calendarName = "";						
						if(userDefFlag) {
                             cmplxBuffer.append(parser.getValueOf("Attributes")); 
						} else {	
						/*String char21 = new String(new byte[]{21});
						String char25 = new String(new byte[]{25});*/
						String char22 = new String(new byte[]{22});						
						String attributeName = null;
						String attributeValue = null;
                                                //strValue = "id"+char21 + "1"+char25+"name"+char21 + "sajid"+char25;
						StringTokenizer st = new StringTokenizer(strValue, char21 + char25, true);
						while (st.hasMoreTokens()) { 
							attributeName = st.nextToken();
							st.nextToken();		//char(21)
							attributeValue = WFSUtil.escapeSpecialCharForJson(st.nextToken());
							if (attributeValue.equals(char25)){
								attributeValue = null;
								continue;   /** No need to update variables for which chr21 & chr25 are adjacent. */
							} else{
								st.nextToken();
							}
							successMap.put(attributeName.toUpperCase(), attributeValue) ;
						}
						//strValue = parser.getValueOf("ComplexAttributes");
						String parent = "";
						/*st = new StringTokenizer(strValue, char22 + char21 + char25, true);
						while (st.hasMoreTokens()) { 
							parent = st.nextToken();
							st.nextToken();		//char(22)
							attributeName = st.nextToken();
							st.nextToken();		//char(21)
							attributeValue = st.nextToken();
							if (attributeValue.equals(char25)){
								attributeValue = null;
								continue;   /** No need to update variables for which chr21 & chr25 are adjacent. */
							/*} else{
								st.nextToken();
							}
							cmplxMap.put(attributeName.toUpperCase(), attributeValue) ;
						}
						Iterator iter = cmplxMap.keySet().iterator();
						while (iter.hasNext()) {
							
							String child = tempName.substring(tempName.indexOf(char22) + 1);
                            parent = tempName.substring(0, tempName.indexOf(char22));
                            wfFieldInfo = (WFFieldInfo)cachemap.get(parent.toUpperCase());
                            child = ((WFFieldInfo)wfFieldInfo.getChildInfoMap().get(child.toUpperCase())).getName();
                            WFSUtil.printOut(engine,"[WMMiscellaneous] Preeti child 3  :\t"+ child);
                            cmplxBuffer.append("<").append(parent).append(">").append("<").append(child).append(">").append(successMap.get(tempName.toUpperCase())).append("</").append(child).append(">").append("</").append(parent).append(">");
							
						}*/
						/*WFS_8.0_026*/
                                                 String value = "";
						calendarName = (String)successMap.get("CALENDARNAME");
						priorityDefault = (String)(successMap.remove("PRIORITYLEVEL"));
						Iterator iter = successMap.keySet().iterator();
						while (iter.hasNext()) {
							tempName = (String) iter.next();
                                                        value = (String)successMap.get(tempName);
							// if(userDefFlag && tempName.indexOf(char22) > 0)
							// {
							// String child = tempName.substring(tempName.indexOf(char22) + 1);
                            // String parent = tempName.substring(0, tempName.indexOf(char22));
                            // wfFieldInfo = (WFFieldInfo)cachemap.get(parent.toUpperCase());
                            // child = ((WFFieldInfo)wfFieldInfo.getChildInfoMap().get(child.toUpperCase())).getName();
                            // WFSUtil.printOut(engine,"[WMMiscellaneous] Preeti child 3  :\t"+ child);
                            // cmplxBuffer.append("<").append(parent).append(">").append("<").append(child).append(">").append(successMap.get(tempName.toUpperCase())).append("</").append(child).append(">").append("</").append(parent).append(">");
							// }
							
							wfFieldInfo = (WFFieldInfo) cachemap.get(tempName.toUpperCase());
							WFSUtil.printOut(engine,"[WMMiscellaneous]	tempName.toUpperCase()	:	"+tempName.toUpperCase()+" value : "+(String)successMap.get(tempName));
							if (wfFieldInfo != null) {
								if (!wfFieldInfo.isReadOnlyField()) {
									if (wfFieldInfo.isQueueVariable()) {
										qdtColBuffer.append(", ").append(wfFieldInfo.getMappedColumn());
										qdtValueBuffer.append(", ").append(WFSUtil.TO_SQL((String)successMap.get(tempName), wfFieldInfo.getWfType(), dbType, true));
									} else if (wfFieldInfo.getExtObjId() == 1) {
										extColBuffer.append(", ").append(wfFieldInfo.getName());
										extValueBuffer.append(", ").append(WFSUtil.TO_SQL((String)successMap.get(tempName), wfFieldInfo.getWfType(), dbType, true));
									}
                                                                    if(value!=null && !("".equals(value))){    
									routeLogTableBuffer.append("<Attribute>");
									routeLogTableBuffer.append("<Name>");
									routeLogTableBuffer.append(wfFieldInfo.getName());
									routeLogTableBuffer.append("</Name>");
									routeLogTableBuffer.append("<Value>");
									if(value.contains("<")||value.contains(">")){
                                                                            routeLogTableBuffer.append(WFSUtil.handleSpecialCharInXml(value));
                                                                        }else{
                                                                            routeLogTableBuffer.append(value);
                                                                        }
									routeLogTableBuffer.append("</Value>");
                                                                        routeLogTableBuffer.append(gen.writeValue("isNull", "N"));
									routeLogTableBuffer.append("</Attribute>");
                                                                    }    
									if(userDefFlag)
                                    cmplxBuffer.append("<").append(wfFieldInfo.getName()).append(">").append((String)successMap.get(tempName)).append("</").append(wfFieldInfo.getName()).append(">");
								} else {
									WFSUtil.printOut(engine,"[WMMiscellaneous] " + wfFieldInfo.getName() + " is a Read Only variable");
								}
							} else {
								WFSUtil.printOut(engine,"[WMMiscellaneous] THIS SHOULD NEVER BE THE CASE WFFieldInfo IS NULL !!! for " + tempName);
                                                                 if (sVarValidationRequired.equals("Y")) {
                                                                mainCode = WFSError.WF_ERROR_INVALID_OR_READONLY_VARIABLE_NAME;
                                                                subCode = WFSError.WF_ERROR_INVALID_OR_READONLY_VARIABLE_NAME;
                                                                subject = WFSErrorMsg.getMessage(mainCode);
                                                                descr = WFSErrorMsg.getMessage(subCode) + "-" + tempName;
                                                                throw new WFSException(mainCode, subCode, errType, subject, descr);
                                                            }
                                                        }
						}
						}
                                    if(routeLogTableBuffer.length() > 0){
                                                       StringBuffer attribXml = new StringBuffer(500);
                                                       StringBuffer tempXml1 = new StringBuffer(500);
                                                       tempXml1.append("<Message>");
                                                       tempXml1.append(gen.writeValueOf("ActionId","16" ));
                                                       tempXml1.append(gen.writeValueOf("UserId", String.valueOf(userID)));
                                                       tempXml1.append(gen.writeValueOf("ProcessDefId", String.valueOf(processDefID)));
                                                       tempXml1.append(gen.writeValueOf("ActivityId", String.valueOf(activityID)));
                                                       tempXml1.append(gen.writeValueOf("QueueId", String.valueOf(queueId)));
                                                       tempXml1.append(gen.writeValueOf("UserName", wfparticipant.getname()));
                                                       tempXml1.append(gen.writeValueOf("ActivityName", introductionActivityName));
                                                       tempXml1.append(gen.writeValueOf("TotalWiCount", "1"));
                                                       tempXml1.append(gen.writeValueOf("TotalDuration","0"));
                                                       tempXml1.append(gen.writeValueOf("ProcessInstance", processInstanceId));
                                                       tempXml1.append(gen.writeValueOf("WorkitemId", String.valueOf(1)));
                                                       tempXml1.append(gen.writeValueOf("TotalPrTime", String.valueOf(0)));
                                                       tempXml1.append(gen.writeValueOf("DelayTime", String.valueOf(0)));
                                                       tempXml1.append(gen.writeValueOf("WKInDelay", "0"));
                                                       tempXml1.append(gen.writeValueOf("ReportType", "D"));
                                                       tempXml1.append(gen.writeValueOf("LoggingFlag", String.valueOf(1)));

                                                       attribXml.append("<FieldName>").append("<Attributes>").append(
                                                       WFSUtil.replace(routeLogTableBuffer.toString(), "'", "''")).append("</Attributes>").append("</FieldName>");

                                                       tempXml1.append(attribXml).append("</Message>");

                                                       String finalXml = WFSUtil.escapeXML(tempXml1.toString());
                                                       org.json.JSONObject JSON = org.json.XML.toJSONObject(finalXml);
                                                       jMessage =JSON.toString();
                                                       WFSUtil.printOut(engine,"WMMIscellaneous>>WFUPloadWorkitem API "+jMessage);         
                                                   }
						if(priorityDefault == null || priorityDefault.trim().equals("")){
							priorityDefault = "1";
						}
						cstmt.setInt(23, Integer.parseInt(priorityDefault));
						strValue = parser.getValueOf("GenerateLogFlag");
						if (strValue.equals("")) {
							cstmt.setNull(24, Types.VARCHAR);
						} else {
							cstmt.setString(24, strValue);
						}
						/*WFS_8.0_026*/
                        startTime = System.currentTimeMillis();
						if (durationId > 0) {
							HashMap map = (HashMap) CachedObjectCollection.getReference().getCacheObject(con, engine, processDefID, WFSConstant.CACHE_CONST_WFDuration, "").getData();
							WFDuration duration = (WFDuration) map.get(durationId + "");
							if (duration != null) {
								//SrNo-6
								String years = duration.getYears();
								String months = duration.getMonths();
								String days = duration.getDays();
								String hours = duration.getHours();
								String minutes = duration.getMinutes();
								String seconds = duration.getSeconds();
								cal = Calendar.getInstance();
								if (tatCalFlag.equals("Y")) {
		//                 A cache is maintained on the server side, using the cache one can find which calId is Associated with which ProcessDefId
									WFCalAssocData wfCalAssocData = WFSUtil.getWICalendarInfo(con, engine, processDefID, Integer.toString(activityID), calendarName);
									/* Bugzilla Bug 1175, Check for NULL, 19/06/2007 - Ruhi Hira */
									if (wfCalAssocData != null) {
										//SrNo-6
										nextDate = WFCalUtil.getSharedInstance().getNextDateTime(currentDateTime, Integer.parseInt(days), Integer.parseInt(hours), Integer.parseInt(minutes), wfCalAssocData.getProcessDefId(), wfCalAssocData.getCalId());
										cal.setTime(nextDate);
										cal.add(Calendar.YEAR, Integer.parseInt(years));
										cal.add(Calendar.MONTH, Integer.parseInt(months));
										nextDateTime = new java.sql.Timestamp( ( (java.util.Date) cal.getTime()).getTime());	//Bugzilla Bug 6034
									} else {
										nextDateTime = null;
									}
								} else {
		//                   Case :: 24/7 Calendar attached with the process
									String sProcessTAT = null;
									//SrNo-6
									cal.setTime(currentDateTime);
									cal.add(Calendar.YEAR, Integer.parseInt(years));
									cal.add(Calendar.MONTH, Integer.parseInt(months));
									cal.add(Calendar.DATE, Integer.parseInt(days));
									cal.add(Calendar.HOUR, Integer.parseInt(hours));
									cal.add(Calendar.MINUTE, Integer.parseInt(minutes));
									nextDateTime = new java.sql.Timestamp( ( (java.util.Date) cal.getTime()).getTime());  /*WFS_8.0_017*/
								}
							}
						}
                        endTime = System.currentTimeMillis();
                        if(debug)
                            WFSUtil.writeLog("WFClientServiceHandlerBean", "WFUploadWorkitem_duration_cache", startTime, endTime, 0, "", "", engine,(endTime-startTime),sessionID, userID);  
						if (nextDateTime != null) {
							cstmt.setTimestamp(25, nextDateTime);
						} else {
							cstmt.setNull(25, java.sql.Types.TIMESTAMP);
						}
		//              Added By Varun Bhansaly On 17/07/2007 for Bugzilla Id 1447
						cstmt.setString(26, initiateAlso);
						if(userDefFlag)
						{
							qdtColBuffer.setLength(0);
							qdtValueBuffer.setLength(0);
							extColBuffer.setLength(0);
							extValueBuffer.setLength(0);
						}
						/** There are 26 queue variables. */
						paramIndex = setString(cstmt, qdtColBuffer.toString(), 27, 1, dbType);
						paramIndex = setString(cstmt, qdtValueBuffer.toString(), paramIndex, 1, dbType);
						loopCounter = 1;
						if (dbType == JTSConstant.JTS_MSSQL) {
							loopCounter = 3;
						}
						extColString = extColBuffer.toString();
						if (extColString.length() > 2) {
							extColString = extColString.substring(2);
						}
						paramIndex = setString(cstmt, extColString, paramIndex, loopCounter, dbType);
						loopCounter = 1;
						if (dbType == JTSConstant.JTS_MSSQL) {
							loopCounter = 3;
						}
						extColString = extValueBuffer.toString();
						if (extColString.length() > 2) {
							extColString = extColString.substring(2);
						}
						paramIndex = setString(cstmt, extColString, paramIndex, loopCounter, dbType);
						loopCounter = 1;
						if (dbType == JTSConstant.JTS_MSSQL) {
							loopCounter = 8;
						}
						paramIndex = setString(cstmt, jMessage, paramIndex, loopCounter, dbType,4000);				
						HashMap actionMap = (HashMap) CachedActionObject.getReference().getCacheObject(con, engine);
                                                HashMap actionIDMap = (HashMap) actionMap.get(new Integer(0));
                                                if ((dbType == JTSConstant.JTS_ORACLE)) {
							WFSUtil.printOut(engine,"paramIndex	oracle	:	"+paramIndex);
							if(vaidateQuery == null || vaidateQuery.equals(""))
								cstmt.setNull(32,java.sql.Types.VARCHAR);
							else{
								cstmt.setString(32, vaidateQuery);
							}
							cstmt.setInt(33,mainGroupId);
							cstmt.setInt(34, "N".equalsIgnoreCase(sharepointFlag)? Integer.parseInt(parentFolderIndx) : -1);
							cstmt.setString(35, procName);
							cstmt.setInt(36,proceVersion);
							cstmt.setInt(37, queueId);
							cstmt.setString(38, queueName);
							cstmt.setInt(39,streamId);
							cstmt.registerOutParameter(40, java.sql.Types.INTEGER);
							cstmt.registerOutParameter(41, java.sql.Types.VARCHAR);
							cstmt.registerOutParameter(42, java.sql.Types.DATE);
							cstmt.registerOutParameter(43, java.sql.Types.INTEGER); //Bugzilla Bug 265
							cstmt.setInt(44,procVariantId);// Process Variant Support
		                     if(actionIDMap.containsKey(WFSConstant.WFL_Attribute_Set))
		                        cstmt.setString(45, "Y");
		                     else
		                        cstmt.setString(45, "N");
		                     if(synchRouteflag == true)
								cstmt.setString(46, "Y");
							else
								cstmt.setString(46, "N");
		                     if(urn==null){
		                    	 cstmt.setNull(47, java.sql.Types.VARCHAR);
		                     }
		                     else{
		                     cstmt.setString(47, urn);
		                     }
                             cstmt.setString(48, sharepointFlag);
                             cstmt.setString(49, outFolderIndexSP);
                             cstmt.registerOutParameter(50, java.sql.Types.VARCHAR);
                             cstmt.setString(51, locale);
                             cstmt.registerOutParameter(52, oracle.jdbc.OracleTypes.VARCHAR);
                             cstmt.registerOutParameter(53, oracle.jdbc.OracleTypes.VARCHAR);
                             if(!tarHistoryLog)
                          		cstmt.setString(54, "N");
                          	else
                          		cstmt.setString(54, "Y");
                          	cstmt.setString(55, targetCabinetName);
                   } else if (dbType == JTSConstant.JTS_POSTGRES) {
							con.setAutoCommit(false);
							if(vaidateQuery == null || vaidateQuery.equals(""))
								cstmt.setNull(32,java.sql.Types.VARCHAR);
							else{
								cstmt.setString(32, vaidateQuery);
							}
							cstmt.setInt(33,mainGroupId);
							cstmt.setInt(34, "N".equalsIgnoreCase(sharepointFlag)? Integer.parseInt(parentFolderIndx) : -1);
							cstmt.setString(35, procName);
							cstmt.setInt(36,proceVersion);
							cstmt.setInt(37, queueId);
							cstmt.setString(38, queueName);
							cstmt.setInt(39,streamId);
                            cstmt.setInt(40,procVariantId);// Process Variant Support
                             if(actionIDMap.containsKey(WFSConstant.WFL_Attribute_Set))
                                cstmt.setString(41, "Y");
                             else
                                cstmt.setString(41, "N");
                             if(synchRouteflag == true)
								cstmt.setString(42, "Y");
							else
								cstmt.setString(42, "N");
                             cstmt.setString(43, urn);
                             cstmt.setString(44, sharepointFlag);
                             cstmt.setString(45, outFolderIndexSP);
                             cstmt.setString(46, locale);
						} else if (dbType == JTSConstant.JTS_MSSQL) {
							WFSUtil.printOut(engine,"paramIndex	sql	:	"+paramIndex);
							if(vaidateQuery == null || vaidateQuery.equals(""))
								cstmt.setNull(43,java.sql.Types.VARCHAR);
							else
								cstmt.setString(43, vaidateQuery);
							cstmt.setInt(44,mainGroupId);
							cstmt.setInt(45, "N".equalsIgnoreCase(sharepointFlag)? Integer.parseInt(parentFolderIndx) : -1);
							cstmt.setString(46, procName);
							cstmt.setInt(47,proceVersion);
							cstmt.setInt(48, queueId);
							cstmt.setString(49, queueName);
							cstmt.setInt(50,streamId);
							cstmt.setInt(51,procVariantId);// Process Variant Support
                                                         if(actionIDMap.containsKey(WFSConstant.WFL_Attribute_Set))
                                                            cstmt.setString(52, "Y");
                                                         else
                                                            cstmt.setString(52, "N");
                                                         if(synchRouteflag == true)
                         									cstmt.setString(53, "Y");
                         								else
                         									cstmt.setString(53, "N");
                             cstmt.setString(54, urn);
                             cstmt.setString(55, sharepointFlag);
                             cstmt.setString(56, outFolderIndexSP);
                             cstmt.setString(57, locale);
                                                }
                                                
						//cstmt.setQueryTimeout(ServerProperty.getReference().getQueryTimeout(engine));
                        
						//cstmt.execute();
                        WFSUtil.jdbcCallableExecute(cstmt, engine, queryCallable);
						outputXML = new StringBuffer(500);
						if (dbType == JTSConstant.JTS_MSSQL || (dbType == JTSConstant.JTS_DB2) || (dbType == JTSConstant.JTS_POSTGRES)) { //coded for DB2
							rs = cstmt.getResultSet();
							if (rs != null && rs.next()) {
								if (dbType == JTSConstant.JTS_POSTGRES) {
									stmt = con.createStatement();
									cursorName = rs.getString(1);
									rs.close();
									rs = stmt.executeQuery("Fetch All In \"" + WFSUtil.TO_SANITIZE_STRING(cursorName, true) + "\"");
									if (rs != null) {
										rs.next();
									}
								}
								mainCode = rs.getInt(1);
								if (mainCode == 0) {
									outFolderName = rs.getString(2);
									outCurrDate = rs.getString(3);
									outFolderIndex = rs.getInt(4); //Bugzilla Bug 265
									documentIndexes = rs.getString(5);
								}
								/*if (dbType == JTSConstant.JTS_POSTGRES) {
									con.commit();
								}*/
                                                            if (mainCode == 4012) {
                                                                sDbMsg = rs.getString(2);
                                                                sDbTblNm = rs.getString(3);
                                                                mainCode = WFSError.WF_ERROR_IN_EXTERNAL_TABLE;
                                                                subCode = 0;
                                                                subject = WFSErrorMsg.getMessage(mainCode);
                                                                descr = "Error: '" + sDbMsg + "' occurred while inserting data in " + sDbTblNm;
                                                            }
							}
						} else if ( (dbType == JTSConstant.JTS_ORACLE)) {
							mainCode = cstmt.getInt(40);
							if (mainCode == 0) {
		//                      Changed By Varun Bhansaly On 17/07/2007 for Bugzilla Id 1447
								outFolderName = cstmt.getString(41);
		//                      Changed By Varun Bhansaly On 22/06/2007 for Bugzilla Id 1233
								outCurrDate = cstmt.getString(42);
								outFolderIndex = cstmt.getInt(43); //Bugzilla Bug 265
								documentIndexes = cstmt.getString(50);
							}
                                                    if (mainCode == 4012) {
                                                        sDbMsg = cstmt.getString(52);
                                                        sDbTblNm = cstmt.getString(53);
                                                        mainCode = WFSError.WF_ERROR_IN_EXTERNAL_TABLE;
                                                        subCode = 0;
                                                        subject = WFSErrorMsg.getMessage(mainCode);
                                                        descr = "Error: '" + sDbMsg + "' occurred while inserting data in " + sDbTblNm;
                                                    }
						}
						
						if(mainCode == 0) {
							if(documentIndexes != null) {
								StringTokenizer st = new StringTokenizer(documentIndexes, char21 + char25, true);
								while (st.hasMoreTokens()) { 
									newDocName = st.nextToken();
									st.nextToken();
									newDocIndx = st.nextToken();
									st.nextToken();
									imgIndx = st.nextToken();
									st.nextToken();
									strDocIndxs.append("<Document><DocumentName>").append(newDocName);
									strDocIndxs.append("</DocumentName><DocumentIndex>").append(newDocIndx);
									strDocIndxs.append("</DocumentIndex><ISIndex>").append(imgIndx);
									strDocIndxs.append("</ISIndex></Document>");
								}
							}
						}
						if(mainCode == 0 && userDefFlag && cmplxBuffer.length() > 0){
                            try{
                                startTime = System.currentTimeMillis();
                                WFSUtil.setAttributesExt(con, wfparticipant, cmplxBuffer.toString(), engine, outFolderName, 1, gen, null, false, debug, true,0,null, true, hashIdInsertionIdMap,isValidationRequired);
                                if(hashIdInsertionIdMap.size()>0){
                                    tempXML.append("<InsertionOrderIdValues>\n");
                                    Iterator iterator = hashIdInsertionIdMap.entrySet().iterator();
                                    while (iterator.hasNext()) {
                                            Map.Entry pair = (Map.Entry)iterator.next();
                                            tempXML.append("<InsertionOrderIdValue>\n");
                                            tempXML.append("<HashId>\n");
                                            tempXML.append(pair.getKey());
                                            tempXML.append("</HashId>\n");
                                            tempXML.append("<InsertionOrderId>\n");
                                            tempXML.append(pair.getValue());
                                            tempXML.append("</InsertionOrderId>\n");
                                            tempXML.append("</InsertionOrderIdValue>\n");
                                    }
                                    tempXML.append("</InsertionOrderIdValues>\n");
                                }
                                endTime = System.currentTimeMillis();
                            }finally{
                                if(debug)
                                    WFSUtil.writeLog("WFClientServiceHandlerBean", "[setAttributesExt]WFUploadWorkitem", startTime, endTime, 0, "", "", engine,(endTime-startTime),sessionID, userID);  
                            }
                            
                        }
					}
					else
					{
						mainCode = WFSError.WF_INVALID_PROCESS_DEFINITION;
						subCode = WFSError.WF_INVALID_PROCESS_DEFINITION;
						subject = WFSErrorMsg.getMessage(mainCode);                            
						descr = WFSErrorMsg.getMessage(subCode);			
					}
				} else {
					mainCode = WFSError.WF_INVALID_PROCESS_DEFINITION;
					if (rs != null) {
						rs.close();
						rs = null ;
					}
					if (pstmt != null) {
						pstmt.close();
						pstmt = null;
					}					
				}
                           if (moveRowToHistoryFlag.equalsIgnoreCase("Y") && mainCode == 0) {
                                    int code = mainCode;
                                    String message = "SUCCESS";

                                    StringBuilder wfMoveRowToHistoryTable = new StringBuilder();
                                    wfMoveRowToHistoryTable.append("<?xml version=\"1.0\"?>");
                                    wfMoveRowToHistoryTable.append("<WFMoveRowToHistoryTable_Input>");
                                    wfMoveRowToHistoryTable.append("<Option>WFMoveRowToHistoryTable</Option>");
                                    wfMoveRowToHistoryTable.append("<EngineName>").append(engine).append("</EngineName>");
                                    wfMoveRowToHistoryTable.append("<SessionId>").append(sessionID).append("</SessionId>");
                                    wfMoveRowToHistoryTable.append("<CSName>").append(csName).append("</CSName>");
                                    wfMoveRowToHistoryTable.append("<TableName>").append(tableName).append("</TableName>");
                                    wfMoveRowToHistoryTable.append("<ProcessInstanceId>").append(processInstanceId).append("</ProcessInstanceId>");
                                    wfMoveRowToHistoryTable.append("<ProcessDefId>").append(processDefID).append("</ProcessDefId>");
                                    wfMoveRowToHistoryTable.append("<ImportDataId>").append(importDataId).append("</ImportDataId>");
                                    wfMoveRowToHistoryTable.append("<Code>").append(code).append("</Code>");
                                    wfMoveRowToHistoryTable.append("<Message>").append(message).append("</Message>");
                                    wfMoveRowToHistoryTable.append("<ColumnString>").append(columnString).append("</ColumnString>");
                                    wfMoveRowToHistoryTable.append("</WFMoveRowToHistoryTable_Input>");
                                    XMLParser moveToHistoryParser = new XMLParser(wfMoveRowToHistoryTable.toString());

                                    String wfMoveRowToHistoryOut = WFFindClass.getReference().execute("WFMoveRowToHistoryTable", engine, con, moveToHistoryParser, gen);
                                    XMLParser resultParser = new XMLParser(wfMoveRowToHistoryOut);

                                    int tmpMainCode = Integer.parseInt(resultParser.getValueOf("MainCode"));
                                    String tmpSubject = resultParser.getValueOf("Subject");
                                    String tmpDescription = resultParser.getValueOf("Description");

                                    if (mainCode != 0 && tmpMainCode != 0) {
                                        subject = "Error in WFUploadWorkitem SUB : " + subject + " Error in WFMoveRowToHistoryTable SUB : " + tmpSubject;
                                        descr = "Error in WFUploadWorkitem DESC : " + descr + " Error in WFMoveRowToHistoryTable DESC : " + tmpDescription;
                                    } else if (tmpMainCode != 0) {
                                        mainCode = tmpMainCode;
                                        subject = tmpSubject;
                                        descr = tmpDescription;
                                    }
                                }     
                                
				boolean combinedCall =parser.getValueOf("WIData", "N", true).equalsIgnoreCase("Y");
				if (mainCode == 0) {
					if(initiateAlso.equalsIgnoreCase("Y"))
                    {
                        if(synchRouteflag)
                        {	  startTime = System.currentTimeMillis();
                        	StringBuilder wfGetWorkitemDataExtXML = new StringBuilder();
                            wfGetWorkitemDataExtXML.append("<?xml version=\"1.0\"?><WFGetWorkitemDataExt_Input><Option>WFGetWorkitemDataExt</Option>");
                            wfGetWorkitemDataExtXML.append("<EngineName>" + engine + "</EngineName>");
                            wfGetWorkitemDataExtXML.append("<SessionId>" + sessionID  + "</SessionId>");  
                            wfGetWorkitemDataExtXML.append("<ProcessInstanceId>" +  processInstanceId  + "</ProcessInstanceId>"); 
                            wfGetWorkitemDataExtXML.append("<WorkItemId>" +  1  + "</WorkItemId>");
                            wfGetWorkitemDataExtXML.append("<QueueId>" +  queueId  + "</QueueId>");
                            wfGetWorkitemDataExtXML.append("<QueueType>"+  parser.getValueOf("QueueType", "", true)  + "</QueueType>");
                            wfGetWorkitemDataExtXML.append("<DocOrderBy>"+  parser.getValueOf("DocOrderBy", "RevisedDateTime", true)  + "</DocOrderBy>");                            
                            wfGetWorkitemDataExtXML.append("<DocSortOrder>"+  parser.getValueOf("DocSortOrder", "A", true)  + "</DocSortOrder>");                            
                            wfGetWorkitemDataExtXML.append("<ObjectPreferenceList>"+  parser.getValueOf("ObjectPreferenceList", "", true)  + "</ObjectPreferenceList>");                            
                            wfGetWorkitemDataExtXML.append("<GenerateLog>"+  parser.getValueOf("GenerateLog", "Y", true)  + "</GenerateLog>");                            
                            wfGetWorkitemDataExtXML.append("<ZipBuffer>"+  parser.getValueOf("ZipBuffer", "N", true)  + "</ZipBuffer>");                            
                            wfGetWorkitemDataExtXML.append("<UserDefVarFlag>"+  parser.getValueOf("UserDefVarFlag", "N", true)  + "</UserDefVarFlag>"); 
              
                            if("P".equalsIgnoreCase(psFlag)){
                            	wfGetWorkitemDataExtXML.append("<UtilityFlag>Y</UtilityFlag>");
                            }
							wfGetWorkitemDataExtXML.append("<SynchronousRouting>" +  synchRouteflag   + "</SynchronousRouting>");                           
                            wfGetWorkitemDataExtXML.append("</WFGetWorkitemDataExt_Input>");
                            parser.setInputXML(wfGetWorkitemDataExtXML.toString());
                            
                            String wfGetWorkitemDataExtResult = "";
                            wfGetWorkitemDataExtResult =  WFFindClass.getReference().execute("WFGetWorkitemDataExt", engine, con, parser,gen);                                                        
                            parser.setInputXML(wfGetWorkitemDataExtResult);
                             endTime = System.currentTimeMillis();  
                            WFSUtil.writeLog("WFClientServiceHandlerBean", "WFGetWorkitemDataExt", startTime, endTime, 0, wfGetWorkitemDataExtXML.toString(), wfGetWorkitemDataExtResult);                  
                           
                             startTime = System.currentTimeMillis();
                            StringBuilder wmStartProcessXML = new StringBuilder();
                            wmStartProcessXML.append("<?xml version=\"1.0\"?><WMStartProcess_Input><Option>WMStartProcess</Option>");
                            wmStartProcessXML.append("<EngineName>" + engine + "</EngineName>");
                            wmStartProcessXML.append("<SessionId>" + sessionID  + "</SessionId>");
                            wmStartProcessXML.append("<ProcessInstanceId>" +  processInstanceId  + "</ProcessInstanceId>");
                            wmStartProcessXML.append("<ActivityId>" +  activityID   + "</ActivityId>");
                            wmStartProcessXML.append("<SynchronousRouting>Y</SynchronousRouting>");
                            wmStartProcessXML.append("<PSFlag>" + psFlag + "</PSFlag>");
                            wmStartProcessXML.append("</WMStartProcess_Input>");
                            XMLParser parser1 = new XMLParser();
                            parser1.setInputXML(wmStartProcessXML.toString());
                            String wmStartProcessOutputXML = WFFindClass.getReference().execute("WMStartProcess", engine, con, parser1,gen);                                            
                            parser1.setInputXML(wmStartProcessOutputXML);
                             endTime = System.currentTimeMillis();
                            WFSUtil.writeLog("WFClientServiceHandlerBean", "WMStartProcess", startTime, endTime, 0, wmStartProcessXML.toString(), wmStartProcessOutputXML);                  
                            mainCode = Integer.parseInt(parser1.getValueOf("MainCode"));
                        }
                    }
					/*In case of Postgres at this point the connection is not set to false which was causing error at the time of commit*/
					if (dbType == JTSConstant.JTS_POSTGRES) {
						if(con.getAutoCommit())
							con.setAutoCommit(false);
					}
					if (!con.getAutoCommit()) {
						con.commit();
						con.setAutoCommit(true);
					}
		            if(returnExtraData){
						WFSUtil.printOut(engine, "[WMMiscellaneous:WFUploadWorkitem] Started adding workitem data for processInstanceId : " + processInstanceId);
		                StringBuilder wmGetWorkItemInputXml = new StringBuilder();
		                wmGetWorkItemInputXml.append("<?xml version=\"1.0\"?><WMGetWorkItem_Input><Option>WMGetWorkItem</Option>");
		                wmGetWorkItemInputXml.append("<EngineName>").append(engine).append("</EngineName>");
		                wmGetWorkItemInputXml.append("<SessionId>").append(sessionID).append("</SessionId>");
		                wmGetWorkItemInputXml.append("<ProcessInstanceId>").append(processInstanceId).append("</ProcessInstanceId>");
		                wmGetWorkItemInputXml.append("<WorkItemId>1</WorkItemId>");
		                wmGetWorkItemInputXml.append("<QueueId>").append(queueId).append("</QueueId>");
		                wmGetWorkItemInputXml.append("</WMGetWorkItem_Input>");
						WFSUtil.printOut(engine, "[WMMiscellaneous:WFUploadWorkitem] wmGetWorkItemInputXml : " + wmGetWorkItemInputXml + " for processInstanceId : " + processInstanceId);
		                XMLParser parser1 = new XMLParser();
		                parser1.setInputXML(wmGetWorkItemInputXml.toString());
		                try
		                {
		                    String wmGetWorkItemOutputXml = WFFindClass.getReference().execute("WMGetWorkItem", engine, con, parser1, gen);
							WFSUtil.printOut(engine, "[WMMiscellaneous:WFUploadWorkitem] wmGetWorkItemOutputXml : " + wmGetWorkItemOutputXml + " for processInstanceId : " + processInstanceId);
		                    parser1.setInputXML(wmGetWorkItemOutputXml);
		                    WFSUtil.writeLog("WFClientServiceHandlerBean", "WMGetWorkItem", startTime, endTime, 0, wmGetWorkItemInputXml.toString(), wmGetWorkItemOutputXml);
		                    wmGetWorkItemInputXml = null;
		                    mainCode = Integer.parseInt(parser1.getValueOf("MainCode"));
		                }
		                catch(WFSException wfs)
		                {
		                    WFSUtil.printErr(engine, "[WFUploadWokritem] : WFSException in WMGetworkItem");
		                    WFSUtil.printErr(engine, wfs);
		                    throw wfs;
		                }
		                pstmt1 = null;
		                rs1 = null;
						WFSUtil.printOut(engine, "[WMMiscellaneous:WFUploadWorkitem] Get Workitem Query : " + "select LockStatus,LockedTime,EntryDateTime from wfinstrumenttable " + WFSUtil.getTableLockHintStr(dbType) + " where processinstanceid = " + processInstanceId + " And WorkItemId = 1");
		                pstmt1 = con.prepareStatement((new StringBuilder()).append("select LockStatus,LockedTime,EntryDateTime from wfinstrumenttable ").append(WFSUtil.getTableLockHintStr(dbType)).append(" where processinstanceid = ? And WorkItemId = 1").toString());
		                WFSUtil.DB_SetString(1, processInstanceId, pstmt1, dbType);
		                pstmt1.execute();
		                rs1 = pstmt1.getResultSet();
		                if(rs1.next())
		                {
							WFSUtil.printOut(engine, "[WMMiscellaneous:WFUploadWorkitem] Adding process instance data");
		                    extraXML.append((new StringBuilder()).append("<CurrentDateTime>").append(currentDateTime).append("</CurrentDateTime>\n").toString());
		                    extraXML.append((new StringBuilder()).append("<EntryDateTime>").append(rs1.getString(3)).append("</EntryDateTime>\n").toString());
		                    extraXML.append((new StringBuilder()).append("<LockStatus>").append(rs1.getString(1)).append("</LockStatus>\n").toString());
		                    extraXML.append((new StringBuilder()).append("<LockedTime>").append(rs1.getString(2)).append("</LockedTime>\n").toString());
		                }
		                if(rs1 != null && !rs1.isClosed())
		                {
		                    rs1.close();
		                    rs1 = null;
		                }
		                if(pstmt1 != null && !pstmt1.isClosed())
		                {
		                    pstmt1.close();
		                    pstmt1 = null;
		                }
		                extraXML.append("<CacheTime>");
		                extraXML.append(new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US).format(CachedObjectCollection.getReference().getProcessLastModifiedTime(con, engine, processDefID)));
		                extraXML.append("</CacheTime>");
						WFSUtil.printOut(engine, "[WMMiscellaneous:WFUploadWorkitem] Adding workitem extra info complete for processInstanceId : " + processInstanceId);
		            }
		            outputXML.append(gen.createOutputFile("WFUploadWorkItem"));
					outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
					outputXML.append(gen.writeValueOf("ProcessInstanceId", processInstanceId));
					outputXML.append(gen.writeValueOf("URN", urn));
					outputXML.append(gen.writeValueOf("WorkStageId",String.valueOf(activityID))); // changes for Bug 58995 - unable to create new WI . IN OFME, CreateProcessInstance API uses uploadwoekitem o/p xml . To create new Workitem, WorkstageId is required, which is equivalent to activityid in uploadWorkitem. 
					outputXML.append(gen.writeValueOf("CreationDateTime", outCurrDate));
					if("Y".equalsIgnoreCase(sharepointFlag)){
						outputXML.append(gen.writeValueOf("FolderIndex", String.valueOf(outFolderIndexSP)));
					}else{
						outputXML.append(gen.writeValueOf("FolderIndex", String.valueOf(outFolderIndex))); //Bugzilla Bug 265
					}
					outputXML.append(gen.writeValueOf("Documents", strDocIndxs.toString()));
					outputXML.append(tempXML);
					outputXML.append(extraXML);
					outputXML.append(inputParamInfo.toString());
                                        outputXML.append(gen.closeOutputFile("WFUploadWorkItem"));
					/** @todo These workitems will be routed through async process server
					 *       after removal of WorkDoneTable in sync routing - Ruhi */
					/* 05/09/2007, SrNo-7, Synchronous routing of workitems - Ruhi Hira */
					/** Commented for now as this is a bulk operation, changes required in SP
					 * for removal of WorkDoneTable - Ruhi Hira */
	//                 if(WFSConstant.SYNC_ROUTING_MODE){
	//                    WFSUtil.printOut(engine,"[WMMiscellaneous] UploadWorkitem() Invoking routeWorkitem() for "
	//                                       + " pinstId >> " + outFolderName + " workItemID >> " + 1);
	//                    WFRoutingUtil.routeWorkitem(con, outFolderName, 1, processDefID, engine);
	//                }

				}
                                // -50017 -- when workflow folder id not exist in routefolderdef table returned from procedure.
                               else if (mainCode == -50017) {
                                if (!con.getAutoCommit()) {
                                    con.rollback();
                                }
                                mainCode = WFSError.WF_ERROR_WORKFLOW_FOLDERID_NOT_EXISTS;
                                subCode = WFSError.WF_ERROR_WORKFLOW_FOLDERID_NOT_EXISTS;
                                subject = WFSErrorMsg.getMessage(mainCode);
                                descr = WFSErrorMsg.getMessage(subCode);
                            } else {
					if(!con.getAutoCommit())
						con.rollback();
					if(descr == null || descr.equals("")){
					subCode = 0;
                                        }
					subject = WFSErrorMsg.getMessage(mainCode);
					if (subject == null || subject.equals("") || subject.indexOf("Unknown Error") > -1) {
						subject = JTSDBError.getMessage(mainCode);
					}
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}						
			
			} 
		}
		else {
			mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
			subCode = 0;
			subject = WFSErrorMsg.getMessage(mainCode);
			descr = WFSErrorMsg.getMessage(subCode);
			errType = WFSError.WF_TMP;
		}		   
	} catch (SQLException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WM_INVALID_FILTER; 
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
                }
            } else {
                descr = e.getMessage();
            }
			try{
				if(!con.getAutoCommit())
					con.rollback();
            }
            catch(SQLException ex) {
                WFSUtil.printErr(engine,"", ex);
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (WFSException e) {                              //SrNo-12
            mainCode = e.getMainErrorCode();
            subCode = e.getSubErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            if (e.getErrorDescription() == null || e.getErrorDescription().equals("")) {
                descr = WFSErrorMsg.getMessage(subCode);
            } else {
                descr = e.getErrorDescription();
            }
			try{
				if(!con.getAutoCommit())
					con.rollback();
            }
            catch(SQLException ex) {
                WFSUtil.printErr(engine,"", ex);
            }
        } catch (JTSException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
        } catch (Exception e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
            try {
                if (!con.getAutoCommit()) {
                    con.setAutoCommit(true);
                }
            } catch (Exception e) {}
            try {
                if (rs != null) {
                    rs.close();
                    rs = null;
                }
            } catch (Exception e) {}
            try {
                if (stmt != null) {
                    stmt.close();
                    stmt = null;
                }
            } catch (Exception e) {}
            try {
                if (pstmt != null) {
                    pstmt.close();
                    pstmt = null;
                }
            } catch (Exception e) {}
            try {
                if (cstmt != null) {
                    cstmt.close();
                    cstmt = null;
                }
            } catch (Exception e) {}
            try {
                if (rs1 != null) {
                    rs1.close();
                    rs1 = null;
                }
            } catch (Exception e) {}
            try {
                if (pstmt1 != null) {
                    pstmt1.close();
                    pstmt1 = null;
                }
            } catch (Exception e) {}
           
        }
        if (mainCode != 0) {
            throw new WFSException(mainCode, subCode, errType, subject, descr, inputParamInfo.toString());
        }
        return outputXML.toString();
    }    

    /******************************************************************************************************************************
     Function Name		:	WFCompleteWithSet
     Date Written 		:	12/08/2004
     Author				:	Dinesh Parikh
     Input Parameters	:	Connection , XMLParser , XMLGenerator
     Output Parameters	:   None
     Return Values		:	String
     Description			:   Complet workItem with set attributes.
     ******************************************************************************************************************************/
//    public String WFCompleteWithSet(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
//        int subCode = 0;
//        int mainCode = 0;
//        ResultSet rs = null;
//        String descr = null;
//        String subject = null;
//        StringBuffer Query = null;
//        StringBuffer outputXML = null;
//        PreparedStatement pstmtOne = null;
//        PreparedStatement pstmtTwo = null;
//        PreparedStatement pstmtThree = null;
//        String errType = WFSError.WF_TMP;
//        java.util.HashMap processInstances = new java.util.HashMap();
//        java.util.HashMap attributes = null;
//        try {
//            int sessionID = parser.getIntOf("SessionId", 0, false);
//            String engine = parser.getValueOf("EngineName");
//            int dbType = ServerProperty.getReference().getDBType(engine);
//            int noOfRecordsToComplete = parser.getIntOf("NoOfRecordsToComplete", 0, true);
//            boolean completeAlso = parser.getValueOf("CompleteAlso", "N", true).startsWith("Y");
//            WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
//            if (participant != null) {
//                int userID = participant.getid();
//                String username = participant.getname();
//                outputXML = new StringBuffer(50);
//                int startIndex = 0;
//                int endIndex = 0;
//                int startAttrIndex = 0;
//                int endAttrIndex = 0;
//                int noOfAttr = 0;
//                String attrName = "";
//                String attrValue = "";
//                String pInstId = "";
//                String wItemId = "";
//                String tempStr = "";
//                java.util.HashMap failed = new java.util.HashMap();
//                if (noOfRecordsToComplete > 0) {
//                    for (int i = 0; i < noOfRecordsToComplete; i++) {
//                        startIndex = parser.getStartIndex("ProcessInstance", endIndex, 0);
//                        endIndex = parser.getEndIndex("ProcessInstance", startIndex, 0);
//                        pInstId = parser.getValueOf("ProcessInstanceId", startIndex, endIndex).trim();
//                        wItemId = parser.getValueOf("WorkItemId", startIndex, endIndex).trim();
//                        noOfAttr = parser.getNoOfFields("Attribute", startIndex, endIndex);
//                        if (noOfAttr > 0) {
//                            attributes = new java.util.HashMap();
//                            for (int j = 0; j < noOfAttr; j++) {
//                                startAttrIndex = parser.getStartIndex("Attribute", endAttrIndex, endIndex);
//                                endAttrIndex = parser.getEndIndex("Attribute", startAttrIndex, endIndex);
//                                attrName = parser.getValueOf("Name", startAttrIndex, endAttrIndex).trim();
//                                attrValue = parser.getValueOf("Value", startAttrIndex, endAttrIndex).trim();
//                                attributes.put(attrName.toLowerCase(), new com.newgen.omni.jts.dataObject.WMAttribute(attrName.toUpperCase(), attrValue, 10));
//                            } //end-for
//                        } //end-if
//                        processInstances.put(pInstId.toLowerCase() + com.newgen.omni.jts.constt.JTSConstant.Char255 + wItemId, attributes);
//                    } //end-for
//                    com.newgen.omni.jts.dataObject.WMAttribute iAttr = null;
//                    com.newgen.omni.jts.dataObject.WMAttribute oAttr = null;
//                    java.util.Iterator iterator = processInstances.keySet().iterator();
//                    StringBuffer strBuff = new StringBuffer("Select ProcessDefId, ActivityID, ActivityName, ParentWorkItemID, 'WorkInProcessTable',Q_QueueID,");
//                    strBuff.append(WFSUtil.getDate(dbType)); /*By Mandeep,SRNo-3 ,getDate() Not Working For Oracle Cabinet*/
//                    strBuff.append(",");
//					strBuff.append("ExpectedWorkitemDelay");
//                    strBuff.append(",");
//					strBuff.append("EntryDatetime");
//                    strBuff.append(",");
//					strBuff.append("LockedTime");
//                    strBuff.append(" From WorkinProcessTable Where ProcessInstanceId = ? And WorkitemId = ? And Q_Userid = ? ");
//                    int procDefID = 0;
//                    int activityId = 0;
//                    String actName = "";
//                    int queueId = 0;
//                    String currentDate = "";
//                    String expectedWkDelay = "";
//                    String entryDateTime = "";
//                    String lockedTime = "";
//                    String extTableName = "";
//                    String workitemids = "";
//                    if (con.getAutoCommit()) {
//                        con.setAutoCommit(false);
//                    }
//                    pstmtOne = con.prepareStatement(strBuff.toString());
//                    //Bug 33 - Bugzilla
//                    strBuff = new StringBuffer(" SELECT DISTINCT Rec1, Var_Rec_1, Rec2, Var_Rec_2, Rec3, Var_Rec_3, Rec4, Var_Rec_4, Rec5, Var_Rec_5 FROM RecordMappingTable "
//                                               + WFSUtil.getTableLockHintStr(dbType) + ",QueueDataTable " + WFSUtil.getTableLockHintStr(dbType)
//                                               + " where RecordMappingTable.ProcessDefId = ? and ProcessInstanceID = ? "
//                                               + WFSUtil.getQueryLockHintStr(dbType));
//
//                    pstmtThree = con.prepareStatement(strBuff.toString());
//                    while (iterator.hasNext()) {
//                        tempStr = (String) iterator.next();
//                        pInstId = tempStr.substring(0, tempStr.indexOf(com.newgen.omni.jts.constt.JTSConstant.Char255));
//                        wItemId = tempStr.substring(tempStr.indexOf(com.newgen.omni.jts.constt.JTSConstant.Char255) + 1);
//                        attributes = (java.util.HashMap) processInstances.get(tempStr);
//                        WFSUtil.DB_SetString(1, pInstId, pstmtOne, dbType);
//                        pstmtOne.setInt(2, Integer.parseInt(wItemId));
//                        pstmtOne.setInt(3, userID);
//                        pstmtOne.execute();
//                        rs = pstmtOne.getResultSet();
//                        if (rs != null && rs.next()) {
//                            procDefID = rs.getInt(1);
//                            activityId = rs.getInt(2);
//                            actName = rs.getString(3);
//                            int parentWI = rs.getInt(4);
//                            String tableName = rs.getString(5);
//                            queueId = rs.getInt(6);
//                            currentDate = rs.getString(7);
//                            expectedWkDelay = rs.getString(8);
//                            entryDateTime = rs.getString(9);
//                            lockedTime = rs.getString(10);
//                            rs.close();
//                            /*  Changed On  : May 12th 2007
//                                Changed By  : Ruhi Hira
//                                Description : workitemId not initialized
//                                              query inside while should take newWorkitemId in place of workitemId
//                                                (for multi refer .... )
//                             */
//                            workitemids = wItemId;
//                            // If parent exist then check for refer case and if exists then data should be set for parent also
//                            if (parentWI != 0) {
//                                int referby = 0;
//                                int newWorkitemID = Integer.parseInt(wItemId);
//                                // Tirupati Srivastava : changes made to make code compatible with postgreSQL
//                                strBuff = new StringBuffer("Select ParentWorkItemID, ReferredBy From QueueDataTable Where ProcessInstanceId = "); ;
//                                strBuff.append(WFSUtil.TO_STRING(pInstId, true, dbType));
//                                //strBuff.append(pInstId);
//                                strBuff.append(" And Workitemid =");
//                                strBuff.append(wItemId);
//                                pstmtTwo = con.prepareStatement(strBuff.toString());
//                                while (true) {
//                                    WFSUtil.DB_SetString(1, pInstId, pstmtTwo, dbType);
//                                    pstmtTwo.setInt(2, newWorkitemID);
//                                    pstmtTwo.execute();
//                                    rs = pstmtTwo.getResultSet();
//                                    if (rs != null && rs.next()) {
//                                        parentWI = rs.getInt(1);
//                                        referby = rs.getInt(2);
//                                        rs.close();
//                                    } else {
//                                        if (rs != null) {
//                                            rs.close();
//                                        }
//                                        break;
//                                    } //end-if-else
//                                    if (referby != 0) {
//                                        workitemids += workitemids.equals("") ? "" + parentWI : "," + parentWI;
//                                    }
//                                    newWorkitemID = parentWI;
//                                } //end-while
//                                pstmtTwo.close();
//                            }
//                            //changed by Ashish Mangla on 20/05/2005 for Automatic Cache updation
//                            com.newgen.omni.jts.dataObject.WFAttributedef cacheAttr = (com.newgen.omni.jts.dataObject.WFAttributedef) CachedObjectCollection.getReference().getCacheObject(con, engine, procDefID, WFSConstant.CACHE_CONST_Attribute, "" + activityId).getData(); //WFS_6.1_048
//                            java.util.HashMap cachemap = cacheAttr.getAttribMap();
//                            java.util.Iterator iteratorAttr = attributes.values().iterator();
//                            StringBuffer queryStr = new StringBuffer("Update QueueDataTable Set ");
//                            StringBuffer extqueryStr = new StringBuffer();
//                            StringBuffer insqueryStr = new StringBuffer();
//                            StringBuffer valqueryStr = new StringBuffer();
//                            StringBuffer tableStr = new StringBuffer(" Update ");
//                            tableStr.append(tableName);
//                            tableStr.append(" Set ");
//                            int extObjId = 0;
//                            boolean updateS = false;
//                            boolean updateE = false;
//                            boolean tableSelect = false;
//                            java.util.HashMap success = new java.util.HashMap();
//                            while (iteratorAttr.hasNext()) {
//                                iAttr = (com.newgen.omni.jts.dataObject.WMAttribute) iteratorAttr.next();
//                                attrName = iAttr.name.toUpperCase();
//                                attrValue = iAttr.value;
//                                oAttr = (com.newgen.omni.jts.dataObject.WMAttribute) (cachemap.get(attrName));
//                                if (oAttr != null) {
//                                    success.put(attrName, new com.newgen.omni.jts.dataObject.WMAttribute(attrName, attrValue, oAttr.type));
//                                    iteratorAttr.remove();
//                                    if (oAttr.scope == 'Q' || oAttr.scope == 'U') {
//                                        if (oAttr.extObj == 0) { // QueueVariables
//                                            queryStr.append(oAttr.name);
//                                            queryStr.append(" = ");
//                                            queryStr.append(WFSUtil.TO_SQL(attrValue, oAttr.type, dbType, true));
//                                            queryStr.append(" ,");
//                                            updateS = true;
//                                        } else { // External Variables
//                                            extqueryStr.append(oAttr.name);
//                                            insqueryStr.append(oAttr.name);
//                                            extqueryStr.append(" = ");
//                                            extqueryStr.append(WFSUtil.TO_SQL(attrValue, oAttr.type, dbType, true));
//                                            valqueryStr.append(WFSUtil.TO_SQL(attrValue, oAttr.type, dbType, true));
//                                            extqueryStr.append(" ,");
//                                            insqueryStr.append(" ,");
//                                            valqueryStr.append(" ,");
//                                            extObjId = oAttr.extObj;
//                                            updateE = true;
//                                        } //end-if-else
//                                    } else if (oAttr.scope == 'M') { //System Modifiable
//                                        tableStr.append(attrName);
//                                        tableStr.append(" = ");
//                                        tableStr.append(attrValue);
//                                        tableStr.append(",");
//                                        tableSelect = true;
//                                    } else { //end-if-else
//                                        if (!con.getAutoCommit()) {
//                                            con.rollback();
//                                            con.setAutoCommit(true);
//                                        } //end-if
//                                        mainCode = WFSError.WF_OPERATION_FAILED;
//                                        subCode = WFSError.WM_Batch_Attr;
//                                        break;
//                                    }
//                                } else { //end-if
//                                    if (!con.getAutoCommit()) {
//                                        con.rollback();
//                                        con.setAutoCommit(true);
//                                    } //end-if
//                                    mainCode = WFSError.WF_OPERATION_FAILED;
//                                    subCode = WFSError.WM_Batch_Attr;
//                                    break;
//                                }
//                            } //end-while
//                            if (mainCode == 0) {
//                                if (updateE) {
//                                    if (extTableName.equals("")) {
//                                        extTableName = com.newgen.omni.jts.util.WFSExtDB.getTableName(engine, procDefID, extObjId);
//                                    }
//                                    strBuff = new StringBuffer("Update ");
//                                    strBuff.append(extTableName);
//                                    strBuff.append(" Set ");
//                                    strBuff.append(extqueryStr.deleteCharAt(extqueryStr.length() - 1));
//                                    extqueryStr = new StringBuffer(strBuff.toString());
//                                    pstmtThree.setInt(1, procDefID);
//                                    WFSUtil.DB_SetString(2, pInstId, pstmtThree, dbType);
//                                    pstmtThree.execute();
//                                    rs = pstmtThree.getResultSet();
//                                    if (rs != null && rs.next()) {
//                                        extqueryStr.append(" WHERE ");
//                                        // Changed By  : Mandeep Kaur
//                                        // Changed On  : 4/8/2005
//                                        // Description : SRNO-2,Call WFCCompleteWithSet is not working with attributes which are external variable
//                                        int counter = 1;
//                                        while (counter <= 10) { // As five columns can only mapped
//                                            tempStr = rs.getString(counter++);
//                                            if (!rs.wasNull() && !tempStr.equals("")) {
//                                                extqueryStr.append(tempStr);
//                                                insqueryStr.append(tempStr);
//                                                insqueryStr.append(" ,");
//                                                tempStr = rs.getString(counter++);
//                                                if (!rs.wasNull()) {
//                                                    extqueryStr.append(" = ");
//                                                    extqueryStr.append(WFSUtil.TO_STRING(tempStr, true, dbType));
//                                                    valqueryStr.append(WFSUtil.TO_STRING(tempStr, true, dbType));
//                                                } else {
//                                                    extqueryStr.append(" Is Null");
//                                                    valqueryStr.append(" Null");
//                                                }
//                                                valqueryStr.append(" ,");
//                                                extqueryStr.append(" AND ");
//                                            } else {
//                                                tempStr = rs.getString(counter++);
//                                            }
//                                        } //end-while
//                                    } //end-if
//                                } //end-if
//                                Statement stmt = con.createStatement();
//                                if (tableSelect) {
//                                    strBuff = new StringBuffer(tableStr.substring(0, tableStr.length() - 1));
//                                    // Tirupati Srivastava : changes made to make code compatible with postgreSQL
//                                    strBuff.append(" Where ProcessInstanceID = ");
//                                    strBuff.append(WFSUtil.TO_STRING(pInstId, true, dbType));
//                                    //strBuff.append(pInstId);
//                                    strBuff.append(" And Workitemid In (");
//                                    strBuff.append(workitemids);
//                                    strBuff.append(")");
//                                    stmt.addBatch(strBuff.toString());
//                                } //end-if
//                                if (updateS) {
//                                    strBuff = new StringBuffer(queryStr.substring(0, queryStr.length() - 1));
//                                    // Tirupati Srivastava : changes made to make code compatible with postgreSQL
//                                    strBuff.append(" Where ProcessInstanceID = ");
//                                    strBuff.append(WFSUtil.TO_STRING(pInstId, true, dbType));
//                                    //strBuff.append(pInstId);
//                                    strBuff.append(" And Workitemid In (");
//                                    strBuff.append(workitemids);
//                                    strBuff.append(")");
//                                    stmt.addBatch(strBuff.toString());
//                                } //end-if
//                                if (updateE) {
//                                    strBuff = new StringBuffer(extqueryStr.substring(0, extqueryStr.length() - 5));
//                                    stmt.addBatch(strBuff.toString());
//                                } //end-if
//                                int result[] = null;
//                                if (updateE || updateS || tableSelect) {
//                                    result = stmt.executeBatch();
//                                    int counter = result.length;
//                                    if (counter == 3) {
//                                        if (result[0] <= 0 || result[1] <= 0) {
//                                            if (!con.getAutoCommit()) {
//                                                con.rollback();
//                                                con.setAutoCommit(true);
//                                            } //end-if
//                                            mainCode = WFSError.WF_OPERATION_FAILED;
//                                            subCode = WFSError.WM_Batch_Attr;
//                                            break;
//                                        } else {
//                                            if (result[2] <= 0) {
//                                                strBuff = new StringBuffer(" Insert Into ");
//                                                strBuff.append(extTableName);
//                                                strBuff.append(" (");
//                                                strBuff.append(insqueryStr.deleteCharAt(insqueryStr.length() - 1));
//                                                strBuff.append(") Values (");
//                                                strBuff.append(valqueryStr.deleteCharAt(valqueryStr.length() - 1));
//                                                strBuff.append(")");
//                                                int res = stmt.executeUpdate(strBuff.toString());
//                                                if (result[0] <= 0) {
//                                                    if (!con.getAutoCommit()) {
//                                                        con.rollback();
//                                                        con.setAutoCommit(true);
//                                                    } //end-if
//                                                    mainCode = WFSError.WF_OPERATION_FAILED;
//                                                    subCode = WFSError.WM_Batch_Attr;
//                                                    break;
//                                                } //end-if
//                                            } //end-if
//                                        } //end-if-else
//                                    } else if (counter == 2) {
//                                        if (result[0] <= 0 && updateE) {
//                                            if (!con.getAutoCommit()) {
//                                                con.rollback();
//                                                con.setAutoCommit(true);
//                                            } //end-if
//                                            mainCode = WFSError.WF_OPERATION_FAILED;
//                                            subCode = WFSError.WM_Batch_Attr;
//                                            break;
//                                        } else if (result[0] <= 0 || result[1] <= 0) {
//                                            if (!con.getAutoCommit()) {
//                                                con.rollback();
//                                                con.setAutoCommit(true);
//                                            } //end-if
//                                            mainCode = WFSError.WF_OPERATION_FAILED;
//                                            subCode = WFSError.WM_Batch_Attr;
//                                            break;
//                                        }
//                                    } else if (result[0] <= 0) {
//                                        if (!con.getAutoCommit()) {
//                                            con.rollback();
//                                            con.setAutoCommit(true);
//                                        } //end-if
//                                        mainCode = WFSError.WF_OPERATION_FAILED;
//                                        subCode = WFSError.WM_Batch_Attr;
//                                        break;
//                                    }
//                                } else {
//                                    if (!con.getAutoCommit()) {
//                                        con.rollback();
//                                        con.setAutoCommit(true);
//                                    } //end-if
//                                    mainCode = WFSError.WF_OPERATION_FAILED;
//                                    subCode = WFSError.WM_Batch_Attr;
//                                    break;
//                                }
//                                if (mainCode == 0) {
//                                    java.util.Iterator iter = success.values().iterator();
//                                    int cnt = 0;
//                                    /*
//                                     Changed By : Ruhi Hira
//                                     Changed On : 22/09/2004
//                                     Description: Attribute String formation corrected in WFCompleteWIthSet.
//                                     */
//                                    while (iter.hasNext()) {
//                                        if (cnt++ == 0) {
//                                            strBuff = new StringBuffer("<Attributes>");
//                                        }
//                                        oAttr = (com.newgen.omni.jts.dataObject.WMAttribute) iter.next();
//                                        strBuff.append("<Attribute><Name>");
//                                        strBuff.append(oAttr.name);
//                                        strBuff.append("</Name><Value>");
//                                        strBuff.append(oAttr.value);
//                                        strBuff.append("</Value></Attribute>");
//                                    } //end-while
//                                    if (cnt > 0) {
//                                        strBuff = strBuff.append("</Attributes>");
//                                    }
//									WFSUtil.generateLog(engine, con, WFSConstant.WFL_Attribute_Set, pInstId, Integer.parseInt(wItemId), procDefID, activityId, actName, 0, userID, username, 0, strBuff.toString(), null, null, null, null);
//                                    if (completeAlso) {
//                                        // Tirupati Srivastava : changes made to make code compatible with postgreSQL
//                                        strBuff = new StringBuffer(" Insert into WorkDonetable (ProcessInstanceId, WorkItemId, ProcessName, ProcessVersion, ProcessDefID, LastProcessedBy, ");
//                                        strBuff.append(" ProcessedBy, ActivityName, ActivityId, EntryDateTime, ParentWorkItemId, AssignmentType,CollectFlag,PriorityLevel,ValidTill,Q_StreamId,Q_QueueId,");
//                                        strBuff.append(" Q_UserId, FilterValue, CreatedDateTime, WorkItemState, Statename, ExpectedWorkitemDelay, PreviousStage, Queuename,Queuetype)");
//                                        strBuff.append(" Select ProcessInstanceId, WorkItemId, ProcessName, ProcessVersion, ProcessDefID, ");
//                                        strBuff.append(userID);
//                                        strBuff.append(", ");
//                                        //strBuff.append(username);
//                                        strBuff.append(WFSUtil.TO_STRING(username, true, dbType));
//                                        strBuff.append(" ,ActivityName,ActivityId, EntryDatetime, ParentWorkItemId,");
//                                        strBuff.append(WFSUtil.TO_STRING("Y", true, dbType));
//                                        strBuff.append(" ,CollectFlag,PriorityLevel,ValidTill, Q_StreamId, Q_QueueId, 0 ");
//                                        strBuff.append(",FilterValue,CreatedDateTime,6,");
//                                        strBuff.append(WFSUtil.TO_STRING(WFSConstant.WF_COMPLETED, true, dbType));
//                                        //strBuff.append(WFSConstant.WF_COMPLETED);
//                                        strBuff.append(" ,ExpectedWorkitemDelay, PreviousStage, QueueName, QueueType  From WorkinProcesstable ");
//                                        strBuff.append(" where ProcessInstanceID = ");
//                                        strBuff.append(WFSUtil.TO_STRING(pInstId, true, dbType));
//                                        //strBuff.append(pInstId);
//                                        strBuff.append(" And WorkItemID = ");
//                                        strBuff.append(wItemId);
//                                        stmt.addBatch(strBuff.toString());
//                                        strBuff = new StringBuffer("Delete from  WorkinProcesstable where ProcessInstanceID = ");
//                                        strBuff.append(WFSUtil.TO_STRING(pInstId, true, dbType));
//                                        //strBuff.append(pInstId);
//                                        strBuff.append(" And WorkItemID = ");
//                                        strBuff.append(wItemId);
//                                        stmt.addBatch(strBuff.toString());
//                                        result = stmt.executeBatch();
//                                        if (result[0] <= 0 || result[1] <= 0) {
//                                            if (!con.getAutoCommit()) {
//                                                con.rollback();
//                                                con.setAutoCommit(true);
//                                            } //end-if
//                                            mainCode = WFSError.WF_OPERATION_FAILED;
//                                            subCode = WFSError.WM_Batch_ProcInst;
//                                            break;
//                                        } //end-if
//                                        if (mainCode == 0) {
//											WFSUtil.generateLog(engine, con, WFSConstant.WFL_WorkItemCompleted, pInstId, Integer.parseInt(wItemId), procDefID, activityId, actName, queueId, userID, username, 0, null, currentDate, entryDateTime, lockedTime, expectedWkDelay);
//											WFSUtil.generateLog(engine, con, WFSConstant.WFL_WorkItemUnlock, pInstId, Integer.parseInt(wItemId), procDefID, activityId, actName, queueId, userID, username, 0, null, currentDate, null, lockedTime, null, 1);
//                                        } //end-if
//                                    } //end-if
//                                } //end-if
//                            } else { //end-if
//                                break;
//                            }
//                        } else { //end-if
//                            if (!con.getAutoCommit()) {
//                                con.rollback();
//                                con.setAutoCommit(true);
//                            } //end-if
//                            mainCode = WFSError.WF_OPERATION_FAILED;
//                            subCode = WFSError.WM_Batch_ProcInst;
//                            break;
//                        }
//                    } //end-while
//                    //Ashish added for WFS_6.1.2_069
//                    pstmtOne.close();
//                    pstmtOne = null;
//                    pstmtThree.close();
//                    pstmtThree = null;
//                    //End Ashish added for WFS_6.1.2_069
//                } //end-if
//            } else { //end-if
//                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
//            }
//            if (mainCode == 0) {
//                if (!con.getAutoCommit()) {
//                    con.commit();
//                    con.setAutoCommit(true);
//                } //end-if
//                outputXML.append(gen.createOutputFile("WFCompleteWithSet"));
//                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
//                outputXML.append(gen.closeOutputFile("WFCompleteWithSet"));
//            } else {
//                subject = WFSErrorMsg.getMessage(mainCode);
//                descr = WFSErrorMsg.getMessage(subCode);
//                errType = WFSError.WF_TMP;
//            }
//        } catch (SQLException e) {
//            WFSUtil.printErr(engine,"", e);
//            mainCode = WFSError.WM_INVALID_FILTER;
//            subCode = WFSError.WFS_SQL;
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_FAT;
//            if (e.getErrorCode() == 0) {
//                if (e.getSQLState().equalsIgnoreCase("08S01")) {
//                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
//                }
//            } else {
//                descr = e.getMessage();
//            }
//        } catch (NumberFormatException e) {
//            WFSUtil.printErr(engine,"", e);
//            mainCode = WFSError.WF_OPERATION_FAILED;
//            subCode = WFSError.WFS_ILP;
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_TMP;
//            descr = e.toString();
//        } catch (NullPointerException e) {
//            WFSUtil.printErr(engine,"", e);
//            mainCode = WFSError.WF_OPERATION_FAILED;
//            subCode = WFSError.WFS_SYS;
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_TMP;
//            descr = e.toString();
//        } catch (JTSException e) {
//            WFSUtil.printErr(engine,"", e);
//            mainCode = WFSError.WF_OPERATION_FAILED;
//            subCode = e.getErrorCode();
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_TMP;
//            descr = e.getMessage();
//        } catch (Exception e) {
//            WFSUtil.printErr(engine,"", e);
//            mainCode = WFSError.WF_OPERATION_FAILED;
//            subCode = WFSError.WFS_EXP;
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_TMP;
//            descr = e.toString();
//        } catch (Error e) {
//            WFSUtil.printErr(engine,"", e);
//            mainCode = WFSError.WF_OPERATION_FAILED;
//            subCode = WFSError.WFS_EXP;
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_TMP;
//            descr = e.toString();
//        } finally {
//            try {
//                if (pstmtOne != null) {
//                    pstmtOne.close();
//                }
//            } catch (Exception e) {}
//            try {
//                if (pstmtTwo != null) {
//                    pstmtTwo.close();
//                }
//            } catch (Exception e) {}
//            try {
//                if (pstmtThree != null) {
//                    pstmtThree.close();
//                }
//            } catch (Exception e) {}
//            try {
//                if (!con.getAutoCommit()) {
//                    con.rollback();
//                    con.setAutoCommit(true);
//                } //end-if
//            } catch (Exception e) {}
//            if (mainCode != 0) {
//                throw new WFSException(mainCode, subCode, errType, subject, descr);
//            }
//        }
//        return outputXML.toString();
//    }
public String WFCompleteWithSet(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
	int subCode = 0;
	int mainCode = 0;
	String descr = null;
	String subject = null;
        String errType = WFSError.WF_TMP;
	StringBuffer outputXML = null;
	java.util.HashMap attributes = null;
	java.util.HashMap processInstances = new java.util.HashMap();
        java.util.HashMap attributeXmlMap = new java.util.HashMap();
	ResultSet rs = null;
	Statement stmt = null;
	PreparedStatement pstmt1 = null;
	ResultSet rs1 = null;
	PreparedStatement pstmt = null;
	PreparedStatement pstmtOne = null;
	PreparedStatement pstmtTwo = null;
	PreparedStatement pstmtThree = null;
	//PreparedStatement pstmtFour = null;
	//PreparedStatement pstmtFive = null;
    String engine = parser.getValueOf("EngineName");
    boolean commit = false;
    boolean bSynchronousRoutingFlag = false;
	ArrayList parameters = new ArrayList();
	String queryString = "";
	boolean printQueryFlag = true;
	String lockStatus ="N";
	String option = null;
	char char21 = 21;
	String string21 = "" + char21;
	String actName = "";
	String sErrorAttributeDetail="";
	try	{

		option = parser.getValueOf("Option", "", false);
		int sessionID = parser.getIntOf("SessionId", 0, false);
		int dbType = ServerProperty.getReference().getDBType(engine);
		int noOfRecordsToComplete = parser.getIntOf("NoOfRecordsToComplete", 0, true);
        String auditRequired = parser.getValueOf("AuditRequired", "N", true);
		boolean completeAlso = parser.getValueOf("CompleteAlso","N", true).startsWith("Y");
		boolean forcefulComplete = parser.getValueOf("ForceComplete","N", true).startsWith("Y");
		WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
		 String synchronousRoutingFlag = parser.getValueOf("SynchronousRouting", "", true);
		 int inputQueueId = parser.getIntOf("QueueId", 0, true);
		 String strBatchComplete = parser.getValueOf("BatchComplete", "Y", true);
		 boolean isBatchComplet = strBatchComplete.equalsIgnoreCase("Y");

         if(synchronousRoutingFlag.equalsIgnoreCase("Y"))
             bSynchronousRoutingFlag = true;
         else if(synchronousRoutingFlag.equalsIgnoreCase(""))
             bSynchronousRoutingFlag = WFSUtil.isSyncRoutingMode();
        
         StringBuffer failedProccessInstances = new StringBuffer();
         StringBuffer successProcessInstances = new StringBuffer();
 		if(participant != null ) {
 			int userID = participant.getid();
            String username = participant.getname();
            int startIndex = 0;
            int endIndex = 0;
            String pInstId = "";
            String wItemId = "";
            int noOfAttr = 0;
            int startAttrIndex = 0;
            int endAttrIndex = 0;
            String attrName = "";
            String attrValue = "";
            String processName = "";
            int processVersion = 0;
            int procDefID = 0;
            String activityName = "";
            int activityId = 0;
            int parentWI = 0;
            String assignmentType = "";
            String collectFlag = "";
            int priorityLevel = 0;
            Timestamp validTill;
            int q_streamID = 0;
            int q_QueueID = 0;
            String urn = "";
            int filterValue = 0;
            Timestamp createdDateTime;
            Timestamp expectedWorkitemDelay;
            String previousStage = "";
            String lockedByName = "";
            String lockedStatus = "";
            String lockedTime = "";
            String queueName = "";
            String queueType = "";
            String tempStr = "";
            String procesinstanceKey = "";
            String expectedWkDelay = "0";
            int wkduration = 0;
            int processingTime = 0;
            String strEntryDateTime = "";
            boolean attributesNull = false;
            String attributesXML = "";
           	int procVarId = 0;
			WFConfigLocator configLocator = WFConfigLocator.getInstance();
			String strConfigFileName = configLocator.getPath(Location.IBPS_CONFIG) + File.separator + WFSConstant.CONST_DIRECTORY_CONFIG + File.separator + WFSConstant.CONST_FILE_WFAPPCONFIGPARAM;
			XMLParser parserTemp = new XMLParser(WFSUtil.readFile(strConfigFileName));
			int usrQTable_QueueID = 0;

			//Checking Queuassociation
            StringBuffer stBuff = new StringBuffer();
            if (inputQueueId > 0 && !forcefulComplete) {
                stBuff = stBuff.append("Select QueueID from userqueuetable where UserID = ? And  QueueID = ?");
                queryString = stBuff.toString();
                pstmt1 = con.prepareStatement(queryString);
                pstmt1.setInt(1, userID);
                pstmt1.setInt(2, inputQueueId);
                pstmt1.execute();
                rs = pstmt1.getResultSet();
                if (rs != null && rs.next()) {
                    usrQTable_QueueID = rs.getInt(1);
                    rs.close();
                    pstmt1.close();
                }

            }
		if (inputQueueId == 0 || (inputQueueId > 0 && usrQTable_QueueID > 0)||forcefulComplete) {	
			int maxNoOfRecord = parserTemp.getIntOf("MaxProcessInstanceCount", 50, true);
			outputXML = new StringBuffer(50);
            if(auditRequired.equalsIgnoreCase("Y") && noOfRecordsToComplete > maxNoOfRecord){
                mainCode = WFSError.WF_MAXLIMIT_OVERFLOW;
            }else if(noOfRecordsToComplete > 0){
			//	con.setAutoCommit(false);
            	int iActualNoOfRecords=parser.getNoOfFields("ProcessInstance");
            	
				for(int i = 0; i <noOfRecordsToComplete; i++){
					if(i+1 > iActualNoOfRecords) {
            			continue;
            		}
					startIndex = parser.getStartIndex("ProcessInstance", endIndex , 0 );
					endIndex = parser.getEndIndex("ProcessInstance", startIndex , 0 );
					pInstId = parser.getValueOf("ProcessInstanceId", startIndex, endIndex).trim();
					wItemId = parser.getValueOf("WorkItemId", startIndex, endIndex).trim();
					noOfAttr = parser.getNoOfFields("Attribute", startIndex, endIndex);
					attributesXML = parser.getValueOf("Attributes", startIndex, endIndex);
                                        attributesXML = "<Attributes>"+attributesXML+"</Attributes>";
                                        if(noOfAttr >0){
						attributes = new java.util.HashMap();
						for(int j=0; j < noOfAttr; j++){ 
							startAttrIndex = parser.getStartIndex("Attribute", endAttrIndex , endIndex);
							endAttrIndex = parser.getEndIndex("Attribute", startAttrIndex , endIndex);
							attrName = parser.getValueOf("Name", startAttrIndex, endAttrIndex).trim();
							attrValue = parser.getValueOf("Value", startAttrIndex, endAttrIndex).trim();
							attributes.put(attrName.toLowerCase(), new com.newgen.omni.jts.dataObject.WMAttribute(attrName.toUpperCase(),attrValue, 10));
						}
					}
                    if (attributes == null) {
                    	attributesNull = true;
                    }
					processInstances.put(pInstId + com.newgen.omni.jts.constt.JTSConstant.Char255 + wItemId, attributes);
                                        attributeXmlMap.put(pInstId + com.newgen.omni.jts.constt.JTSConstant.Char255 + wItemId,attributesXML);
                                }
				StringBuffer strBuffer1 = new StringBuffer();
				if(forcefulComplete) {
					strBuffer1.append("Select ActivityId,ParentWorkItemId, processdefid,LockStatus,Q_QueueId,URN, ActivityName,"
							+ WFSUtil.getDate(dbType) + ",LockedTime from WFInstrumentTable where ProcessInstanceID = ? And  WorkItemID = ? and RoutingStatus = 'N' ");
				}
				else {
				strBuffer1.append("Select ActivityId,ParentWorkItemId, processdefid,LockStatus,Q_QueueId,URN, ActivityName,"  
				+ WFSUtil.getDate(dbType) + ", LockedTime from WFInstrumentTable where ProcessInstanceID = ? And  WorkItemID = ? and RoutingStatus = 'N' And ( LockStatus = 'N' OR ( LockStatus = 'Y' And  Q_UserId = ? ))");
				}
				queryString = strBuffer1.toString();
				pstmt = con.prepareStatement(queryString);	// select data
				//Process Variant Support
				/*StringBuffer strBuffer2 = new StringBuffer("Insert into WorkDoneTable (ProcessInstanceId, WorkItemId, ProcessName, ProcessVersion, ProcessDefID, LastProcessedBy, ProcessedBy, ActivityName, ActivityId, EntryDateTime, ParentWorkItemId, AssignmentType, CollectFlag, PriorityLevel, ValidTill, Q_StreamId, Q_QueueId, Q_UserId, AssignedUser, FilterValue, CreatedDateTime, WorkItemState, Statename, ExpectedWorkitemDelay, PreviousStage, Queuename, Queuetype, NotifyStatus, ProcessVariantId )    Values(?,?,?,?,?,?,?,?,?," +WFSUtil.getDate(dbType)+ ",?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"); */
				String lockStat="";
				if (bSynchronousRoutingFlag) {
					lockStat="Y";
				}
				else{
					lockStat="N";
				}
				//Above changes done for making completewithset work in Synchronous mode
				StringBuffer strBuffer2 = new StringBuffer("Update WFInstrumentTable set LastProcessedBy = ? , ProcessedBy = ? , EntryDateTime = "+ WFSUtil.getDate(dbType) + ", ParentWorkItemId = ? , Q_UserId = ? , AssignedUser = ? , q_queueid=0,validtill = null, WorkItemState = ? , Statename = ? ,  NotifyStatus = ? , LockedByName = null ,LockStatus = ? ,PreviousStage = ? ,RoutingStatus = 'Y' where ProcessInstanceId =? and WorkItemId= ? ");
				String queryString2 = strBuffer2.toString();
				pstmtOne = con.prepareStatement(queryString2);	// insert data	
				
				com.newgen.omni.jts.dataObject.WMAttribute iAttr = null;
				com.newgen.omni.jts.dataObject.WMAttribute oAttr = null;

				StringBuffer queryBuff = new StringBuffer(100);

				queryBuff.append("Select Rec1,Var_Rec_1,Rec2,Var_Rec_2,Rec3,Var_Rec_3,Rec4,Var_Rec_4,Rec5,Var_Rec_5 ");
				queryBuff.append(" FROM RecordMappingTable  "+ (dbType==JTSConstant.JTS_MSSQL?" with (NOLOCK) ":"")+" ,WFInstrumentTable "+ (dbType==JTSConstant.JTS_MSSQL?" with (NOLOCK) ":"")+"  where RecordMappingTable.ProcessDefId = ? and ProcessInstanceID = ? and workitemid = ?"); 


				pstmtThree = con.prepareStatement(queryBuff.toString());	

				java.util.HashMap success = new java.util.HashMap();
				StringBuffer queryStr = null;
				StringBuffer extqueryStr = null;
				StringBuffer insqueryStr = null;
				StringBuffer valqueryStr = null;
				StringBuffer strBuff = null;
				boolean updateS = false;
				boolean updateE = false;
				int extObjId = 0;
				String extTableName = "";
				String workitemids = "";
				String currentDate = "";
				String entryDateTime = "";				
				boolean isError = false;
				java.util.Iterator iterator= processInstances.keySet().iterator();
				int result[] = null;
				if (isBatchComplet && con.getAutoCommit()) {
                    con.setAutoCommit(false);
                    commit = true;
                }
				while (iterator.hasNext()){
                    updateS = false;
                    updateE = false;
                    isError = false;
                    if (!isBatchComplet && con.getAutoCommit()) {
                        con.setAutoCommit(false);
                        commit = true;
                    }
					tempStr = (String)iterator.next();
                                        procesinstanceKey = tempStr;
					pInstId = tempStr.substring(0,tempStr.indexOf(com.newgen.omni.jts.constt.JTSConstant.Char255));
					wItemId = tempStr.substring(tempStr.indexOf(com.newgen.omni.jts.constt.JTSConstant.Char255)+1);
					if (!attributesNull) {
                        attributes = (java.util.HashMap) processInstances.get(tempStr);
                    }
					queryStr = new StringBuffer("Update WFInstrumentTable Set ");
					extqueryStr = new StringBuffer();
					insqueryStr = new StringBuffer();
					valqueryStr = new StringBuffer();
					strBuff = new StringBuffer();
					/*
                     * fetching all variables
                     */
					pstmt.setString(1,pInstId.trim());
					pstmt.setInt(2,Integer.parseInt(wItemId.trim()));
					if(!forcefulComplete) {
						pstmt.setInt(3, userID);
						}
					parameters.clear();
					parameters.addAll(Arrays.asList(pInstId,wItemId));
					//pstmt.execute();
					WFSUtil.jdbcExecute(pInstId,sessionID,userID,queryString,pstmt,parameters,printQueryFlag,engine);
					rs = pstmt.getResultSet();
					if(rs != null && rs.next()) {
						activityId = rs.getInt(1);
						parentWI = rs.getInt(2);
						procDefID= rs.getInt(3);
						lockStatus =rs.getString(4);
						int parentWICheckforDist = parentWI;
						q_QueueID = rs.getInt(5);
						urn = rs.getString(6);
						actName = rs.getString(7);
						currentDate=rs.getString(8);
						lockedTime=rs.getString(9);
						rs.close();
						rs = null;
						workitemids = "";
								if (inputQueueId > 0) {
									if (inputQueueId != q_QueueID) {
										isError = true;
										if (!isBatchComplet) {
											failedProccessInstances.append("<ProcessInstance>\n");
											failedProccessInstances
													.append("<ProcessInstanceId>" + pInstId + "</ProcessInstanceId>\n");
											failedProccessInstances
													.append("<WorkitemId>" + wItemId + "</WorkitemId>\n");
											failedProccessInstances.append(gen.writeValueOf("URN", urn));
											failedProccessInstances.append(
													"<Subject>" + WFSErrorMsg.getMessage(WFSError.WF_OPERATION_FAILED)
															+ "</Subject>\n");
											failedProccessInstances.append("<Description>"
													+ WFSErrorMsg.getMessage(WFSError.WM_Batch_Attr) + "</Subject>\n");
											failedProccessInstances.append("</ProcessInstance>\n");
											if (!con.getAutoCommit()) {
												con.rollback();
												con.setAutoCommit(true);
											}
											continue;
										} else {
											mainCode = WFSError.WF_OPERATION_FAILED;
											subCode = WFSError.WM_Batch_Attr;
											break;
										}
									}

								} else if (inputQueueId == 0) {
									StringBuffer stBuff1 = new StringBuffer();
									int usrQRights = 0;

									stBuff1 = stBuff1.append(
											"Select QueueID from userqueuetable where UserID = ? And  QueueID = ?");
									queryString = stBuff1.toString();
									pstmt1 = con.prepareStatement(queryString);
									pstmt1.setInt(1, userID);
									pstmt1.setInt(2, q_QueueID);
									pstmt1.execute();
									rs = pstmt1.getResultSet();
									if (!(rs != null && rs.next())) {
										isError = true;
										if (!isBatchComplet) {
											failedProccessInstances.append("<ProcessInstance>\n");
											failedProccessInstances
													.append("<ProcessInstanceId>" + pInstId + "</ProcessInstanceId>\n");
											failedProccessInstances
													.append("<WorkitemId>" + wItemId + "</WorkitemId>\n");
											failedProccessInstances.append(gen.writeValueOf("URN", urn));
											failedProccessInstances.append(
													"<Subject>" + WFSErrorMsg.getMessage(WFSError.WF_OPERATION_FAILED)
															+ "</Subject>\n");
											failedProccessInstances.append("<Description>"
													+ WFSErrorMsg.getMessage(WFSError.WM_Batch_Attr) + "</Subject>\n");
											failedProccessInstances.append("</ProcessInstance>\n");
											if (!con.getAutoCommit()) {
												con.rollback();
												con.setAutoCommit(true);
											}
											continue;
										} else {
											mainCode = WFSError.WF_OPERATION_FAILED;
											subCode = WFSError.WM_Batch_Attr;
											break;
										}

									}
									if (rs != null) {
										rs.close();
									}
									pstmt1.close();

								}
						
						
//						com.newgen.omni.jts.dataObject.WFAttributedef cacheAttr = (com.newgen.omni.jts.dataObject.WFAttributedef)(cacheObj.getObject(engine + "#" + procDefID + "#" + activityId));
                        com.newgen.omni.jts.dataObject.WFAttributedef cacheAttr = (com.newgen.omni.jts.dataObject.WFAttributedef) CachedObjectCollection.getReference().getCacheObject(con, engine, procDefID, WFSConstant.CACHE_CONST_Attribute, "" + activityId + string21 + procVarId).getData(); //WFS_6.1_048
						if (parentWI != 0){
							int referby = 0;
							int newWorkitemID = Integer.parseInt(wItemId);
							strBuff = new StringBuffer("Select ParentWorkItemID, ReferredBy From WFInstrumentTable "+ (dbType==JTSConstant.JTS_MSSQL?" with (NOLOCK) ":"")+"  Where ProcessInstanceId = ? ");
							strBuff.append(" And Workitemid = ? ");
							String qString = strBuff.toString();
							pstmtTwo= con.prepareStatement(strBuff.toString());
							while (true){
								pstmtTwo.setString(1, pInstId.trim());//WFS_5_077
								pstmtTwo.setInt(2, newWorkitemID);
								parameters.clear();
								parameters.addAll(Arrays.asList(pInstId,newWorkitemID));
								//pstmtTwo.execute();
								WFSUtil.jdbcExecute(pInstId,sessionID,userID,qString,pstmtTwo,parameters,printQueryFlag,engine);
								rs = pstmtTwo.getResultSet();
								if (rs != null && rs.next()){
									parentWI = rs.getInt(1);
									referby = rs.getInt(2);
									rs.close();
								}
								else{
									rs.close();
									break;
								}//end-if-else
								if (referby != 0){
									workitemids += workitemids.equals("") ? "" + parentWI : "," + parentWI;
								}
								newWorkitemID = parentWI;
							}//end-while
							if (pstmtTwo != null){	
								pstmtTwo.close();
								pstmtTwo = null;
							}
						} // end of if(parentWI != 0)
						else {
							workitemids += wItemId;
						}
						if (parentWICheckforDist != 0 && workitemids.equals("")){
							workitemids += wItemId;		
						}
						if(completeAlso) { //WFS_8.0_057
					
							pstmtOne.setInt(1,userID); 
							pstmtOne.setString (2,username);
							pstmtOne.setInt(3,parentWICheckforDist); //WFS_6.2_098
							pstmtOne.setInt(4,0); 
							pstmtOne.setString(5,""); 
							pstmtOne.setInt(6,6); 
							pstmtOne.setString(7,WFSConstant.WF_COMPLETED); 
							pstmtOne.setNull(8,Types.VARCHAR); 
							pstmtOne.setString(9,lockStat);//Above changes done for making completewithset work in Synchronous mode
							pstmtOne.setString(10,actName);
							pstmtOne.setString(11, pInstId.trim());
							pstmtOne.setInt(12,Integer.parseInt(wItemId)); 
						
						}

						java.util.HashMap cachemap = cacheAttr.getAttribMap();
						if (!attributesNull) {
						java.util.Iterator iteratorAttr= attributes.values().iterator();

						while(iteratorAttr.hasNext()){
							iAttr = (com.newgen.omni.jts.dataObject.WMAttribute)iteratorAttr.next();
							//attributename can be appended 
							attrName = iAttr.name.toUpperCase();
							attrValue = iAttr.value;							
							oAttr = (com.newgen.omni.jts.dataObject.WMAttribute)(cachemap.get(attrName));
							if(oAttr != null){
								success.put(attrName, new com.newgen.omni.jts.dataObject.WMAttribute(attrName,attrValue,oAttr.type));
								iteratorAttr.remove();
								if (oAttr.scope == 'Q' || oAttr.scope == 'U'){
									if (oAttr.extObj == 0){ // QueueVariables
										queryStr.append(oAttr.name);
										queryStr.append(" = ");
										queryStr.append(WFSUtil.TO_SQL(attrValue, oAttr.type, dbType, true));
										queryStr.append(" ,");
										updateS = true;
									}
									else{ // External Variables
										extqueryStr.append(oAttr.name);
										insqueryStr.append(oAttr.name);
										extqueryStr.append(" = ");
										extqueryStr.append(WFSUtil.TO_SQL(attrValue, oAttr.type, dbType, true));
										valqueryStr.append(WFSUtil.TO_SQL(attrValue, oAttr.type, dbType, true));
										extqueryStr.append(" ,");
										insqueryStr.append(" ,");
										valqueryStr.append(" ,");
										extObjId = oAttr.extObj;
										updateE = true;
									}
								}
								else{									
									/*  if (commit && !con.getAutoCommit()) {
                                    con.rollback();
                                    con.setAutoCommit(true);
                                    commit = false;
                                }//end-if */
                                isError = true;
									mainCode = WFSError.WF_OPERATION_FAILED;
									subCode = WFSError.WM_Batch_Attr;

                                    sErrorAttributeDetail=sErrorAttributeDetail.concat("variable name is :"+attrName).concat(" at activity "+actName)
                                    		.concat(" in processinstance id "+pInstId);
									break;
								}
							} // end of if(oAttr != null)
							else{
								/* if (commit && !con.getAutoCommit()) {
                                con.rollback();
                                con.setAutoCommit(true);
                                commit = false;
                            }//end-if */
								isError = true;
								mainCode = WFSError.WF_OPERATION_FAILED;
								subCode = WFSError.WM_Batch_Attr;
								break;
							}
						} // end of while(iteratorAttr.hasNext())
						if (mainCode != 0) // Case: Attrib scope not in Q or U, 
						{
                            if (!isBatchComplet) {
                                failedProccessInstances.append("<ProcessInstance>\n");
                                failedProccessInstances.append("<ProcessInstanceId>" + pInstId + "</ProcessInstanceId>\n");
                                failedProccessInstances.append("<WorkitemId>" + wItemId + "</WorkitemId>\n");
                                failedProccessInstances.append(gen.writeValueOf("URN", urn));
                                failedProccessInstances.append("<Subject>" + WFSErrorMsg.getMessage(WFSError.WF_OPERATION_FAILED) + "</Subject>\n");
                                failedProccessInstances.append("<Description>" + WFSErrorMsg.getMessage(WFSError.WM_Batch_Attr) + "</Subject>\n");
                                failedProccessInstances.append("</ProcessInstance>\n");
                                mainCode = 0;
                                if (!con.getAutoCommit()) {
                                    con.rollback();
                                    con.setAutoCommit(true);
                                }
                                continue;
                            } else {
                                break;
                            }
                        }
							
							if (updateE){
							if(extTableName.equals("")){
								extTableName = com.newgen.omni.jts.util.WFSExtDB.getTableName(engine, procDefID, extObjId);
							}
							strBuff = new StringBuffer("Update ");
							strBuff.append(WFSUtil.TO_SANITIZE_STRING(extTableName, false));
							strBuff.append(" Set ");
							strBuff.append(extqueryStr.deleteCharAt(extqueryStr.length() - 1));
							extqueryStr = new StringBuffer(strBuff.toString());
							pstmtThree.setInt(1, procDefID);
							pstmtThree.setString(2, pInstId.trim()); 
							pstmtThree.setInt(3, Integer.parseInt(wItemId));
							pstmtThree.execute();
							rs = pstmtThree.getResultSet();
							if (rs != null && rs.next()){
								extqueryStr.append(" WHERE ");
								int counter = 1;
								while(counter <= 10){ // As five columns can only mapped
									tempStr = rs.getString(counter++); 
									if(!rs.wasNull() && !tempStr.equals("")){
										extqueryStr.append(WFSUtil.TO_SANITIZE_STRING(tempStr, true));
										insqueryStr.append(WFSUtil.TO_SANITIZE_STRING(tempStr, true));
										insqueryStr.append(" ,");
										tempStr = rs.getString(counter++);
										if(!rs.wasNull()){
											extqueryStr.append(" = ");
											extqueryStr.append(WFSUtil.TO_STRING(tempStr, true, dbType));
											valqueryStr.append(WFSUtil.TO_STRING(tempStr, true, dbType));
										}
										else{
											extqueryStr.append(" Is Null");
											valqueryStr.append(" Null");
										}
										valqueryStr.append(" ,");
										extqueryStr.append(" AND ");
									} else{
										tempStr = rs.getString(counter++);
									}
								}//end-while
								rs.close();
								rs = null;
							}//end-if
							
						} // end of if (updateE)
						stmt = con.createStatement();
						if(updateS){
							strBuff = new StringBuffer(queryStr.substring(0, queryStr.length() - 1));
							strBuff.append(" Where ProcessInstanceID = ");
							strBuff.append(WFSUtil.TO_STRING(pInstId.trim(), true, dbType)); 
							strBuff.append(" And (WorkitemId = ");
							strBuff.append(Integer.parseInt(wItemId));
							if(!workitemids.equals(""))
							{
								strBuff.append(" OR WorkitemId In (");
								strBuff.append(WFSUtil.TO_SANITIZE_STRING(workitemids, true)).append(")");
							}
							strBuff.append(")");
							stmt.addBatch(strBuff.toString());
						}//end-if
						if (updateE){
							strBuff = new StringBuffer(extqueryStr.substring(0, extqueryStr.length() - 5));
							stmt.addBatch(strBuff.toString());
						}
						if(updateE || updateS){
							result = stmt.executeBatch();
							int counter = result.length; 
							if(counter == 2){
								if(result[0] <= 0 ){
									isError = true;
                                    if (!isBatchComplet) {
                                        failedProccessInstances.append("<ProcessInstance>\n");
                                        failedProccessInstances.append("<ProcessInstanceId>" + pInstId + "</ProcessInstanceId>\n");
                                        failedProccessInstances.append("<WorkitemId>" + wItemId + "</WorkitemId>\n");
                                        failedProccessInstances.append(gen.writeValueOf("URN", urn));
                                        failedProccessInstances.append("<Subject>" + WFSErrorMsg.getMessage(WFSError.WF_OPERATION_FAILED) + "</Subject>\n");
                                        failedProccessInstances.append("<Description>" + WFSErrorMsg.getMessage(WFSError.WM_Batch_Attr) + "</Subject>\n");
                                        failedProccessInstances.append("</ProcessInstance>\n");

									if(commit &&!con.getAutoCommit()){
										con.rollback();
										con.setAutoCommit(true);
										commit = false;
									}//end-if
									continue;
                                    } else {
									mainCode = WFSError.WF_OPERATION_FAILED;
									subCode = WFSError.WM_Batch_Attr;
									break;
								}
								} else if (result[1] <= 0) {
									strBuff = new StringBuffer(" Insert Into ");
									strBuff.append(WFSUtil.TO_SANITIZE_STRING(extTableName, false));
									strBuff.append(" (");
									strBuff.append(insqueryStr.deleteCharAt(insqueryStr.length() - 1)); 
									strBuff.append(") Values (");
									strBuff.append(valqueryStr.deleteCharAt(valqueryStr.length() - 1));
									strBuff.append(")");
	//									if(stmt!=null )	//WFS_5_274
	//										stmt.close();
	//									stmt = con.createStatement();
									stmt.clearBatch();
									int res = stmt.executeUpdate(strBuff.toString());
									if(res <= 0){
										isError = true;
                                        if (!isBatchComplet) {
                                            failedProccessInstances.append("<ProcessInstance>\n");
                                            failedProccessInstances.append("<ProcessInstanceId>" + pInstId + "</ProcessInstanceId>\n");
                                            failedProccessInstances.append("<WorkitemId>" + wItemId + "</WorkitemId>\n");
                                            failedProccessInstances.append(gen.writeValueOf("URN", urn));
                                            failedProccessInstances.append("<Subject>" + WFSErrorMsg.getMessage(WFSError.WF_OPERATION_FAILED) + "</Subject>\n");
                                            failedProccessInstances.append("<Description>" + WFSErrorMsg.getMessage(WFSError.WM_Batch_Attr) + "</Subject>\n");
                                            failedProccessInstances.append("</ProcessInstance>\n");
									
										if(commit && !con.getAutoCommit()){
											con.rollback();
											con.setAutoCommit(true);
											commit = false;
										}//end-if
										continue;
                                        } else {
										mainCode = WFSError.WF_OPERATION_FAILED;
										subCode = WFSError.WM_Batch_Attr;
										break;
                                        }
									}//end-if
								}//end-else-if
							}else if(result[0] <= 0){
								 isError = true;
                                 if (!isBatchComplet) {
                                     failedProccessInstances.append("<ProcessInstance>\n");
                                     failedProccessInstances.append("<ProcessInstanceId>" + pInstId + "</ProcessInstanceId>\n");
                                     failedProccessInstances.append("<WorkitemId>" + wItemId + "</WorkitemId>\n");
                                     failedProccessInstances.append(gen.writeValueOf("URN", urn));
                                     failedProccessInstances.append("<Subject>" + WFSErrorMsg.getMessage(WFSError.WF_OPERATION_FAILED) + "</Subject>\n");
                                     failedProccessInstances.append("<Description>" + WFSErrorMsg.getMessage(WFSError.WM_Batch_Attr) + "</Subject>\n");
                                     failedProccessInstances.append("</ProcessInstance>\n");
	
							
								if(commit &&!con.getAutoCommit()){
									con.rollback();
									con.setAutoCommit(true);
									commit = false;
								}//end-if
								continue;
                                 } else {
								mainCode = WFSError.WF_OPERATION_FAILED;
								subCode = WFSError.WM_Batch_Attr;
								break;
							}
							}
							if (stmt != null) {//WFS_5_274
								stmt.close();
								stmt = null;
							}
						} // end of if(updateE || updateS) Merged till here
						else{
							isError = true;
                            if (!isBatchComplet) {

                                if (commit && !con.getAutoCommit()) {
                                    failedProccessInstances.append("<ProcessInstance>\n");
                                    failedProccessInstances.append("<ProcessInstanceId>" + pInstId + "</ProcessInstanceId>\n");
                                    failedProccessInstances.append("<WorkitemId>" + wItemId + "</WorkitemId>\n");
                                    failedProccessInstances.append(gen.writeValueOf("URN", urn));
                                    failedProccessInstances.append("<Subject>" + WFSErrorMsg.getMessage(WFSError.WF_OPERATION_FAILED) + "</Subject>\n");
                                    failedProccessInstances.append("<Description>" + WFSErrorMsg.getMessage(WFSError.WM_Batch_Attr) + "</Subject>\n");
                                    failedProccessInstances.append("</ProcessInstance>\n");

								con.rollback();
								con.setAutoCommit(true);
								commit = false;
							}//end-if
							continue;
                                } else {
							mainCode = WFSError.WF_OPERATION_FAILED;
							subCode = WFSError.WM_Batch_Attr;
							break;
						}
						}
						}    //Merged till here--5809
						if(completeAlso) { //WFS_8.0_057
							parameters.clear();
							parameters.addAll(Arrays.asList(username,parentWICheckforDist,0,username,6,WFSConstant.WF_COMPLETED,Types.VARCHAR,pInstId,wItemId));
							//int exeCnt = pstmtOne.executeUpdate();
							int exeCnt = WFSUtil.jdbcExecuteUpdate(pInstId,sessionID,userID,queryString2,pstmtOne,parameters,printQueryFlag,engine);
							if (bSynchronousRoutingFlag) {
								if(auditRequired.equalsIgnoreCase("Y")){
									WFSUtil.generateLog(engine, con, WFSConstant.WFL_Attribute_Set, pInstId, Integer.parseInt(wItemId), procDefID, activityId, activityName, 0, userID, username, 0, (String)attributeXmlMap.get(procesinstanceKey), null, null, null, null);
								}

								WFSUtil.generateLog(engine, con, WFSConstant.WFL_WorkItemCompleted, pInstId, Integer.parseInt(wItemId), procDefID, activityId, activityName, q_QueueID, userID, username, 0, null, currentDate, entryDateTime, lockedTime, expectedWkDelay, null);
                                String[] retInfo = WFRoutingUtil.routeWorkitem(con, pInstId, Integer.parseInt(wItemId), procDefID, engine,0,0,true,bSynchronousRoutingFlag);
                                if(lockStatus.equalsIgnoreCase("Y")) {
        							WFSUtil.generateLog(engine, con, WFSConstant.WFL_WorkItemUnlock, pInstId, Integer.parseInt(wItemId), procDefID,
        									activityId, actName, q_QueueID, userID, username, 0, null, currentDate, null, lockedTime, null, 1);
        						}
                         }else{
							if(exeCnt <= 0) {
								isError = true;
                                if (!isBatchComplet) {
                                    failedProccessInstances.append("<ProcessInstance>\n");
                                    failedProccessInstances.append("<ProcessInstanceId>" + pInstId + "</ProcessInstanceId>\n");
                                    failedProccessInstances.append("<WorkitemId>" + wItemId + "</WorkitemId>\n");
                                    failedProccessInstances.append(gen.writeValueOf("URN", urn));
                                    failedProccessInstances.append("<Subject>" + WFSErrorMsg.getMessage( WFSError.WF_OPERATION_FAILED) + "</Subject>\n");
                                    failedProccessInstances.append("<Description>" + WFSErrorMsg.getMessage(WFSError.WM_Batch_ProcInst) + "</Subject>\n");
                                    failedProccessInstances.append("</ProcessInstance>\n");

                                    if(commit && !con.getAutoCommit()){
									con.rollback();
									con.setAutoCommit(true);
									commit = false;
								}//end-if
                                    continue;
                                } else {
								mainCode = WFSError.WF_OPERATION_FAILED;
								subCode = WFSError.WM_Batch_ProcInst;
								break;
							}
							/*else {
								//delete from WLT. 
								pstmtFour.setString(1, pInstId.trim());
								pstmtFour.setInt(2,Integer.parseInt(wItemId)); 
								exeCnt = pstmtFour.executeUpdate();
								if(exeCnt < 0) {
									if(!con.getAutoCommit()){
										con.rollback();
										con.setAutoCommit(true);
									}//end-if
									mainCode = WFSError.WF_OPERATION_FAILED;
									subCode = WFSError.WM_Batch_ProcInst;
									break;
								}
								if(exeCnt == 0)  {
									pstmtFive.setString(1, pInstId.trim());
									pstmtFive.setInt(2,Integer.parseInt(wItemId)); 
									exeCnt = pstmtFive.executeUpdate();	
									if(exeCnt < 0) {
										if(!con.getAutoCommit()){
											con.rollback();
											con.setAutoCommit(true);
										}//end-if
										mainCode = WFSError.WF_OPERATION_FAILED;
										subCode = WFSError.WM_Batch_ProcInst;
										break;
									}
								}*/
							}
						}
						}
					}	// end of if(rs != null && rs.next()) - processinstances. - WLT or WIP 
					else
					{
						pstmt1 = con.prepareStatement("select URN from wfinstrumenttable " + WFSUtil.getTableLockHintStr(dbType) + " where processinstanceid = ?");
						WFSUtil.DB_SetString(1, pInstId, pstmt1, dbType);
						rs1 = pstmt1.executeQuery();
						if(rs1.next()){
							urn = rs1.getString(1);
						}
						if(rs1 != null && !rs1.isClosed()){
							rs1.close();
							rs1 = null;
						}
						if(pstmt1 != null && !pstmt1.isClosed()){
							pstmt1.close();
							pstmt1 = null;
						}
						isError = true;
                        if (!isBatchComplet) {
                            failedProccessInstances.append("<ProcessInstance>\n");
                            failedProccessInstances.append("<ProcessInstanceId>" + pInstId + "</ProcessInstanceId>\n");
                            failedProccessInstances.append("<WorkitemId>" + wItemId + "</WorkitemId>\n");
                            failedProccessInstances.append(gen.writeValueOf("URN", urn));
                            failedProccessInstances.append("<Subject>" + WFSErrorMsg.getMessage(WFSError.WF_OPERATION_FAILED) + "</Subject>\n");
                            failedProccessInstances.append("<Description>" + WFSErrorMsg.getMessage(WFSError.WM_Batch_ProcInst) + "</Subject>\n");
                            failedProccessInstances.append("</ProcessInstance>\n");
            
						if(commit &&  !con.getAutoCommit()){
							con.rollback();
							con.setAutoCommit(true);
							commit = false;
						}//end-if
						 continue;
                        } else {
						mainCode = WFSError.WF_OPERATION_FAILED;
						subCode = WFSError.WM_Batch_ProcInst;
						break;
					}
					}
					if(mainCode == 0)
					{					   
					//	WFSUtil.genLog(engine,con,procDefID,pInstId,activityId,activityName,WFSConstant.WFL_WorkItemCompleted,userID,q_QueueID,null,Integer.parseInt(wItemId),username);
					//	WFSUtil.genLog(engine,con,procDefID,pInstId,activityId,activityName,WFSConstant.WFL_WorkItemUnlock,userID,q_QueueID,null,Integer.parseInt(wItemId),username);
					//	WFSUtil.genLogsummary(con,engine,procDefID,activityId,activityName,WFSConstant.WFL_WorkItemCompleted,userID,q_QueueID,username,wkduration,expectedWkDelay,currentDate,processingTime,0,"");
					
					if(completeAlso && !bSynchronousRoutingFlag){
						if(auditRequired.equalsIgnoreCase("Y")){
							WFSUtil.generateLog(engine, con, WFSConstant.WFL_Attribute_Set, pInstId, Integer.parseInt(wItemId), procDefID, activityId, activityName, 0, userID, username, 0, (String)attributeXmlMap.get(procesinstanceKey), null, null, null, null);
						}
						WFSUtil.generateLog(engine, con, WFSConstant.WFL_WorkItemCompleted, pInstId, Integer.parseInt(wItemId), procDefID, activityId, activityName, q_QueueID, userID, username, 0, null, currentDate, entryDateTime, lockedTime, expectedWkDelay, null); /*WFS_8.0_026*/
						if(lockStatus.equalsIgnoreCase("Y")) {
							WFSUtil.generateLog(engine, con, WFSConstant.WFL_WorkItemUnlock, pInstId, Integer.parseInt(wItemId), procDefID,
									activityId, actName, q_QueueID, userID, username, 0, null, currentDate, null, lockedTime, null, 1);
						}
					}
					/*if(lockStatus.equalsIgnoreCase("Y")){
						WFSUtil.generateLog(engine, con, WFSConstant.WFL_WorkItemUnlock, pInstId, Integer.parseInt(wItemId), procDefID, activityId, activityName, q_QueueID, userID,username, 0, null, currentDate, null, lockedTime, null, 1);
					}*/
					} // end of if(mainCode == 0)
					 if (!con.getAutoCommit() && !isBatchComplet) {
                         con.commit();
                         con.setAutoCommit(false);
                     }
				} // while (iterator.hasNext())
				if(pstmt != null) {
					pstmt.close();
					pstmt = null;		
				}
				if(pstmtOne != null) {
					pstmtOne.close();
					pstmtOne = null;		
				}
				if(pstmtThree != null) {
					pstmtThree.close();
					pstmtThree = null;		
				}
				/*if(pstmtFour != null) {
					pstmtFour.close();
					pstmtFour = null;		
				}
				if(pstmtFive != null) {
					pstmtFive.close();
					pstmtFive = null;		
				}*/
				} // end of if(noOfRecordsToComplete > 0)
            } else {
                    mainCode = WFSError.WF_OPERATION_FAILED;
                    subCode = WFSError.WFS_NORIGHTS;
                }
        } // end of if (participant ! = null)  
		else{
			mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
		}
		if(mainCode == 0 ){
            if (isBatchComplet && !con.getAutoCommit()) {
                con.commit();
                con.setAutoCommit(true);
                commit = false;
            outputXML.append(gen.createOutputFile("WFCompleteWithSet"));
                    outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                    outputXML.append(gen.closeOutputFile("WFCompleteWithSet"));
        } else if(!isBatchComplet){
                    outputXML.append(gen.createOutputFile("WFCompleteWithSet"));
                    outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                    outputXML.append("<FailedProcessInstance>\n");
                    outputXML.append(failedProccessInstances + "</FailedProcessInstance>\n");
                    outputXML.append(gen.closeOutputFile("WFCompleteWithSet")); 
                }
            }
		else{
            if (isBatchComplet) {
                if (!con.getAutoCommit()) {
                    con.rollback();
                    con.setAutoCommit(true);
                    commit = false;

                }
            }
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                if(subCode==WFSError.WM_Batch_Attr && !sErrorAttributeDetail.isEmpty()) {
                	descr=descr.concat(sErrorAttributeDetail);
                }
                errType = WFSError.WF_TMP;
            
        }
	} // end try
	catch(SQLException e) {
		WFSUtil.printErr(engine,"",e);
		mainCode = WFSError.WM_INVALID_FILTER;
		subCode = WFSError.WFS_SQL;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_FAT;
		if(e.getErrorCode() == 0) {
			if(e.getSQLState().equalsIgnoreCase("08S01")) {
				descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
			}
		}
		else 
			descr = e.getMessage();
	}
	catch(NumberFormatException e) {
		WFSUtil.printErr(engine,"",e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_ILP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	}
	catch(NullPointerException e) {
		WFSUtil.printErr(engine,"",e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_SYS;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	}
	catch(JTSException e) {
		WFSUtil.printErr(engine,"",e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = e.getErrorCode();
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.getMessage();
	}
	catch(Exception e) {
		WFSUtil.printErr(engine,"",e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	}
	catch(Error e) {
		WFSUtil.printErr(engine,"",e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	}
	finally {
		try {
			if(pstmt != null){ 
				pstmt.close();
				pstmt = null;
			}
		}
		catch(Exception e) {}
		try {
			if(pstmtOne != null) {
				pstmtOne.close();
				pstmtOne = null;		
			}
		}
		catch(Exception e) {}
		try {
			if(pstmtTwo != null){
				pstmtTwo.close();
				pstmtTwo = null;		
			}
		}
		catch(Exception e) {}
		try {
			if(pstmtThree != null) {
				pstmtThree.close();
				pstmtThree = null;
			}
		}
		
		catch(Exception e) {}
		try {
			if(stmt != null){ 
				stmt.close();
				stmt = null;
			}
		}
		catch(Exception e) {}
		try {
			if(commit && !con.getAutoCommit()){
				con.rollback();
				con.setAutoCommit(true);
                                commit = false;
			}//end-if
		}	
		catch(Exception e) {}
		
	}
		if(mainCode != 0) {
			//throw new WFSException(mainCode, subCode, errType, subject, descr);
		   String errorString = WFSUtil.generalError(option, engine, gen,mainCode, subCode,errType, subject,descr);
		   return errorString;	
		}
	return outputXML.toString();
}

    private void writeObject(ObjectOutputStream oos) throws IOException {
        oos.defaultWriteObject();
    }

    private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {
        ois.defaultReadObject();
    }

    public String WFFetchHistory(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
    	int actionId=0;
    	try{
    		actionId = parser.getIntOf("ActionId", 0, true);
    	}catch(Exception ignore){
    		actionId=0;
    	}
    	if (actionId == 128) {
            return WFGetUserHistory(con, parser, gen);
    	}
    	else {
            return WFGetHistoryNew(con, parser, gen);
        }
    }
	public String WFGetHistoryNew(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException { 
		 StringBuffer outputXML = new StringBuffer("");
        Statement stmt = null;
        ResultSet rs = null;
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        String engine ="";
        
		List<String> actionIdList1 = new ArrayList();
		List<String> actionIdList2 = new ArrayList();
		//StringBuffer subStringBuffer = null;
        String locale = "";
        String dateFormat = "";
        Locale loc = null;
        String actionText = null;
		
        try {
            int sessionID = parser.getIntOf("SessionId", 0, false);
			WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
            locale = getLocale(user);
            engine = parser.getValueOf("EngineName");
            
            int dbType = ServerProperty.getReference().getDBType(engine);
            int noOfRectoFetch = parser.getIntOf("NoOfRecordsToFetch", ServerProperty.getReference().getBatchSize(), true);
            if (noOfRectoFetch > ServerProperty.getReference().getBatchSize() || noOfRectoFetch <= 0) //Added by Ahsan Javed for getBatchSize
                noOfRectoFetch = ServerProperty.getReference().getBatchSize();
            String actionId = parser.getValueOf("ActionId", "", true);
            char option = parser.getCharOf("HistoryOption", 'Q', false);
			char histroyType = parser.getCharOf("HistoryType", 'A', true);	//can be A and W (A for admin operations, W for WI operations) 
            String optionId = parser.getValueOf("OptionIndex", "", false);
            String lastIndex = parser.getValueOf("LastIndex", "0", true);
            String groupId = parser.getValueOf("GroupID","",true);
            String from = parser.getValueOf("From", "", true);
            String to = parser.getValueOf("To", "", true);
            char sortOrder = parser.getCharOf("SortOrder", 'A', true);
            char reportDuration = parser.getCharOf("Duration", '\0', true);
			boolean escapeSpecialChar = parser.getValueOf("EscapeSpecialChar", "N", true).equalsIgnoreCase("Y");
			boolean userHistory = parser.getValueOf("HistoryOption", "", true).equalsIgnoreCase("U");
            /**
             * Changed On  : May 12th 2007
             * Changed By  : Ruhi Hira
             * Description : calculate dates at server for reports, SrNo-5.
             */
            if (reportDuration != '\0') {
                String[] temp = WFSUtil.dateCalculator(reportDuration, WFSConstant.CONST_TYPE_DAY, dbType, parser);
                from = temp[0];
                to = temp[1];
            }
            String dateCrt = (!from.equals("")) ? " AND ActionDateTime >= " + WFSUtil.TO_DATE(from, true, dbType) : " ";
            dateCrt += (!to.equals("")) ? " AND ActionDateTime <= " + WFSUtil.TO_DATE(to, true, dbType) : " ";
            String lastvalueStr = "";
            StringBuffer tempXml = new StringBuffer(100);
			StringBuffer duptempXml = null;
            String returnActionDescription = parser.getValueOf("ActionDescription","N",true);
            String srtby = "";
            String exeStr = "";
            String prefix = "";
            String suffix = "";
			String userIndexes = "";
			boolean tranLog = false;
            StringTokenizer st = new StringTokenizer(actionId, ",");
	    int checkInt;
			String tokenVal = null;
            while (st.countTokens() > 0) {
				tokenVal = st.nextToken().trim();
                checkInt = Integer.parseInt(tokenVal);
				actionIdList1.add(tokenVal);
            }
            st = new StringTokenizer(optionId, ",");
            while (st.countTokens() > 0) {
                checkInt = Integer.parseInt(st.nextToken().trim());
            }
			if(!groupId.equals("0") && optionId.equals("0")){
				stmt = con.createStatement();
				rs=stmt.executeQuery("Select userindex from pdbgroupmember where groupindex="+groupId);
				while (rs.next() && rs!=null) {
					userIndexes += rs.getString(1)+",";
				}
				userIndexes = userIndexes.substring(0 , userIndexes.lastIndexOf(","));
				optionId = userIndexes;
				if (rs != null)
				{
					rs.close();
				}
				stmt.close();
			}
            WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
            if (participant != null) {

				if (option == 'U'){
					if ( (!actionId.trim().equals("") && !actionId.trim().equals("0"))  || (histroyType == 'W' && (actionId.trim().equals("") || actionId.trim().equals("0"))) ) {
						int tempId ;
						try {
							tempId = Integer.parseInt(actionId);	
						} catch (Exception e) { // may be actionId = ""
							tempId = 0;	
						}
						
				if (tempId == 33 || tempId == 18 || tempId == 10 || tempId == 1 || tempId == 48 || tempId == 37 || tempId == 36 || tempId == 7 || tempId == 24 || tempId == 15 || tempId == 9 || tempId == 17 || tempId == 41 || tempId == 38 || tempId == 32 || tempId == 45 || tempId == 42 || tempId == 16 || tempId == 34 || tempId == 19 || tempId == 89 || tempId == 90 || tempId == 91 || tempId == 92 || tempId == 93 || tempId == 94 || tempId == 95 || tempId == 2 || tempId == 47 || tempId == 25  || tempId == 22 || tempId == 23 || tempId == 8 || tempId == 27 || tempId == 0 || tempId ==3 || tempId ==	104 || tempId ==105|| tempId ==	55 || tempId ==	56 || tempId ==	57 || tempId ==	58 || tempId ==	59 || tempId ==	72 || tempId ==	73	|| tempId == 74 || tempId ==75 || tempId ==	79 || tempId ==	81 || tempId ==	82 || tempId ==	83 || tempId ==	96 || tempId ==	101 || tempId == 102 ||	tempId ==	103|| tempId ==	200 || tempId == 110 || tempId == 4	|| tempId == 5 || tempId ==	6 || tempId ==	13 || tempId ==	14 || tempId ==20 || tempId ==	26 || tempId ==	28 || tempId ==	29 || tempId ==	30 || tempId ==	31 || tempId ==	35	|| tempId ==39|| tempId == 40 || tempId ==43 || tempId ==	44 || tempId ==	46 ) {							
							
							tranLog = true;
							exeStr = "SELECT * from ( select " + WFSUtil.getFetchPrefixStr(dbType, noOfRectoFetch + 1) 
								+ " ActivityId, Activityname, UserId, UserName, ActionId,  ActionDateTime, AssociatedFieldId," 
								+ " AssociatedFieldName, NewValue, WorkItemId ,ProcessInstanceId ,logid from WFroutelogView where ";
						//Bug 38042 - No history generated for operation 'Reinitiate Workitem' 
							if(tempId==0){
								
							exeStr += "userid is not null and actionid != 0 and actionid != 202 and actionid !=23 and actionid!=24"  ;
							}
							else {
								exeStr += "userid is not null and actionid != 0 and actionid != 202"  ;
							}
//							exeStr += "userid is not null and userid != 0 and actionid != 0 and actionid != 202";{
							
							
							if (!actionId.trim().equals("") && !actionId.trim().equals("0")) {
								exeStr += " and actionid in (" + actionId + ")";
							}
							if (!optionId.equals("0")) {
								exeStr += " and userid IN (" + WFSUtil.TO_SANITIZE_STRING(optionId, true) + ")";
							}

							switch (sortOrder) {
								case 'A':
									if (!lastIndex.equals("0")) {
										lastvalueStr = " and LogId > " + lastIndex;
									}
									srtby = " ASC";
									break;
								case 'D':
									if (!lastIndex.equals("0")) {
										lastvalueStr = " and LogId < " + lastIndex;
									}
									srtby = " DESC";
									break;
							}						
/*********************************************/
							stmt = con.createStatement();
							exeStr = exeStr + lastvalueStr + dateCrt + " ORDER BY Logid " + srtby + ")  A" + WFSUtil.getFetchSuffixStr(dbType, noOfRectoFetch + 1, WFSConstant.QUERY_STR_WHERE); //Bugzilla # 131
							stmt.execute(exeStr);
							rs = stmt.getResultSet();
							int i = 1;
							int tot = 1;
							duptempXml = new StringBuffer("");
							String taskName =null;
							String holdType=null;
							while (rs.next()) {
								if (i < noOfRectoFetch + 1) {
									if (i == 1) {
										tempXml.append("<HistoryList>\n");
									}
									// subStringBuffer = new StringBuffer("");
                                    duptempXml = new StringBuffer("");
									duptempXml.append("<HistoryInfo>\n");
									duptempXml.append(gen.writeValueOf("ActivityId", rs.getString(1)));
									String actName = rs.getString(2);
									if(escapeSpecialChar){
										actName = WFSUtil.handleSpecialCharInXml(actName);
									}
									duptempXml.append(gen.writeValueOf("ActivityName", actName));
									duptempXml.append(gen.writeValueOf("UserId", rs.getString(3)));
									duptempXml.append(gen.writeValueOf("Username", rs.getString(4)));
									
									int actid = rs.getInt(5);
									duptempXml.append(gen.writeValueOf("ActionId", String.valueOf(actid)));
									duptempXml.append(gen.writeValueOf("ActionDateTime", rs.getString(6)));
									duptempXml.append(gen.writeValueOf("FieldId", rs.getString(7)));
									String fieldName = rs.getString("AssociatedFieldName");
									String newValue = rs.getString("NewValue");
									switch(actid) {
										case WFSConstant.WFL_Exception_Raised: 
										case WFSConstant.WFL_Exception_Cleared:
											fieldName =   fieldName + "<ExceptionComments>" + newValue + "</ExceptionComments>";
											break;
										/*case WFSConstant.WFL_ToDoItemStatus_Modified:*/
										case WFSConstant.WFL_Attribute_Set:	
											fieldName = "<Name>" + fieldName + "</Name>"
												+ "<Value>" + newValue + "</Value>";
											break;
										case WFSConstant.WFL_TaskAdded:
		                                case WFSConstant.WFL_TaskCompleted:
		                                case WFSConstant.WFL_TaskInitiated:
		                                case WFSConstant.WFL_TaskRevoked:
		                                case WFSConstant.WFL_TaskDataHasBeenSet:
		                                case WFSConstant.WFL_TaskDiverted:
		                                	taskName =newValue; 
		                                	break;
		                                case WFSConstant.WFL_WorkitemHolded:
		                                case WFSConstant.WFL_WorkitemUnholded:
		                                	holdType=newValue;
		                                    break;	
		                                	
									}
									if(escapeSpecialChar && actid != 112 && actid != 9 && actid != 15){
										fieldName = WFSUtil.handleSpecialCharInXml(fieldName);
									}
									if(taskName!=null){
										duptempXml.append(gen.writeValueOf("TaskName", taskName));
									}if(holdType!=null){
										duptempXml.append(gen.writeValueOf("HoldType", holdType));
									}
								//	duptempXml.append(gen.writeValueOf("FieldName", fieldName));
									char char21 = 21;
									String string21 = "" + char21;
									String personalName = "";
									String familyName = "";
									WFUserInfo userInfo = (WFUserInfo) CachedObjectCollection.getReference().getCacheObject(con, engine, 0, WFSConstant.CACHE_CONST_UserCache, "userName" + string21 +fieldName).getData();
		                                if (userInfo !=null){
		                                    personalName = userInfo.getPersonalName();
		                                    familyName = userInfo.getFamilyName();
		                                    if(familyName == null)
		                                    {
		                                    familyName = "";
		                                    }
		                            } else {
		                                    personalName = null;
		                                    familyName = ""; 
		                            }	
		                            duptempXml.append(gen.writeValueOf("FieldName", fieldName));
	                                duptempXml.append(gen.writeValueOf("PersonalFieldName",personalName + " " + familyName));
									duptempXml.append(gen.writeValueOf("WorkItemId", rs.getString("WorkItemId")));
									duptempXml.append(gen.writeValueOf("ProcessInstanceId", rs.getString("ProcessInstanceId")));
									duptempXml.append(gen.writeValueOf("LogId", rs.getString("LogId")));
									duptempXml.append("</HistoryInfo>\n");									

									if(!locale.equals("") && returnActionDescription.equalsIgnoreCase("Y"))
									{
										WFXmlList workItemList = new WFXmlList(duptempXml.toString(),"HistoryInfo",0,duptempXml.length());
										if(locale.indexOf("-") != -1)
											 loc = new Locale(locale.substring(0, locale.indexOf("-")),
												locale.substring(locale.indexOf("-")+1, locale.length()));
										else
											 loc = new Locale(locale);
										//resourceBundle.prepareBundles(loc);
										ResourceBundle resourceBundle = java.util.PropertyResourceBundle.getBundle("WfsString", loc);
                                                                                dateFormat = parser.getValueOf("DateFormat", "dd/mm/yyyy", true);
                                      if(workItemList.getVal("ActionId")!= ""){                                         
										actionText = actionPrint(Integer.parseInt(workItemList.getVal("ActionId")), workItemList,dateFormat,userHistory,resourceBundle);
                                      }else{                                                        // To handle special character �
                                    	  String tag="ActionId";
                                     	 int startIndex = duptempXml.toString().indexOf("<" +tag+ ">", 0);
                                     	    
                                     	 String actionID = duptempXml.toString().substring((startIndex + tag.length() + 2),
                                     			 duptempXml.toString().indexOf("</" + tag + ">", 0));
                                     	actionText = actionPrint(Integer.parseInt(actionID), workItemList,dateFormat,userHistory,resourceBundle);
                                      }
										if(escapeSpecialChar){
											actionText = WFSUtil.handleSpecialCharInXml(actionText);
										}
										actionText = "<ActionDescription>"+actionText+"</ActionDescription>";
										duptempXml.insert(duptempXml.lastIndexOf("</HistoryInfo>\n"), actionText);
									}
									tempXml.append(duptempXml);						
									
									i++;
								}
								tot++;
							}
							if (rs != null) {
								rs.close();
							}
							stmt.close();
							if (i == 1) {
								mainCode = WFSError.WM_NO_MORE_DATA;
								subCode = 0;
								subject = WFSErrorMsg.getMessage(mainCode);
								descr = WFSErrorMsg.getMessage(subCode);
								errType = WFSError.WF_TMP;
							} else if (i > 1) {
								tempXml.append("</HistoryList>\n");
								tempXml.append(gen.writeValueOf("TotalCount", String.valueOf(tot - 1)));
								tempXml.append(gen.writeValueOf("RetrievedCount", String.valueOf(i - 1)));
							}
/*************************************************/
						}
					}
				}
				if (!tranLog){
					exeStr = "SELECT * from ( select " + WFSUtil.getFetchPrefixStr(dbType, noOfRectoFetch + 1) + " AdminLogId, ActionId, ActionDateTime, ProcessDefId, QueueId, QueueName, FieldId1, FieldName1, FieldId2, FieldName2, Property, UserId, UserName, OldValue, NewValue, WEFDate, ValidTillDate,Operation, ProfileId, ProfileName, Property1 from WFAdminLogTable "+WFSUtil.getTableLockHintStr(dbType)+" where ";//07/01/2013	Sajid Khan	Bug 37345 - Audit log Issue.
					switch (sortOrder) {
						case 'A':
							if (!lastIndex.equals("0")) {
								lastvalueStr = " and AdminLogId > " + lastIndex;
							}
							srtby = " ASC";
							break;
						case 'D':
							if (!lastIndex.equals("0")) {
								lastvalueStr = " and AdminLogId < " + lastIndex;
							}
							srtby = " DESC";
							break;
					}
					switch (option) {
						case 'Q':
							if (!actionId.trim().equals("") && !actionId.trim().equals("0")) {
								//int tempId = Integer.parseInt(actionId);
								actionIdList2.addAll(Arrays.asList("50","51","52","60","61","62","63","66","67"));
								/*if (tempId == 50 || tempId == 51 || tempId == 52 || tempId == 60 || tempId == 61 || tempId == 62 || tempId == 63 || tempId == 66 || tempId == 67) */
								if(actionIdList2.containsAll(actionIdList1)){
									exeStr += " actionid in (" + actionId + ")";
								} else {
									mainCode = WFSError.WM_INVALID_FILTER;
									subCode = 0;
									subject = WFSErrorMsg.getMessage(mainCode);
									descr = WFSErrorMsg.getMessage(subCode);
									errType = WFSError.WF_FAT;
									throw new WFSException(mainCode, subCode, errType, subject, descr);
								}
							} else {
								exeStr += " actionid in (50, 51, 52, 60, 61, 62, 63, 66, 67)";
							}
							//if (!optionId.equals("0")) {
								exeStr += " and QueueId IN (" + WFSUtil.TO_SANITIZE_STRING(optionId, true) + ")";
							//}
							break;
						case 'P':
							exeStr += "processdefid is not null and processdefid != 0 and actionid != 0 and actionid != 202";
							if (!actionId.trim().equals("") && !actionId.trim().equals("0")) {
								exeStr += " and actionid in (" + actionId + ")"; //Bugzilla Bug 133
							} else {
								exeStr += " and actionid in (21, 68, 84, 69, 70, 119, 120, 121, 501, 502, 503, 504, 505,507,508, 509, 510 ,511, 512 , 601, 602, 603, 604)";
							}
							//if (!optionId.equals("0")) {
								exeStr += " and processdefid IN (" + WFSUtil.TO_SANITIZE_STRING(optionId, true) + ")";							
							//}
							break;
						//Changes done for Process Variant Auditing 
						case 'V':
							exeStr += "fieldid1 is not null and fieldid1 != 0 ";
							if (!actionId.trim().equals("") && !actionId.trim().equals("0")) {
								exeStr += " and actionid in (" + actionId + ")"; //Bugzilla Bug 133
							} else {
								exeStr += " and actionid in (601, 602, 603, 604)";
							}
							if (!optionId.equals("0")) {
								exeStr += " and fieldid1 IN (" + WFSUtil.TO_SANITIZE_STRING(optionId, true) + ")";							
							}
							else {
								exeStr += " and 1=2)";
							}
							break;
							//Changes done for Process Variant Auditing 
						case 'U':
							exeStr += "userid is not null and userid != 0 and actionid != 0 and actionid != 202";
							if (!actionId.trim().equals("") && !actionId.trim().equals("0")) {
								exeStr += " and actionid in (" + actionId + ")";
							}
							if (!optionId.equals("0")) {
								exeStr += " and userid=" + WFSUtil.TO_SANITIZE_STRING(optionId, true);
							}
							break;
							//Ashish added this case for WFS_6_025 on 15/06/2005
						case 'C':

							//actionId
							if (!actionId.trim().equals("") && !actionId.trim().equals("0")) {
								exeStr += " actionid in (" + actionId + ") ";
							} else {
								exeStr += " actionid in (21, 50, 51, 52, 116, 117, 118, 501, 502, 503, 504, 505, 507) ";

							}
                                                        if(actionId.trim().equals("107")||actionId.trim().equals("80")){
                                                            exeStr += " And ProcessDefId  = 0 ";
                                                        }

							if (!optionId.equals("0")) {
								exeStr += " and userid = " + WFSUtil.TO_SANITIZE_STRING(optionId, true);
							}
							break;
							//end Ashish added this case for WFS_6_025 on 15/06/2005
					}
					stmt = con.createStatement();
					exeStr = exeStr + lastvalueStr + dateCrt + " ORDER BY AdminLogid " + srtby + ")  A" + WFSUtil.getFetchSuffixStr(dbType, noOfRectoFetch + 1, WFSConstant.QUERY_STR_WHERE); //Bugzilla # 131
					stmt.execute(exeStr);
					rs = stmt.getResultSet();
					int i = 1;
					int tot = 1;
					while (rs.next()) {
						if (i < noOfRectoFetch + 1) {
							if (i == 1) {
								tempXml.append("<HistoryList>\n");
							}
							duptempXml = new StringBuffer("");
							duptempXml.append("<HistoryInfo>\n");
							
							duptempXml.append(gen.writeValueOf("LogId", rs.getString("AdminLogid")));
							int actid = rs.getInt("ActionId");
							duptempXml.append(gen.writeValueOf("ActionId", String.valueOf(actid)));
							duptempXml.append(gen.writeValueOf("ActionDateTime", rs.getString("ActionDateTime")));
							
							int processDefId = rs.getInt("ProcessDefId");
							String processName = null;
							if (processDefId > 0){
								processName = CachedObjectCollection.getReference().getProcessName(con, engine, processDefId);
							}
							
							String queueName = rs.getString("QueueName");
							String fieldId1 = rs.getString("FieldId1");
							String fieldName1 = rs.getString("FieldName1");
							String fieldId2 = rs.getString("FieldId2");
							String fieldName2 = rs.getString("FieldName2");
							String property = rs.getString("Property");
							String actionByuserId = rs.getString("UserId");
							String actionByuserName = rs.getString("Username");

							duptempXml.append(gen.writeValueOf("UserId", actionByuserId));
							duptempXml.append(gen.writeValueOf("Username", actionByuserName));
							String oldValue = rs.getString("OldValue");
							String newValue = rs.getString("NewValue");
							String WEFDate = rs.getString("WEFDate");
							String validTillDate = rs.getString("ValidTillDate");
							String operation = rs.getString("Operation");//07/01/2013	Sajid Khan	Bug 37345 - Audit log Issue.
							
							/*Added for Right Management Auditing by Shweta Singhal*/
							String profileId = rs.getString("ProfileId");
							String profileName = rs.getString("ProfileName");
							String property1 = rs.getString("Property1");							
							
							StringBuffer fieldName = new StringBuffer(500);
							fieldName.append(gen.writeValueOf("Operation", operation));//07/01/2013	Sajid Khan	Bug 37345 - Audit log Issue.
							switch (actid) {
							//07/01/2013	Sajid Khan	Bug 37345 - Audit log Issue.
							case WFSConstant.WFL_AuthorizationCompleted:
									fieldName.append(gen.writeValueOf("AuthorizationId",  fieldId1));
									fieldName.append(gen.writeValueOf("EntityType",fieldName1));
									fieldName.append(gen.writeValueOf("EntityName", fieldName2));
									fieldName.append(gen.writeValueOf("CheckerUserName",actionByuserName));
									fieldName.append(gen.writeValueOf("MakerUserName",property));
									break;
							case WFSConstant.WFL_ObjecTypePropertySet:
									fieldName.append(gen.writeValueOf("ObjectId",  fieldId1));
									fieldName.append(gen.writeValueOf("ObjectType",fieldName1));
									fieldName.append(gen.writeValueOf("PropertyName", fieldName2));
									fieldName.append(gen.writeValueOf("PropertyValue",property));
									break;
								case WFSConstant.WFL_ProcessStateChanged :
									fieldName.append(gen.writeValueOf("ProcessName",  processName));//Bug 37731 - AuditTrail for Process State Change for registered Processes .
									fieldName.append(gen.writeValueOf("ChangedState", newValue));
									fieldName.append(gen.writeValueOf("OldState", oldValue));
									fieldName.append(gen.writeValueOf("VersionNo",fieldId2));//Bug 37345 - Audit log Issue.
									fieldName.append(gen.writeValueOf("AuthorizationFlag",property1));//Bug 37731 - AuditTrail for Process State Change for registered Processes .
									break;
								 
								case WFSConstant.WFL_AddWorkStepToQueue :
									fieldName.append(gen.writeValueOf("QueueName", queueName));
									fieldName.append(gen.writeValueOf("StreamList", gen.writeValueOf("StreamName", fieldName2)));
									break;
					
								case WFSConstant.WFL_DeleteWorkStepFromQueue :
									fieldName.append(gen.writeValueOf("QueueName", queueName));
									fieldName.append(gen.writeValueOf("StreamList", gen.writeValueOf("StreamName", fieldName2)));
									break;

								case WFSConstant.WFL_ProcessTATime :
									fieldName.append(gen.writeValueOf("ProcessName", processName));
									fieldName.append(gen.writeValueOf("ProcessTATime", newValue));
									fieldName.append(gen.writeValueOf("ProcessTATCalFlag", fieldName2));
									break;

								case WFSConstant.WFL_ActivityTATime :
									fieldName.append(gen.writeValueOf("ProcessName", processName));
									fieldName.append("<ActivityList>");
									fieldName.append("<ActivityInfo>");
									fieldName.append(gen.writeValueOf("ActivityName", fieldName1));
									fieldName.append(gen.writeValueOf("ActivityTATime", newValue));
									fieldName.append(gen.writeValueOf("ActivityTATCalFlag", fieldName2));
									fieldName.append("</ActivityInfo>");
									fieldName.append("</ActivityList>");
									break;
							   
								case WFSConstant.WFL_QueryFilter_Set :
									fieldName.append(gen.writeValueOf("QueueName", queueName));
									fieldName.append("<UserInfo>");
									fieldName.append(gen.writeValueOf("UserName", fieldName1));
									fieldName.append(gen.writeValueOf("QueryFilter", newValue));
									fieldName.append("</UserInfo>");
									fieldName.append("<GroupInfo>");
									fieldName.append(gen.writeValueOf("GroupName", fieldName1));
									fieldName.append(gen.writeValueOf("QueryFilter", newValue));
									fieldName.append("</GroupInfo>");
									fieldName.append(gen.writeValueOf("AuthorizationFlag", property1));
									break;

								case WFSConstant.WFL_Constant_Updated :
									fieldName.append("<DynamicConstants>");
									fieldName.append("<DynamicConstant>");
									fieldName.append(gen.writeValueOf("Name", fieldName1));
									fieldName.append(gen.writeValueOf("Value", newValue));
									fieldName.append("</DynamicConstant>");
									fieldName.append("</DynamicConstants>");
									break;
									
								case WFSConstant.WFL_AddUserToQueue :
									fieldName.append(gen.writeValueOf("QueueName", queueName));
									fieldName.append(gen.writeValueOf("AuthorizationFlag", property1));
									if(property.equals("U")) {
										fieldName.append("<UserList>");
										fieldName.append("<UserInfo>");
										fieldName.append(gen.writeValueOf("UserName", fieldName1));
										if(validTillDate == null)
											fieldName.append("<AssignmentType>P</AssignmentType>");
										else
											fieldName.append(gen.writeValueOf("AssignmentType", validTillDate));
										fieldName.append("</UserInfo>");
										fieldName.append("</UserList>");
									} else {
										fieldName.append("<GroupList>");
										fieldName.append(gen.writeValueOf("GroupName", fieldName1));
										fieldName.append("</GroupList>");
									}
									break;

								case WFSConstant.WFL_DeleteUserFromQueue :
									fieldName.append(gen.writeValueOf("QueueName", queueName));
									fieldName.append(gen.writeValueOf("AuthorizationFlag", property1));
									if(property.equals("U")) {
										fieldName.append("<UserList>");
										fieldName.append("<UserInfo>");
										fieldName.append(gen.writeValueOf("UserName", fieldName1));
										fieldName.append("</UserInfo>");
										fieldName.append("</UserList>");
									} else {
										fieldName.append("<GroupList>");
										fieldName.append(gen.writeValueOf("GroupName", fieldName1));
										fieldName.append("</GroupList>");
									}
									break;

								case WFSConstant.WFL_AddAliasToQueue :
									fieldName.append(gen.writeValueOf("QueueName", queueName));
									fieldName.append("<AliasList>");
									fieldName.append(gen.writeValueOf("AliasName", fieldName1));
									fieldName.append("</AliasList>");
									break;

								case WFSConstant.WFL_DeleteAliasFromQueue :
								
									fieldName.append(gen.writeValueOf("QueueName", queueName));
									//Bug 37995 - While deleted mapped alias from Process Variable Mapping, Alias name is not showing in description of Audit Log 
									fieldName.append("<AliasList>");
									fieldName.append(gen.writeValueOf("AliasName", fieldName1));
									fieldName.append("</AliasList>");
						//			fieldName.append(gen.writeValueOf("AliasCount", );
									break;

								case WFSConstant.WFL_AddPreferedQueue :
									fieldName.append("<QueueList>");
									fieldName.append(gen.writeValueOf("QueueName", queueName));
									fieldName.append("</QueueList>");
									break;

								case WFSConstant.WFL_DeletePreferedQueue :
									fieldName.append("<QueueList>");
									fieldName.append(gen.writeValueOf("QueueName", queueName));
									fieldName.append("</QueueList>");
									break;

								case WFSConstant.WFL_LogDel :
									fieldName.append(validTillDate);
									break;

								case WFSConstant.WFL_AddQueue :
								case WFSConstant.WFL_DelQueue :
									fieldName.append(queueName);
									break;

								case WFSConstant.WFL_ChnQueue :
									fieldName.append(gen.writeValueOf("originalQueueName", queueName));
									fieldName.append(gen.writeValueOf("AuthorizationFlag", property1));
									if (!property.equals("") && !property.equals("filter")){
										fieldName.append("<" + property + ">");
										fieldName.append(gen.writeValueOf("old", oldValue));
										fieldName.append(gen.writeValueOf("new", newValue));
										fieldName.append("</" + property + ">");

									}else if (property.equals("filter")) {
										fieldName.append("<filter>");
										fieldName.append("<filterOption>");
										fieldName.append(gen.writeValueOf("old", String.valueOf(fieldId1)));
										fieldName.append(gen.writeValueOf("new", String.valueOf(fieldId2)));
										fieldName.append("</filterOption>");
										fieldName.append("<filterValue>");
										fieldName.append(gen.writeValueOf("old", oldValue));
										fieldName.append(gen.writeValueOf("new", newValue));
										fieldName.append("</filterValue>");
										fieldName.append("</filter>");
									}
									break;


								case WFSConstant.WFL_DivertSet :
									fieldName.append(gen.writeValueOf("DivertedByName", actionByuserName));	//for backward compatibility (otherwise it is there in username already)
									fieldName.append(gen.writeValueOf("DivertedForId", fieldId1));
									fieldName.append(gen.writeValueOf("DivertedForName", fieldName1));
									fieldName.append(gen.writeValueOf("DivertedToId", fieldId2));
									fieldName.append(gen.writeValueOf("DivertedToName", fieldName2));
									fieldName.append(gen.writeValueOf("ProcessName",  processName));
									fieldName.append(gen.writeValueOf("ActivityName", queueName));
									fieldName.append(gen.writeValueOf("From", WEFDate));
									fieldName.append(gen.writeValueOf("To", validTillDate));
									break;

								case WFSConstant.WFL_DivertDel :
									fieldName.append(gen.writeValueOf("DivertedByName", actionByuserName));	//for backward compatibility (otherwise it is there in username already)
									fieldName.append(gen.writeValueOf("DivertedForId", fieldId1));
									fieldName.append(gen.writeValueOf("DivertedForName", fieldName1));
									fieldName.append(gen.writeValueOf("ProcessName",  processName));
									fieldName.append(gen.writeValueOf("ActivityName", queueName));
									fieldName.append(gen.writeValueOf("From", WEFDate));
									fieldName.append(gen.writeValueOf("To", validTillDate));
									break;

								//case WFSConstant.WFL_AuditLogPreferencesChanged :

								case WFSConstant.WFL_Calendar_Modified :
								
									fieldName.append(fieldName1);
									duptempXml.append(gen.writeValueOf("ProcessDefID", String.valueOf(processDefId)));
                                    duptempXml.append(gen.writeValueOf("ProcessName", String.valueOf(processName)));
									break;

								case WFSConstant.WFL_Process_Register :
								case WFSConstant.WFL_Process_CheckOut :
								case WFSConstant.WFL_Process_CheckIn :								
								case WFSConstant.WFL_Process_UndoCheckOut :
								case WFSConstant.WFL_Process_CheckIn_NewVer :
									fieldName.append(gen.writeValueOf("Version", fieldName2));
									fieldName.append(gen.writeValueOf("Comments", newValue));
									fieldName.append(gen.writeValueOf("Machine IP", fieldName1));
									fieldName.append(gen.writeValueOf("ProcessName", oldValue));
									break ;
								case WFSConstant.WFS_Process_Purge :
									fieldName.append(gen.writeValueOf("ProcessName", processName));
									break;
                                    /*ProjectId returned in FieldId2 Bug 38051*/
                                case WFSConstant.WFL_Process_UnRegister :
                                    fieldName.append(gen.writeValueOf("Version", fieldName2));
									fieldName.append(gen.writeValueOf("Comments", newValue));
									fieldName.append(gen.writeValueOf("Machine IP", fieldName1));
									fieldName.append(gen.writeValueOf("ProcessName", oldValue));
                                    fieldName.append(gen.writeValueOf("ProjectId", fieldId2));
									break;   
								//  Bug 34113 - In audit log : Logs not appearing for WFL_Add_Calendar.
                                case WFSConstant.WFL_Add_Calendar :
                                    fieldName.append(gen.writeValueOf("CalendarName", fieldName1));
                                    break;
								/*Right Management Auditing by Shweta Singhal*/
								case WFSConstant.WFR_Add_Profile :
									fieldName.append(gen.writeValueOf("ProfileId", profileId));
									fieldName.append(gen.writeValueOf("ProfileName", profileName));
									break;
								
								case WFSConstant.WFR_ChnProfile_Property:
									fieldName.append(gen.writeValueOf("ProfileId", profileId));
									fieldName.append(gen.writeValueOf("ProfileName", profileName));
									fieldName.append("<" + property1 + ">");
									fieldName.append(gen.writeValueOf("old", oldValue));
									fieldName.append(gen.writeValueOf("new", newValue));
									fieldName.append("</" + property1 + ">");
									break;
								case WFSConstant.WFR_Del_Profile:
									fieldName.append(gen.writeValueOf("ProfileId", profileId));
									fieldName.append(gen.writeValueOf("ProfileName", profileName));
									break;
								case WFSConstant.WFR_AddUserToProfile:
								case WFSConstant.WFR_DelUserfromProfile:								
									fieldName.append(gen.writeValueOf("ProfileId", profileId));
									fieldName.append(gen.writeValueOf("ProfileName", profileName));
									fieldName.append(gen.writeValueOf("UserId", fieldId1));
									fieldName.append(gen.writeValueOf("UserName", fieldName1));
									fieldName.append(gen.writeValueOf("UserAssociation", property));
									fieldName.append(gen.writeValueOf("ObjectId", fieldId2));
									fieldName.append(gen.writeValueOf("ObjectName", fieldName2));
									fieldName.append(gen.writeValueOf("ObjectType", property1));
									break;
								case WFSConstant.WFR_UpdUserfromProfile:
									fieldName.append(gen.writeValueOf("ProfileId", profileId));
									fieldName.append(gen.writeValueOf("ProfileName", profileName));
									fieldName.append(gen.writeValueOf("UserId", fieldId1));
									fieldName.append(gen.writeValueOf("UserName", fieldName1));
									fieldName.append(gen.writeValueOf("UserAssociation", property));
									fieldName.append("<" + property1 + ">");
									fieldName.append(gen.writeValueOf("old", oldValue));
									fieldName.append(gen.writeValueOf("new", newValue));
									fieldName.append("</" + property1 + ">");
									break;	
								case WFSConstant.WFR_AddObjTypeToProfile:
								case WFSConstant.WFR_DelObjTypeToProfile:
									fieldName.append(gen.writeValueOf("ProfileId", profileId));
									fieldName.append(gen.writeValueOf("ProfileName", profileName));
									fieldName.append(gen.writeValueOf("ObjectType", property1));
									break;
								case WFSConstant.WFR_UpdObjTypeToProfile:	
									fieldName.append(gen.writeValueOf("ProfileId", profileId));
									fieldName.append(gen.writeValueOf("ProfileName", profileName));
									fieldName.append(gen.writeValueOf("ObjectType", fieldName2));
									fieldName.append("<" + property1 + ">");
									fieldName.append(gen.writeValueOf("old", oldValue));
									fieldName.append(gen.writeValueOf("new", newValue));
									fieldName.append("</" + property1 + ">");
									break;
								case WFSConstant.WFR_AddObjTypeToUser:
								case WFSConstant.WFR_DelObjTypeToUser:
									fieldName.append(gen.writeValueOf("UserId", fieldId1));
									fieldName.append(gen.writeValueOf("UserName", fieldName1));
									fieldName.append(gen.writeValueOf("UserAssociation", property));
									fieldName.append(gen.writeValueOf("ObjectId", fieldId2));
									fieldName.append(gen.writeValueOf("ObjectName", fieldName2));
									fieldName.append(gen.writeValueOf("ObjectType", property1));
									break;
								case WFSConstant.WFR_UpdObjTypeToUser:
									fieldName.append(gen.writeValueOf("UserId", fieldId1));
									fieldName.append(gen.writeValueOf("UserName", fieldName1));
									fieldName.append(gen.writeValueOf("UserAssociation", property));
									fieldName.append(gen.writeValueOf("ObjectType", fieldName2));
									fieldName.append("<" + property1 + ">");
									fieldName.append(gen.writeValueOf("old", oldValue));
									fieldName.append(gen.writeValueOf("new", newValue));
									fieldName.append("</" + property1 + ">");
									break;	
					//Bug 38002 - History is not generated for operation 'Add Variable in Quick Search     Manangement' in Audit log
					//Bug 38003 - History is not generated for operation 'Delete Variable in Quick Search     Manangement' in Audit log		
								case WFSConstant.WFL_Add_QuickSearchVariable:
								case WFSConstant.WFL_Delete_QuickSearchVariable:
									fieldName.append(gen.writeValueOf("VariableName", fieldName1));
									fieldName.append(gen.writeValueOf("AliasName", fieldName2));
									fieldName.append(gen.writeValueOf("SearchAllVersion", property));
								break;
                                case WFSConstant.WFL_AddVariant:
                                case WFSConstant.WFL_ModifyVariant:
                                case WFSConstant.WFL_DelVariant:
									fieldName.append(gen.writeValueOf("VariantId", fieldId1));
									fieldName.append(gen.writeValueOf("VariantName", fieldName1));
								break;    
								case WFSConstant.WFL_Change_VariantState:
									fieldName.append(gen.writeValueOf("VariantId", fieldId1));
									fieldName.append(gen.writeValueOf("VariantName", fieldName1));
                                                                        fieldName.append(gen.writeValueOf("ChangedState", newValue));
								break; 
								case WFSConstant.WFL_SetExportCabinet:
								case WFSConstant.WFL_DeleteExportCabinet:
								case WFSConstant.WFL_ModifyExportCabinet:
									fieldName.append(fieldName1);
								break;
								case WFSConstant.WFL_AddPurgeCriteria:
								case WFSConstant.WFL_ModifyPurgeCriteria:
								case WFSConstant.WFL_DeletePurgeCriteria:
									fieldName.append(fieldName1);
								break;
								case WFSConstant.WFL_SetSystemProperty:
									fieldName.append(gen.writeValueOf("PropertyName", property));
                                    fieldName.append(gen.writeValueOf("PropertyValue", newValue));
                                    fieldName.append(gen.writeValueOf("UpdatedByUserId", actionByuserId ));
                                    fieldName.append(gen.writeValueOf("UpdatedByUserName", actionByuserName ));
                                break;
                                case WFSConstant.WFL_SetWorkAudit:
                                case WFSConstant.WFL_ModifiedWorkAudit:
                                  duptempXml.append(gen.writeValueOf("ProcessDefID", String.valueOf(processDefId)));
                                  duptempXml.append(gen.writeValueOf("ProcessName", String.valueOf(processName)));
                                  duptempXml.append(gen.writeValueOf("WorkstepName", String.valueOf(queueName)));
                                  duptempXml.append(gen.writeValueOf("AuditeeID", String.valueOf(fieldId1)));
                                  duptempXml.append(gen.writeValueOf("AuditeeName", String.valueOf(fieldName1)));
                                  duptempXml.append(gen.writeValueOf("AuditorID", String.valueOf(fieldId2)));
                                  duptempXml.append(gen.writeValueOf("AuditorName", String.valueOf(fieldName2)));
                                  duptempXml.append(gen.writeValueOf("Percantage", String.valueOf(property)));
                                    break;
                                 case WFSConstant.WFL_DeleteWorkAudit:
                                  duptempXml.append(gen.writeValueOf("ProcessDefID", String.valueOf(processDefId)));
                                  duptempXml.append(gen.writeValueOf("ProcessName", String.valueOf(processName)));
                                  duptempXml.append(gen.writeValueOf("WorkstepName", String.valueOf(queueName)));
                                  duptempXml.append(gen.writeValueOf("AuditeeID", String.valueOf(fieldId1)));
                                  duptempXml.append(gen.writeValueOf("AuditeeName", String.valueOf(fieldName1)));
                                     break;
                                 case WFSConstant.WFL_Process_Variable_Alias:
 									duptempXml.append(gen.writeValueOf("ProcessName", processName));
 									break;
 								 case WFSConstant.WFS_Process_TemplateModification:
 									duptempXml.append(gen.writeValueOf("ProcessName", processName));
 									break;
 								 case WFSConstant.WFS_Process_FormEditing:
 									duptempXml.append(gen.writeValueOf("ProcessName", processName));
 									break;
 								case WFSConstant.WFS_Process_DocType_Added:
 									duptempXml.append(gen.writeValueOf("ProcessName", processName));
 								    fieldName.append(fieldName1);
								default :
									break;
						  
							}

							duptempXml.append(gen.writeValueOf("FieldId", fieldId1));							
							duptempXml.append(gen.writeValueOf("FieldName", escapeSpecialChar ? WFSUtil.handleSpecialCharInXml(fieldName.toString()):fieldName.toString()));
							duptempXml.append("</HistoryInfo>\n");
							
							if(!locale.equals("") && returnActionDescription.equalsIgnoreCase("Y"))
							{
								WFXmlList workItemList = new WFXmlList(duptempXml.toString(),"HistoryInfo",0,duptempXml.length());
								
								if(locale.indexOf("-") != -1)
									loc = new Locale(locale.substring(0, locale.indexOf("-")),
										locale.substring(locale.indexOf("-")+1, locale.length()));
								else{
									if(locale.indexOf("_")==-1){
										loc = new Locale(locale);
									}else{
										 String[] parts = locale.split("_");
										 loc=new Locale(parts[0], parts[1]);
									}
								}
								//	loc = new Locale(locale);
								//resourceBundle.prepareBundles(loc);
								ResourceBundle resourceBundle = java.util.PropertyResourceBundle.getBundle("WfsString", loc);
                                                                dateFormat = parser.getValueOf("DateFormat", "dd/mm/yyyy", true);
                                 if(workItemList.getVal("ActionId")!= ""){
								actionText = actionPrint(Integer.parseInt(workItemList.getVal("ActionId")), workItemList,dateFormat,userHistory,resourceBundle);
                                 }else{                                                        // To handle special character �
                                	  String tag="ActionId";
                                	 int startIndex = duptempXml.toString().indexOf("<" +tag+ ">", 0);
                                	    
                                	 String actionID = duptempXml.toString().substring((startIndex + tag.length() + 2),
                                			 duptempXml.toString().indexOf("</" + tag + ">", 0));
                                	 actionText = actionPrint(Integer.parseInt(actionID), workItemList,dateFormat,userHistory,resourceBundle);
                                     
                                 }
            
								if(escapeSpecialChar){
									actionText = WFSUtil.handleSpecialCharInXml(actionText);
								}
								actionText = "<ActionDescription>"+actionText+"</ActionDescription>";
								duptempXml.insert(duptempXml.lastIndexOf("</HistoryInfo>\n"), actionText);
							}
							tempXml.append(duptempXml);
							
							
							i++;
						}
						tot++;
					}
					if (rs != null) {
						rs.close();
					}
					stmt.close();
					if (i == 1) {
						mainCode = WFSError.WM_NO_MORE_DATA;
						subCode = 0;
						subject = WFSErrorMsg.getMessage(mainCode);
						descr = WFSErrorMsg.getMessage(subCode);
						errType = WFSError.WF_TMP;
					} else if (i > 1) {
						tempXml.append("</HistoryList>\n");
						tempXml.append(gen.writeValueOf("TotalCount", String.valueOf(tot - 1)));
						tempXml.append(gen.writeValueOf("RetrievedCount", String.valueOf(i - 1)));
					}
				}
            } else {
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            /**
             * Bug # WFS_6.1.2_039, value of option tag should be WFGetHistory rather than
             * WFGetWorkitemHistory. - Ruhi Hira
             */
            if (mainCode == 0) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFGetHistory"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append(tempXml);
                outputXML.append("<From>");
                outputXML.append(from);
                outputXML.append("</From>");
                outputXML.append("<To>");
                outputXML.append(to);
                outputXML.append("</To>");
                outputXML.append(gen.closeOutputFile("WFGetHistory"));
            } else if (mainCode == 18) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFGetHistory"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append("<From>");
                outputXML.append(from);
                outputXML.append("</From>");
                outputXML.append("<To>");
                outputXML.append(to);
                outputXML.append("</To>");
                outputXML.append(gen.closeOutputFile("WFGetHistory"));
            }
        } catch (SQLException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
                        + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (WFSException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = e.getMainErrorCode();
            subCode = e.getSubErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = WFSErrorMsg.getMessage(subCode);
        } catch (JTSException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
        } catch (Exception e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
        	try{
				if(rs!=null){
					rs.close();
					rs=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}

            try {
                if (stmt != null) {
                    stmt.close();
                    stmt = null;
                }
            } catch (Exception e) {}
           
        }
        if (mainCode != 0 && mainCode != 18) {
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();
    }
	  //----------------------------------------------------------------------------------------------------
//	Function Name 				:	WFGetUserHistory
//	Date Written (DD/MM/YYYY)               :	20/09/2017
//	Author					:	Sakshi Gupta
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:       none
//	Return Values				:	String
//	Description				:   Gets the History of Action Performed For Setting and Changing User Preferences
//----------------------------------------------------------------------------------------------------
    public String WFGetUserHistory(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
    	 StringBuffer outputXML = new StringBuffer("");
        Statement stmt = null;
        ResultSet rs = null;
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        String engine = "";
        //StringBuffer subStringBuffer = null;
        String locale = "";
        String dateFormat = "";
        Locale loc = null;
        String actionText = null;
       
        try {
            int sessionID = parser.getIntOf("SessionId", 0, false);
            WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
            locale = getLocale(user);
            String from = parser.getValueOf("From", "", true);
            String to = parser.getValueOf("To", "", true);
            StringBuffer tempXml = new StringBuffer(100);

             if (user != null) {
            engine = parser.getValueOf("EngineName");
            int dbType = ServerProperty.getReference().getDBType(engine);
            int noOfRectoFetch = parser.getIntOf("NoOfRecordsToFetch", ServerProperty.getReference().getBatchSize(), true);
            if (noOfRectoFetch > ServerProperty.getReference().getBatchSize() || noOfRectoFetch <= 0) //Added by Ahsan Javed for getBatchSize
            {
                noOfRectoFetch = ServerProperty.getReference().getBatchSize();
            }
            int actionId = parser.getIntOf("ActionId", 0, true);
            int userId = parser.getIntOf("OptionIndex", 0, true);
            char option = parser.getCharOf("HistoryOption", 'U', false);
            String lastIndex = parser.getValueOf("LastIndex", "0", true);
            char sortOrder = parser.getCharOf("SortOrder", 'A', true);
            char reportDuration = parser.getCharOf("Duration", '\0', true);

            if (reportDuration != '\0') {
                String[] temp = WFSUtil.dateCalculator(reportDuration, WFSConstant.CONST_TYPE_DAY, dbType, parser);
                from = temp[0];
                to = temp[1];
            }
            String dateCrt = (!from.equals("")) ? " AND ActionDateTime >= " + WFSUtil.TO_DATE(from, true, dbType) : " ";
            dateCrt += (!to.equals("")) ? " AND ActionDateTime <= " + WFSUtil.TO_DATE(to, true, dbType) : " ";
            String lastvalueStr = "";
            StringBuffer duptempXml = null;
            String returnActionDescription = parser.getValueOf("ActionDescription", "N", true);
            String srtby = "";
            String exeStr = "";

                if (option == 'U') {

                    exeStr = "SELECT * from ( select " + WFSUtil.getFetchPrefixStr(dbType, noOfRectoFetch + 1) + " UserLogId, ActionId, ActionDateTime, UserId, UserName, Message from WFUserLogTable where actionId =";
                    switch (sortOrder) {
                        case 'A':
                            if (!lastIndex.equals("0")) {
                                lastvalueStr = " and UserLogId > " + lastIndex;
                            }
                            srtby = " ASC";
                            break;
                        case 'D':
                            if (!lastIndex.equals("0")) {
                                lastvalueStr = " and UserLogId < " + lastIndex;
                            }
                            srtby = " DESC";
                            break;
                    }

                    stmt = con.createStatement();
                    if(userId != 0){
                    	exeStr = exeStr + actionId +  " and UserId=" + userId + lastvalueStr + dateCrt + " ORDER BY UserLogid " + srtby + ")  A" + WFSUtil.getFetchSuffixStr(dbType, noOfRectoFetch + 1, WFSConstant.QUERY_STR_WHERE);
                    }else{
                    	exeStr = exeStr + actionId + lastvalueStr + dateCrt + " ORDER BY UserLogid " + srtby + ")  A" + WFSUtil.getFetchSuffixStr(dbType, noOfRectoFetch + 1, WFSConstant.QUERY_STR_WHERE);
                    }
                    stmt.execute(exeStr);
                    rs = stmt.getResultSet();
                    int i = 1;
                    int tot = 1;
                    while (rs.next()) {
                        if (i < noOfRectoFetch + 1) {
                            if (i == 1) {
                                tempXml.append("<HistoryList>\n");
                            }
                            duptempXml = new StringBuffer("");
                            duptempXml.append("<HistoryInfo>\n");

                            duptempXml.append(gen.writeValueOf("LogId", rs.getString("UserLogid")));
                            int actid = rs.getInt("ActionId");
                            duptempXml.append(gen.writeValueOf("ActionId", String.valueOf(actid)));
                            duptempXml.append(gen.writeValueOf("ActionDateTime", rs.getString("ActionDateTime")));
                            duptempXml.append(gen.writeValueOf("Message", rs.getString("Message")));
                            duptempXml.append(gen.writeValueOf("UserId", rs.getString("UserId")));
                            duptempXml.append(gen.writeValueOf("Username", rs.getString("UserName")));

                            duptempXml.append("</HistoryInfo>\n");
                            if (!locale.equals("") && returnActionDescription.equalsIgnoreCase("Y")) {
                                if (locale.indexOf("-") != -1) {
                                    loc = new Locale(locale.substring(0, locale.indexOf("-")),
                                            locale.substring(locale.indexOf("-") + 1, locale.length()));
                                } else {
                                    loc = new Locale(locale);
                                }
                                WFXmlList workItemList = new WFXmlList(duptempXml.toString(),"HistoryInfo",0,duptempXml.length());
                                ResourceBundle resourceBundle = java.util.PropertyResourceBundle.getBundle("WfsString", loc);
                                dateFormat = parser.getValueOf("DateFormat", "dd/mm/yyyy", true);
                                actionText = actionPrint(actionId, workItemList,dateFormat,false,resourceBundle);
                                actionText = "<ActionDescription>" + actionText + "</ActionDescription>";
                                duptempXml.insert(duptempXml.lastIndexOf("</HistoryInfo>\n"), actionText);
                            }
                            tempXml.append(duptempXml);
                            i++;
                        }
                        tot++;
                    }
                    if (rs != null) {
                        rs.close();
                    }
                    stmt.close();
                    if (i == 1) {
                        mainCode = WFSError.WM_NO_MORE_DATA;
                        subCode = 0;
                        subject = WFSErrorMsg.getMessage(mainCode);
                        descr = WFSErrorMsg.getMessage(subCode);
                        errType = WFSError.WF_TMP;
                    } else if (i > 1) {
                        tempXml.append("</HistoryList>\n");
                        tempXml.append(gen.writeValueOf("TotalCount", String.valueOf(tot - 1)));
                        tempXml.append(gen.writeValueOf("RetrievedCount", String.valueOf(i - 1)));
                    }
                }
            } else {
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            if (mainCode == 0) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFGetHistory"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append(tempXml);
                outputXML.append("<From>");
                outputXML.append(from);
                outputXML.append("</From>");
                outputXML.append("<To>");
                outputXML.append(to);
                outputXML.append("</To>");
                outputXML.append(gen.closeOutputFile("WFGetHistory"));
            } else if (mainCode == 18) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFGetHistory"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append("<From>");
                outputXML.append(from);
                outputXML.append("</From>");
                outputXML.append("<To>");
                outputXML.append(to);
                outputXML.append("</To>");
                outputXML.append(gen.closeOutputFile("WFGetHistory"));
            }
        } catch (SQLException e) {
            WFSUtil.printErr(engine, "", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
                            + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr(engine, "", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(engine, "", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (WFSException e) {
            WFSUtil.printErr(engine, "", e);
            mainCode = e.getMainErrorCode();
            subCode = e.getSubErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = WFSErrorMsg.getMessage(subCode);
        } catch (JTSException e) {
            WFSUtil.printErr(engine, "", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
        } catch (Exception e) {
            WFSUtil.printErr(engine, "", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr(engine, "", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
        	try{
				if(rs!=null){
					rs.close();
					rs=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}

            try {
                if (stmt != null) {
                    stmt.close();
                    stmt = null;
                }
            } catch (Exception e) {
            	WFSUtil.printErr(engine,"", e);
            }
            
        }
        if (mainCode != 0 && mainCode != 18) {
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();
    }
//----------------------------------------------------------------------------------------------------
// Function Name 		: WFGetActionList
// Date Written	(DD/MM/YYYY): 12/12/2005
// Author				: Ankur Jain
// Input Parameters		: Connection , XMLParser , XMLGenerator
// Output Parameters	: none
// Return Values		: String
// Description			: Return the Action list/ Process variable list according to the input parameters
//----------------------------------------------------------------------------------------------------

    public String WFGetActionList(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
   	 StringBuffer outputXML = new StringBuffer("");
     Statement stmt = null;
     ResultSet rs = null;
     int mainCode = 0;
     int subCode = 0;
     String subject = null;
     String descr = null;
     String errType = WFSError.WF_TMP;
     StringBuffer tempXml = null;
     StringBuffer tempXml1 = new StringBuffer(500);;
     String engine = "";
     PreparedStatement pstmt = null;
     try {
         int sessionID = parser.getIntOf("SessionId", 0, false);
         engine = parser.getValueOf("EngineName");
         String sOptionFlag = parser.getValueOf("OptionFlag", "C", true);
			String strAdminActionFlag = parser.getValueOf("AdminActionFlag", "Y", true);    // Y/N
			boolean isArtifactMigrationCase = parser.getValueOf("ArtificationMigration", "N", true).equalsIgnoreCase("Y");
         int dbType = ServerProperty.getReference().getDBType(engine);
         WFParticipant participant = WMUser.WFCheckUpdateSession(con, sessionID, dbType);
         boolean isFirstIter = true;
         boolean isFirstIter1 = true;
         if (participant != null && participant.gettype() == 'U') {
             stmt = con.createStatement();
             tempXml = new StringBuffer(500);
             StringBuffer enabledXml = new StringBuffer(500);
             StringBuffer disabledXml = new StringBuffer(500);
             StringBuffer enabledListXml = new StringBuffer(500);
             StringBuffer disabledListXml = new StringBuffer(500);
             StringBuffer enabledVarListXml = new StringBuffer(500);
             tempXml1.append("<AuditLogData>\n");
             mainCode = 0;
				ArrayList lAdminActionIdList = new ArrayList(Arrays.asList(21,51,106,53,50,52,54,60,61,62,63,64,65,66,67,68,69,76,77,78,107,501,502,503,504,505,507));
				if(!(sOptionFlag.equalsIgnoreCase("C") || sOptionFlag.equalsIgnoreCase("B") || sOptionFlag.equalsIgnoreCase("P")))
                {
                	mainCode = WFSError.WF_OPERATION_FAILED;
                    subCode = WFSError.WM_INVALID_OPTIONFLAG;
                    subject = WFSErrorMsg.getMessage(mainCode);
                    errType = WFSError.WF_TMP;
                    descr = WFSErrorMsg.getMessage(subCode);	
                }
				if ((sOptionFlag.equalsIgnoreCase("C") || sOptionFlag.equalsIgnoreCase("B")) && mainCode == 0) {
                 tempXml.append("<Actions>\n");
                 enabledXml.append("<Enabled>\n");
                 disabledXml.append("<Disabled>\n");
                 if(isArtifactMigrationCase)
                 {
                 enabledListXml.append("<EnabledList>");
                 disabledListXml.append("<DisabledList>");
                 }
                 //Changes done for Bug 51606 --'R' type check added
                 rs = stmt.executeQuery("Select Status , ActionId from WFActionStatusTable " + WFSUtil.getTableLockHintStr(dbType) + "   Where Type not in ('S','R')");
                 /** 19/07/2007, Bugzilla Bug 1492, Japanese error messages not visible properly - Ruhi Hira. */
                 HashMap<Integer, String> hmap = new HashMap();
                 while (rs.next()) {
                     int actionId = rs.getInt("ActionId");
                     if(strAdminActionFlag.equalsIgnoreCase("N") && lAdminActionIdList.contains(actionId))
                         continue;   //  Skipping admin actionIds in case of 
                     if ( (rs.getString("Status")).equalsIgnoreCase("Y")) {
                        // String actionId = rs.getString("ActionId");
                                                     //enabledXml.append("<Action>\n");
//                         enabledXml.append(gen.writeValueOf("Id", String.valueOf(actionId)));
//                         enabledXml.append(gen.writeValueOf("Name", WfsStrings.getMessage("WFS_Action_" + actionId, parser)));
                         hmap.put(actionId, WfsStrings.getMessage("WFS_Action_" + actionId, engine));                            //Bug 40308
                         //enabledXml.append("\n</Action>\n");
                         if(isArtifactMigrationCase)
                         {
                         	if(isFirstIter){
                         		enabledListXml.append(actionId);
                     			isFirstIter = false; 	
                     		}else{
                     			enabledListXml.append(","+actionId);									
                     		}
                         }
                     } else {
                      //   String actionId = rs.getString("ActionId");
                         disabledXml.append("<Action>\n");
                         disabledXml.append(gen.writeValueOf("Id", String.valueOf(actionId)));
                         disabledXml.append(gen.writeValueOf("Name", WfsStrings.getMessage("WFS_Action_" + actionId, engine)));
                         disabledXml.append("\n</Action>\n");
                         if(isArtifactMigrationCase)
                         {
                         	if(isFirstIter1){
                         		disabledListXml.append(actionId);
                     			isFirstIter1 = false; 	
                     		}else{
                     			disabledListXml.append(","+actionId);									
                     		}
                         }
                     }
                 }
					//Bug 40308
                 Map<Integer, String> sortedMap = WFSUtil.sortMapByValue(hmap);
                 Iterator itr = sortedMap.keySet().iterator();
                 while(itr.hasNext()){
                     enabledXml.append("<Action>\n");
                     int id = (Integer)itr.next();
                     enabledXml.append(gen.writeValueOf("Id", String.valueOf(id)));
                     enabledXml.append(gen.writeValueOf("Name", sortedMap.get(id)));
                     enabledXml.append("</Action>\n");
                 }
                 enabledXml.append("</Enabled>\n");
                 disabledXml.append("</Disabled>\n");
                 tempXml.append(enabledXml);
                 tempXml.append(disabledXml);
                 tempXml.append("</Actions>\n");
                 rs.close();
                 rs = null;
                 if(isArtifactMigrationCase)
                 {
                 enabledListXml.append("</EnabledList>\n");
                 disabledListXml.append("</DisabledList>\n");
                 tempXml1.append(enabledListXml);
                 tempXml1.append(disabledListXml);
                 }
             }
/* Specification For getting ActionList for Process Tab on Audit Log  Confiugration Wizard
  Variant case:
         Elaborating with example:
         Process has 2 variables - Name, age and 3 variants - leaveApp (Complex variable
         name - LEAVE[ToDate, FromDate, approvalStatus]), workorderApp (Complex variable
         name - WORKORDER[item, quantity, approvalStatus]), travelReimbursement (Complex
         variable name - TRAVEL [amount, approvalStatus])

         Audit Log configuration UI will show following values:
         Process Selection Combo box, on selection of a multi variant process (sample
         process described above), following attributed will be visible:

         - Name
         - Age
         - Leave
         - WorkOrder
         - Travel



*/
				if ((sOptionFlag.equalsIgnoreCase("P") || sOptionFlag.equalsIgnoreCase("B")) && mainCode == 0) {
                 String strQuery = "";
                 enabledXml = new StringBuffer(500);
                 disabledXml = new StringBuffer(500);
                 String Status = "";
                 int iProcDefId = 0;
                 isFirstIter = true;
                 if(isArtifactMigrationCase)
                 {
                 	    String processName = parser.getValueOf("ProcessName", "", true);
         				String exeStr = "select ProcessDefId from ProcessDefTable "+ WFSUtil.getTableLockHintStr(dbType) + " where ProcessName = ? order by VersionNo desc ";
         				pstmt = con.prepareStatement(exeStr);
							WFSUtil.DB_SetString(1, processName, pstmt, dbType);
							pstmt.execute();
							rs = pstmt.getResultSet();
							if (rs.next()) {
								iProcDefId = rs.getInt(1);								
							}
							else
							{
								mainCode = WFSError.WF_INVALID_PROCESS_NAME;
		    					subCode = 0;
		    					subject = WFSErrorMsg.getMessage(mainCode);
		    					descr = WFSErrorMsg.getMessage(subCode);
		    					errType = WFSError.WF_TMP;   
							}
							if(rs != null){
		    					rs.close();
		    					rs = null;
		    				}
		    				if(pstmt != null){
		    					pstmt.close();
		    					pstmt = null;
		    				}	
		    				
		                     enabledVarListXml.append("<ProcessName>"+processName+"</ProcessName>\n");
		                     enabledVarListXml.append("<EnabledVarList>");
		                     
                 }
                 else
                 {
                  iProcDefId = parser.getIntOf("ProcessDefId", 0, true);
                 }
                 tempXml.append("<Attributes>\n");
                 if (iProcDefId > 0) {
                     strQuery = WFSUtil.join(dbType, "Select distinct Status , UserDefinedName as AttributeName, VarMappingTable.ProcessVariantId as ProcessVariantId from VarMappingTable " + WFSUtil.getTableLockHintStr(dbType) + " LEFT outer join WFVarStatusTable " + WFSUtil.getTableLockHintStr(dbType) + "   on VarMappingTable.UserDefinedName = WFVarStatusTable.VarName and VarMappingTable.ProcessDefId = WFVarStatusTable.ProcessDefId where ");
                         if (dbType == JTSConstant.JTS_MSSQL || dbType == JTSConstant.JTS_POSTGRES) {
                             strQuery += " VariableScope in ('U', 'I') and UserDefinedName != '' and VarMappingTable.ProcessDefID = " + iProcDefId ;
                         } else { //Also for DB2
                             strQuery += " VariableScope in ('U', 'I') and UserDefinedName is not null and  VarMappingTable.ProcessDefID = " + iProcDefId;
                         }
                     rs = stmt.executeQuery(strQuery);
                     while (rs.next()) {
                         Status = rs.getString("Status");
                         if (rs.wasNull()) {
                             disabledXml.append("<Attribute>\n");
                             disabledXml.append(gen.writeValueOf("Name", rs.getString("AttributeName")));
                             disabledXml.append("\n</Attribute>\n");
                         } else {
                             enabledXml.append("<Attribute>\n");
                             enabledXml.append(gen.writeValueOf("Name", rs.getString("AttributeName")));
                             enabledXml.append("\n</Attribute>\n");
                             if(isArtifactMigrationCase)
                             {
                             	if(isFirstIter){
                             		enabledVarListXml.append( rs.getString("AttributeName"));
                         			isFirstIter = false; 	
                         		}else{
                         			enabledVarListXml.append(","+ rs.getString("AttributeName"));									
                         		}
                             }
                         }
                     }
                 } else {
                     strQuery = WFSUtil.join(dbType, "Select distinct VarMappingTable.ProcessDefId, Status, UserDefinedName as AttributeName from VarMappingTable " + WFSUtil.getTableLockHintStr(dbType) + " LEFT outer join WFVarStatusTable " + WFSUtil.getTableLockHintStr(dbType) + " on VarMappingTable.UserDefinedName = WFVarStatusTable.VarName and VarMappingTable.ProcessDefId = WFVarStatusTable.ProcessDefId where ");

                     if (dbType == JTSConstant.JTS_MSSQL) {
                         strQuery += " VariableScope in ('U', 'I') and UserDefinedName != '' and VarMappingTable.ProcessDefId in (Select ProcessDefId from ProcessDefTable " + WFSUtil.getTableLockHintStr(dbType) + " )";
                     } else { //Also for DB2
                         strQuery += " VariableScope in ('U', 'I') and UserDefinedName is not null and VarMappingTable.ProcessDefId in (Select ProcessDefId from ProcessDefTable " + WFSUtil.getTableLockHintStr(dbType) + " )";

                     }
                     rs = stmt.executeQuery(strQuery);
                     while (rs.next()) {
                         int processDefId = rs.getInt("ProcessDefId");
                         if (processDefId > iProcDefId) {
                             if (iProcDefId > 0) {
                                 if (enabledXml.length() > 0) {
                                     tempXml.append("<Enabled>\n");
                                     tempXml.append(enabledXml);
                                     tempXml.append("</Enabled>\n");
                                 }
                                 if (disabledXml.length() > 0) {
                                     tempXml.append("<Disabled>\n");
                                     tempXml.append(disabledXml);
                                     tempXml.append("</Disabled>\n");
                                 }
                                 tempXml.append("</ProcessDefinition>\n");
                             }
                             iProcDefId = processDefId;
                             tempXml.append("<ProcessDefinition>\n");
                             tempXml.append(gen.writeValueOf("Id", iProcDefId + "") + "\n");

                             enabledXml = new StringBuffer(500);
                             disabledXml = new StringBuffer(500);
                         }
                         Status = rs.getString("Status");
                         if (rs.wasNull()) {
                             disabledXml.append("<Attribute>\n");
                             disabledXml.append(gen.writeValueOf("Name", rs.getString("AttributeName")));
                             disabledXml.append("\n</Attribute>\n");
                         } else {
                             enabledXml.append("<Attribute>\n");
                             enabledXml.append(gen.writeValueOf("Name", rs.getString("AttributeName")));
                             enabledXml.append("\n</Attribute>\n");
                         }
                     }
                     tempXml.append("</ProcessDefinition>\n");
                 }
                 if (enabledXml.length() > 0) {
                     tempXml.append("<Enabled>\n");
                     tempXml.append(enabledXml);
                     tempXml.append("</Enabled>\n");
                 }
                 if (disabledXml.length() > 0) {
                     tempXml.append("<Disabled>\n");
                     tempXml.append(disabledXml);
                     tempXml.append("</Disabled>\n");
                 }
                 tempXml.append("</Attributes>\n");
                 rs.close();
                 rs = null;
                 if(isArtifactMigrationCase)
                 {
                 	enabledVarListXml.append("</EnabledVarList>\n");
                 	tempXml1.append(enabledVarListXml);
                 }
             }

   	    tempXml1.append("</AuditLogData>");
         } else {
             mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
             subCode = 0;
             subject = WFSErrorMsg.getMessage(mainCode);
             descr = WFSErrorMsg.getMessage(subCode);
             errType = WFSError.WF_TMP;
         }
         if (mainCode == 0) {
             outputXML = new StringBuffer(500);
             outputXML.append(gen.createOutputFile("WFGetActionList"));
             outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
             if(isArtifactMigrationCase)
             {
             	outputXML.append(tempXml1);
             }
             else
             {
             outputXML.append(tempXml);
             }
             outputXML.append(gen.closeOutputFile("WFGetActionList"));
         }
     } catch (SQLException e) {
         WFSUtil.printErr(engine,"", e);
         mainCode = WFSError.WM_INVALID_FILTER;
         subCode = WFSError.WFS_SQL;
         subject = WFSErrorMsg.getMessage(mainCode);
         errType = WFSError.WF_FAT;
         if (e.getErrorCode() == 0) {
             if (e.getSQLState().equalsIgnoreCase("08S01")) {
                 descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
             }
         } else {
             descr = e.getMessage();
         }
     } catch (NumberFormatException e) {
         WFSUtil.printErr(engine,"", e);
         mainCode = WFSError.WF_OPERATION_FAILED;
         subCode = WFSError.WFS_ILP;
         subject = WFSErrorMsg.getMessage(mainCode);
         errType = WFSError.WF_TMP;
         descr = e.toString();
     } catch (NullPointerException e) {
         WFSUtil.printErr(engine,"", e);
         mainCode = WFSError.WF_OPERATION_FAILED;
         subCode = WFSError.WFS_SYS;
         subject = WFSErrorMsg.getMessage(mainCode);
         errType = WFSError.WF_TMP;
         descr = e.toString();
     } catch (WFSException e) {
         mainCode = WFSError.WM_NO_MORE_DATA;
         subCode = 0;
         subject = WFSErrorMsg.getMessage(mainCode);
         errType = WFSError.WF_TMP;
         descr = WFSErrorMsg.getMessage(subCode);
     } catch (JTSException e) {
         mainCode = WFSError.WF_OPERATION_FAILED;
         subCode = e.getErrorCode();
         subject = WFSErrorMsg.getMessage(mainCode);
         errType = WFSError.WF_TMP;
         descr = e.getMessage();
     } catch (Exception e) {
         WFSUtil.printErr(engine,"", e);
         mainCode = WFSError.WF_OPERATION_FAILED;
         subCode = WFSError.WFS_EXP;
         subject = WFSErrorMsg.getMessage(mainCode);
         errType = WFSError.WF_TMP;
         descr = e.toString();
     } catch (Error e) {
         WFSUtil.printErr(engine,"", e);
         mainCode = WFSError.WF_OPERATION_FAILED;
         subCode = WFSError.WFS_EXP;
         subject = WFSErrorMsg.getMessage(mainCode);
         errType = WFSError.WF_TMP;
         descr = e.toString();
     } finally {
     	try{
				if(rs!=null){
					rs.close();
					rs=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}

         try {
             if (stmt != null) {
                 stmt.close();
                 stmt = null;
             }
         } catch (Exception e) {
         	WFSUtil.printErr(engine,"", e);
         }
         try {
             if (pstmt != null) {
                 pstmt.close();
                 pstmt = null;
             }
         } catch (Exception e) {
         	WFSUtil.printErr(engine,"", e);
         }
        
     }
     if (mainCode != 0) {
         throw new WFSException(mainCode, subCode, errType, subject, descr);
     }
     return outputXML.toString();
 }

//----------------------------------------------------------------------------------------------------
// Function Name 		: WFSetActionList
// Date Written (DD/MM/YYYY): 16/12/2005
// Author				: Ankur Jain
// Input Parameters		: Connection , XMLParser , XMLGenerator
// Output Parameters	: none
// Return Values		: String
// Description			: Set Audit Log Configuration
//----------------------------------------------------------------------------------------------------

    public String WFSetActionList(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
   	 StringBuffer outputXML = new StringBuffer("");
     Statement stmt = null;
     ResultSet rs = null;
     int mainCode = 0;
     int subCode = 0;
     String subject = null;
     String descr = null;
     String errType = WFSError.WF_TMP;
		XMLParser inputXML = new XMLParser();
		inputXML.setInputXML(parser.toString());
		String engine ="";
		PreparedStatement pstmt1 = null;
		StringBuffer failedList = new StringBuffer(500);;
     try {
         int sessionID = parser.getIntOf("SessionId", 0, false);
         engine = parser.getValueOf("EngineName");
         int dbType = ServerProperty.getReference().getDBType(engine);
         String actionComments = parser.getValueOf("ActionComments", "", true);
         int procVarId = parser.getIntOf("VariantId", 0, true);
         boolean bChanged = false;
         boolean isArtifactMigrationCase = parser.getValueOf("ArtificationMigration", "N", true).equalsIgnoreCase("Y");
         WFParticipant participant = WMUser.WFCheckUpdateSession(con, sessionID, dbType);
         if (participant != null && participant.gettype() == 'U') {
             String inStr = "";
				StringBuffer tempxml = new StringBuffer(100);
				int count = 0;
				ArrayList arrayList = new ArrayList();
				HashMap actionMap = (HashMap)CachedActionObject.getReference().getCacheObject(con, engine);
				HashMap actionIDMap = (HashMap)actionMap.get(new Integer(0));
             String sEnabledList = parser.getValueOf("EnabledList", "", true);
             String sDisabledList = parser.getValueOf("DisabledList", "", true);
				
				StringTokenizer st = new StringTokenizer(sEnabledList, ",");
				tempxml.append("<ActionList>");
				while(st.hasMoreTokens()) 
					arrayList.add(new Integer(st.nextToken()));

				Iterator iterator = actionIDMap.entrySet().iterator();
				Map.Entry entry = null;
				while (iterator.hasNext()) {
					entry = (Map.Entry) iterator.next();
					if(arrayList.contains((Integer) entry.getKey())) {
						arrayList.remove(arrayList.indexOf((Integer) entry.getKey()));
					} 
				}
				
				if(!arrayList.isEmpty()) {
					for (int counter = 0; counter < arrayList.size(); counter++) {
						tempxml.append("<Item>");
						tempxml.append("<ActionId>" + (Integer) arrayList.get(counter) + "</ActionId>");
						tempxml.append("<Value>");
						tempxml.append("Enabled");
						tempxml.append("</Value>");
						tempxml.append("</Item>");

					}
				}
				
				st = new StringTokenizer(sDisabledList, ",");
				while(st.hasMoreTokens()) 
					arrayList.add(new Integer(st.nextToken()));
				
				iterator = actionIDMap.entrySet().iterator();
				while (iterator.hasNext()) {
					entry = (Map.Entry) iterator.next();
					if(arrayList.contains((Integer) entry.getKey())) {
						tempxml.append("<Item>");
						tempxml.append("<ActionId>" + (Integer) entry.getKey() + "</ActionId>");
						tempxml.append("<Value>");
						tempxml.append("Disabled");
						tempxml.append("</Value>");
						tempxml.append("</Item>");
					}
				}
				tempxml.append("</ActionList>");
				arrayList.clear();




             if (!sEnabledList.equalsIgnoreCase("")) {
                 inStr = "Update WFActionStatusTable Set Status = 'Y' Where ActionId in(" + sEnabledList + ")";
                 stmt = con.createStatement();
                 stmt.execute(inStr);
                 stmt.close();
                 bChanged = true;
             }
             if (!sDisabledList.equalsIgnoreCase("")) {
                 inStr = "Update WFActionStatusTable Set Status = 'N' Where ActionId in(" + sDisabledList + ")";
                 stmt = con.createStatement();
                 stmt.execute(inStr);
                 stmt.close();
                 bChanged = true;
             }
             int iProcDefId = 0;
             if(isArtifactMigrationCase)
             {
             	    String processName = parser.getValueOf("ProcessName", "", true);
             	    if(!"".equalsIgnoreCase(processName.trim()))
         			{
     				String exeStr = "select ProcessDefId from ProcessDefTable "+ WFSUtil.getTableLockHintStr(dbType) + " where ProcessName = ? order by VersionNo desc ";
     				pstmt1 = con.prepareStatement(exeStr);
						WFSUtil.DB_SetString(1, processName, pstmt1, dbType);
						pstmt1.execute();
						rs = pstmt1.getResultSet();
						if (rs.next()) {
							iProcDefId = rs.getInt(1);								
						}
						else
						{
							mainCode = WFSError.WF_INVALID_PROCESS_NAME;
	    					subCode = 0;
	    					subject = WFSErrorMsg.getMessage(mainCode);
	    					descr = WFSErrorMsg.getMessage(subCode);
	    					errType = WFSError.WF_TMP;   
						}
						if(rs != null){
	    					rs.close();
	    					rs = null;
	    				}
	    				if(pstmt1 != null){
	    					pstmt1.close();
	    					pstmt1 = null;
	    				}
         			}
     			
             }
             else
             {
              iProcDefId = parser.getIntOf("ProcessDefId", 0, true);
             }
             if (iProcDefId > 0 && mainCode == 0) {
                 String sVarList = parser.getValueOf("EnabledVarList", "", true);
					st = new java.util.StringTokenizer(sVarList, ",");
	                while (st.hasMoreTokens()) {
						arrayList.add(new String(st.nextToken()));
					}

					count = 0;
					tempxml.append("<ProcessVarList>");
					
					HashMap varMap = null;	//Bugzilla Bug 7176
					Object obj = actionMap.get(new Integer(iProcDefId));
					if (obj != null) {
						varMap = (HashMap)obj;
					} else {
						varMap = new HashMap();
					}

					iterator = varMap.entrySet().iterator();
					entry = null;
					while (iterator.hasNext()) {
						entry = (Map.Entry) iterator.next();
						if(arrayList.contains((String) entry.getKey())) {
							arrayList.remove(arrayList.indexOf((String) entry.getKey()));
							
						} else {
							tempxml.append("<Item>");
							tempxml.append("<VariableName>" + (String) entry.getKey() + "</VariableName>");
							tempxml.append("<Value>");
							tempxml.append("Disabled");
							tempxml.append("</Value>");
							tempxml.append("</Item>");
						}
					}

					if(!arrayList.isEmpty()) {
						for (int counter = 0; counter < arrayList.size(); counter++) {
							tempxml.append("<Item>");
							tempxml.append("<VariableName>" + (String) arrayList.get(counter) + "</VariableName>");
							tempxml.append("<Value>");
							tempxml.append("Enabled");
							tempxml.append("</Value>");
							tempxml.append("</Item>");
						}
					}
					tempxml.append("</ProcessVarList>");

                 inStr = "Delete from WFVarStatusTable Where ProcessDefId = " + iProcDefId;
                 stmt = con.createStatement();
                 stmt.execute(inStr);
                 stmt.close();
                 st = new java.util.StringTokenizer(sVarList, ",");
                 PreparedStatement pstmt = con.prepareStatement("Insert into WFVarStatusTable Values(" + iProcDefId + ",?,'Y', "+procVarId+")");
                 while (st.hasMoreTokens()) {
                 	if(isArtifactMigrationCase)
                 	{
                 		String variable = (String) st.nextElement();
                 		String exeStr = "SELECT * FROM VARMAPPINGTABLE "+ WFSUtil.getTableLockHintStr(dbType) + " WHERE ProcessDefId = ? AND UserDefinedName = ? AND VariableScope IN (?,?)";
         				pstmt1 = con.prepareStatement(exeStr);
         				pstmt1.setInt(1,iProcDefId);
 						WFSUtil.DB_SetString(2, variable, pstmt1, dbType);
 						pstmt1.setString(3, "U");
 						pstmt1.setString(4, "I");
 						pstmt1.execute();
 						rs = pstmt1.getResultSet();
 						if (rs.next()) {
 							 WFSUtil.DB_SetString(1, variable, pstmt, dbType);
 		                        pstmt.execute();
 		                        }
 						else
							{
								failedList.append("<VariableDetail>");
								failedList.append(gen.writeValueOf("VariableName",variable));
								failedList.append(gen.writeValueOf("Reason", WFSErrorMsg.getMessage(WFSError.WF_VARIABLE_INFO_NOT_FOUND)));
								failedList.append("</VariableDetail>");
								continue;
							}
                 	}
 					else
 						{
                     WFSUtil.DB_SetString(1, (String) st.nextElement(), pstmt, dbType);
                     pstmt.execute();
 						}
                 }
                 pstmt.close();
                 bChanged = true;
             }
             if (bChanged) { /* WFS_6.1.2_037 */
                 CachedActionObject.getReference().setCacheObject(con, engine, iProcDefId);
					WFSUtil.genAdminLog(engine, con, WFSConstant.WFL_AuditLogPreferencesChanged, iProcDefId, 0, null, participant.getid(), participant.getname(), 0, tempxml.toString(), null, null);
					WFTMSUtil.genRequestId(engine, con, WFSConstant.WFL_AuditLogPreferencesChanged, "", "P", iProcDefId, actionComments, inputXML, participant, iProcDefId);
             }
         } else {
             mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
             subCode = 0;
             subject = WFSErrorMsg.getMessage(mainCode);
             descr = WFSErrorMsg.getMessage(subCode);
             errType = WFSError.WF_TMP;
         }
         if (mainCode == 0) {
             outputXML = new StringBuffer(500);
             outputXML.append(gen.createOutputFile("WFSetActionList"));
             outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
             if (failedList.length() > 0) {
					outputXML.append("<FailedList>");
					outputXML.append(failedList);
					outputXML.append("</FailedList>");
				}
             outputXML.append(gen.closeOutputFile("WFSetActionList"));
         }
     } catch (SQLException e) {
         WFSUtil.printErr(engine,"", e);
         mainCode = WFSError.WM_INVALID_FILTER;
         subCode = WFSError.WFS_SQL;
         subject = WFSErrorMsg.getMessage(mainCode);
         errType = WFSError.WF_FAT;
         if (e.getErrorCode() == 0) {
             if (e.getSQLState().equalsIgnoreCase("08S01")) {
                 descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
             }
         } else {
             descr = e.getMessage();
         }
     } catch (NumberFormatException e) {
         WFSUtil.printErr(engine,"", e);
         mainCode = WFSError.WF_OPERATION_FAILED;
         subCode = WFSError.WFS_ILP;
         subject = WFSErrorMsg.getMessage(mainCode);
         errType = WFSError.WF_TMP;
         descr = e.toString();
     } catch (NullPointerException e) {
         WFSUtil.printErr(engine,"", e);
         mainCode = WFSError.WF_OPERATION_FAILED;
         subCode = WFSError.WFS_SYS;
         subject = WFSErrorMsg.getMessage(mainCode);
         errType = WFSError.WF_TMP;
         descr = e.toString();
     } catch (WFSException e) {
         mainCode = WFSError.WM_NO_MORE_DATA;
         subCode = 0;
         subject = WFSErrorMsg.getMessage(mainCode);
         errType = WFSError.WF_TMP;
         descr = WFSErrorMsg.getMessage(subCode);
     } catch (JTSException e) {
         mainCode = WFSError.WF_OPERATION_FAILED;
         subCode = e.getErrorCode();
         subject = WFSErrorMsg.getMessage(mainCode);
         errType = WFSError.WF_TMP;
         descr = e.getMessage();
     } catch (Exception e) {
         WFSUtil.printErr(engine,"", e);
         mainCode = WFSError.WF_OPERATION_FAILED;
         subCode = WFSError.WFS_EXP;
         subject = WFSErrorMsg.getMessage(mainCode);
         errType = WFSError.WF_TMP;
         descr = e.toString();
     } catch (Error e) {
         WFSUtil.printErr(engine,"", e);
         mainCode = WFSError.WF_OPERATION_FAILED;
         subCode = WFSError.WFS_EXP;
         subject = WFSErrorMsg.getMessage(mainCode);
         errType = WFSError.WF_TMP;
         descr = e.toString();
     } finally {
         try {
             if (stmt != null) {
                 stmt.close();
                 stmt = null;
             }
         } catch (Exception e) {}
         try{
				if(rs!=null){
					rs.close();
					rs=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
         try {
             if (pstmt1 != null) {
                 pstmt1.close();
                 pstmt1 = null;
             }
         } catch (Exception e) {
         	WFSUtil.printErr(engine,"", e);
         }    
     }
     if (mainCode != 0) {
         throw new WFSException(mainCode, subCode, errType, subject, descr);
     }
     return outputXML.toString();
 }

//----------------------------------------------------------------------------------------------------
//	Function Name				:	WFFetchProcessDefinition
//	Date Written (DD/MM/YYYY)	:	10/05/2007
//	Author						:   Varun Bhansaly
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:   none
//	Return Values				:	String
//	Description					:   Fetches all the details attached to the process
//----------------------------------------------------------------------------------------------------

    private String WFFetchProcessDefinition(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
    	 StringBuffer outputXML = new StringBuffer("");
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String errType = WFSError.WF_TMP;
        String descr = null;
        int startIndex = 0;
        int endIndex = 0;
        ResultSet rs = null;
        PreparedStatement pstmt = null;
        int processID = 0;
        int dbType = -1;
        Object[] result = null;
        String engine = "";
        try {
            int sessionID = parser.getIntOf("SessionId", 0, false);
            engine = parser.getValueOf("EngineName");
            String processName = parser.getValueOf("Name").trim();
            WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
            StringBuffer tempXML = new StringBuffer(100);
            StringBuffer processDefnXML = new StringBuffer(100);
            dbType = ServerProperty.getReference().getDBType(engine);
            if (participant != null) {
                /* Transaction opened especially for reading PostgreSQL LargeObjects
                 * -Varun Bhansaly
                 */
                if (con.getAutoCommit()) {
                    con.setAutoCommit(false);
                }
                tempXML.append("<Name>" + processName + "</Name>");
                String query =
                    "SELECT a.ProcessDefId, a.ActivityId, a.ActivityType, a.ActivityName, a.xLeft, a.ytop," +
                    " ImportedProcessName, c.ProcessDefId, a.ActivityIcon" +
                    " FROM ProcessDefTable c " + WFSUtil.getTableLockHintStr(dbType) + " INNER JOIN" +
                    " (SELECT distinct importedprocessname, activityid, processdefid from ImportedProcessDefTable) b" +
                    " ON c.ProcessName = b.ImportedProcessName" +
                    " AND c.versionno = (SELECT max(versionno) from processdeftable " + WFSUtil.getTableLockHintStr(dbType) +
                    " WHERE processname = b.importedprocessname)" +
                    " RIGHT OUTER JOIN ActivityTable a " + WFSUtil.getTableLockHintStr(dbType) + " ON b.ActivityId = a.ActivityId AND" +
                    " b.ProcessDefID = a.ProcessDefId" +
                    " WHERE a.processdefid  = (SELECT processdefid from processdeftable " + WFSUtil.getTableLockHintStr(dbType) +
                    " WHERE processname = ? and versionno =  (SELECT max(versionno) from processdeftable " + WFSUtil.getTableLockHintStr(dbType) +
                    " where processname = ?))";
                pstmt = con.prepareStatement(query);
                pstmt.setString(1, processName);
                pstmt.setString(2, processName);
                pstmt.execute();
                rs = pstmt.getResultSet();
                int ctr = 0;
                while (rs.next()) {
                    if (ctr == 0) {
                        ctr = 1;
                        processID = rs.getInt("ProcessDefId");
                        tempXML.append("<WorkflowProcess>");
                        tempXML.append("<Id>" + processID + "</Id>");
                        tempXML.append("<Name>" + processName + "</Name>");
                        tempXML.append("<Activities>\n");
                    }
                    int id = rs.getInt("ActivityId");
                    int type = rs.getInt("ActivityType");
                    tempXML.append("<Activity>");
                    tempXML.append("<Id>" + id + "</Id>");
                    tempXML.append("<Name>" + rs.getString("ActivityName") + "</Name>");
                    tempXML.append("<Left>" + rs.getInt("xLeft") + "</Left>");
                    tempXML.append("<Top>" + rs.getInt("ytop") + "</Top>");
                    tempXML.append("<ActivityType>" + type + "</ActivityType>");
                    if (type == WFSConstant.ACT_SUBPROC) {
                        tempXML.append("<Subprocess>SubProcess</Subprocess>");
                        tempXML.append("<Name>" + rs.getString("ImportedProcessName") + "</Name>");
                        tempXML.append("<Id>" + rs.getString("ProcessDefId") + "</Id>");
                    }
                    tempXML.append("<ActivityIcon>");
                    /**
                     * Get the image icon in a binary stream,
                     * encode the stream and send in xml. Decode
                     * the stream at the other end
                     */
                    result = WFSUtil.getBIGData(con, rs, "ActivityIcon", dbType, DatabaseTransactionServer.charSet);
                    byte[] icon = ( (String) result[0]).getBytes(DatabaseTransactionServer.charSet);
                    int len = ( (Integer) result[1]).intValue();
                    tempXML.append(EncodeImage.encodeImageData(icon));
                    tempXML.append("</ActivityIcon>");
                    tempXML.append("<Length>" + String.valueOf(len) + "</Length>");
                    tempXML.append("</Activity>\n");
                }
                if (rs != null) {
                    rs.close();
                    rs = null;
                }
                if (pstmt != null) {
                    pstmt.close();
                    pstmt = null;
                }
                if (ctr == 1) {
                    tempXML.append("</Activities>");
                    tempXML.append("<Transitions>");
                    query = "SELECT SourceId,Color, TargetId FROM  WorkstageLinkTable " + WFSUtil.getTableLockHintStr(dbType) + "  WHERE ProcessDefId=" + processID;
                    pstmt = con.prepareStatement(query);
                    pstmt.execute();
                    rs = pstmt.getResultSet();
                    while (rs.next()) {
                        tempXML.append("<Transition>");
                        tempXML.append("<From>" + rs.getInt("SourceId") + "</From>");
                        tempXML.append("<To>" + rs.getInt("TargetId") + "</To>");
                        tempXML.append("<Color>" + rs.getInt("Color") + "</Color>");
                        tempXML.append("<TransitionType>T</TransitionType>");
                        tempXML.append("</Transition>");
                    }
                    if (rs != null) {
                        rs.close();
                        rs = null;
                    }
                    if (pstmt != null) {
                        pstmt.close();
                        pstmt = null;
                    }
                    tempXML.append("</Transitions>\n</WorkflowProcess>\n");
                } else {
                    mainCode = WFSError.WM_REPORT_NOT_FOUND;
                    subCode = 0;
                    subject = WFSErrorMsg.getMessage(mainCode);
                    descr = WFSErrorMsg.getMessage(subCode);
                    errType = WFSError.WF_TMP;
                }
            } else {
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            if (mainCode == 0) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFFetchProcessDefinition"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append("<Report>\n");
                outputXML.append(tempXML);
                outputXML.append("</Report>");
                outputXML.append(gen.closeOutputFile("WFFetchProcessDefinition"));
            }
        } catch (SQLException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (WFSException e) {
            mainCode = WFSError.WM_NO_MORE_DATA;
            subCode = 0;
            subject = WFSErrorMsg.getMessage(mainCode);
            descr = WFSErrorMsg.getMessage(subCode);
            errType = WFSError.WF_TMP;
        } catch (JTSException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
        } catch (Exception e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
            try {
                if (!con.getAutoCommit()) {
                    con.setAutoCommit(true);
                }
            } catch (SQLException sqle) {}
            try {
                if (rs != null) {
                    rs.close();
                    rs = null;
                }
            } catch (SQLException sqle) {}
            try {
                if (pstmt != null) {
                    pstmt.close();
                    pstmt = null;
                }
            } catch (SQLException e) {}
           
        }
        if (mainCode != 0) {
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();
    }
//SrNo-11
//----------------------------------------------------------------------------------------------------
//	Function Name				:	WFCreateServicesExt
//	Date Written (DD/MM/YYYY)	:	22/05/2009
//	Author						:   Shweta Tyagi
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:   none
//	Return Values				:	String
//	Description					:   Creates common services like WFGetWorkitemDataExt
									/*to do - handle query workstep- Shweta Tyagi & Exceptional Handling*/
//----------------------------------------------------------------------------------------------------

    private String WFCreateWebservicesExt(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
        StringBuffer outputXML = new StringBuffer();
		String str = "";
		StringBuffer tempXML = new StringBuffer();
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String errType = WFSError.WF_TMP;
        String descr = null;
		int i = 0;
		String engineName ="";
        try {
            int sessionID = parser.getIntOf("SessionId", 0, false);
            engineName = parser.getValueOf("EngineName");
            int processDefId = Integer.parseInt(parser.getValueOf("ProcessDefId"));
            String processName = parser.getValueOf("ProcessName");
            processName = processName.replace(' ', '_');
            processName = processName.replace('.', '_');
            processName = processName.replace('\\', '_');
            processName = processName.replace('/', '_');
            WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);

            if (participant != null) {
				parser.setInputXML((CreateXML.WMGetActivityList(engineName, String.valueOf(sessionID), String.valueOf(processDefId))).toString());
				String outActXml = WFFindClass.getReference().execute("WMGetActivityList", engineName, con, parser, gen);
				WFSUtil.printOut(engineName,"[output xml from activity list] >> "+outActXml);
				XMLParser newParser = new XMLParser(outActXml);
				int noOfActivities = newParser.getNoOfFields("ActivityInfo");
				int strtIndex = 0;
				int lastIndex = 0;
				int activityId = 0;
				String activityName = "";
				int activityType = 0;
				String archiveLocation = "";
				ArrayList archiveLocations = new ArrayList();						
				while(noOfActivities>0) {
					noOfActivities--;
					strtIndex = newParser.getStartIndex("ActivityInfo", lastIndex, 0);
					lastIndex = newParser.getEndIndex("ActivityInfo", strtIndex, 0);
					activityId = Integer.parseInt(newParser.getValueOf("ID",strtIndex, lastIndex));
					activityName = newParser.getValueOf("Name", strtIndex, lastIndex);
					activityType = Integer.parseInt(newParser.getValueOf("ActivityType", strtIndex, lastIndex));
					activityName = activityName.replace(' ', '_');
					activityName = activityName.replace('.', '_');
					activityName = activityName.replace('\\', '_');
					activityName = activityName.replace('/', '_');
					
					if (activityType == WFSConstant.ACT_INTRODUCTION || activityType == WFSConstant.ACT_CUSTOM) {
						archiveLocation = WFWebServiceBuilder.getSharedInstance().buildCommonServices(engineName, processDefId, processName, "WFGetWorkitemDataExt", activityId, activityType, activityName);
					}
					archiveLocations.add(archiveLocation);
				}
				while(i<archiveLocations.size()) {
					str = gen.writeValueOf("ArchiveLocation", (String) archiveLocations.get(i));
					i++;
				}
				tempXML.append(str);
			} else {
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
         if (mainCode == 0) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFCreateServicesExt"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append("<ArchiveLocations>\n");
                outputXML.append(tempXML);
                outputXML.append("</ArchiveLocations>");
                outputXML.append(gen.closeOutputFile("WFCreateServicesExt"));
         }
        } catch (Exception e) {
            WFSUtil.printErr(engineName,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr(engineName,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
           
        }
        if (mainCode != 0) {
            return WFSUtil.generalError("WFCreateWebServicesExt", "", gen, mainCode, subCode, errType, subject, descr);
			}
        return outputXML.toString();
    }
    /**
     * *******************************************************************
     * Function Name    :   setString
     * Programmer' Name :   Varun Bhansaly
     * Date Written     :   September 5th 2008
     * Input Parameters :   CallableStatement -> cstmt (The statement to work on.)
     *                      String -> data (The data to be set.)
     *                      int -> startIndex (The parameter no.)
     *                      int -> counter (The counter to loop on)
     *                      int -> dbType (The database type, take actions according to that.)
     * Output Parameters:   NONE
     * Return Value     :   int -> paramCounter, the next parameter to be set. 
     * Description      :   Given the input 'data', it sets it on 'cstmt' object.
     *                      keeping mind the dbType.
     * *******************************************************************
     */
    private int setString(CallableStatement cstmt, String data, int startIndex, int counter, int dbType) throws Exception {
        int paramCounter = -1;
        for (paramCounter = startIndex; paramCounter < (startIndex + counter); paramCounter++) {
            /** for MSSQL procedures, if data to be input is greater than 4000, then break it into 
             *  smaller data of length >= 8000. loop on counter which will be sent in input.
             *  MSSQL procedures cannot have local variables of type 'text'.
             *  - Varun Bhansaly 
             **/
            if ((data.length() > 4000) && (dbType == JTSConstant.JTS_MSSQL)) {
                cstmt.setString(paramCounter, data.substring(0, 4000));
                data = data.substring(4000);
            } else if (data.length() > 0) {
                cstmt.setString(paramCounter, data);
                data = "";
            } else {
                cstmt.setNull(paramCounter, Types.VARCHAR);
            }
        }
        return paramCounter;
    }
    
    private int setString(CallableStatement cstmt, String data, int startIndex, int counter, int dbType,int length) throws Exception {
        int paramCounter = -1;
        for (paramCounter = startIndex; paramCounter < (startIndex + counter); paramCounter++) {
            /** for MSSQL procedures, if data to be input is greater than 8000, then break it into 
             *  smaller data of length >= 8000. loop on counter which will be sent in input.
             *  MSSQL procedures cannot have local variables of type 'text'.
             *  - Varun Bhansaly 
             **/
            if ((data.length() > length) && (dbType == JTSConstant.JTS_MSSQL)) {
                cstmt.setString(paramCounter, data.substring(0, length));
                data = data.substring(length);
            } else if (data.length() > 0) {
                cstmt.setString(paramCounter, data);
                data = "";
            } else {
                cstmt.setNull(paramCounter, Types.VARCHAR);
            }
        }
        return paramCounter;
    }

//----------------------------------------------------------------------------------------------------
//	Function Name 				: WFGetAuthorizationList
//	Date Written (DD/MM/YYYY)	: 28/12/2007
//	Author						: Vikram Kumbhar
//	Input Parameters			: Connection , XMLParser , XMLGenerator
//	Output Parameters			: None
//	Return Values				: String
//	Description					: Get list of Authorizations
//----------------------------------------------------------------------------------------------------
    public String WFGetAuthorizationList(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
    	 StringBuffer outputXML = new StringBuffer("");
		PreparedStatement pstmt = null;
        Statement stmt = null;
        ResultSet operationRs=null;
        ResultSet rs = null;
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        String engine ="";
        try {
            int sessionID = parser.getIntOf("SessionId", 0, false);
            engine = parser.getValueOf("EngineName");
            int dbType = ServerProperty.getReference().getDBType(engine);
			boolean dbTypeOracle = false;
			if(dbType == JTSConstant.JTS_ORACLE || dbType == JTSConstant.JTS_POSTGRES){
				dbTypeOracle = true;
			}
			StringBuffer tempXml = new StringBuffer(100);
            
			int retrivedCount = 0;
			int totalCount = 0;
            WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
            if (participant != null) {
				String username = participant.getname();
				int authID = parser.getIntOf("AuthorizationID", 0, true);
				char status = parser.getCharOf("Status", '\0', true);
				char dataFlag = parser.getCharOf("DataFlag", 'N', true);
				String privileges = parser.getValueOf("Privileges", "", true);
				boolean needsPrivilege = false;
				boolean hasPrivilege = false;
				if(!privileges.equals("")) {
					needsPrivilege = true;
					hasPrivilege = (privileges.length() < 3) ? false : (privileges.charAt(2) == '1');
				}
				
				int srvrBatchSize = ServerProperty.getReference().getBatchSize();
				int noOfRecordsToFetch = parser.getIntOf("NoOfRecordsToFetch", srvrBatchSize, true);
				
				if(noOfRecordsToFetch > srvrBatchSize){
					noOfRecordsToFetch = srvrBatchSize;
				}

				String lastAuthorizationID = parser.getValueOf("LastAuthorizationID", "", true);
				String lastValue = parser.getValueOf("LastValue", "", true);
				char sortOrder = parser.getCharOf("SortOrder", 'A', true);
				int orderBy = parser.getIntOf("OrderBy", 0, true);
				String op = ((sortOrder == 'A') ? " > " : " < ");
				String sortOp = ((sortOrder == 'A') ? " Asc " : " Desc ");
				String sortField = null;

				StringBuffer filterString = new StringBuffer();
				String prefixString = null;
				String suffixString = null;
				StringBuffer orderbyString = new StringBuffer();

				prefixString = WFSUtil.getFetchPrefixStr(dbType, (noOfRecordsToFetch + 1));	//Bugzilla Bug 7052 statement moved outside else
				suffixString = WFSUtil.getFetchSuffixStr(dbType, (noOfRecordsToFetch + 1), WFSConstant.QUERY_STR_WHERE);

				filterString.append(" 1 = 1 ");
				if(status == 'P') {
					filterString.append(" AND (Status = ");
					filterString.append(WFSUtil.TO_STRING("P", true, dbType));
					filterString.append(" OR Status = ");
					filterString.append(WFSUtil.TO_STRING("I", true, dbType));
					filterString.append(")");
				} else if(status == 'R') {
					filterString.append(" AND Status = ");
					filterString.append(WFSUtil.TO_STRING("R", true, dbType));
					filterString.append(" AND MakerUserName = ");
					filterString.append(WFSUtil.TO_STRING(username, true, dbType));
				}

				if(authID > 0) {
					filterString.append(" AND AuthorizationID = ");
					filterString.append(authID);
				} else {
					switch(orderBy) {
					case 1:
						sortField = " EntityType ";
						break;

					case 2:
						sortField = " EntityName ";
						break;

					case 3:
						sortField = " MakerUserName ";
						break;

					case 4:
						sortField = " CheckerUserName ";
						break;

					default:
						orderBy = 0;
						sortField = " ActionDateTime ";
					}

					orderbyString.append(" Order By " + sortField + sortOp + " , AuthorizationID " + sortOp);

				}

				ArrayList authInfoList = new ArrayList();
				//ResultSet rs = null;
				while(true) {
					StringBuffer lastValueFilter = new StringBuffer();
					if(!lastAuthorizationID.equals("")) {
						String lastAuthIDFilter = " and AuthorizationID " + op + lastAuthorizationID;
						if(!lastValue.equals("")) {
							lastValue = (orderBy == 0) ? WFSUtil.TO_DATE(lastValue, true, dbType) : WFSUtil.TO_STRING(lastValue, true, dbType);
							
							lastValueFilter.append(" AND ((");
							lastValueFilter.append(sortField);
							lastValueFilter.append(" = ");
							lastValueFilter.append(lastValue);
							lastValueFilter.append(lastAuthIDFilter);
							lastValueFilter.append(") OR ");
							lastValueFilter.append(sortField);
							lastValueFilter.append(op);
							lastValueFilter.append(lastValue);
							lastValueFilter.append("");
							lastValueFilter.append((sortOrder == 'A' ?
                                         (dbTypeOracle ? " or " + sortField + " is null" : "") :
                                         (dbTypeOracle ? "" : " or " + sortField + " is null")));
							lastValueFilter.append(")");
						} else {
							lastValueFilter.append(" AND (( ");
							lastValueFilter.append(sortField);
							lastValueFilter.append(" is null ");
							lastValueFilter.append(lastAuthIDFilter);
							lastValueFilter.append(" ) ");
							lastValueFilter.append((sortOrder == 'A' ?
												 (dbTypeOracle ? "" : " or " + sortField + " is not null ") :
												 (dbTypeOracle ? " or " + sortField + " is not null" : "")));
							lastValueFilter.append(")");
						}
					}

					stmt = con.createStatement();
					rs = stmt.executeQuery("Select * From ( Select " + WFSUtil.TO_SANITIZE_STRING(prefixString, true)
						+ "AuthorizationID, EntityType, EntityID, EntityName, ActionDateTime, MakerUserName, CheckerUserName, " 
						+ "Comments, Status From WFAuthorizationTable " + WFSUtil.getTableLockHintStr(dbType) + "   where " 
						+ WFSUtil.TO_SANITIZE_STRING(filterString.toString(), true) + WFSUtil.TO_SANITIZE_STRING(lastValueFilter.toString(), true) + WFSUtil.TO_SANITIZE_STRING(orderbyString.toString(), true) 
						+ ") A " + WFSUtil.TO_SANITIZE_STRING(suffixString, true));

					pstmt = con.prepareStatement("Select 1 from WFAuthorizeQueueUserTable " + WFSUtil.getTableLockHintStr(dbType) + "   where AuthorizationID = ?");	//Tocheck whether a row exists or not....
					AuthorizationInfo authInfo = null;
					for(int counter = 0; counter < noOfRecordsToFetch && rs.next(); counter++) {
						authInfo = new AuthorizationInfo();
						authInfo.authID = rs.getInt("AuthorizationID");
						authInfo.entityType = rs.getString("EntityType").charAt(0);
						authInfo.entityID = rs.getInt("EntityID");
						authInfo.entityName = rs.getString("EntityName");
						authInfo.actionDateTime = rs.getString("ActionDateTime");
						authInfo.makerUserName = rs.getString("MakerUserName");
						authInfo.checkerUserName = rs.getString("CheckerUserName");
						authInfo.comments = WFSUtil.handleSpecialCharInXml(rs.getString("Comments"));
						authInfo.status = rs.getString("Status");
						authInfo.isQueueMemberOperation = true;
						String requiredRights = "010100"; // Read and Modify
						if(authInfo.entityType == 'Q' && needsPrivilege) {
							pstmt.setInt(1, authInfo.authID);
							pstmt.execute();
							authInfo.isQueueMemberOperation = false;
							operationRs = pstmt.getResultSet();
							if(operationRs != null && operationRs.next()) {
								if(!hasPrivilege) continue;
								requiredRights = "010000"; // Read
								authInfo.isQueueMemberOperation = true;
							}
						}
						boolean rightsFlag = true;
						if(authInfo.entityID > 0) { // Implies operations other than add queue
							parser.setInputXML("<SessionId>" + sessionID + "</SessionId><EngineName>" + engine  + "</EngineName>");
							if(authInfo.entityType == 'P')
								rightsFlag = WFSUtil.checkRights(con, dbType, WFSConstant.CONST_OBJTYPE_PROCESS, authInfo.entityID, sessionID, WFSConstant.CONST_PROCESS_MODIFY);
							else if(authInfo.entityType == 'Q')
								rightsFlag = WFSUtil.checkRights(con, dbType, WFSConstant.CONST_OBJTYPE_QUEUE, authInfo.entityID, sessionID, WFSConstant.CONST_QUEUE_MODIFYQPROP);
						}
						if(rightsFlag)
							authInfoList.add(authInfo);
					}

					retrivedCount = authInfoList.size();
					if (rs.next()) {
						if(retrivedCount < noOfRecordsToFetch) {
							lastAuthorizationID = String.valueOf(authInfo.authID);
							switch(orderBy) {
							case 1:
								lastValue = String.valueOf(authInfo.entityType);
								break;

							case 2:
								lastValue = authInfo.entityName;
								break;

							case 3:
								lastValue = authInfo.makerUserName;
								break;

							case 4:
								lastValue = authInfo.checkerUserName;
								break;

							default:
								lastValue = authInfo.actionDateTime;
							}
						} else {
							totalCount = retrivedCount + 1;
							break;
						}
					} else {
						totalCount = retrivedCount;
						break;
					}
				}

				StringBuffer queryBuffer = null;
				for (int counter = 0; counter < retrivedCount; counter++) {
					AuthorizationInfo authInfo = (AuthorizationInfo) authInfoList.get(counter);
					tempXml.append("<Authorization>");
					tempXml.append(gen.writeValueOf("AuthorizationID", String.valueOf(authInfo.authID)));
					tempXml.append(gen.writeValueOf("EntityType", String.valueOf(authInfo.entityType)));
					tempXml.append(gen.writeValueOf("EntityID", String.valueOf(authInfo.entityID)));
					tempXml.append(gen.writeValueOf("EntityName", authInfo.entityName));
					tempXml.append(gen.writeValueOf("ActionDateTime", authInfo.actionDateTime));
					tempXml.append(gen.writeValueOf("MakerUserName", authInfo.makerUserName));
					tempXml.append(gen.writeValueOf("CheckerUserName", authInfo.checkerUserName));
					tempXml.append(gen.writeValueOf("Comments", authInfo.comments)); 
					tempXml.append(gen.writeValueOf("Status", authInfo.status));
					tempXml.append("<Actions>");
					if(authInfo.entityType == 'Q') {
						queryBuffer = new StringBuffer(" Select ActionID ");
						if(dataFlag == 'Y')
							queryBuffer.append(" ,QueueName , QueueType, Comments, AllowReassignment, FilterOption, FilterValue, OrderBy, QueueFilter ");
						queryBuffer.append(" From WFAuthorizeQueueDefTable " + WFSUtil.getTableLockHintStr(dbType) + " where AuthorizationID = " + Integer.parseInt(WFSUtil.TO_SANITIZE_STRING(Integer.toString(authInfo.authID), false)));
						rs = stmt.executeQuery(queryBuffer.toString());
						if(rs != null && rs.next()) {
							tempXml.append("<Action>");
							tempXml.append(gen.writeValueOf("ActionID", rs.getString("ActionID")));
							if(dataFlag == 'Y') {
								tempXml.append(gen.writeValueOf("QueueName", rs.getString("QueueName")));
								tempXml.append(gen.writeValueOf("QueueType", rs.getString("QueueType")));
								tempXml.append(gen.writeValueOf("Comments", WFSUtil.handleSpecialCharInXml( rs.getString("Comments"))));
								tempXml.append(gen.writeValueOf("AllowReassignment", rs.getString("AllowReassignment")));
								tempXml.append(gen.writeValueOf("FilterOption", rs.getString("FilterOption")));
								tempXml.append(gen.writeValueOf("FilterValue", rs.getString("FilterValue")));
								tempXml.append(gen.writeValueOf("OrderBy", rs.getString("OrderBy")));
								String queueFilter = rs.getString("QueueFilter");
								queueFilter = rs.wasNull() ? null : (queueFilter.equalsIgnoreCase("NULL") ? "" : queueFilter);
								tempXml.append(gen.writeValueOf("QueueFilter", queueFilter));
							}
							tempXml.append("</Action>");
						}
						if(authInfo.isQueueMemberOperation) {
							queryBuffer = new StringBuffer(" Select ActionID, AssociationType ");
							if(dataFlag == 'Y')
								queryBuffer.append(" , UserName, AssignedTillDateTime, QueryFilter ");
							queryBuffer.append(" From WFAuthorizeQueueUserTable " + WFSUtil.getTableLockHintStr(dbType) + " where AuthorizationID = " + Integer.parseInt(WFSUtil.TO_SANITIZE_STRING(Integer.toString(authInfo.authID), false)));
							rs = stmt.executeQuery(queryBuffer.toString());
							while(rs != null && rs.next()) {
								tempXml.append("<Action>");
								tempXml.append(gen.writeValueOf("ActionID", rs.getString("ActionID")));
								tempXml.append(gen.writeValueOf("AssociationType", rs.getString("AssociationType")));
								if(dataFlag == 'Y') {
									tempXml.append(gen.writeValueOf("UserName", rs.getString("UserName")));
									tempXml.append(gen.writeValueOf("AssignedTillDateTime", rs.getString("AssignedTillDateTime")));
									tempXml.append(gen.writeValueOf("QueryFilter", rs.getString("QueryFilter")));
								}
								tempXml.append("</Action>");
							}
						}
						queryBuffer = new StringBuffer(" Select ActionID ");
						if (dataFlag == 'Y')
							queryBuffer.append(" , ProcessDefID, ActivityID, StreamName ");
						queryBuffer.append(" From WFAuthorizeQueueStreamTable " + WFSUtil.getTableLockHintStr(dbType) + " where AuthorizationID = " + authInfo.authID);
						rs = stmt.executeQuery(queryBuffer.toString());
						while(rs != null && rs.next()) {
							tempXml.append("<Action>");
							tempXml.append(gen.writeValueOf("ActionID", rs.getString("ActionID")));
							if(dataFlag == 'Y') {
								tempXml.append(gen.writeValueOf("ProcessDefID", rs.getString("ProcessDefID")));
								tempXml.append(gen.writeValueOf("ActivityID", rs.getString("ActivityID")));
								tempXml.append(gen.writeValueOf("ActivityName", rs.getString("StreamName")));
							}
							tempXml.append("</Action>");
						}
					}
					else if(authInfo.entityType == 'P') {
						rs = stmt.executeQuery("Select ActionID, VersionNo, ProcessState From WFAuthorizeProcessDefTable " + WFSUtil.getTableLockHintStr(dbType) + " where AuthorizationID = " + authInfo.authID);
						while(rs != null && rs.next()) {
							tempXml.append("<Action>");
							tempXml.append(gen.writeValueOf("ActionID", rs.getString("ActionID")));
							tempXml.append(gen.writeValueOf("VersionNo", rs.getString("VersionNo")));
							tempXml.append(gen.writeValueOf("ProcessState", rs.getString("ProcessState")));
							tempXml.append("</Action>");
						}
					}
					tempXml.append("</Actions>");
					tempXml.append("</Authorization>");
				}
				if(retrivedCount == 0) {
					mainCode = WFSError.WM_NO_MORE_DATA;
					subCode = 0;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}
            } else {
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            if(mainCode == 0) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFGetAuthorizationList"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append(gen.writeValueOf("Authorizations", tempXml.toString()));
				outputXML.append(gen.writeValueOf("TotalCount", String.valueOf(totalCount)));
				outputXML.append(gen.writeValueOf("RetrievedCount", String.valueOf(retrivedCount)));
                outputXML.append(gen.closeOutputFile("WFGetAuthorizationList"));
            }
        } catch (SQLException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
                        + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (WFSException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = e.getMainErrorCode();
            subCode = e.getSubErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = WFSErrorMsg.getMessage(subCode);
        } catch (JTSException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
        } catch (Exception e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
        	try{
				if(rs!=null){
					rs.close();
					rs=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
        	try{
				if(operationRs!=null){
					operationRs.close();
					operationRs=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}

            try {
                if (stmt != null) {
                    stmt.close();
                    stmt = null;
                }
            } catch (Exception e) {
            	WFSUtil.printErr(engine,"", e);
            }
            try{
				if(pstmt!=null){
					pstmt.close();
					pstmt=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
           
        }
        if (mainCode != 0) {
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();
    }


//----------------------------------------------------------------------------------------------------
//	Function Name 				: WFCompleteAuthorization
//	Date Written (DD/MM/YYYY)	: 29/12/2007
//	Author						: Vikram Kumbhar
//	Input Parameters			: Connection , XMLParser , XMLGenerator
//	Output Parameters			: None
//	Return Values				: String
//	Description					: Complete Authorization
//----------------------------------------------------------------------------------------------------
	public String WFCompleteAuthorization(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
		 StringBuffer outputXML = new StringBuffer("");
		Statement stmt = null;
		ResultSet rs = null;
		PreparedStatement pstmt = null;
		ResultSet res1 = null;
		int mainCode = 0;
		int subCode = 0;
		String subject = null;
		String descr = null;
		String errType = WFSError.WF_TMP;
		char authFlag = parser.getCharOf("AuthorizationFlag", 'N', true);//Bug 37731 - AuditTrail for Process State Change for registered Processes .
		String engine ="";
		try {
			int sessionID = parser.getIntOf("SessionId", 0, false);
			engine = parser.getValueOf("EngineName");
			int dbType = ServerProperty.getReference().getDBType(engine);
			StringBuffer failedList = new StringBuffer();
			String callname = "";
			String comments = "";
			WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
			if(participant != null) {
				int userid = participant.getid();
				String username = participant.getname();

				// A-Approve, R-Reject, I-Reinitiate, C-Discard, D-Dismiss      			07/01/2013	Sajid Khan	Bug 37345 - Audit log Issue.
				char oper = parser.getCharOf("Operation", '\0', false);
				comments = parser.getValueOf("Comments", "", false);
				stmt = con.createStatement();
				ArrayList authList = new ArrayList();
				int startindex = 0;
                int endindex = 0;
				int noOfAuthorizations = parser.getNoOfFields("Authorization");
				while (noOfAuthorizations-- > 0) {
					startindex = parser.getStartIndex("Authorization", endindex, 0);
                    endindex = parser.getEndIndex("Authorization", startindex, 0);
					String strAuthID = parser.getValueOf("AuthorizationID", startindex, endindex);
					if(!strAuthID.equals(""))
						authList.add(strAuthID);
				}
				for (int counter = 0; counter < authList.size(); counter++) {
					int authID = Integer.parseInt((String)authList.get(counter));
					try {
						rs = stmt.executeQuery("Select EntityType, EntityID, EntityName, MakerUserName, CheckerUserName, Comments, "
								+ WFSUtil.getDate(dbType) + "as CurrDateTime From WFAuthorizationTable where AuthorizationID = " + authID);
						if (rs != null && rs.next()) {
							String entityType = rs.getString("EntityType");
							entityType = StringEscapeUtils.escapeHtml4(entityType);
							entityType = StringEscapeUtils.unescapeHtml4(entityType);
							
							String entityID = rs.getString("EntityID");
							entityID = StringEscapeUtils.escapeHtml4(entityID);
							entityID = StringEscapeUtils.unescapeHtml4(entityID);
							
							String entityName = rs.getString("EntityName");
							entityName = StringEscapeUtils.escapeHtml4(entityName);
							entityName = StringEscapeUtils.unescapeHtml4(entityName);
							
							String makerUserName = rs.getString("MakerUserName");
							makerUserName = makerUserName.trim();
							makerUserName = StringEscapeUtils.escapeHtml4(makerUserName);
							makerUserName = StringEscapeUtils.unescapeHtml4(makerUserName);
							
							String checkerUserName = rs.getString("CheckerUserName");
							checkerUserName = rs.wasNull() ? "" : checkerUserName.trim();
							checkerUserName = StringEscapeUtils.escapeHtml4(checkerUserName);
							checkerUserName = StringEscapeUtils.unescapeHtml4(checkerUserName);
							
							String pComments = rs.getString("Comments");
							pComments = rs.wasNull() ? "" : pComments;
							pComments = StringEscapeUtils.escapeHtml4(pComments);
							pComments = StringEscapeUtils.unescapeHtml4(pComments);
							
							String opDateTime = rs.getString("CurrDateTime");
							opDateTime = new SimpleDateFormat("dd/MMM/yyyy HH:mm:ss", Locale.US).format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss" , Locale.US).parse(opDateTime));
							opDateTime = StringEscapeUtils.escapeHtml4(opDateTime);
							opDateTime = StringEscapeUtils.unescapeHtml4(opDateTime);
							
							StringBuffer logBuffer = new StringBuffer();
							logBuffer.append(gen.writeValueOf("Operation", String.valueOf(oper)));//07/01/2013	Sajid Khan	Bug 37345 - Audit log Issue.
							logBuffer.append(gen.writeValueOf("EntityType", entityType));
							logBuffer.append(gen.writeValueOf("EntityName", entityName));
							logBuffer.append(gen.writeValueOf("MakerUserName", makerUserName));
							logBuffer.append(gen.writeValueOf("CheckerUserName", checkerUserName));
							logBuffer.append(gen.writeValueOf("Comments", comments));
							logBuffer.append(gen.writeValueOf("AuthorizationId", String.valueOf(authID)));
							if (oper == 'A' || oper == 'R') {
								if (makerUserName.equalsIgnoreCase(username))
									throw new WFSException(WFSError.WF_OPERATION_FAILED, WFSError.WFS_NORIGHTS, WFSError.WF_TMP, WFSErrorMsg.getMessage(WFSError.WF_OPERATION_FAILED), WFSErrorMsg.getMessage(WFSError.WFS_NORIGHTS));
							}
						if (oper == 'R' || oper == 'I') {
							/*Bugfix#73937*/
							pstmt = con.prepareStatement("Select propertyValue from WFSYSTEMPROPERTIESTABLE " + WFSUtil.getTableLockHintStr(dbType) + " where PropertyKey=?");
							pstmt.setString(1, "AUTHORIZATIONFLAG");
							res1 = pstmt.executeQuery();
							if(res1 != null && res1.next()){
								String authorizationEnabled = res1.getString(1);
								if("N".equalsIgnoreCase(authorizationEnabled)){
									res1.close();
									pstmt.close();
					                mainCode = WFSError.WF_OPERATION_FAILED;
					                subCode = WFSError.WF_AUTHORIZATION_CHECK_IS_DISABLED;
					                subject = WFSErrorMsg.getMessage(mainCode);
					                errType = WFSError.WF_TMP;
					                descr = WFSErrorMsg.getMessage(subCode);
					                throw new WFSException(mainCode, subCode, errType, subject, descr);
								}
							}
							if(res1 != null){
								res1.close();
								res1 = null;
							}
							if(pstmt != null){
								pstmt.close();
								pstmt = null;
							}
							/*Bugfix73937 till here*/
								if(con.getAutoCommit())
									con.setAutoCommit(false);
								String newComments = WFSUtil.TO_STRING(username + (oper == 'R' ? " rejected" : " reinitiated") + " on " 
									+ opDateTime
									+ " with comments: " + comments, true, dbType);
								if(!pComments.equals("")) {
									newComments = newComments + WFSUtil.concat(dbType) + newline(dbType) + WFSUtil.concat(dbType) + WFSUtil.TO_STRING(pComments, true, dbType);
							}
								StringBuffer updatestr = new StringBuffer("Update WFAuthorizationTable Set Status = ");
								updatestr.append(WFSUtil.TO_STRING(String.valueOf(oper), true, dbType));
								if(oper == 'R') {
									updatestr.append(", CheckerUserName = " + WFSUtil.TO_STRING(username, true, dbType));
								}
								updatestr.append(", Comments = " + newComments  + " Where AuthorizationID = " + authID);
								stmt.execute(updatestr.toString());
								//WFSUtil.genLog(engine, con, 0, "", 0, "", WFSConstant.WFL_AuthorizationCompleted, participant.getid(), authID, logBuffer.toString(), 0, username);
								//Bug 37345 - Audit log Issue.
								if (entityType.equals("P")){
									WFSUtil.genAdminLog(engine, con, WFSConstant.WFL_AuthorizationCompleted, Integer.parseInt(entityID), 0, null, userid, username, 0,logBuffer.toString(), null, null);
								}else if(entityType.equals("Q")){
									WFSUtil.genAdminLog(engine, con, WFSConstant.WFL_AuthorizationCompleted, 0, Integer.parseInt(entityID), entityName, userid, username, 0, logBuffer.toString(), null, null);
								}
								if(!con.getAutoCommit()) {
									con.commit();
									con.setAutoCommit(true);
								}
							} else if (oper == 'A') {
								StringBuffer callxml = new StringBuffer(50);
								callname = "";		//Bugzilla Bug 7224
								if(entityType.equals("Q")) {
									rs = stmt.executeQuery("Select ActionID, QueueType, Comments, AllowReassignment, FilterOption, FilterValue, OrderBy, QueueFilter,QueueName From WFAuthorizeQueueDefTable "+WFSUtil.getTableLockHintStr(dbType)+" where AuthorizationID = " + authID);
									if (rs != null && rs.next()) {
										int actionID = rs.getInt("ActionID");
										if (actionID == WFSConstant.WFL_DelQueue) {
											callname = "WFDeleteQueue";
											callxml.append("<QueueInfo>");
											callxml.append(gen.writeValueOf("QueueID", entityID));
											callxml.append("</QueueInfo>");
										} else {
											if (actionID == WFSConstant.WFL_AddQueue) {
												callname = "WMAddQueue";
												callxml.append(gen.writeValueOf("QueueName", entityName));
											} else {
												callname = "WMChangeQueuePropertyEx";
												callxml.append(gen.writeValueOf("QueueID", entityID));
												callxml.append(gen.writeValueOf("QueueName", rs.getString("QueueName")));
											}
											callxml.append(gen.writeValueOf("QueueType", rs.getString("QueueType")));
											callxml.append(gen.writeValueOf("Description", rs.getString("Comments")));
											callxml.append(gen.writeValueOf("AllowReassignment", rs.getString("AllowReassignment")));
											callxml.append(gen.writeValueOf("FilterOption", rs.getString("FilterOption")));
											callxml.append(gen.writeValueOf("FilterValue", rs.getString("FilterValue")));
											if(actionID == WFSConstant.WFL_AddQueue) {
                                                callxml.append(gen.writeValueOf("MakerUserName", makerUserName));
                                            }
											callxml.append(gen.writeValueOf("OrderBy", rs.getString("OrderBy")));
											String queueFilter = rs.getString("QueueFilter");
											queueFilter = rs.wasNull() ? "" : queueFilter;
											callxml.append(gen.writeValueOf("QueueFilter", (queueFilter.equalsIgnoreCase("NULL") ? "" :  queueFilter) ));
										}
									}
									
									if (callname.equals("")) {
										callname = "WMChangeQueuePropertyEx";
										callxml.append(gen.writeValueOf("QueueID", entityID));
									}

									rs = stmt.executeQuery("Select ActionID, ProcessDefID, ActivityID, StreamId From WFAuthorizeQueueStreamTable "+WFSUtil.getTableLockHintStr(dbType)+" where AuthorizationID = " + authID);
									if(rs != null && rs.next()) {
										callxml.append("<StreamOperation><StreamList>");
										do {
											int actionID = rs.getInt("ActionID");
											callxml.append("<StreamInfo>");
											callxml.append(gen.writeValueOf("Operation", getOperationForAction(actionID)));
											callxml.append(gen.writeValueOf("ProcessDefinitionID", rs.getString("ProcessDefID")));
											callxml.append(gen.writeValueOf("ActivityID", rs.getString("ActivityID")));
											callxml.append(gen.writeValueOf("ID", rs.getString("StreamId")));
											callxml.append("</StreamInfo>");
										} while(rs.next());
										callxml.append("</StreamList></StreamOperation>");
									}
									rs = stmt.executeQuery("Select ActionID, Userid, AssignedTillDateTime, QueryFilter From WFAuthorizeQueueUserTable "+WFSUtil.getTableLockHintStr(dbType)+" where AssociationType = 0 and AuthorizationID = " + authID);
									if(rs != null && rs.next()) {
										callxml.append("<UserOperation><UserList>");
										do {
											int actionID = rs.getInt("ActionID");
											callxml.append("<UserInfo>");
											callxml.append(gen.writeValueOf("Operation", getOperationForAction(actionID)));
											callxml.append(gen.writeValueOf("ID", rs.getString("Userid")));
											callxml.append(gen.writeValueOf("AssignedTillDate", rs.getString("AssignedTillDateTime")));
											callxml.append(gen.writeValueOf("QueryFilter", rs.getString("QueryFilter")));
											callxml.append("</UserInfo>");
										} while(rs.next());
										callxml.append("</UserList></UserOperation>");
									}
									rs = stmt.executeQuery("Select ActionID, Userid, AssignedTillDateTime, QueryFilter From WFAuthorizeQueueUserTable "+WFSUtil.getTableLockHintStr(dbType)+" where AssociationType = 1 and AuthorizationID = " + authID);
									if(rs != null && rs.next()) {
										callxml.append("<GroupOperation><GroupList>");
										do {
											int actionID = rs.getInt("ActionID");
											callxml.append("<GroupInfo>");
											callxml.append(gen.writeValueOf("Operation", getOperationForAction(actionID)));
											callxml.append(gen.writeValueOf("ID", rs.getString("Userid")));
											callxml.append(gen.writeValueOf("AssignedTillDate", rs.getString("AssignedTillDateTime")));
											callxml.append(gen.writeValueOf("QueryFilter", rs.getString("QueryFilter")));
											callxml.append("</GroupInfo>");
										}while(rs.next());
										callxml.append("</GroupList></GroupOperation>");
									}
								//	Bug 37731 - AuditTrail for Process State Change for registered Processes .
									callxml.append(gen.writeValueOf("AuthorizationFlag", String.valueOf(authFlag)));
								} else if(entityType.equals("P")) {
									rs = stmt.executeQuery("Select ProcessState From WFAuthorizeProcessDefTable "+WFSUtil.getTableLockHintStr(dbType)+" where AuthorizationID = " + authID);
									if (rs != null && rs.next()) {
										callname = "WMChangeProcessDefinitionState";
										entityID = StringEscapeUtils.escapeHtml4(entityID);
										entityID = StringEscapeUtils.unescapeHtml4(entityID);
										callxml.append(gen.writeValueOf("ProcessDefinitionID", entityID));
										String strProcessState = rs.getString("ProcessState");
										strProcessState = StringEscapeUtils.escapeHtml4(strProcessState);
										strProcessState = StringEscapeUtils.unescapeHtml4(strProcessState);
										callxml.append(gen.writeValueOf("ProcessDefinitionState", strProcessState));
									}
									//Bug 37731 - AuditTrail for Process State Change for registered Processes .
									callxml.append(gen.writeValueOf("AuthorizationFlag", String.valueOf(authFlag)));
								}
								
								if(!callname.equals("")) {
									StringBuffer strBuff = new StringBuffer(100);
									strBuff.append("<?xml version=\"1.0\"?><" + callname + "_Input>");
									strBuff.append("<Option>" + callname + "</Option>");
									strBuff.append("<EngineName>" + engine + "</EngineName>");
									strBuff.append("<SessionId>" + sessionID + "</SessionId>");
									strBuff.append(callxml);
									strBuff.append("</" + callname + "_Input>");
									parser.setInputXML(strBuff.toString());
									parser.setInputXML(com.newgen.omni.jts.srvr.WFFindClass.getReference().execute(callname, engine, con, parser, gen));
									int status = parser.getIntOf("MainCode", 0, false);
									if(status != 0){
										throw new WFSException(WFSError.WF_OPERATION_FAILED, status, WFSError.WF_TMP, WFSErrorMsg.getMessage(WFSError.WF_OPERATION_FAILED), parser.getValueOf("Description"));
									}
								}
							}
							
							if (oper == 'A' || oper == 'D'|| oper =='C') {
								if (con.getAutoCommit()) {
									con.setAutoCommit(false);
								}
								stmt.execute("Delete From WFAuthorizationTable Where AuthorizationID = " + authID);
								if (entityType.equals("Q")) {
									stmt.execute("Delete From WFAuthorizeQueueDefTable Where AuthorizationID = " + authID);
									stmt.execute("Delete From WFAuthorizeQueueStreamTable Where AuthorizationID = " + authID);
									stmt.execute("Delete From WFAuthorizeQueueUserTable Where AuthorizationID = " + authID);
								} else if(entityType.equals("P")) {
									stmt.execute("Delete From WFAuthorizeProcessDefTable Where AuthorizationID = " + authID);
								}
							/*	WFSUtil.genLog(engine, con, 0, "", 0, "", WFSConstant.WFL_AuthorizationCompleted, participant.getid(), authID, logBuffer.toString(), 0, username);actionid*/
							//07/01/2013	Sajid Khan	Bug 37345 - Audit log Issue.
							if (entityType.equals("P")){
								WFSUtil.genAdminLog(engine, con, WFSConstant.WFL_AuthorizationCompleted, Integer.parseInt(entityID), 0, null, userid, username, 0, logBuffer.toString(), null, null);
							}else if(entityType.equals("Q")){
								WFSUtil.genAdminLog(engine, con, WFSConstant.WFL_AuthorizationCompleted, 0, Integer.parseInt(entityID), entityName, userid, username, 0, logBuffer.toString(), null, null);
							}
								if(!con.getAutoCommit()) {
									con.commit();
									con.setAutoCommit(true);
								}
							}
						} else {
							throw new WFSException(WFSError.WFS_INVALID_AUTHORIZATIONID, WFSError.WM_SUCCESS, WFSError.WF_TMP, WFSErrorMsg.getMessage(WFSError.WFS_INVALID_AUTHORIZATIONID), WFSErrorMsg.getMessage(WFSError.WM_SUCCESS));
						}
					} catch(Exception e) {
						WFSUtil.printErr(engine,"", e);
						failedList.append("<FailedAuthorization>");
						failedList.append(gen.writeValueOf("AuthorizationID", String.valueOf(authID)));
						if(!callname.equals(""))
							failedList.append(gen.writeValueOf("CallName", callname));
						failedList.append(gen.writeValueOf("FailureDescription", e.getMessage()));
						failedList.append("</FailedAuthorization>");
					} finally {
						try {
							if(!con.getAutoCommit()) {
								con.rollback();
								con.setAutoCommit(true);
							}
						} catch(Exception e) {}
					}
				}
            } else {
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            if(mainCode == 0) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFCompleteAuthorization"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(gen.writeValueOf("Comments", comments));
				outputXML.append(gen.writeValueOf("FailedList", failedList.toString()));
                outputXML.append(gen.closeOutputFile("WFCompleteAuthorization"));
            }
        } catch (SQLException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
                        + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (WFSException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = e.getMainErrorCode();
            subCode = e.getSubErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = WFSErrorMsg.getMessage(subCode);
        } catch (JTSException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
        } catch (Exception e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
            try {
				if(!con.getAutoCommit()) {
                    con.rollback();
                    con.setAutoCommit(true);
                }
            } catch (Exception e) {
            	WFSUtil.printErr(engine,"", e);
            }
            try{
				if(rs!=null){
					rs.close();
					rs=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
            try{
				if(res1!=null){
					res1.close();
					res1=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
		try{
				if(stmt!=null){
					stmt.close();
					stmt=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
			try{
				if(pstmt!=null){
					pstmt.close();
					pstmt=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}

           
        }
        if (mainCode != 0) {
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        
        return outputXML.toString();
    }

	
	private String getOperationForAction(int actionID) {
		switch(actionID) {
			case WFSConstant.WFL_AddWorkStepToQueue:
			case WFSConstant.WFL_AddUserToQueue:
				return "I";

			case WFSConstant.WFL_DeleteWorkStepFromQueue:
			case WFSConstant.WFL_DeleteUserFromQueue:
				return "D";

			case WFSConstant.WFL_QueryFilter_Set:
				return "U";
		}
        return null;
    }

	private class AuthorizationInfo	{
		public int authID;
		public char entityType;
		public int entityID;
		public String entityName;
		public String actionDateTime;
		public String makerUserName;
		public String checkerUserName;
		public String comments;
		public String status;
		public boolean isQueueMemberOperation;
	}

	 /* *************************************************************
	 * Function Name    : newline
	 * Author			: Vikram Kumbhar
	 * Date Written     : 29/12/2007
	 * Input Parameters : int -> dbType
	 * Output Parameters: NONE
	 * Return Value     : String -> New line character representation
	 * Description      : Returns the new line character based on the Type of Database
	 * *************************************************************
	 */
    private String newline(int dbType) throws JTSException {
        StringBuffer outputXml = new StringBuffer(100);
        switch (dbType) {
            case JTSConstant.JTS_MSSQL:
                outputXml.append(" char(10) ");
                break;
            case JTSConstant.JTS_ORACLE:
                outputXml.append(" chr(10) ");
                break;
            case JTSConstant.JTS_POSTGRES:
                outputXml.append(" chr(10) ");
                break;
        }
        return outputXml.toString();
    }
    //----------------------------------------------------------------------------------------------------
    //	Function Name 				    :	WFUpdateRoutingInfo
    //	Date Written (DD/MM/YYYY)	    :	27/03/2009
    //	Author						    :	Nishant Kumar Singh
    //	Input Parameters		    	:	Connection , XMLParser , XMLGenerator
    //	Output Parameters			    :   none
    //	Return Values				    :	String
    //	Description					    :   [WFS_7.1_006] Updating WFRoutingServerInfo Table with a valid SessionId
    //----------------------------------------------------------------------------------------------------

//    public String WFUpdateRoutingInfo(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
//
//        int subCode = 0;
//        int mainCode = 0;
//        String descr = null;
//        String subject = null;
//        String errType = WFSError.WF_TMP;
//        StringBuffer outputXML = null;
//        Statement stmt = null;
//        ResultSet rs = null;
//        String engineName = parser.getValueOf("EngineName", "", false);
//        try {
//            StringBuffer strBuff = new StringBuffer();
//            int sessionId = parser.getIntOf("SessionId", 0, true);
//            String inDmsSessionId = parser.getValueOf("DMSSessionId", "", false);
//            String dmsSessionId = "-1";
//            int dbType = ServerProperty.getReference().getDBType(engineName);
//            char omniServiceFlag = parser.getCharOf("OmniService", 'N', true);
//            boolean updateFlag = false;	 //WFS_7.1_022
//            WFParticipant participant = null;
//            if (omniServiceFlag == 'Y') {
//                participant = new WFParticipant(0, "System", 'P', "SERVER", Locale.getDefault().toString());
//            } else {
//                participant = WFSUtil.WFCheckSession(con, sessionId);
//            }
//            if (participant != null) {
//                if (con.getAutoCommit()) {
//                    con.setAutoCommit(false);
//                }
//                stmt = con.createStatement();
//                strBuff.append("Select dmsUserName, dmsUserPassword, dmsSessionId From WFRoutingServerInfo " + WFSUtil.getLockPrefixStr(dbType) + WFSUtil.getLockSuffixStr(dbType));
//                rs = stmt.executeQuery(strBuff.toString());
//                if (rs != null && rs.next()) {
//                    String dmsUserName = rs.getString("dmsUserName");
//                    String dmsUserPassword = Utility.decode(rs.getString("dmsUserPassword"));
//                    dmsSessionId = rs.getString("dmsSessionId");
//                    if (dmsSessionId.equalsIgnoreCase(inDmsSessionId)) {  //WFS_7.1_022
//                        updateFlag = true;
//                    } else {
//                        int result = stmt.executeUpdate("Update WFSessionView Set AccessDateTime = " + WFSUtil.getDate(dbType) + ", StatusFlag = N'Y' where SessionID = " + dmsSessionId);
//                        if (result <= 0) {
//                            updateFlag = true;
//                        }
//                    }
//                    if (updateFlag) {
//                        StringBuffer tempXML = new StringBuffer();
//                        tempXML.append("<?xml version=\"1.0\"?>");
//                        tempXML.append("<NGOConnectCabinet_Input>");
//                        tempXML.append("<Option>NGOConnectCabinet</Option>");
//                        tempXML.append("<CabinetName>" + engineName + "</CabinetName>");
//                        tempXML.append("<UserName>" + dmsUserName + "</UserName>");
//                        tempXML.append("<UserPassword>" + dmsUserPassword + "</UserPassword>");
//                        tempXML.append("<UserType>S</UserType>");
//                        tempXML.append("<UserExist>N</UserExist>");
//                        tempXML.append("</NGOConnectCabinet_Input>");
//                        parser.setInputXML(tempXML.toString());
//                        parser.setInputXML(WFFindClass.getReference().execute("NGOConnectCabinet", engineName, con, parser, gen));
//                        if (parser.getValueOf("Status").equalsIgnoreCase("0")) {
//                            strBuff.setLength(0);
//                            dmsSessionId = parser.getValueOf("UserDBId");
//                            strBuff.append("Update WFRoutingServerInfo set dmsSessionId = " + WFSUtil.TO_STRING(dmsSessionId, true, dbType));
//                            int res = stmt.executeUpdate(strBuff.toString());
//                            if (res > 0) {
//                                if (!con.getAutoCommit()) {
//                                    con.commit();
//                                    con.setAutoCommit(true);
//                                }
//                            } else {
//                                if (!con.getAutoCommit()) {
//                                    con.rollback();
//                                    con.setAutoCommit(true);
//                                }
//                                mainCode = WFSError.WF_OPERATION_FAILED;
//                                subCode = 0;
//                                subject = WFSErrorMsg.getMessage(mainCode);
//                                descr = WFSErrorMsg.getMessage(subCode);
//                                errType = WFSError.WF_TMP;
//                            }
//
//                        } else {
//                            if (!con.getAutoCommit()) {
//                                con.rollback();
//                                con.setAutoCommit(true);
//                            }
//                            mainCode = WFSError.WF_OPERATION_FAILED;
//                            subCode = 0;
//                            subject = WFSErrorMsg.getMessage(mainCode);
//                            descr = WFSErrorMsg.getMessage(subCode);
//                            errType = WFSError.WF_TMP;
//                        }
//                    }
//                } else {
//                    mainCode = WFSError.WM_NO_MORE_DATA;
//                    subCode = 0;
//                    subject = WFSErrorMsg.getMessage(mainCode);
//                    descr = WFSErrorMsg.getMessage(subCode);
//                    errType = WFSError.WF_TMP;
//                }
//                if (rs != null) {
//                    rs.close();
//                    rs = null;
//                }
//                if (stmt != null) {
//                    stmt.close();
//                    stmt = null;
//                }
//
//            } else {
//                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
//                subCode = 0;
//                subject = WFSErrorMsg.getMessage(mainCode);
//                descr = WFSErrorMsg.getMessage(subCode);
//                errType = WFSError.WF_TMP;
//            }
//            if (mainCode == 0) {
//                outputXML = new StringBuffer(500);
//                outputXML.append(gen.createOutputFile("WFUpdateRoutingInfo"));
//                outputXML.append("<Exception><MainCode>0</MainCode></Exception>");
//                outputXML.append("<DMSSessionId>" + dmsSessionId + "</DMSSessionId>");
//                outputXML.append(gen.closeOutputFile("WFUpdateRoutingInfo"));
//            }
//        } catch (SQLException e) {
//            WFSUtil.printErr(engineName,"",e);
//            mainCode = WFSError.WF_OPERATION_FAILED;
//            subCode = WFSError.WFS_SQL;
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_FAT;
//            if (e.getErrorCode() == 0) {
//                if (e.getSQLState().equalsIgnoreCase("08S01")) {
//                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
//                }
//            } else {
//                descr = e.getMessage();
//            }
//        } catch (NumberFormatException e) {
//            WFSUtil.printErr(engineName,"",e);
//            mainCode = WFSError.WF_OPERATION_FAILED;
//            subCode = WFSError.WFS_ILP;
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_TMP;
//            descr = e.toString();
//        } catch (NullPointerException e) {
//            WFSUtil.printErr(engineName,"",e);
//            mainCode = WFSError.WF_OPERATION_FAILED;
//            subCode = WFSError.WFS_SYS;
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_TMP;
//            descr = e.toString();
//        } catch (WFSException e) {
//            mainCode = WFSError.WM_NO_MORE_DATA;
//            subCode = 0;
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_TMP;
//            descr = WFSErrorMsg.getMessage(subCode);
//        } catch (JTSException e) {
//            mainCode = WFSError.WF_OPERATION_FAILED;
//            subCode = e.getErrorCode();
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_TMP;
//            descr = e.getMessage();
//        } catch (Exception e) {
//            WFSUtil.printErr(engineName,"",e);
//            mainCode = WFSError.WF_OPERATION_FAILED;
//            subCode = WFSError.WFS_EXP;
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_TMP;
//            descr = e.toString();
//        } catch (Error e) {
//            WFSUtil.printErr(engineName,"",e);
//            mainCode = WFSError.WF_OPERATION_FAILED;
//            subCode = WFSError.WFS_EXP;
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_TMP;
//            descr = e.toString();
//        } finally {
//            try {
//                if (rs != null) {
//                    rs.close();
//                    rs = null;
//                }
//                if (stmt != null) {
//                    stmt.close();
//                    stmt = null;
//                }
//                if (!con.getAutoCommit()) {
//                    con.rollback();
//                    con.setAutoCommit(true);
//                }
//            } catch (Exception e) {
//            }
//            if (mainCode != 0) {
//                throw new WFSException(mainCode, subCode, errType, subject, descr);
//            }
//        }
//        return outputXML.toString();
//    }
	
	//----------------------------------------------------------------------------------------------------
    //	Function Name 				    :	WFGetServerTimeZone
    //	Date Written (DD/MM/YYYY)	    :	27/07/2009
    //	Author						    :	Saurabh Kamal
    //	Input Parameters		    	:	Connection , XMLParser , XMLGenerator
    //	Output Parameters			    :   none
    //	Return Values				    :	String
    //	Description					    :   WFS_8.0_019 : Provision  for Time Zone support 
    //----------------------------------------------------------------------------------------------------	
	
//	public String WFGetServerTimeZone(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
//
//        int subCode = 0;
//        int mainCode = 0;
//        String descr = null;
//        String subject = null;
//        String errType = WFSError.WF_TMP;
//        StringBuffer outputXML = null;
//        PreparedStatement pstmt = null;
//        ResultSet rs = null;
//        String engine ="";
//		try {			
//            engine = parser.getValueOf("EngineName");
//            int dbType = ServerProperty.getReference().getDBType(engine);			
//			StringBuffer tempXml = new StringBuffer(100);		           		
//			
//			tempXml.append("<DBServer>");
//			tempXml.append(gen.writeValueOf("OffSet", WFSUtil.getTimeZoneInfo(con,dbType,parser)));
//			tempXml.append("</DBServer>");
//							
//			if (mainCode == 0) {
//                outputXML = new StringBuffer(500);
//                outputXML.append(gen.createOutputFile("WFGetServerTimeZone"));
//                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
//                outputXML.append(tempXml);
//                outputXML.append(gen.closeOutputFile("WFGetServerTimeZone"));
//            }		
//			
//		} catch (NullPointerException e) {
//            WFSUtil.printErr(engine,"", e);
//            mainCode = WFSError.WF_OPERATION_FAILED;
//            subCode = WFSError.WFS_SYS;
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_TMP;
//            descr = e.toString();
//        }  catch (Exception e) {
//            WFSUtil.printErr(engine,"", e);
//            mainCode = WFSError.WF_OPERATION_FAILED;
//            subCode = WFSError.WFS_EXP;
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_TMP;
//            descr = e.toString();
//        } catch (Error e) {
//            WFSUtil.printErr(engine,"", e);
//            mainCode = WFSError.WF_OPERATION_FAILED;
//            subCode = WFSError.WFS_EXP;
//            subject = WFSErrorMsg.getMessage(mainCode);
//            errType = WFSError.WF_TMP;
//            descr = e.toString();
//        } finally {
//            try {
//                if (pstmt != null) {
//                    pstmt.close();
//                    pstmt = null;
//                }
//            } catch (Exception e) {}
//            if (mainCode != 0) {
//                throw new WFSException(mainCode, subCode, errType, subject, descr);
//            }
//        }		
//		return outputXML.toString();
//	}
	//----------------------------------------------------------------------------------------------------
	//	Function Name 				:	WFSetExportCabinetInfo
	//	Date Written (DD/MM/YYYY)	:	31/12/2008
	//	Author						:	Preeti Awasthi
	//	Input Parameters			:	Connection , XMLParser , XMLGenerator
	//	Output Parameters			:   none
	//	Return Values				:	String
	//	Description					:   Set export cabinet info in table
	//----------------------------------------------------------------------------------------------------
	public String WFSetExportCabinetInfo ( Connection con, XMLParser parser, XMLGenerator gen) throws JTSException , WFSException
	{
		 StringBuffer outputXML = new StringBuffer("");
		PreparedStatement pstmt	= null;
		int		mainCode		= 0;
		int		subCode			= 0;
		int 	actionid 		= 0;
		String	subject			= null;
		String	descr			= null;
		String	errType			= WFSError.WF_TMP;
		String strQuery			= "";
		Statement stmt		    =  null;
		ResultSet rs            = null;
        String	engine			= parser.getValueOf("EngineName");
		try
		{
			int	sessionID		= parser.getIntOf("SessionId",0,false );
			int dbType			= ServerProperty.getReference().getDBType(engine);
			WFParticipant ps	= WFSUtil.WFCheckSession(con, sessionID);
			char operation		= parser.getCharOf("Operation", 'I', false);
			int start			= parser.getStartIndex("SourceCabinet", 0, 0);
			int end				= parser.getEndIndex("SourceCabinet", start, 0);
			String sourceDBUser	= parser.getValueOf("DBUser", start, end);
			String sourceDBPass_word	= parser.getValueOf("DBPassword", start, end);
			sourceDBPass_word = Utility.encode(sourceDBPass_word);
			String keepSourceIS = parser.getValueOf("KeepSourceIS", start, end);

			start		= parser.getStartIndex("TargetCabinet", 0, 0);
			end			= parser.getEndIndex("TargetCabinet", start, 0);

			String targetUserName	= parser.getValueOf("DBUser", start, end);
			String targetPass_word	= parser.getValueOf("DBPassword", start, end);
			targetPass_word = Utility.encode(targetPass_word);
			String webServerInfo	= parser.getValueOf("WebServerInfo", start, end);
			String appServerIP		= parser.getValueOf("AppServerIP", start, end);
			String appServerType	= parser.getValueOf("AppServerType", start, end);
			String appServerPort	= parser.getValueOf("AppServerPort", start, end);
			String targetCabinetName = parser.getValueOf("EngineName", start, end);
			String siteId			= parser.getValueOf("SiteId", start, end);
			String volumeId			= parser.getValueOf("VolumeId", start, end);
			
			if(appServerPort.length()<=0)
				appServerPort = "0";
			if(siteId.length()<=0)
				siteId="0";
			if(volumeId.length()<=0)
				volumeId = "0";
			if(ps != null)
			{
				switch (operation)
				{
					case 'I':
						stmt = con.createStatement();
						rs   = stmt.executeQuery(" Select * from WFExportInfoTable "+WFSUtil.getTableLockHintStr(dbType));
						if(rs.next()) 
						{
							mainCode = WFSError.WF_OPERATION_FAILED;
							subCode = WFSError.WM_INVALID_OPERATION_TYPE;
							subject = WFSErrorMsg.getMessage(mainCode);
							errType = WFSError.WF_TMP;
							descr =  WFSErrorMsg.getMessage(subCode);
							rs.close();
							rs = null;
							stmt.close();
							stmt = null;
						}
						else
						{
							strQuery = "INSERT Into WFExportInfoTable (SourceUserName, SourcePassword, KeepSourceIS, TargetCabinetName,";
							strQuery += " AppServerIP, AppServerPort ,TargetUserName , TargetPassword ,";
							strQuery += " SiteId, VolumeId, WebServerInfo, IsEncrypted)";
							strQuery += " values(?,?,?,?,?,?,?,?,?,?,?,'Y')";
							pstmt = con.prepareStatement(strQuery);
							WFSUtil.DB_SetString(1, sourceDBUser.trim() , pstmt , dbType);
							WFSUtil.DB_SetString(2, sourceDBPass_word.trim() , pstmt , dbType);
							WFSUtil.DB_SetString(3, keepSourceIS.trim() , pstmt , dbType);
							WFSUtil.DB_SetString(4, targetCabinetName.trim() , pstmt , dbType);
							WFSUtil.DB_SetString(5, appServerIP.trim() , pstmt , dbType);
							pstmt.setInt(6,  Integer.parseInt(appServerPort));
							WFSUtil.DB_SetString(7, targetUserName.trim() , pstmt , dbType);
							WFSUtil.DB_SetString(8, targetPass_word.trim() , pstmt , dbType);
							pstmt.setInt(9, Integer.parseInt(siteId));
							pstmt.setInt(10, Integer.parseInt(volumeId));
							WFSUtil.DB_SetString(11, webServerInfo.trim() , pstmt , dbType);
							pstmt.executeUpdate();
						}
						actionid = WFSConstant.WFL_SetExportCabinet;
						break;
					case 'D':
						pstmt = con.prepareStatement("delete from WFExportInfoTable");
						pstmt.execute();
						pstmt.close();
						pstmt = null;
						actionid = WFSConstant.WFL_DeleteExportCabinet;
						break;
					case 'U':
						strQuery = "Update WFExportInfoTable set SourceUserName = ?, SourcePassword=?, KeepSourceIS=?, TargetCabinetName=?, AppServerIP=?, AppServerPort=?, TargetUserName=?, TargetPassword=?, SiteId=?, VolumeId=?, WebServerInfo=?, IsEncrypted = 'Y'";
						pstmt = con.prepareStatement(strQuery);
						WFSUtil.DB_SetString(1, sourceDBUser.trim() , pstmt , dbType);
						WFSUtil.DB_SetString(2, sourceDBPass_word.trim() , pstmt , dbType);
						WFSUtil.DB_SetString(3, keepSourceIS.trim() , pstmt , dbType);
						WFSUtil.DB_SetString(4, targetCabinetName.trim() , pstmt , dbType);
						WFSUtil.DB_SetString(5, appServerIP.trim() , pstmt , dbType);
						pstmt.setInt(6,  Integer.parseInt(appServerPort));
						WFSUtil.DB_SetString(7, targetUserName.trim() , pstmt , dbType);
						WFSUtil.DB_SetString(8, targetPass_word.trim() , pstmt , dbType);
						pstmt.setInt(9, Integer.parseInt(siteId));
						pstmt.setInt(10, Integer.parseInt(volumeId));
						WFSUtil.DB_SetString(11, webServerInfo.trim() , pstmt , dbType);
						int iUpdateCnt = pstmt.executeUpdate();
						if(iUpdateCnt <=0)								
						{
							mainCode = WFSError.WF_OPERATION_FAILED;
							subCode = WFSError.WM_INVALID_OPERATION_TYPE;
							subject = WFSErrorMsg.getMessage(mainCode);
							errType = WFSError.WF_TMP;
							descr =  WFSErrorMsg.getMessage(subCode);
						}
						actionid = WFSConstant.WFL_ModifyExportCabinet;
						break;
					}
				}
				else 
				{	
					mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
					subCode  = 0;
					subject  = WFSErrorMsg.getMessage(mainCode);
					descr    = WFSErrorMsg.getMessage(subCode);
					errType  = WFSError.WF_TMP;
				}
				if(mainCode == 0) {
					WFSUtil.genAdminLog(engine, con, actionid, 0, 0, null, ps.getid(), ps.getname(), 0, targetCabinetName, null, null);
					outputXML = new StringBuffer(500);
					outputXML.append(gen.createOutputFile("WFSetExportCabinetInfo"));
					outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
					outputXML.append(gen.closeOutputFile("WFSetExportCabinetInfo"));
			}
		} catch(SQLException e) {
			WFSUtil.printErr(engine,"",e);
			mainCode = WFSError.WM_INVALID_OPERATION_TYPE;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if(e.getErrorCode() == 0) {
			if(e.getSQLState().equalsIgnoreCase("08S01"))
			  descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
				+ ")";
			} else 
			descr = e.getMessage();
		} catch(NumberFormatException e) {
			WFSUtil.printErr(engine,"",e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode  = WFSError.WFS_ILP;
			subject  = WFSErrorMsg.getMessage(mainCode);
			errType  = WFSError.WF_TMP;
			descr = e.toString();
		} catch(NullPointerException e) {
			WFSUtil.printErr(engine,"",e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(Exception e) {
			WFSUtil.printErr(engine,"",e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(Error e) {
			WFSUtil.printErr(engine,"",e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} finally {
			try {
				if(rs != null) {
					rs.close();
					rs = null;
		   	     }
				if(pstmt != null) {
					pstmt.close();
					pstmt= null;   
				}
				if(stmt != null) {
					stmt.close();
					stmt = null;
				}
			} catch(Exception e) {}
			
		}
		if(mainCode != 0) 
			throw new WFSException(mainCode, subCode, errType, subject, descr);
		return outputXML.toString();
	}
	//----------------------------------------------------------------------------------------------------
	//	Function Name 				:	WFGetExportCabinetInfo
	//	Date Written (DD/MM/YYYY)	:	31/12/2008
	//	Author						:	Preeti Awasthi
	//	Input Parameters			:	Connection , XMLParser , XMLGenerator
	//	Output Parameters			:   none
	//	Return Values				:	String
	//	Description					:   Get export cabinet info in table
	//----------------------------------------------------------------------------------------------------
//	public String WFGetExportCabinetInfo ( Connection con, XMLParser parser, XMLGenerator gen) throws JTSException , WFSException
//	{
//		StringBuffer outputXML	= null;
//		int	mainCode		    = 0;
//		int	subCode			    = 0;
//		String	subject			= null;
//		String	descr			= null;
//		Statement stmt		    = null;
//		String	errType			= WFSError.WF_TMP;
//		String strQuery			= "";
//		StringBuffer tempXml    = new StringBuffer(100);
//		ResultSet rs            = null;
//		String dbPwd = null;
//                boolean isEncrypted = false;
//        String	engine    		= parser.getValueOf("EngineName");
//		try
//		{
//			int	sessionID     =	parser.getIntOf("SessionId",0,false );					
//			int dbType        = ServerProperty.getReference().getDBType(engine);
//			WFParticipant ps  = WFSUtil.WFCheckSession(con, sessionID);
//			if(ps != null)
//			{
//				stmt = con.createStatement();
//				rs   = stmt.executeQuery(" Select * from WFExportInfoTable "+WFSUtil.getTableLockHintStr(dbType));
//				if(rs.next())
//				{
//					tempXml.append("<SourceCabinet>\n");
//					tempXml.append(gen.writeValueOf("DBUser", rs.getString(1)));
//					dbPwd = rs.getString(2);
//                                        isEncrypted = rs.getString("ISEncrypted").equalsIgnoreCase("Y");
//					if(dbPwd == null || dbPwd.equals(""))
//						tempXml.append("<DBPassword></DBPassword>");
//					else
//                                         {
//                                         if(isEncrypted)
//                                         dbPwd = Utility.decode(dbPwd);
//						tempXml.append(gen.writeValueOf("DBPassword",dbPwd));
//                                        }
//					tempXml.append(gen.writeValueOf("KeepSourceIS", rs.getString(3)));
//					tempXml.append("</SourceCabinet>");
//					tempXml.append("<TargetCabinet>\n");
//					tempXml.append(gen.writeValueOf("EngineName", rs.getString(4)));
//					tempXml.append(gen.writeValueOf("AppServerIP", rs.getString(5)));
//					tempXml.append(gen.writeValueOf("AppServerPort", String.valueOf(rs.getInt(6))));
//					tempXml.append(gen.writeValueOf("DBUser", rs.getString(7)));
//					dbPwd = rs.getString(8);
//					if(dbPwd == null || dbPwd.equals(""))
//						tempXml.append("<DBPassword></DBPassword>");
//					else
//                                         {
//                                        if(isEncrypted)
//                                        dbPwd = Utility.decode(dbPwd);
//						tempXml.append(gen.writeValueOf("DBPassword",dbPwd));
//                                        }
//                                                tempXml.append(gen.writeValueOf("SiteId", String.valueOf(rs.getInt(9))));
//					tempXml.append(gen.writeValueOf("VolumeId", String.valueOf(rs.getInt(10))));
//					tempXml.append(gen.writeValueOf("WebServerInfo", rs.getString(11)));
//					tempXml.append("</TargetCabinet>");
//					rs.close();
//					rs = null;
//				}
//				else
//				{
//					mainCode = WFSError.WM_NO_MORE_DATA;
//					subCode  = 0;
//					subject  = WFSErrorMsg.getMessage(mainCode);
//				}
//			}
//			else 
//			{	
//				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
//				subCode  = 0;
//				subject  = WFSErrorMsg.getMessage(mainCode);
//				descr    = WFSErrorMsg.getMessage(subCode);
//				errType  = WFSError.WF_TMP;
//			}
//			if(mainCode == 0) {
//				outputXML = new StringBuffer(500);
//				outputXML.append(gen.createOutputFile("WFGetExportCabinetInfo"));
//				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
//				outputXML.append(tempXml);
//				outputXML.append(gen.closeOutputFile("WFGetExportCabinetInfo"));
//			}
//		} catch(SQLException e) {
//			WFSUtil.printErr(engine,"",e);
//			mainCode = WFSError.WF_OPERATION_FAILED;
//			subCode  = WFSError.WFS_SQL;
//			subject  = WFSErrorMsg.getMessage(mainCode);
//			errType  = WFSError.WF_FAT;
//  		    if(e.getErrorCode() == 0) {
//			if(e.getSQLState().equalsIgnoreCase("08S01")) 
//				descr = (new JTSSQLError(e.getSQLState())).getMessage()+"(SQL State : " + e.getSQLState()+ ")";
//			}
//			else 
//			descr = e.getMessage();
//		} catch(NumberFormatException e) {
//			WFSUtil.printErr(engine,"",e);
//			mainCode = WFSError.WF_OPERATION_FAILED;
//			subCode = WFSError.WFS_ILP;
//			subject = WFSErrorMsg.getMessage(mainCode);
//			errType = WFSError.WF_TMP;
//			descr = e.toString();
//		} catch(NullPointerException e) {
//			WFSUtil.printErr(engine,"",e);
//			mainCode = WFSError.WF_OPERATION_FAILED;
//			subCode = WFSError.WFS_SYS;
//			subject = WFSErrorMsg.getMessage(mainCode);
//			errType = WFSError.WF_TMP;
//			descr = e.toString();
//		} catch(Exception e) {
//			WFSUtil.printErr(engine,"",e);
//			mainCode = WFSError.WF_OPERATION_FAILED;
//			subCode = WFSError.WFS_EXP;
//			subject = WFSErrorMsg.getMessage(mainCode);
//			errType = WFSError.WF_TMP;
//			descr = e.toString();
//		} catch(Error e) {
//			WFSUtil.printErr(engine,"",e);
//			mainCode = WFSError.WF_OPERATION_FAILED;
//			subCode = WFSError.WFS_EXP;
//			subject = WFSErrorMsg.getMessage(mainCode);
//			errType = WFSError.WF_TMP;
//			descr = e.toString();
//		} finally {
//			try {
//				if(rs != null){
//					rs.close();
//					rs = null;
//		  	     }
//				if(stmt != null) {
//					stmt.close();
//					stmt= null;    
//				}	
//			} catch(Exception e) {}
//			if(mainCode != 0) 
//					throw new WFSException(mainCode, subCode, errType, subject, descr);
//		  }
//		  return outputXML.toString();
//	}
	//----------------------------------------------------------------------------------------------------
	//	Function Name 				    :	WFCheckPurgeUserSession
	//	Date Written (DD/MM/YYYY)	    :	31/12/2008
	//	Author						    :	Preeti Awasthi
	//	Input Parameters		    	:	Connection , XMLParser , XMLGenerator
	//	Output Parameters			    :   none
	//	Return Values				    :	String
	//	Description					    :   Get Next Workitem for Archive
	//----------------------------------------------------------------------------------------------------
//	public String WFCheckPurgeUserSession(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
//		StringBuffer outputXML = null;
//		Statement stmt = null;
//		ResultSet rs = null;
//		int mainCode = 0;
//		int subCode = 0;
//		String subject = null;
//		String descr = null;
//		String errType = WFSError.WF_TMP;
//		StringBuffer tempXml = new StringBuffer(500);
//		int cssession = 0;
//        String engine = parser.getValueOf("EngineName");
//		try {
//			int sessionID = parser.getIntOf("SessionId", 0, false);
//			String csName = parser.getValueOf("CSName");
//			int dbType = ServerProperty.getReference().getDBType(engine);
//			WFParticipant participant =WMUser.WFCheckUpdateSession(con, sessionID, dbType);//WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
//			if(participant != null  && participant.gettype() == 'U') {
//				int userid = participant.getid();
//				String username = participant.getname();
//				stmt = con.createStatement();
//				if(csName != null && !csName.trim().equals("")){
//					rs = stmt.executeQuery(" Select SessionID from PSRegisterationTable where Type = 'C' AND PSName=" +WFSUtil.TO_STRING(csName.trim(), true, dbType));
//					if (rs.next())
//						cssession = rs.getInt(1);
//					if (rs != null) rs.close();
//				}
//				stmt.close();
//			}
//			else {
//				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
//				subCode = 0;
//				subject = WFSErrorMsg.getMessage(mainCode);
//				descr = WFSErrorMsg.getMessage(subCode);
//				errType = WFSError.WF_TMP;
//			}
//			if(mainCode == 0) {
//				outputXML = new StringBuffer(500);
//				outputXML.append(gen.createOutputFile("WFCheckPurgeUserSession"));
//				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
//				outputXML.append(gen.writeValueOf("CSSession", String.valueOf(cssession)));
//				outputXML.append(tempXml);
//				outputXML.append(gen.closeOutputFile("WFCheckPurgeUserSession"));
//			}		
//		} catch(SQLException e) {
//			WFSUtil.printErr(engine,"",e);
//			mainCode = WFSError.WF_OPERATION_FAILED;
//			subCode = WFSError.WFS_SQL;
//			subject = WFSErrorMsg.getMessage(mainCode);
//			errType = WFSError.WF_FAT;
//			if(e.getErrorCode() == 0) {
//				if(e.getSQLState().equalsIgnoreCase("08S01")) {
//					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()+ ")";
//				}
//			} 
//		else
//			descr = e.getMessage();
//		} catch(NumberFormatException e) {
//		  WFSUtil.printErr(engine,"",e);
//		  mainCode = WFSError.WF_OPERATION_FAILED;
//		  subCode = WFSError.WFS_ILP;
//		  subject = WFSErrorMsg.getMessage(mainCode);
//		  errType = WFSError.WF_TMP;
//		  descr = e.toString();
//		} catch(NullPointerException e) {
//		  WFSUtil.printErr(engine,"",e);
//		  mainCode = WFSError.WF_OPERATION_FAILED;
//		  subCode = WFSError.WFS_SYS;
//		  subject = WFSErrorMsg.getMessage(mainCode);
//		  errType = WFSError.WF_TMP;
//		  descr = e.toString();
//		} catch(WFSException e) {
//		  mainCode = WFSError.WM_NO_MORE_DATA;
//		  subCode = 0;
//		  subject = WFSErrorMsg.getMessage(mainCode);
//		  errType = WFSError.WF_TMP;
//		  descr = WFSErrorMsg.getMessage(subCode);
//		} catch(JTSException e) {
//		  mainCode = WFSError.WF_OPERATION_FAILED;
//		  subCode = e.getErrorCode();
//		  subject = WFSErrorMsg.getMessage(mainCode);
//		  errType = WFSError.WF_TMP;
//		  descr = e.getMessage();
//		} catch(Exception e) {
//		  WFSUtil.printErr(engine,"",e);
//		  mainCode = WFSError.WF_OPERATION_FAILED;
//		  subCode = WFSError.WFS_EXP;
//		  subject = WFSErrorMsg.getMessage(mainCode);
//		  errType = WFSError.WF_TMP;
//		  descr = e.toString();
//		} catch(Error e) {
//		  WFSUtil.printErr(engine,"",e);
//		  mainCode = WFSError.WF_OPERATION_FAILED;
//		  subCode = WFSError.WFS_EXP;
//		  subject = WFSErrorMsg.getMessage(mainCode);
//		  errType = WFSError.WF_TMP;
//		  descr = e.toString();
//		} finally {
//		  try {
//			if(stmt != null) {
//				stmt.close();
//				stmt = null;
//			}
//			if(rs != null){
//				rs.close();
//				rs = null;
//			}
//		} catch(Exception e) {}
//		if(mainCode != 0) {
//		  throw new WFSException(mainCode, subCode, errType, subject, descr);
//		}
//		return outputXML.toString();
//		}
//	}
	//----------------------------------------------------------------------------------------------------
	//	Function Name 				    :	WFSetSourceCabinetInfo
	//	Date Written (DD/MM/YYYY)	    :	31/12/2008
	//	Author						    :	Nishant Kumar Singh
	//	Input Parameters		    	:	Connection , XMLParser , XMLGenerator
	//	Output Parameters			    :   none
	//	Return Values				    :	String
	//	Description					    :   Set Source Cabinet Information 
	//----------------------------------------------------------------------------------------------------
	public String WFSetSourceCabinetInfo(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
		 StringBuffer outputXML = new StringBuffer("");
		Statement stmt          = null;
		PreparedStatement pstmt	= null;
		ResultSet rs			= null;
		int mainCode			= 0;
		int subCode				= 0;
		String subject			= null;
		String descr			= null;
		String errType			= WFSError.WF_TMP;
		StringBuffer tempXml	= new StringBuffer(500);
		String strQuery			= "";
        String engine		= parser.getValueOf("EngineName");
		try {
			int sessionID		= parser.getIntOf("SessionId", 0, false);
			char operation		= parser.getCharOf("Operation", '\0', false);
			int dbType			= ServerProperty.getReference().getDBType(engine);
			WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
			String strIsSourceIS= "";
			String strSourceCabinet = "";
			int siteId			= 0;
			String strWfsIP		= "";
			int intWfsPort		= 0;
			if(operation !='D')
			{
				 strIsSourceIS = parser.getValueOf("IsSourceIS","", false); //IsSourceImageServer being used
				 siteId			= parser.getIntOf("SiteId",0, false);
				 strSourceCabinet= parser.getValueOf("SourceCabinet","", false);
				 strWfsIP		= parser.getValueOf("AppServerIP","",false);
				 intWfsPort		= parser.getIntOf("AppServerPort",0, false);
			}
			if(participant != null) 
			 {
				if(con.getAutoCommit())
					con.setAutoCommit(false);
				switch (operation)
				{
					case 'I':
						stmt = con.createStatement();
						rs = stmt.executeQuery("Select * from WFSourceCabinetInfoTable "+WFSUtil.getTableLockHintStr(dbType));
						if(rs.next()) 
						{
 							mainCode = WFSError.WF_OPERATION_FAILED;
							subCode  = WFSError.WM_INVALID_OPERATION_TYPE;
							subject  = WFSErrorMsg.getMessage(mainCode);
							errType  = WFSError.WF_TMP;
							descr    = WFSErrorMsg.getMessage(subCode);
							rs.close();
							rs = null;
							stmt.close();
							stmt = null;
						}
						else
						{
							strQuery = "INSERT Into WFSourceCabinetInfoTable (IsSourceIS, SiteId, SourceCabinet, AppServerIP, AppServerPort)";
							strQuery += " values(?,?,?,?,?)";
							pstmt	 = con.prepareStatement(strQuery);
							WFSUtil.DB_SetString(1, strIsSourceIS.trim() , pstmt , dbType);
							pstmt.setInt(2,  siteId);
							WFSUtil.DB_SetString(3, strSourceCabinet.trim() , pstmt , dbType);
							WFSUtil.DB_SetString(4, strWfsIP.trim() , pstmt , dbType);
							pstmt.setInt(5,  intWfsPort);
							pstmt.executeUpdate();
							pstmt.close();
							pstmt = null;
						}
						break;
					case 'D':
						pstmt = con.prepareStatement("delete from WFSourceCabinetInfoTable");
						pstmt.execute();
						pstmt.close();
						break;
					case 'U':
						strQuery = "Update WFSourceCabinetInfoTable set IsSourceIS=?, SiteId=?, SourceCabinet=?, AppServerIP=?, AppServerPort=?";
						pstmt = con.prepareStatement(strQuery);
						WFSUtil.DB_SetString(1, strIsSourceIS.trim() , pstmt , dbType);
						pstmt.setInt(2,  siteId);
						WFSUtil.DB_SetString(3, strSourceCabinet.trim() , pstmt , dbType);
						WFSUtil.DB_SetString(4, strWfsIP.trim() , pstmt , dbType);
						pstmt.setInt(5,  intWfsPort);
						int iUpdateCnt = pstmt.executeUpdate();
						if(iUpdateCnt <=0)								
						{
							mainCode = WFSError.WF_OPERATION_FAILED;
							subCode = WFSError.WM_INVALID_OPERATION_TYPE;
							subject = WFSErrorMsg.getMessage(mainCode);
							errType = WFSError.WF_TMP;
							descr =  WFSErrorMsg.getMessage(subCode);
						}
						break;
				}
				if (!con.getAutoCommit()) {
                    con.commit();
                    con.setAutoCommit(true);
                }				
			}
			else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode  = 0;
				subject  = WFSErrorMsg.getMessage(mainCode);
				descr    = WFSErrorMsg.getMessage(subCode);
				errType  = WFSError.WF_TMP;
			}
			if(mainCode == 0) {
				outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WFSetSourceCabinetInfo"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(gen.closeOutputFile("WFSetSourceCabinetInfo"));
			}		
		} catch(SQLException e) {
			WFSUtil.printErr(engine,"",e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode  = WFSError.WFS_SQL;
			subject  = WFSErrorMsg.getMessage(mainCode);
			errType  = WFSError.WF_FAT;
			if(e.getErrorCode() == 0) {
			if(e.getSQLState().equalsIgnoreCase("08S01")) 
				descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()+ ")";
			} 
			else
				descr = e.getMessage();
		} catch(NumberFormatException e) {
			WFSUtil.printErr(engine,"",e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode  = WFSError.WFS_ILP;
			subject  = WFSErrorMsg.getMessage(mainCode);
			errType  = WFSError.WF_TMP;
			descr = e.toString();
		} catch(NullPointerException e) {
			WFSUtil.printErr(engine,"",e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode  = WFSError.WFS_SYS;
			subject  = WFSErrorMsg.getMessage(mainCode);
			errType  = WFSError.WF_TMP;
				descr    = e.toString();
		} catch(WFSException e) {
			mainCode = WFSError.WM_NO_MORE_DATA;
			subCode = 0;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = WFSErrorMsg.getMessage(subCode);
		} catch(JTSException e) {
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode  = e.getErrorCode();
			subject  = WFSErrorMsg.getMessage(mainCode);
			errType  = WFSError.WF_TMP;
			descr    = e.getMessage();
		} catch(Exception e) {
			WFSUtil.printErr(engine,"",e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(Error e) {
			WFSUtil.printErr(engine,"",e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} finally {
			try {
				if(rs != null) {
					rs.close();
					rs = null;
				}
				if(pstmt != null) {
					pstmt.close();
					pstmt= null;   
				}
				if(stmt != null) {
					stmt.close();
					stmt = null;
				}			
			} catch(Exception e) {}
			
		}
		if(mainCode != 0) 
			throw new WFSException(mainCode, subCode, errType, subject, descr);
		return outputXML.toString();
	}
	//----------------------------------------------------------------------------------------------------
	//	Function Name 				    :	WFGetSourceCabinetInfo
	//	Date Written (DD/MM/YYYY)	    :	31/12/2008
	//	Author						    :	Nishant Kumar Singh
	//	Input Parameters		    	:	Connection , XMLParser , XMLGenerator
	//	Output Parameters			    :   none
	//	Return Values				    :	String
	//	Description					    :   Get Source Cabinet Information 
	//----------------------------------------------------------------------------------------------------
//	public String WFGetSourceCabinetInfo(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
//		StringBuffer outputXML = null;
//		Statement stmt         = null;
//		ResultSet rs		   = null;
//		int mainCode		   = 0;
//		int subCode			   = 0;
//		String subject		   = null;
//		String descr		   = null;
//		String errType		   = WFSError.WF_TMP;
//		StringBuffer tempXml   = new StringBuffer(500);
//		int cssession = 0;
//        String	engine    = parser.getValueOf("EngineName");
//		try {
//			int	sessionID     =	parser.getIntOf("SessionId",0,false );					
//			int dbType        = ServerProperty.getReference().getDBType(engine);
//			WFParticipant participant  =   WFSUtil.WFCheckSession(con, sessionID);
//			if(participant != null)
//			{
//				stmt = con.createStatement();
//				rs   = stmt.executeQuery(" Select * from WFSourceCabinetInfoTable "+WFSUtil.getTableLockHintStr(dbType));
//				if(rs.next())
//				{
//					tempXml.append(gen.writeValueOf("IsSourceIS", rs.getString(1)));
//					tempXml.append(gen.writeValueOf("SiteId", String.valueOf(rs.getInt(2))));
//					tempXml.append(gen.writeValueOf("SourceCabinet", rs.getString(3)));
//					tempXml.append(gen.writeValueOf("AppServerIP", rs.getString(4)));
//					tempXml.append(gen.writeValueOf("AppServerPort", String.valueOf(rs.getInt(5))));
//				}
//				else
//				{
//					mainCode = WFSError.WM_NO_MORE_DATA;
//					subCode  = 0;
//					subject  = WFSErrorMsg.getMessage(mainCode);
//				}
//				rs.close();
//				rs = null;
//				stmt.close();
//				stmt = null;
//			}
//			else {
//				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
//				subCode  = 0;
//				subject  = WFSErrorMsg.getMessage(mainCode);
//				descr    = WFSErrorMsg.getMessage(subCode);
//				errType  = WFSError.WF_TMP;
//			}
//			if(mainCode == 0) {
//				outputXML = new StringBuffer(500);
//				outputXML.append(gen.createOutputFile("WFGetSourceCabinetInfo"));
//				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
//				outputXML.append(tempXml);
//				outputXML.append(gen.closeOutputFile("WFGetSourceCabinetInfo"));
//			}		
//		} catch(SQLException e) {
//			WFSUtil.printErr(engine,"",e);
//			mainCode = WFSError.WF_OPERATION_FAILED;
//			subCode = WFSError.WFS_SQL;
//			subject = WFSErrorMsg.getMessage(mainCode);
//			errType = WFSError.WF_FAT;
//			if(e.getErrorCode() == 0) {
//				if(e.getSQLState().equalsIgnoreCase("08S01")) 
//					descr=(new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()+ ")";
//			}
//			else 
//				descr = e.getMessage();
//		} catch(NumberFormatException e) {
//			  WFSUtil.printErr(engine,"",e);
//			  mainCode = WFSError.WF_OPERATION_FAILED;
//			  subCode = WFSError.WFS_ILP;
//			  subject = WFSErrorMsg.getMessage(mainCode);
//			  errType = WFSError.WF_TMP;
//			  descr = e.toString();
//		} catch(NullPointerException e) {
//		  WFSUtil.printErr(engine,"",e);
//		  mainCode = WFSError.WF_OPERATION_FAILED;
//		  subCode = WFSError.WFS_SYS;
//		  subject = WFSErrorMsg.getMessage(mainCode);
//		  errType = WFSError.WF_TMP;
//		  descr = e.toString();
//		} catch(WFSException e) {
//		  mainCode = WFSError.WM_NO_MORE_DATA;
//		  subCode = 0;
//		  subject = WFSErrorMsg.getMessage(mainCode);
//		  errType = WFSError.WF_TMP;
//		  descr = WFSErrorMsg.getMessage(subCode);
//		} catch(JTSException e) {
//		  mainCode = WFSError.WF_OPERATION_FAILED;
//		  subCode = e.getErrorCode();
//		  subject = WFSErrorMsg.getMessage(mainCode);
//		  errType = WFSError.WF_TMP;
//		  descr = e.getMessage();
//		} catch(Exception e) {
//		  WFSUtil.printErr(engine,"",e);
//		  mainCode = WFSError.WF_OPERATION_FAILED;
//		  subCode = WFSError.WFS_EXP;
//		  subject = WFSErrorMsg.getMessage(mainCode);
//		  errType = WFSError.WF_TMP;
//		  descr = e.toString();
//		} catch(Error e) {
//		  WFSUtil.printErr(engine,"",e);
//		  mainCode = WFSError.WF_OPERATION_FAILED;
//		  subCode = WFSError.WFS_EXP;
//		  subject = WFSErrorMsg.getMessage(mainCode);
//		  errType = WFSError.WF_TMP;
//		  descr = e.toString();
//		} finally {
//			try {
//				if(rs != null){
//					rs.close();
//					rs = null;
//				}
//				if(stmt != null) {
//					stmt.close();
//					stmt = null;
//				}
//			} catch(Exception e) {}
//			if(mainCode != 0) 
//				throw new WFSException(mainCode, subCode, errType, subject, descr);
//		}
//		return outputXML.toString();
//	}
	//----------------------------------------------------------------------------------------------------
	//	Function Name 				    :	WFGetFragmentInfo
	//	Date Written (DD/MM/YYYY)	    :	19/01/2010
	//	Author						    :	Vikas Saraswat
	//	Input Parameters		    	:	Connection , XMLParser , XMLGenerator
	//	Output Parameters			    :   none
	//	Return Values				    :	String
	//	Description					    :   Get Fragment information Information//WFS_8.0_084
	//----------------------------------------------------------------------------------------------------
	public String WFGetFragmentInfo(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
		 StringBuffer outputXML = new StringBuffer("");
		Statement stmt         = null;
		ResultSet rs		   = null;
		int mainCode		   = 0;
		int subCode			   = 0;
		String subject		   = null;
		String descr		   = null;
		String errType		   = WFSError.WF_TMP;
		StringBuffer tempXml   = new StringBuffer(500);
        String engine = parser.getValueOf("EngineName", "", false);
		try {
			int sessionID = parser.getIntOf("SessionId",0,false );
                        int iProcessdefid= Integer.parseInt(parser.getValueOf("ProcessDefId"));
                        String strFragmentName= parser.getValueOf("FragmentName","", false);
                        int dbType = ServerProperty.getReference().getDBType(engine);
			WFParticipant participant  =   WFSUtil.WFCheckSession(con, sessionID);
                        Object[] result = null;
                        String encodedBinaryData = null;
			if(participant != null)
			{
                                stmt = con.createStatement();
				rs   = stmt.executeQuery(" Select ProcessDefId,FragmentId,FragmentName,FragmentBuffer,isEncrypted,StructureId,StructureName  from WFFormFragmentTable "+WFSUtil.getTableLockHintStr(dbType)+" where Processdefid="+iProcessdefid+" and FragmentName = "+WFSUtil.TO_STRING(strFragmentName, true, dbType));
				if(rs.next())
				{
                                        tempXml.append("<Fragment>\n");
                                        tempXml.append(gen.writeValueOf("ProcessDefId", String.valueOf(rs.getInt("ProcessDefId"))));
                                        tempXml.append(gen.writeValueOf("FragmentId", String.valueOf(rs.getInt("FragmentId"))));
                                        tempXml.append(gen.writeValueOf("FragmentName", rs.getString("FragmentName")));
                                         result = WFSUtil.getBIGData(con, rs, "FragmentBuffer", dbType, "8859_1");
                                        //tempXml.append((String)result[0]);
					//tempXml.append(gen.writeValueOf("FragmentBuffer", rs.getString("FragmentBuffer")));
                                        tempXml.append(gen.writeValueOf("FragmentBuffer", (String)result[0]));
					 encodedBinaryData = rs.getString("isEncrypted");	//Bugzilla Bug 2817
                                         encodedBinaryData = (rs.wasNull() ? "N" : encodedBinaryData);
                                        tempXml.append(gen.writeValueOf("EncodedBinaryData", encodedBinaryData));
                                        tempXml.append(gen.writeValueOf("StructureId", String.valueOf(rs.getInt("StructureId"))));
                                        tempXml.append(gen.writeValueOf("StructureName", rs.getString("StructureName")));
                                        tempXml.append("</Fragment>\n");
				}
                                else
				{
					mainCode = WFSError.WM_NO_MORE_DATA;
					subCode  = 0;
					subject  = WFSErrorMsg.getMessage(mainCode);
				}
				rs.close();
				rs = null;
				stmt.close();
				stmt = null;
			}
			else {
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode  = 0;
				subject  = WFSErrorMsg.getMessage(mainCode);
				descr    = WFSErrorMsg.getMessage(subCode);
				errType  = WFSError.WF_TMP;
			}
			if(mainCode == 0) {
				outputXML = new StringBuffer(500);
				outputXML.append(gen.createOutputFile("WFGetFragmentInfo"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				outputXML.append(tempXml);
				outputXML.append(gen.closeOutputFile("WFGetFragmentInfo"));
			}
		} catch(SQLException e) {
			WFSUtil.printErr(engine,"",e);
                        WFSUtil.printErr(engine,"Bhupesjhn", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if(e.getErrorCode() == 0) {
				if(e.getSQLState().equalsIgnoreCase("08S01"))
					descr=(new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()+ ")";
			}
			else
				descr = e.getMessage();
		} catch(NumberFormatException e) {
			  WFSUtil.printErr(engine,"",e);
			  mainCode = WFSError.WF_OPERATION_FAILED;
			  subCode = WFSError.WFS_ILP;
			  subject = WFSErrorMsg.getMessage(mainCode);
			  errType = WFSError.WF_TMP;
			  descr = e.toString();
		} catch(NullPointerException e) {
		  WFSUtil.printErr(engine,"",e);
		  mainCode = WFSError.WF_OPERATION_FAILED;
		  subCode = WFSError.WFS_SYS;
		  subject = WFSErrorMsg.getMessage(mainCode);
		  errType = WFSError.WF_TMP;
		  descr = e.toString();
		} catch(WFSException e) {
		  mainCode = WFSError.WM_NO_MORE_DATA;
		  subCode = 0;
		  subject = WFSErrorMsg.getMessage(mainCode);
		  errType = WFSError.WF_TMP;
		  descr = WFSErrorMsg.getMessage(subCode);
		} catch(JTSException e) {
		  mainCode = WFSError.WF_OPERATION_FAILED;
		  subCode = e.getErrorCode();
		  subject = WFSErrorMsg.getMessage(mainCode);
		  errType = WFSError.WF_TMP;
		  descr = e.getMessage();
		} catch(Exception e) {
		  WFSUtil.printErr(engine,"",e);
		  mainCode = WFSError.WF_OPERATION_FAILED;
		  subCode = WFSError.WFS_EXP;
		  subject = WFSErrorMsg.getMessage(mainCode);
		  errType = WFSError.WF_TMP;
		  descr = e.toString();
		} catch(Error e) {
		  WFSUtil.printErr(engine,"",e);
		  mainCode = WFSError.WF_OPERATION_FAILED;
		  subCode = WFSError.WFS_EXP;
		  subject = WFSErrorMsg.getMessage(mainCode);
		  errType = WFSError.WF_TMP;
		  descr = e.toString();
		} finally {
			try {
				if(rs != null){
					rs.close();
					rs = null;
				}
			} catch(Exception e) {
				WFSUtil.printErr(engine,"", e);
			}
			try{
				if(stmt!=null){
					stmt.close();
					stmt=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
			
		}
		if(mainCode != 0)
			throw new WFSException(mainCode, subCode, errType, subject, descr);
		return outputXML.toString();
	}

	/**
     * ***********************************************************************************************
     *      Function Name       : WFUpdateMailTrigger
     *      Date Written        : 18/01/2010
     *      Author              : Prateek Verma
     *      Input Parameters    : parser - XMLparser object containing i/p XML.
     *      Output Parameters   : NONE
     *      Return Values       : String
     *      Description         : API to update contents of MailTriggerTable.
     * ***********************************************************************************************
     **/
    private String WFUpdateMailTrigger(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException,
            WFSException {

        int mainCode = 0;
        int subCode = 0;
        int processDefId = 0;
        int sessionID = 0;
        int triggerID = 0;
        boolean bool = true;
        int extObjIDFromUser = 0;
        int variableIdFrom = 0;
        int varFieldIdFrom = 0;
        int extObjIDTo = 0;
        int variableIdTo = 0;
        int varFieldIdTo = 0;
        int extObjIDCC = 0;
        int variableIdCc = 0;
        int varFieldIdCc = 0;
        ResultSet rs = null;
        Statement stmt = null;
        PreparedStatement pstmt = null;
        String engineName = null;
        String triggerName = null;
        String message = null;
        //String serviceType = null;
//        String subject = null;
        String fromUser = null;
        String fromUserType = null;
        String toUser = null;
        String toType = null;
        String cCUser = null;
        String cCType = null;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        
		String bccUser = null;
        String bccType = null;
        int extObjIDBCC = 0;
        int variableIdBCC = 0;
        int varFieldIdBCC = 0;
		
		String mailPriority = null;
        String mailPriorityType = null;
        int extObjIdMailPriority = 0;
        int variableIdMailPriority = 0;
        int varFieldIdMailPriority = 0;
		
        StringBuffer outputXML = new StringBuffer(100);
        try {
            engineName = parser.getValueOf("EngineName", "", false);
            sessionID = parser.getIntOf("SessionId", 0, false);
            processDefId = parser.getIntOf("ProcessDefId", 0, false);
            triggerName = parser.getValueOf("TriggerName", "", false);
            subject = parser.getValueOf("Subject", "", true);
            extObjIDFromUser = parser.getIntOf("ExtObjIDFromUser", 0, true);
            variableIdFrom = parser.getIntOf("VariableIdFrom", 0, true);
            varFieldIdFrom = parser.getIntOf("VarFieldIdFrom", 0, true);
            extObjIDTo = parser.getIntOf("ExtObjIDTo", 0, true);
            variableIdTo = parser.getIntOf("VariableIdTo", 0, true);
            varFieldIdTo = parser.getIntOf("VarFieldIdTo", 0, true);
            extObjIDCC = parser.getIntOf("ExtObjIDCC", 0, true);
            variableIdCc = parser.getIntOf("VariableIdCc", 0, true);
            varFieldIdCc = parser.getIntOf("VarFieldIdCc", 0, true);

            fromUser = parser.getValueOf("FromUser", "", true);
            fromUserType = parser.getValueOf("FromUserType", "", true);
            toUser = parser.getValueOf("ToUser", "", true);
            toType = parser.getValueOf("ToType", "", true);
            cCUser = parser.getValueOf("CCUser", "", true);
            cCType = parser.getValueOf("CCType", "", true);
            message = parser.getValueOf("Message", "", true);

	    // Bug 42494
            bccUser = parser.getValueOf("BCCUser", "", true);
            bccType = parser.getValueOf("BCCType", "", true);
            extObjIDBCC = parser.getIntOf("ExtObjIDBCC", 0, true);
            variableIdBCC = parser.getIntOf("VariableIdBCC", 0, true);
            varFieldIdBCC = parser.getIntOf("VarFieldIdBCC", 0, true);
			
			mailPriority = parser.getValueOf("MailPriority", "", true);
            mailPriorityType = parser.getValueOf("MailPriorityType", "", true);
            extObjIdMailPriority = parser.getIntOf("ExtObjIdMailPriority", 0, true);
            variableIdMailPriority = parser.getIntOf("VariableIdMailPriority", 0, true);
            varFieldIdMailPriority = parser.getIntOf("VarFieldIdMailPriority", 0, true);           
			
            int dbType = ServerProperty.getReference().getDBType(engineName);
            WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
            if (participant != null) {
                if (con.getAutoCommit()) {
                    con.setAutoCommit(false);
                }
                stmt = con.createStatement();

				rs = stmt.executeQuery("select TriggerID from TRIGGERDEFTABLE "+WFSUtil.getTableLockHintStr(dbType)+" where TriggerName = " + WFSUtil.TO_STRING(triggerName, true, dbType) + " and ProcessDefId = " + processDefId);

                if (!(rs != null && rs.next())) {
                    throw new NumberFormatException();
                } else {
                    triggerID = rs.getInt(1);
                }
                if (rs != null) {
                    rs.close();
                }

                rs = stmt.executeQuery("select * from MAILTRIGGERTABLE "+WFSUtil.getTableLockHintStr(dbType)+" where ProcessDefId = " + processDefId + " and TriggerID =" + triggerID);

                if (!(rs != null && rs.next())) {
                    throw new NumberFormatException();
                }
                if (rs != null) {
                    rs.close();
                }

                StringBuffer strBuff = new StringBuffer(500);
                strBuff.append("Update MAILTRIGGERTABLE set");
                strBuff.append(" ");
                if (subject != null && !subject.equals("")) {
                    strBuff.append("subject =" + WFSUtil.TO_STRING(subject, true, dbType));
                    bool = false;
                }
                if (fromUser != null && !fromUser.equals("")) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("fromUser =" + WFSUtil.TO_STRING(fromUser, true, dbType));
                    bool = false;
                }
                if (fromUserType != null && !fromUserType.equals("")) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("fromUserType = " + WFSUtil.TO_STRING(fromUserType, true, dbType));
                    bool = false;
                }
                if (extObjIDFromUser != 0) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("extObjIDFromUser =" + extObjIDFromUser);
                    bool = false;
                }
                if (variableIdFrom !=0) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("variableIdFrom =" + variableIdFrom);
                    bool = false;
                }
                if (varFieldIdFrom != 0) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("varFieldIdFrom =" + varFieldIdFrom);
                    bool = false;
                }
                if (toUser != null && !toUser.equals("")) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("toUser =" + WFSUtil.TO_STRING(toUser, true, dbType));
                    bool = false;
                }
                if (toType != null && !toType.equals("")) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("toType = " + WFSUtil.TO_STRING(toType, true, dbType));
                    bool = false;
                }
                if (extObjIDTo != 0) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("extObjIDTo =" + extObjIDTo);
                    bool = false;
                }
                if (variableIdTo != 0) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("variableIdTo =" + variableIdTo);
                    bool = false;
                }
                if (varFieldIdTo != 0) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("varFieldIdTo =" + varFieldIdTo);
                    bool = false;
                }
                if (cCUser != null && !cCUser.equals("")) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("cCUser =" + WFSUtil.TO_STRING(cCUser, true, dbType));
                    bool = false;
                }
                if (cCType != null && !cCType.equals("")) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("cCType = " + WFSUtil.TO_STRING(cCType, true, dbType));
                    bool = false;
                }
                if (extObjIDCC != 0) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("extObjIDCC =" + extObjIDCC);
                    bool = false;
                }
                if (variableIdCc != 0) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("variableIdCc =" + variableIdCc);
                    bool = false;
                }
                if (varFieldIdCc != 0) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("varFieldIdCc =" + varFieldIdCc);
                    bool = false;
                }
                if (bccUser != null && !bccUser.equals("")) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("bccUser =" + WFSUtil.TO_STRING(bccUser, true, dbType));
                    bool = false;
                }
                if (bccType != null && !bccType.equals("")) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("bccType = " + WFSUtil.TO_STRING(bccType, true, dbType));
                    bool = false;
                }
                if (extObjIDBCC != 0) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("extObjIDBCC =" + extObjIDBCC);
                    bool = false;
                }
                if (variableIdBCC != 0) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("variableIdBCC =" + variableIdBCC);
                    bool = false;
                }
                if (varFieldIdBCC != 0) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("varFieldIdBCC =" + varFieldIdBCC);
                    bool = false;
                }				
				
				if (mailPriority != null && !mailPriority.equals("")) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("MailPriority =" + WFSUtil.TO_STRING(mailPriority, true, dbType));
                    bool = false;
                }
                if (mailPriorityType != null && !mailPriorityType.equals("")) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("MailPriorityType = " + WFSUtil.TO_STRING(mailPriorityType, true, dbType));
                    bool = false;
                }
                if (extObjIdMailPriority != 0) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("ExtObjIdMailPriority =" + extObjIdMailPriority);
                    bool = false;
                }
                if (variableIdMailPriority != 0) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("VariableIdMailPriority =" + variableIdMailPriority);
                    bool = false;
                }
                if (varFieldIdMailPriority != 0) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("VarFieldIdMailPriority =" + varFieldIdMailPriority);
                    bool = false;
                }
				
				
                if (message != null && !message.equals("")) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
					if(dbType == JTSConstant.JTS_MSSQL){
						strBuff.append("message = ?");
					}else if(dbType == JTSConstant.JTS_ORACLE){
						strBuff.append("message = EMPTY_CLOB()");
					}
                    bool = false;
                }

                strBuff.append(" ");
                strBuff.append("where ProcessDefId = " + processDefId + " and TriggerID = " + triggerID);
                pstmt = con.prepareStatement(strBuff.toString());
                //int i = stmt.executeUpdate(strBuff.toString());
               // System.out.println("query 1::: " + strBuff);
                if (message != null && !message.equals("")) {
                    if ((dbType == JTSConstant.JTS_MSSQL) || (dbType == JTSConstant.JTS_DB2) || (dbType == JTSConstant.JTS_POSTGRES)) {
                        pstmt.setCharacterStream(1, new java.io.StringReader(message), message.length());
						int i = pstmt.executeUpdate();
                    } else if (dbType == JTSConstant.JTS_ORACLE) {
						stmt.execute(strBuff.toString());
						WFSUtil.writeOracleCLOB(con, stmt, "MAILTRIGGERTABLE", "message", "ProcessDefId = " + processDefId + " and TriggerID = " + triggerID, message);
                    }
                }
               // System.out.println("query 2::: " + strBuff);
               // System.out.println("rows updated ::::" + i);

                if (stmt != null) {
                    stmt.close();
                    stmt = null;
                }

                if (!con.getAutoCommit()) {
                    con.commit();
                    con.setAutoCommit(true);
                }

                if (mainCode == 0) {
                    outputXML.append(gen.createOutputFile("WFUpdateMailTrigger"));
                    outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                    outputXML.append(gen.closeOutputFile("WFUpdateMailTrigger"));
                }



            } else {
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
        } catch (SQLException e) {
            WFSUtil.printErr(engineName ,"", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr(engineName ,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(engineName ,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Exception e) {
            WFSUtil.printErr(engineName ,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr(engineName ,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
        	
        	try{
				if(rs != null){
					rs.close();
					rs = null;
				}
			}catch(Exception ignored){}
            try {
                if (stmt != null) {
                    stmt.close();
                    stmt = null;
                }
                if (pstmt != null) {
					if (!con.getAutoCommit()) {
                        con.rollback();
                        con.setAutoCommit(true);
                    }
                    pstmt.close();
                    pstmt = null;
                }
            } catch (Exception e) {
            }
            
        }
        if (mainCode != 0) {
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();

    }

       /**
     * ***********************************************************************************************
     *      Function Name       : WFUpdateTemplateDefinition
     *      Date Written        : 27/01/2010
     *      Author              : Prateek Verma
     *      Input Parameters    : parser - XMLparser object containing i/p XML.
     *      Output Parameters   : NONE
     *      Return Values       : String
     *      Description         : API to update contents of TemplateDefinitionTable.
     * ***********************************************************************************************
     **/
    private String WFUpdateTemplateDefinition(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException,
            WFSException {

        int mainCode = 0;
        int subCode = 0;
        int processDefId = 0;
        int sessionID = 0;

        boolean bool = true;
        ResultSet rs = null;
        Statement stmt = null;
        PreparedStatement pstmt = null;
        String engineName = null;
        String isEncrypted = null;
        String errType = WFSError.WF_TMP;
        String templateName = null;
        String templateBuffer = null;
        String argList = null;
        String subject = null;
        String descr = null;
        int bufferlen = 0;
        StringBuffer outputXML = new StringBuffer(100);
        StringBuffer strBuff = new StringBuffer(500);
//        StringBuffer strBuf = new StringBuffer(500);
//        StringBuffer strhuff = new StringBuffer(500);
        try {
            engineName = parser.getValueOf("EngineName", "", false);
            sessionID = parser.getIntOf("SessionId", 0, false);
            processDefId = parser.getIntOf("ProcessDefId", 0, false);
            templateName = parser.getValueOf("TemplateName", "", false);
            argList = parser.getValueOf("ArgList", "", true);
            templateBuffer = parser.getValueOf("TemplateBuffer", "", true);
            isEncrypted = parser.getValueOf("IsEncrypted", "", true);
            bufferlen = templateBuffer.length();
            //System.out.println(" bufferlen = templateBuffer.length() :: " + bufferlen);

            byte[] template = templateBuffer.getBytes("8859_1");
            // System.out.println("templatebuffer converted to bytes" + template.toString());
           // System.out.println("template.length   >>" + template.length);
            int dbType = ServerProperty.getReference().getDBType(engineName);
            WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
            if (participant != null) {
                if (con.getAutoCommit()) {
                    con.setAutoCommit(false);
                }
                stmt = con.createStatement();

                rs = stmt.executeQuery("select * from TEMPLATEDEFINITIONTABLE "+WFSUtil.getTableLockHintStr(dbType)+" where ProcessDefId = " + processDefId + " and TemplateFileName = " + WFSUtil.TO_STRING(templateName, true, dbType));

                if (!(rs != null && rs.next())) {
                    throw new NumberFormatException();
                }
                if (rs != null) {
                    rs.close();
                }

                strBuff.append("Update TEMPLATEDEFINITIONTABLE set");
                strBuff.append(" ");
                if (argList != null && !argList.equals("")) {
                    strBuff.append("argList =" + WFSUtil.TO_STRING(argList, true, dbType));
                    bool = false;
                }
                if (isEncrypted != null && !isEncrypted.equals("")) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("isEncrypted =" + WFSUtil.TO_STRING(isEncrypted, true, dbType));
                    bool = false;
                }
                // System.out.println("templatebuffer ::: " + templateBuffer);
                if (templateBuffer != null && !templateBuffer.equals("")) {
                    if (bool == false) {
                        strBuff.append(",");
                    }
                    strBuff.append("TemplateBuffer = ?");

                }

                strBuff.append(" ");
                strBuff.append("where ProcessDefId = " + processDefId + " and TemplateFileName = " + WFSUtil.TO_STRING(templateName, true, dbType));
                pstmt = con.prepareStatement(strBuff.toString());

               // System.out.println("query 1::: " + strBuff);
                if (templateBuffer != null && !templateBuffer.equals("")) {
                   // System.out.println("setting setbinarystream");
                    pstmt.setBinaryStream(1, new java.io.ByteArrayInputStream(template), bufferlen);
                }

                int i = pstmt.executeUpdate();
                //System.out.println("query 2::: " + strBuff);
               // System.out.println("rows updated ::::" + i);
                /* rs = stmt.executeQuery("select templatebuffer from TEMPLATEDEFINITIONTABLE where ProcessDefId = " + processDefId + " and TemplateFileName = '" + templateName + "'");
                if (rs.next()) {

                Object[] res = WFSUtil.getBIGData(con, rs, "TemplateBuffer", dbType, "ISO8859_1");


                System.out.println("huffman encoded string (from bigdata):: " + (String) res[0]);
                System.out.println("res[0].length()" + ((String) res[0]).length());
                //  byte[] temp;
                byte[] temp = EncodeImage.decodeImageData((String) res[0]);
                System.out.println("temp.length  >>" + temp.length);
                //temp = strBuf.toString().getBytes("8859_1");
                ByteArrayOutputStream f = new ByteArrayOutputStream();
                f.write(temp);
                System.out.println("Data after huffman decoding:: " + f.toString());
                //                    FileOutputStream file = new FileOutputStream("/home/shoeb/outschemaGenerated.doc");
                //                    file.write(temp);
                //                    file.flush();
                //                    file.close();
                //System.out.println("data in TemplateBuffer ::: " + strhuff);
                OutputStream outputStream = new FileOutputStream("/home/shoeb/outschemaGenerated.doc");  // path where you want to save the file
                f.writeTo(outputStream);
                outputStream.close();

                }*/

                if (stmt != null) {
                    stmt.close();
                    stmt = null;
                }

                if (!con.getAutoCommit()) {
                    con.commit();
                    con.setAutoCommit(true);
                }

                if (mainCode == 0) {
                    outputXML.append(gen.createOutputFile("WFUpdateTemplateDefinition"));
                    outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                    outputXML.append(gen.closeOutputFile("WFUpdateTemplateDefinition"));
                }



            } else {
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
        } catch (SQLException e) {
            WFSUtil.printErr(engineName ,"", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr(engineName ,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(engineName ,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Exception e) {
            WFSUtil.printErr(engineName  ,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr(engineName ,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
        	
        	try{
				if(rs != null){
					rs.close();
					rs = null;
				}
			}catch(Exception ignored){}
        	
            try {
                if (stmt != null) {
                    stmt.close();
                    stmt = null;
                }
                if (pstmt != null) {
                    pstmt.close();
                    pstmt = null;
                }
            } catch (Exception e) {
            }
            
        }
        if (mainCode != 0) {
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();

    }
//-------------------------------------------------------------------------------------------------------------------
//	Function Name 				: WFGetWSDLList
//	Date Written (DD/MM/YYYY)	: 02/09/2010
//	Author						: Saurabh Kamal
//	Input Parameters			: Connection , XMLParser , XMLGenerator
//	Output Parameters			: None
//	Return Values				: String
//	Description					: Fetch Authentication information for webservice invocation
//--------------------------------------------------------------------------------------------------------------------  

    public static String WFGetWSDLList(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
    	 StringBuffer outputXML = new StringBuffer("");
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        StringBuffer tempXml = new StringBuffer(100);
        StringBuffer queryBuff = new StringBuffer(500);

        try {
			String engine = parser.getValueOf("EngineName");
			int dbType = ServerProperty.getReference().getDBType(engine);
            int processDefId = Integer.parseInt(parser.getValueOf("ProcessDefId"));
            char sortOrder = parser.getCharOf("SortOrder", 'A', true);
            int lastIndex = parser.getIntOf("LastIndex", 0, true);
            int wsdlUrlId = parser.getIntOf("WSDLURLId", 0, true);
            int serverBatchSize = ServerProperty.getReference().getBatchSize();
            int noOfRectoFetch = parser.getIntOf("NoOfRecordsToFetch", serverBatchSize, true);
            if (noOfRectoFetch > serverBatchSize || noOfRectoFetch <= 0)
                noOfRectoFetch = serverBatchSize;
            
            String srtby = "";
			String operator1 = "";
            int iRecordsFetchedTillNow = 0;
            int tot = 0;
            
            switch(sortOrder){
                case 'A':
					operator1 = ">";
                    srtby = " ASC";
                    break;
                case 'D':
					operator1 = "<";
                    srtby = " DESC";
                    break;
            }
            if(wsdlUrlId > 0){
            	queryBuff.append("Select * from (Select " + WFSUtil.getFetchPrefixStr(dbType, noOfRectoFetch + 1) + 
						" ProcessDefId, WSDLURLId, WSDLURL, UserId FROM WFWebServiceInfoTable WHERE ProcessDefId = ? and WSDLURLId = ?");
            }else {
            queryBuff.append("Select * from (Select " + WFSUtil.getFetchPrefixStr(dbType, noOfRectoFetch + 1) + 
							" ProcessDefId, WSDLURLId, WSDLURL, UserId FROM WFWebServiceInfoTable WHERE ProcessDefId = ? ");
            }
            if(lastIndex > 0){
                queryBuff.append(" AND WSDLURLId " + operator1 +  " " + lastIndex);
            }
            queryBuff.append(" ORDER BY WSDLURLId " + srtby + " ) A " +
                     WFSUtil.getFetchSuffixStr(dbType, noOfRectoFetch + 1, WFSConstant.QUERY_STR_WHERE));           
            
            pstmt = con.prepareStatement(queryBuff.toString());
            if(wsdlUrlId > 0){
            	pstmt.setInt(1, processDefId);
            	pstmt.setInt(2, wsdlUrlId);
            }else{
            pstmt.setInt(1, processDefId);
            }
            pstmt.execute();
            rs = pstmt.getResultSet();
            while (rs.next()) {
                if(iRecordsFetchedTillNow < noOfRectoFetch){
                    tempXml.append("<WSDLInfo>\n\t");
                    tempXml.append(gen.writeValueOf("ProcessDefId", rs.getString(1)));
                    tempXml.append("\n\t");
                    tempXml.append(gen.writeValueOf("WSDLURLId", rs.getString(2)));
                    tempXml.append("\n\t");
                    tempXml.append(gen.writeValueOf("WSDLURL", rs.getString(3)));
                    tempXml.append("\n\t");
                    tempXml.append(gen.writeValueOf("UserId", rs.getString(4)));
                    tempXml.append("\n</WSDLInfo>\n");
                    iRecordsFetchedTillNow++;
                }
                tot++;
            }
            
            if (rs != null) {
                rs.close();
            }
            
            pstmt.close();
            
            if(iRecordsFetchedTillNow > 0){
                tempXml.append(gen.writeValueOf("TotalCount", String.valueOf(tot)));
                tempXml.append(gen.writeValueOf("RetrievedCount", String.valueOf(iRecordsFetchedTillNow)));
            } else{
                mainCode = WFSError.WM_NO_MORE_DATA;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            
            if (mainCode == 0) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFGetWSDLList"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append(tempXml);
                outputXML.append(gen.closeOutputFile("WFGetWSDLList"));
            }
        } catch (SQLException e) {
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Exception e) {
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
        	try{
				if(rs!=null){
					rs.close();
					rs=null;
				}
			}catch(Exception e){
				WFSUtil.printErr("","", e);
			}
            try {
                if (pstmt != null) {
                    pstmt.close();
                    pstmt = null;
                }
            } catch (Exception e) {
            	WFSUtil.printErr("","", e);
            }
            
        }
        if (mainCode != 0) {
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();
    }
    
//-------------------------------------------------------------------------------------------------------------------
//	Function Name 				: WFSetWSDLInfo
//	Date Written (DD/MM/YYYY)	: 02/09/2010
//	Author						: Saurabh Kamal
//	Input Parameters			: Connection , XMLParser , XMLGenerator
//	Output Parameters			: None
//	Return Values				: String
//	Description					: Set Authentication information for webservice invocation
//--------------------------------------------------------------------------------------------------------------------  

    public static String WFSetWSDLInfo(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
    	 StringBuffer outputXML = new StringBuffer("");
        PreparedStatement pstmt = null;
        int mainCode = 0;
        int subCode = 0;
        int innerStart = 0;
        int innerEnd = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        StringBuffer tempXml = new StringBuffer(100);
        try {
            int innerCount = parser.getNoOfFields("WSDLInfo", 0, Integer.MAX_VALUE);
            tempXml.append("<FailedList>\n\t");
            for (int i = 0; i < innerCount; i++){
                innerStart = parser.getStartIndex("WSDLInfo", innerEnd, Integer.MAX_VALUE);
                innerEnd = parser.getEndIndex("WSDLInfo", innerStart, Integer.MAX_VALUE);
                int processDefId = Integer.parseInt(parser.getValueOf("ProcessDefId", innerStart, innerEnd)); 
                int id = Integer.parseInt(parser.getValueOf("WSDLURLId", innerStart, innerEnd));
                String url = parser.getValueOf("WSDLURL", innerStart, innerEnd);
                String user = parser.getValueOf("UserId", innerStart, innerEnd);
                String pa_ss = Utility.encode(parser.getValueOf("PWD", innerStart, innerEnd));
                pstmt = con.prepareStatement("Update WFWebServiceInfoTable SET WSDLURL = ? , UserId = ? , PWD = ? where ProcessDefId = ? AND WSDLURLId = ? ");
                pstmt.setString(1, url);
                pstmt.setString(2, user);
                pstmt.setString(3, pa_ss);
                pstmt.setInt(4, processDefId);
                pstmt.setInt(5, id);
                pstmt.execute();
                int retVal = pstmt.getUpdateCount();  //get count of updated rows
                if (retVal == 0) {  // Fail to update
                    tempXml.append("<WSDLInfo>\n\t\t");
                    tempXml.append(gen.writeValueOf("ProcessDefId", String.valueOf(processDefId)));
                    tempXml.append("\n\t\t");
                    tempXml.append(gen.writeValueOf("WSDLURLId", String.valueOf(id)));
                    tempXml.append("\n\t\t");
                    tempXml.append(gen.writeValueOf("WSDLURL", url));
                    tempXml.append("\n\t\t");
                    tempXml.append(gen.writeValueOf("UserId", user));
                    tempXml.append("\n\t\t");
                    tempXml.append(gen.writeValueOf("PWD", pa_ss));
                    tempXml.append("\n\t</WSDLInfo>\n");
                } 
            }
            tempXml.append("</FailedList>\n");
            pstmt.close();
            
            if (mainCode == 0) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFSetWSDLInfo"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append(tempXml);
                outputXML.append(gen.closeOutputFile("WFSetWSDLInfo"));
            }
        } catch (SQLException e) {
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Exception e) {
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
            try {
                if (pstmt != null) {
                    pstmt.close();
                    pstmt = null;
                }
            } catch (Exception e) {
            }
            
        }
        if (mainCode != 0) {
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();
    }
         /**
     * *************************************************************
     * Function Name    :   setLogLevel
     * Programmer' Name :   Prateek Verma
     * Date Written     :   11/02/11
     * Input Parameters :   String , String
     * Description      :   Sets the specified log level.
     * *************************************************************
     */
    public static String WFSetLogLevel(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
        String loggerName = null;
        String newLevel = null;
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        StringBuffer outputXML = new StringBuffer(100);
        try {
            int sessionID = parser.getIntOf("SessionId", 0, false);
            WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
            if (user != null && user.gettype() == 'C') {
            String engine = parser.getValueOf("EngineName");
            int dbType = ServerProperty.getReference().getDBType(engine);
            loggerName = parser.getValueOf("LoggerName");
            newLevel = parser.getValueOf("NewLevel");

            } else {
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            if (mainCode == 0) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFSetLoglevel"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append(gen.closeOutputFile("WFSetLoglevel"));
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Exception e) {
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
           
        }
        if (mainCode != 0) {
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();

    }

		
/*	public static String WFImageToNTEXT(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        StringBuffer outputXML = new StringBuffer(100);
        try {
            int sessionID = parser.getIntOf("SessionId", 0, false);
            WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
            if (user != null) {
				String engine = parser.getValueOf("EngineName");
				int dbType = ServerProperty.getReference().getDBType(engine);
				int startex = parser.getStartIndex("Tables", 0, 0);
				int endEx = parser.getEndIndex("Tables", startex, 0);
				int noOfAttEx = parser.getNoOfFields("TableInfo", startex, endEx);
				String colName = null;
				for (int i = 0; i < noOfAttEx; i++) {
					startex = parser.getStartIndex("TableInfo", endEx, 0);
					endEx = parser.getEndIndex("TableInfo", startex, 0);
					String tableName = parser.getValueOf("TableName", startex, endEx);
					int noOfAttEx = tmsParser.getNoOfFields("ColumnInfo", startex, deadendex);
					int endEx = startex;
					for(int i = 0; i < noOfAttEx ; i++){
						startex = tmsParser.getStartIndex("ColumnInfo", endEx, 0);
						endEx = tmsParser.getEndIndex("ColumnInfo", startex, 0);
						colName = tmsParser.getValueOf("Name",startex,endEx);
						WFSUtil.extractionfromcolumn(con,dbType,colName,tableName);
					}
				}
            } else {
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            if (mainCode == 0) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFImageToNTEXT"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append(gen.closeOutputFile("WFImageToNTEXT"));
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Exception e) {
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
            if (mainCode != 0) {
                throw new WFSException(mainCode, subCode, errType, subject, descr);
            }
        }
        return outputXML.toString();

    }*/
	
	    
//----------------------------------------------------------------------------------
    //	Function Name               :	WFAddToSMSQueue
    //	Date Written (DD/MM/YYYY)   :	25/02/2004
    //	Author                      :	Prashant
    //	Input Parameters            :	Connection , XMLParser , XMLGenerator
    //	Output Parameters           :   none
    //	Return Values               :	String
    //	Description                 :   Add an item to SMSQueue
    //----------------------------------------------------------------------------------
    public String WFAddToSMSQueue(Connection con, XMLParser parser, XMLGenerator gen) throws
        JTSException, WFSException{
    	 StringBuffer outputXML = new StringBuffer("");
        PreparedStatement pstmt = null;
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        try{
            int sessionID = parser.getIntOf("SessionId", 0, true);
            String engine = parser.getValueOf("EngineName", null, false);
            int dbType = ServerProperty.getReference().getDBType(engine);
            char omniServiceFlag = parser.getCharOf("OmniService", 'N', true);
            /* 17/08/2007, SrNo-1, Synchronous routing of workitems. - Ruhi Hira */
            WFParticipant user = null;
            if(omniServiceFlag == 'Y'){
                user = new WFParticipant(0, "System", 'P', "SERVER", Locale.getDefault().toString());
            } else{
                user = WFSUtil.WFCheckSession(con, sessionID);
            }
//            int userID = 0;
//            char pType = '\0';

            if(user != null) {
                String username = user.getname();
                String strTargetMobileNo = parser.getValueOf("TargetMobileNo", null, false);
                String strMessage = parser.getValueOf("Message", null, false);
                String strMessageType = parser.getValueOf("MessageType", "OL", true);   //  (OL for Unicode, N for normal text, P for picture messages)
                String strDeliveryReportReq = parser.getValueOf("DeliveryReportReq", "Y", true);
                int iProcessDefId = parser.getIntOf("ProcessDefId", 0, false);
                int iActivityId = parser.getIntOf("ActivityId", 0, false);
                String strProcessInstanceId = parser.getValueOf("ProcessInstanceId", null, false);
                int iWorkitemId = parser.getIntOf("WorkitemId", 0, false);
                int iSMSPriority = parser.getIntOf("SMSPriority", 1, true);    //  default Priority = 1.
                String strAgentName = parser.getValueOf("AgentName", null, true);
                if(strAgentName == null || strAgentName.trim().equalsIgnoreCase("")){
                    strAgentName = username;
                }
                StringBuffer strInsertQuery = new StringBuffer();
                strInsertQuery.append("Insert into WFSMSTable(TargetMobileNo, Message, MessageType," +
                        "DeliveryReportReq, ProcessDefId, ActivityId, ProcessInstanceId," +
                        "WorkitemId, SMSPriority, NoOfTrials, InsertedBy, InsertedTime) " +
                        "values(?,?,?,?,?,?,?,?,?,?,?," + WFSUtil.getDate(dbType) + ")");
                pstmt = con.prepareStatement(strInsertQuery.toString());
                WFSUtil.DB_SetString(1, strTargetMobileNo, pstmt, dbType);
                WFSUtil.DB_SetString(2, strMessage, pstmt, dbType);
                WFSUtil.DB_SetString(3, strMessageType, pstmt, dbType);
                WFSUtil.DB_SetString(4, strDeliveryReportReq, pstmt, dbType);
                pstmt.setInt(5, iProcessDefId);
                pstmt.setInt(6, iActivityId);
                WFSUtil.DB_SetString(7, strProcessInstanceId, pstmt, dbType);
                pstmt.setInt(8, iWorkitemId);
                pstmt.setInt(9, iSMSPriority);
                pstmt.setInt(10, 0);
                WFSUtil.DB_SetString(11, strAgentName, pstmt, dbType);
                pstmt.execute();
                pstmt.close();
                pstmt = null;
            } else {
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            if(mainCode == 0){
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFAddToSMSQueue"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append(gen.closeOutputFile("WFAddToSMSQueue"));
            }
        } catch(SQLException e){
            WFSUtil.printErr("", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if(e.getErrorCode() == 0){
                if(e.getSQLState().equalsIgnoreCase("08S01"))
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " +
                        e.getSQLState() + ")";
            } else
                descr = e.getMessage();
        } catch(NumberFormatException e){
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(NullPointerException e){
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(JTSException e){
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
        } catch(Exception e){
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(Error e){
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally{
            try{
                if(pstmt != null){
                    pstmt.close();
                    pstmt = null;
                }
            } catch(Exception e){}
            
        }
        if(mainCode != 0)
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        return outputXML.toString();
    }

    //----------------------------------------------------------------------------------
    //	Function Name               :	WFGetSMSQueueItem
    //	Date Written (DD/MM/YYYY)   :	27/06/2011
    //	Author                      :	Abhishek Gupta
    //	Input Parameters            :	Connection , XMLParser , XMLGenerator
    //	Output Parameters           :   none
    //	Return Values               :	String
    //	Description                 :   Fetches a SMS record from WFSMSTable.
    //----------------------------------------------------------------------------------
    public String WFGetSMSQueueItem(Connection con, XMLParser parser, XMLGenerator gen) throws
        JTSException, WFSException {
        StringBuffer outputXML = null;
        PreparedStatement pstmt = null;
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        ResultSet rs = null;
        int cssession = 0;
        try {
            int sessionID = parser.getIntOf("SessionId", 0, true);
            String engine = parser.getValueOf("EngineName", null, false);
            int dbType = ServerProperty.getReference().getDBType(engine);
            char omniServiceFlag = parser.getCharOf("OmniService", 'N', true);
            String csName = parser.getValueOf("CSName");
            WFParticipant user = null;
            StringBuffer resultSetXML = null;
            if(omniServiceFlag == 'Y'){
                user = new WFParticipant(0, "System", 'P', "SERVER", Locale.getDefault().toString());
            } else {
                user = WFSUtil.WFCheckSession(con, sessionID);
            }
            if(user != null) {
                String username = user.getname();
                if(con.getAutoCommit())
                    con.setAutoCommit(false);
                    
                if(csName != null && !csName.trim().equals("")){
                    pstmt = con.prepareStatement(
                        "Select SessionID from PSRegisterationTable " + WFSUtil.getTableLockHintStr(dbType) + " where Type = 'C' AND PSName = ?");
                    WFSUtil.DB_SetString(1, csName, pstmt, dbType);
                    pstmt.execute();
                    rs = pstmt.getResultSet();
                    if(rs.next()){
                        cssession = rs.getInt(1);
                    }
                    if(rs != null)
                        rs.close();
                    pstmt.close();
                }
                    
                resultSetXML = new StringBuffer();
                String strAgentName = parser.getValueOf("AgentName");
                if(strAgentName == null || strAgentName.trim().equalsIgnoreCase("")){
                    strAgentName = username;
                }
                int iMaxTrials = parser.getIntOf("MaxTrials", 5, true);
                StringBuffer strSQL = new StringBuffer("SELECT * FROM (SELECT " + WFSUtil.getFetchPrefixStr(dbType, 1));
                strSQL.append(" SMSId, TargetMobileNo, Message, MessageType, DeliveryReportReq, " +
                    " ProcessDefId, ActivityId, ProcessInstanceId, WorkitemId, SMSPriority, " +
                    " NoOfTrials, InsertedBy, InsertedTime FROM WFSMSTable WHERE " +
                    " ((SMSStatus='L' AND lockedBy = ? ) OR (SMSStatus = 'N' OR SMSStatus = 'F' " + 
                    "OR (SMSStatus IS NULL))) AND (noOfTrials is null or noOfTrials < ? ) " +
                    " AND SMSPriority > 0 Order By SMSPriority DESC, noOfTrials ASC) WFSMSTable "
                    + WFSUtil.getFetchSuffixStr(dbType, 1, WFSConstant.QUERY_STR_WHERE));
                /*SMSStatus : N=New, F=Failed, L=Locked*/
                pstmt = con.prepareStatement(strSQL.toString());
                WFSUtil.DB_SetString(1, strAgentName, pstmt, dbType);
                pstmt.setInt(2, iMaxTrials);
                pstmt.execute();
                rs = pstmt.getResultSet();
                if(rs != null && rs.next()) {
                    int iSMSId = rs.getInt("SMSId");
                    String strTargetMobileNo = rs.getString("TargetMobileNo");
                    String strMessage = rs.getString("Message");
                    String strMessageType = rs.getString("MessageType");
                    String strDeliveryReportReq = rs.getString("DeliveryReportReq");

                    resultSetXML.append("<SMSItem>");
                    resultSetXML.append(gen.writeValueOf("SMSID", String.valueOf(iSMSId)));
                    resultSetXML.append(gen.writeValueOf("TargetMobileNo", strTargetMobileNo));
                    resultSetXML.append(gen.writeValueOf("Message", strMessage));
                    resultSetXML.append(gen.writeValueOf("MessageType", strMessageType));
                    resultSetXML.append(gen.writeValueOf("DeliveryReportReq", strDeliveryReportReq));
                    int iProcessDefId = rs.getInt("ProcessDefId");
                    int iActivityId = rs.getInt("ActivityId");
                    String strProcessInstanceId = rs.getString("ProcessInstanceId");
                    int iWorkitemId = rs.getInt("WorkitemId");
                    int iSMSPriority = rs.getInt("SMSPriority");
                    int iNoOfTrials = rs.getInt("NoOfTrials");
                    String strInsertedBy = rs.getString("InsertedBy");
                    String strInsertedTime = rs.getString("InsertedTime");
//                    String strComments = rs.getString("StatusComments");
                    if(rs != null) {
                        rs.close();
                        rs = null;
                    }
                    if(pstmt != null) {
                        pstmt.close();
                        pstmt = null;
                    }
                    String strUpdateSQL =
                        "UPDATE WFSMSTable SET SMSStatus = ? , LockedBy = ?, LastLockedTime = " +
                        WFSUtil.getDate(dbType) + " , NoOfTrials = NoOfTrials + 1 WHERE SMSId = ?";
                    pstmt = con.prepareStatement(strUpdateSQL);
                    WFSUtil.DB_SetString(1, "L", pstmt, dbType); //locked
                    WFSUtil.DB_SetString(2, strAgentName, pstmt, dbType);
                    pstmt.setInt(3, iSMSId);
                    pstmt.execute();
                    if(pstmt != null){
                        pstmt.close();
                        pstmt = null;
                    }
                    if(!con.getAutoCommit()){
                        con.commit();
                        con.setAutoCommit(true);
                    }
                    resultSetXML.append(gen.writeValueOf("Priority", String.valueOf(iSMSPriority)));
                    resultSetXML.append(gen.writeValueOf("InsertedTime", strInsertedTime));
                    resultSetXML.append(gen.writeValueOf("InsertedBy", strInsertedBy));
//                    resultSetXML.append(gen.writeValueOf("Comments", strComments));
                    resultSetXML.append(gen.writeValueOf("ProcessDefId", String.valueOf(iProcessDefId)));
                    resultSetXML.append(gen.writeValueOf("ProcessInstanceId", strProcessInstanceId));
                    resultSetXML.append(gen.writeValueOf("WorkitemId", String.valueOf(iWorkitemId)));
                    resultSetXML.append(gen.writeValueOf("ActivityId", String.valueOf(iActivityId)));
                    resultSetXML.append("</SMSItem>");
                } else {
                    if(pstmt != null){
                        pstmt.close();
                        pstmt = null;
                    }
                    mainCode = WFSError.WM_NO_MORE_DATA;
                    subCode = 0;
                    subject = WFSErrorMsg.getMessage(mainCode);
                    descr = WFSErrorMsg.getMessage(subCode);
                    errType = WFSError.WF_TMP;
                }
            } else {
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            if(mainCode == 0) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFGetSMSQueueItem"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append(resultSetXML);
                outputXML.append(gen.writeValueOf("CSSession", String.valueOf(cssession)));
                outputXML.append(gen.closeOutputFile("WFGetSMSQueueItem"));
            } else if(mainCode == WFSError.WM_NO_MORE_DATA) {
                outputXML = new StringBuffer(500);
                outputXML.append(gen.writeError("WFGetSMSQueueItem",
                        WFSError.WM_NO_MORE_DATA, 0, WFSError.WF_TMP,
                        WFSErrorMsg.getMessage(WFSError.WM_NO_MORE_DATA), ""));
                outputXML.delete(outputXML.indexOf("</" + "WFGetSMSQueueItem" + "_Output>"), outputXML.length());
                outputXML.append(gen.writeValueOf("CSSession", String.valueOf(cssession)));
                outputXML.append(gen.closeOutputFile("WFGetSMSQueueItem")); //Bugzilla Bug 259
                mainCode = 0;
            }
        } catch(SQLException e){
            WFSUtil.printErr("", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if(e.getErrorCode() == 0){
                if(e.getSQLState().equalsIgnoreCase("08S01"))
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " +
                        e.getSQLState() + ")";
            } else
                descr = e.getMessage();
        } catch(NumberFormatException e){
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(NullPointerException e){
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(JTSException e){
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
        } catch(Exception e){
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(Error e){
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
            try{
                if(!con.getAutoCommit()){
                    con.rollback();
                    con.setAutoCommit(true);
                }
            } catch(Exception e){}                    
            try{
                if(pstmt != null){
                    pstmt.close();
                    pstmt = null;
                }
            } catch(Exception e){}
           
        }
        if(mainCode != 0)
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        return outputXML.toString();
    }

    //----------------------------------------------------------------------------------
    //	Function Name               :	WFSMSQueueItemUpdateStatus
    //	Date Written (DD/MM/YYYY)   :	27/06/2011
    //	Author                      :	Abhishek Gupta
    //	Input Parameters            :	Connection , XMLParser , XMLGenerator
    //	Output Parameters           :   none
    //	Return Values               :	String
    //	Description                 :   If sending fails, Updates status for a SMS record in WFSMSTable
    //                                  If message sent successfully, moves SMS record from WFSMSTable
    //                                      to WFHistorySMSTable.
    //----------------------------------------------------------------------------------
    public String WFSMSQueueItemUpdateStatus(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
        StringBuffer outputXML = null;
        Statement stmt = null;
        PreparedStatement pstmt = null;
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        try {
            int sessionID = parser.getIntOf("SessionId", 0, false);
            String engine = parser.getValueOf("EngineName", null, false);
            int dbType = ServerProperty.getReference().getDBType(engine);
            WFParticipant user = null;
            char omniServiceFlag = parser.getCharOf("OmniService", 'N', true);
            if(omniServiceFlag == 'Y'){
                user = new WFParticipant(0, "System", 'P', "SERVER", Locale.getDefault().toString());
            } else {
                user = WFSUtil.WFCheckSession(con, sessionID);
            }
            if(user != null) {
                String username = user.getname();
                String strAgentName = parser.getValueOf("AgentName");
                int iSMSId = parser.getIntOf("SMSId", 0, false);
                if(strAgentName == null || strAgentName.trim().equalsIgnoreCase("")){
                    strAgentName = username;
                }
                String strComments = parser.getValueOf("Comments", null, true);
                char cSMSStatus = parser.getValueOf("SMSStatus").charAt(0);
                if(cSMSStatus == 'S') {     //  cSMSStatus = 'S' for Success, Fail otherwise.
                    if(con.getAutoCommit())
                        con.setAutoCommit(false);
                    String strUpdateSQL = "UPDATE WFSMSTable SET lockedBy = NULL, SMSStatus = ? , StatusComments = ?, LastLockedTime = " +
                        WFSUtil.getDate(dbType) + " WHERE SMSId = ? AND LockedBy = ? AND SMSStatus = ?";
                    pstmt = con.prepareStatement(strUpdateSQL);
                    WFSUtil.DB_SetString(1, "S", pstmt, dbType); //SMSStatus = 'S' for Success
                    WFSUtil.DB_SetString(2, strComments, pstmt, dbType);
                    pstmt.setInt(3, iSMSId);
                    WFSUtil.DB_SetString(4, strAgentName, pstmt, dbType);
                    WFSUtil.DB_SetString(5, "L", pstmt, dbType);
                    int iRows = pstmt.executeUpdate();
                    if(iRows <= 0){
                        mainCode = WFSError.WM_INVALID_ATTRIBUTE;
                        subCode = 0;
                        subject = WFSErrorMsg.getMessage(mainCode);
                        descr = WFSErrorMsg.getMessage(subCode);
                        errType = WFSError.WF_TMP;
                    }
                    if(pstmt != null){
                        pstmt.close();
                        pstmt = null;
                    }
                    if(mainCode == 0) {
                        try {
                            stmt = con.createStatement();
                            stmt.executeUpdate("Insert into  WFSMSHistoryTable " +
                               "Select SMSId, TargetMobileNo, Message, MessageType, DeliveryReportReq, " +
                               "ProcessDefId, ActivityId, ProcessInstanceId, WorkitemId, SMSPriority, " +
                               "SMSStatus, StatusComments, NoOfTrials, InsertedBy, InsertedTime, LockedBy, " +
                               "LastLockedTime from WFSMStable where SMSId = " + iSMSId);
                            stmt.executeUpdate(" Delete from WFSMSTable where SMSId = " + iSMSId);
                            if(!con.getAutoCommit()){
                                con.commit();
                                con.setAutoCommit(true);
                            }
                        } catch(Exception ex){
                            WFSUtil.printErr("", ex);
                            throw ex;
                        }
                    }
                } else {
                    String strUpdateSQL = "UPDATE WFSMSTable SET lockedBy = NULL, " +
                            " SMSStatus = ?, StatusComments=? WHERE SMSId = ? AND lockedBy = ? " +
                            " AND SMSStatus = ?";
                    pstmt = con.prepareStatement(strUpdateSQL);
                    WFSUtil.DB_SetString(1, "F", pstmt, dbType);
                    WFSUtil.DB_SetString(2, strComments, pstmt, dbType);
                    pstmt.setInt(3, iSMSId);
                    WFSUtil.DB_SetString(4, strAgentName, pstmt, dbType);
                    WFSUtil.DB_SetString(5, "L", pstmt, dbType);
                    int iRows = pstmt.executeUpdate();
                    if(iRows <= 0){
                        mainCode = WFSError.WM_INVALID_ATTRIBUTE;
                        subCode = 0;
                        subject = WFSErrorMsg.getMessage(mainCode);
                        descr = WFSErrorMsg.getMessage(subCode);
                        errType = WFSError.WF_TMP;
                    }
                    if(pstmt != null){
                        pstmt.close();
                        pstmt = null;
                    }
                }
            } else{
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            if(mainCode == 0){
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFSMSQueueItemUpdateStatus"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append(gen.closeOutputFile("WFSMSQueueItemUpdateStatus"));
            }
        } catch(SQLException e){
            WFSUtil.printErr("", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if(e.getErrorCode() == 0){
                if(e.getSQLState().equalsIgnoreCase("08S01"))
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " +
                        e.getSQLState() + ")";
            } else
                descr = e.getMessage();
        } catch(NumberFormatException e){
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(NullPointerException e){
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(JTSException e){
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = e.getErrorCode();
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.getMessage();
        } catch(Exception e){
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(Error e){
            WFSUtil.printErr("", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally{
            try{
                if(stmt != null){
                    stmt.close();
                    stmt = null;
                }
            } catch(Exception ignored){}
            try{
                if(!con.getAutoCommit()){
                    con.rollback();
                    con.setAutoCommit(true);
                }
                if(pstmt != null){
                    pstmt.close();
                    pstmt = null;
                }
            } catch(Exception e){}
            
        }
        if(mainCode != 0)
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        return outputXML.toString();
    }    
    
    //----------------------------------------------------------------------------------
    //	Function Name               :	WFGetSystemProperties
    //	Date Written (DD/MM/YYYY)   :	10/06/2014
    //	Author                      :	Mohnish Chopra
    //	Input Parameters            :	Connection , XMLParser , XMLGenerator
    //	Output Parameters           :   none
    //	Return Values               :	String
    //	Description                 :   API to fetch System property
    //----------------------------------------------------------------------------------

    public String WFGetSystemProperties(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException{
        int subCode = 0;
        int mainCode = 0;
        ResultSet rs = null;
        String descr = null;
        String subject = null;
        StringBuffer outputXML = new StringBuffer("");
        String errType = WFSError.WF_TMP;
        PreparedStatement pstmt = null;
        String engine ="";
        boolean fetchAll=false;
        String propertyKey =null;
        HashMap<String ,String> properties= new HashMap<String,String> ();
        Iterator<String> propertiesIterator=null;
        boolean bypassSessionValidation=false;
        int sessionID=0;
        String userLocale = null;
        try{
        	String sessionIdString= parser.getValueOf("SessionId","0",true);
            userLocale = parser.getValueOf("Locale");
        	if(sessionIdString.equals("1010101010")){
        		bypassSessionValidation=true;
        	}
        	else{
        		sessionID =Integer.parseInt(sessionIdString);
        	}
          
            WFParticipant participant = null;
            if(!bypassSessionValidation){
            participant = WFSUtil.WFCheckSession(con, sessionID);
            }
            if((participant!=null)||(bypassSessionValidation)){
        	
            engine = parser.getValueOf("EngineName");
/*            int sessionID = parser.getIntOf("SessionId", 0, true);
*/            int dbType = ServerProperty.getReference().getDBType(engine);
            String fetchAllProperties= parser.getValueOf("FetchAllProperties", "N", false);
            if(fetchAllProperties.equalsIgnoreCase("Y")){
            	fetchAll=true;
            }
            else{
            propertyKey=  parser.getValueOf("PropertyName", "", false);
            propertyKey= propertyKey.toUpperCase();
            }
            
            /*char omniServiceFlag = parser.getCharOf("OmniService", 'N', true);
            */


 
                StringBuffer strBuff = new StringBuffer();
                strBuff.append("Select PropertyKey,PropertyValue from WFSYSTEMPROPERTIESTABLE ");
                pstmt = con.prepareStatement(strBuff.toString());
                if(!fetchAll){
                	strBuff.append(" where PropertyKey= ?");
                    pstmt = con.prepareStatement(strBuff.toString());
                    pstmt.setString(1, propertyKey);

                }
                rs = pstmt.executeQuery();
                while(rs != null && rs.next()){
                	properties.put((rs.getString("PropertyKey")).toUpperCase(),rs.getString("PropertyValue"));
                  
                } 
                if(properties.isEmpty()) {
                    mainCode = WFSError.WM_NO_MORE_DATA;
                }
                else{
                	  outputXML = new StringBuffer(500);
                      outputXML.append(gen.createOutputFile("WFGetSystemProperties"));
                      outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                     
                	propertiesIterator = properties.keySet().iterator();
                	
                	while(propertiesIterator.hasNext()){
                		 String propertyName= propertiesIterator.next();
                		 String propertyValue=properties.get(propertyName);
                		 outputXML.append("<SystemProperty>");
                		 outputXML.append(gen.writeValueOf("PropertyName",propertyName));
                		 outputXML.append(gen.writeValueOf("PropertyValue", propertyValue));
                		 outputXML.append("\n</SystemProperty>");
                      	}
                    outputXML.append(gen.closeOutputFile("WFGetSystemProperties"));
                }
                if(rs != null){
                    rs.close();
                    rs = null;
                }
                if(pstmt != null){
                	pstmt.close();
                	pstmt = null;
                }
            } else{
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode, userLocale);
                descr = WFSErrorMsg.getMessage(subCode, userLocale);
                errType = WFSError.WF_TMP;
            }
            if(mainCode == WFSError.WM_NO_MORE_DATA){
                outputXML = new StringBuffer(500);
                outputXML.append(gen.writeError("WFGetSystemProperties", WFSError.WM_NO_MORE_DATA, 0,
                                                WFSError.WF_TMP, WFSErrorMsg.getMessage(WFSError.WM_NO_MORE_DATA, userLocale), ""));
            }
        } catch(SQLException e){
            WFSUtil.printErr(engine, e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode, userLocale);
            errType = WFSError.WF_FAT;
            if(e.getErrorCode() == 0){
                if(e.getSQLState().equalsIgnoreCase("08S01")){
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
                        + ")";
                }
            } else{
                descr = e.getMessage();
            }
        } catch(NumberFormatException e){
            WFSUtil.printErr(engine, e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode, userLocale);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(NullPointerException e){
            WFSUtil.printErr(engine, e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode, userLocale);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(Exception e){
            WFSUtil.printErr(engine, e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode, userLocale);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(Error e){
            WFSUtil.printErr(engine, e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode, userLocale);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally{
            try{
                if(rs != null){
                    rs.close();
                    rs = null;
                }
            } catch(Exception ignored){}
            try{
                if(pstmt != null){
                	pstmt.close();
                	pstmt = null;
                }
            } catch(Exception ignored){}
           
        }
        if(mainCode != 0){
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();
    }
   
    //----------------------------------------------------------------------------------
    //	Function Name               :	WFSetSystemProperties
    //	Date Written (DD/MM/YYYY)   :	10/06/2014
    //	Author                      :	Mohnish Chopra
    //	Input Parameters            :	Connection , XMLParser , XMLGenerator
    //	Output Parameters           :   none
    //	Return Values               :	String
    //	Description                 :   API to set System property
    //----------------------------------------------------------------------------------

    public String WFSetSystemProperties(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException{
        int subCode = 0;
        int mainCode = 0;  
        String descr = null; 
        String subject = null;
        StringBuffer outputXML = new StringBuffer("");
        String errType = WFSError.WF_TMP;
        PreparedStatement pstmt =null;
        PreparedStatement pstmt1 =null;
        ResultSet rs1 =null;
        String engine = "";
        int startIndex=0;
        int endIndex=0;
        int startAttrIndex=0;
        int endAttrIndex=0;
        HashMap<String,String> properties= new HashMap<String,String>();
        String propertyName=null;
        String propertyValue =null;
        ResultSet rs = null;
        int sessionID = 0;
        boolean bypassSessionValidation=false;
        ArrayList arrAuditList = new ArrayList();
        int userID=0;
        String userName = null;
        String userLocale = null;
        Statement stmt = null;
        ResultSet res = null;
        try{
        	String sessionIdString= parser.getValueOf("SessionId","0",true);
            userLocale = parser.getValueOf("Locale");
        	if(sessionIdString.equals("1010101010")){
        		bypassSessionValidation=true; 
        		userID=-1; 
        		userName ="SYSTEM";
        	}
        	else{
        		sessionID =Integer.parseInt(sessionIdString);
        	}
          
            WFParticipant participant = null;
            if(!bypassSessionValidation){
            participant = WFSUtil.WFCheckSession(con, sessionID);
            userID= participant.getid();
            userName=participant.getname();
            }
            if((participant!=null)||(bypassSessionValidation)){
            engine = parser.getValueOf("EngineName");
            int dbType = ServerProperty.getReference().getDBType(engine);
			int noOfProperties = parser.getNoOfFields("SystemProperty", startIndex, endIndex);
			if(noOfProperties >0){
				properties = new java.util.HashMap();
				for(int j=0; j < noOfProperties; j++){ 
					startAttrIndex = parser.getStartIndex("SystemProperty", endAttrIndex , endIndex);
					endAttrIndex = parser.getEndIndex("SystemProperty", startAttrIndex , endIndex);
					propertyName = parser.getValueOf("PropertyName", startAttrIndex, endAttrIndex).trim();
					propertyValue = parser.getValueOf("PropertyValue", startAttrIndex, endAttrIndex).trim();
					properties.put(propertyName.toUpperCase(), propertyValue);
				}
			}
			Iterator<String> propertyIterator = properties.keySet().iterator();
			while(propertyIterator.hasNext()){
				propertyName = propertyIterator.next();
				propertyValue= properties.get(propertyName);
				
				boolean updateFlag=false;
				int updateCount=0;
				pstmt = con.prepareStatement("Select propertyValue from WFSYSTEMPROPERTIESTABLE where PropertyKey=? ");
				pstmt.setString(1, propertyName);
				rs= pstmt.executeQuery();
				if(rs.next()){
					String currentPropertyValue = rs.getString(1);
					if((propertyName.equalsIgnoreCase("CabinetType"))||(propertyName.equalsIgnoreCase("ArchivalCabinetName"))){
                        mainCode = WFSError.WF_OPERATION_FAILED;
                        subCode =  WFSError.WF_INVALID_SYSTEM_PROPERTY_DEFINITION;
                        subject = WFSErrorMsg.getMessage(mainCode, userLocale);
    		            errType = WFSError.WF_TMP;
    		            descr = WFSErrorMsg.getMessage(subCode, userLocale);
    		            String strReturn = WFSUtil.generalError("WFSetSystemProperties", engine, gen,
    	   	                   mainCode, subCode,
    	   	                   errType, subject,
    	   	                    descr);
    	   	             
    	   	        return strReturn;
					}
					else if (("AUTHORIZATIONFLAG".equalsIgnoreCase(propertyName)) && ("Y".equalsIgnoreCase(currentPropertyValue)) && ("N".equalsIgnoreCase(propertyValue))) {
						pstmt1 = con.prepareStatement("select EntityName,ActionDateTime,MakerUserName,Comments from WFAuthorizationTable "
								+ WFSUtil.getTableLockHintStr(dbType) + " where status in ('P', 'I')");
						rs1 = pstmt1.executeQuery();
						StringBuffer failedList = new StringBuffer();
						boolean errFlag=false;
						while(rs1.next()){
							errFlag=true;
							String tmpComments = rs1.getString("Comments");
							failedList.append("<FailedList>");
							failedList.append(gen.writeValueOf("EntityName", String.valueOf(rs1.getString("EntityName"))));
							failedList.append(gen.writeValueOf("ActionDateTime", String.valueOf(rs1.getString("ActionDateTime"))));
							failedList.append(gen.writeValueOf("MakerUserName", String.valueOf(rs1.getString("MakerUserName"))));
							if (tmpComments != null && !tmpComments.isEmpty()){
								failedList.append(gen.writeValueOf("Comments", tmpComments));
							}else{
								failedList.append(gen.writeValueOf("Comments", ""));
							}
							failedList.append("</FailedList>");
						}
						if (errFlag) {
							rs1.close();
							pstmt1.close();
							mainCode = WFSError.WF_OPERATION_FAILED;
							subCode = WFSError.WF_AUTHORIZATION_QUEUE_NOT_EMPTY;
							subject = WFSErrorMsg.getMessage(mainCode, userLocale);
							errType = WFSError.WF_TMP;
							descr = WFSErrorMsg.getMessage(subCode, userLocale);
							//String strReturn = WFSUtil.generalError("WFSetSystemProperties", engine, gen, mainCode, subCode, errType, subject, descr);
							StringBuffer strOutputBuffer = new StringBuffer();
							String txnName="WFSetSystemProperties";
					        try {
					            strOutputBuffer.append(gen.createOutputFile(txnName));
					            strOutputBuffer.append(gen.writeValueOf("Status", String.valueOf(mainCode)));
					            strOutputBuffer.append("<Error>");
					            strOutputBuffer.append("<Exception>");
					            strOutputBuffer.append(gen.writeValueOf("MainCode", String.valueOf(mainCode)));
					            strOutputBuffer.append(gen.writeValueOf("SubErrorCode", String.valueOf(subCode)));
					            strOutputBuffer.append(gen.writeValueOf("TypeOfError", String.valueOf(errType)));
					            strOutputBuffer.append(gen.writeValueOf("Subject", String.valueOf(subject)));
					            strOutputBuffer.append(gen.writeValueOf("Description", descr));
					            strOutputBuffer.append("</Exception>");
					            strOutputBuffer.append("</Error>");
					            strOutputBuffer.append(failedList.toString());
					           
					            strOutputBuffer.append(gen.closeOutputFile(txnName));
					        } catch (Exception e) {
					        }
					        mainCode = 0;
					        return strOutputBuffer.toString();
							
						}
						if(rs1 != null){
							rs1.close();
							rs1 = null;
						}
						if(pstmt1 != null){
							pstmt1.close();
							pstmt1 = null;
						}
					/*Sharepoint changes till here - Adding SharePoint flag in return data*/						
					}else if(("SHAREPOINTFLAG".equalsIgnoreCase(propertyName)) && ("N".equalsIgnoreCase(currentPropertyValue)) && ("Y".equalsIgnoreCase(propertyValue))){
						stmt = con.createStatement();
						res = stmt.executeQuery("select 1 from WFUnderlyingDMS " + WFSUtil.getTableLockHintStr(dbType) +"where DMSTYPE = 2");
						if(!res.next()){
							if(stmt!=null){
								stmt.close();
								stmt=null;
							}
							stmt = con.createStatement();
				            int updatedRows = stmt.executeUpdate("insert into WFUnderlyingDMS(DMSTYPE, DMSNAME) values(2, 'SharePoint')");
				            WFSUtil.printOut(engine, "DMS Updated to sharepoint : " + updatedRows);
							if(stmt!=null){
								stmt.close();
								stmt=null;
							}
						}
						if(res!=null){
							res.close();
							res=null;
						}
						if(stmt!=null){
							stmt.close();
							stmt=null;
						}
					}/*Sharepoint changes*/
					updateFlag=true;
				}
				if(pstmt!=null){
					pstmt.close();
					pstmt=null;
				}
				if(rs!=null){
					rs.close();
					rs=null;
				}
				if(updateFlag){
					if((propertyName!=null)&&(!propertyName.equals(""))){
						pstmt =con.prepareStatement("Update WFSYSTEMPROPERTIESTABLE set PropertyValue= ? where PropertyKey = ? ");
						pstmt.setString(1,propertyValue);
						pstmt.setString(2,propertyName);
						updateCount=pstmt.executeUpdate();
	                    arrAuditList.add(new WFAdminLogValue(0,null, 0, null, propertyName, null, propertyValue, null, null, null, WFSConstant.WFL_SetSystemProperty, 0, 0, null, userID, userName, 0, null, null));

					}
				}
				else{
					if((propertyName!=null)&&(!propertyName.equals(""))){
						pstmt =con.prepareStatement("Insert into WFSYSTEMPROPERTIESTABLE(PropertyKey,PropertyValue) values(?,?)");
						pstmt.setString(1,propertyName);
						pstmt.setString(2,propertyValue);
						updateCount=pstmt.executeUpdate();
	                    arrAuditList.add(new WFAdminLogValue(0,null, 0, null, propertyName, null, propertyValue, null, null, null, WFSConstant.WFL_SetSystemProperty, 0, 0, null, userID, userName, 0, null, null));

					}
				}

				if(pstmt != null){
					pstmt.close();
					pstmt  = null;
				}
				if(rs != null){
					rs.close();
					rs = null;
				}
			}
        
            } else{
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode, userLocale);
                descr = WFSErrorMsg.getMessage(subCode, userLocale);
                errType = WFSError.WF_TMP;
            }
            if(mainCode == 0){
            	WFSUtil.genAdminLogExt(con, engine, arrAuditList);
                outputXML = new StringBuffer(500);
                outputXML.append(gen.createOutputFile("WFSetSystemProperties"));
                outputXML.append("<Exception><MainCode>0</MainCode></Exception>");
                outputXML.append(gen.closeOutputFile("WFSetSystemProperties"));
            }
        } catch(SQLException e){
            WFSUtil.printErr(engine, e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode, userLocale);
            errType = WFSError.WF_FAT;
            if(e.getErrorCode() == 0){
                if(e.getSQLState().equalsIgnoreCase("08S01")){
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
                        + ")";
                }
            } else{
                descr = e.getMessage();
            }
        } catch(NumberFormatException e){
            WFSUtil.printErr(engine, e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode, userLocale);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(NullPointerException e){
            WFSUtil.printErr(engine, e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode, userLocale);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(Exception e){
            WFSUtil.printErr(engine, e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode, userLocale);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(Error e){
            WFSUtil.printErr(engine, e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode, userLocale);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally{
        	try{
				if(rs!=null){
					rs.close();
					rs=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
        	try{
				if(rs1!=null){
					rs1.close();
					rs1=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
        	try{
        		if(res!=null){
					res.close();
					res=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
        	try{
				if(stmt!=null){
					stmt.close();
					stmt=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
        	try{
				if(pstmt!=null){
					pstmt.close();
					pstmt=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
            try{
            	if(pstmt1 != null){
            		pstmt1.close();
            		pstmt1 = null;
				}
            } catch(Exception ignored){
            	WFSUtil.printErr(engine,"", ignored);
            }
           
        }
        if(mainCode != 0){
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();
    }


    //---------------------------------------------------------------------------------------
    //	Function Name               :	WFGetObjectProperty
    //	Date Written (DD/MM/YYYY)   :	09-07-2014
    //	Author                      :	Sajid Khan
    //	Input Parameters            :	Connection , XMLParser , XMLGenerator
    //	Output Parameters           :   none
    //	Return Values               :	String
    //	Description                 :   API to fetch Object  property[Patch Management System.
    //----------------------------------------------------------------------------------------

public String WFGetObjectProperty(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException{
	 StringBuffer outputXML = new StringBuffer("");
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        String engine ="";
        String objType = "";
        int objId = 0;
        String propertyName = "";
        String filterStr = "";
        StringBuffer tempStr = new StringBuffer(500);
        int resultRowCount = 0 ;
        try{
            int sessionID = parser.getIntOf("SessionId", 0, false);
            engine = parser.getValueOf("EngineName");
            int dbType = ServerProperty.getReference().getDBType(engine);
            WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
            if(participant!=null){
                objType = parser.getValueOf("ObjectType", "P", false);
                objId = parser.getIntOf("ObjectId", 0, true);
                propertyName = parser.getValueOf("PropertyName", "", true);
                if(objId > 0 ){
                    filterStr += " And ObjectId = "+objId+" ";
                }
                if((propertyName!=null)&&(!propertyName.equals(""))){
                    filterStr += " And PropertyName = "+WFSUtil.TO_STRING(propertyName, true, dbType)+" ";
                }
                pstmt = con.prepareStatement("Select * From WFObjectPropertiesTable " + WFSUtil.getTableLockHintStr(dbType) + " Where ObjectType = ? "+filterStr);
                WFSUtil.DB_SetString(1, objType,pstmt,dbType);
                rs = pstmt.executeQuery();
                tempStr.append("<ObjectProperties>");
                while(rs.next()){
                    tempStr.append("<ObjectProperty>\n");
                    tempStr.append(gen.writeValue("ObjectId", String.valueOf(rs.getInt("ObjectId"))));
                    tempStr.append(gen.writeValue("PropertyName", rs.getString("PropertyName")));
                    tempStr.append(gen.writeValue("PropertyValue", rs.getString("PropertyValue")));
                    tempStr.append("</ObjectProperty>\n");
                    resultRowCount++;
                }
                tempStr.append("</ObjectProperties>");
                 if(resultRowCount==0){
                     mainCode = WFSError.WM_NO_MORE_DATA;
                     subCode  = 0;
                     subject  = WFSErrorMsg.getMessage(mainCode);
                 }
                if(mainCode ==0){
                     outputXML = new StringBuffer(500);
                     outputXML.append(gen.createOutputFile("WFGetObjectProperty"));
                     outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                     outputXML.append(tempStr.toString());
                     outputXML.append(gen.closeOutputFile("WFGetObjectProperty"));
                }

                if(rs != null){
                    rs.close();
                    rs = null;
                }
                if(pstmt != null){
                	pstmt.close();
                	pstmt = null;
                }
            } else{
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            if(mainCode == WFSError.WM_NO_MORE_DATA){
                outputXML = new StringBuffer(500);
                outputXML.append(gen.writeError("WFGetObjectProperty", WFSError.WM_NO_MORE_DATA, 0,
                                                WFSError.WF_TMP, WFSErrorMsg.getMessage(WFSError.WM_NO_MORE_DATA), ""));
            }
        } catch(SQLException e){
            WFSUtil.printErr(engine, e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if(e.getErrorCode() == 0){
                if(e.getSQLState().equalsIgnoreCase("08S01")){
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
                        + ")";
                }
            } else{
                descr = e.getMessage();
            }
        } catch(NumberFormatException e){
            WFSUtil.printErr(engine, e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(NullPointerException e){
            WFSUtil.printErr(engine, e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(Exception e){
            WFSUtil.printErr(engine, e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(Error e){
            WFSUtil.printErr(engine, e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally{
            try{
                if(rs != null){
                    rs.close();
                    rs = null;
                }
            } catch(Exception ignored){}
            try{
                if(pstmt != null){
                	pstmt.close();
                	pstmt = null;
                }
            } catch(Exception ignored){}
           
        }
        if(mainCode != 0){
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();
    }//End of WFGetObjectProperty API.

 //----------------------------------------------------------------------------------
    //	Function Name               :	WFSetObjectProperty
    //	Date Written (DD/MM/YYYY)   :	09-07-2014
    //	Author                      :	Sajid Khan
    //	Input Parameters            :	Connection , XMLParser , XMLGenerator
    //	Output Parameters           :   none
    //	Return Values               :	String
    //	Description                 :   API to set Object  property[patch Management System]
//----------------------------------------------------------------------------------

   public String WFSetObjectProperty(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
    StringBuffer outputXml = new StringBuffer();
    PreparedStatement pstmt = null;
    PreparedStatement pstmt1 = null;
    ResultSet rs = null;
    ResultSet rs1 = null;
    int mainCode = 0;
    int subCode = 0;
    String subject = null;
    String descr = null;
    String errType = WFSError.WF_TMP;
    String engine = null;
    ArrayList arrAuditList = new ArrayList();
    try{
      int sessionID = parser.getIntOf("SessionId", 0, false);
      engine = parser.getValueOf("EngineName");
      int dbType = ServerProperty.getReference().getDBType(engine);
      WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
      if(user != null ) {
            int userid = user.getid();
            String userName = user.getname();
            int res = 0;
            int noOfFields = parser.getNoOfFields("ObjectProperty");
            ArrayList objPropList = new ArrayList();
            String objType = "";
            String propName ="";
            String propValue ="";
            int objId = 0;
            if(noOfFields > 0) {
                objPropList.add(parser.getFirstValueOf("ObjectProperty"));
                 for(int i = 1; i < noOfFields; i++) {
                    objPropList.add(parser.getNextValueOf("ObjectProperty"));
                 }
                 objPropList.add(parser.getFirstValueOf("ObjectProperty"));
                 if(con.getAutoCommit())
                      con.setAutoCommit(false);
                 for(int i = 0; i < noOfFields; i++){
                    parser.setInputXML((String) objPropList.get(i));
                    objType = parser.getValueOf("ObjectType");
                    propName = parser.getValueOf("PropertyName");
                    propValue = parser.getValueOf("PropertyValue");
                    objId = parser.getIntOf("ObjectId", 0, true);
                    pstmt1 = con.prepareStatement("select * from WFObjectPropertiesTable "+WFSUtil.getTableLockHintStr(dbType)+" Where ObjectType = ? And ObjectId = ? ");
                    WFSUtil.DB_SetString(1, objType, pstmt1, dbType);
                    pstmt1.setInt(2, objId);
                    rs1 = pstmt1.executeQuery();
                    if(!rs1.next()){
                        pstmt = con.prepareStatement("Insert into WFObjectPropertiesTable (ObjectType, ObjectId, PropertyName,PropertyValue) Values ( ?,?,?,?)");
                        WFSUtil.DB_SetString(1, objType, pstmt, dbType);
                        pstmt.setInt(2, objId);
                        WFSUtil.DB_SetString(3, propName, pstmt, dbType);
                        WFSUtil.DB_SetString(4, propValue, pstmt, dbType);
                        pstmt.execute();
                    }else{
                         pstmt = con.prepareStatement("Update WFObjectPropertiesTable set PropertyName = " + WFSUtil.TO_STRING(propName, true, dbType) + ", PropertyValue = " +WFSUtil.TO_STRING(propValue,true,dbType)+" Where ObjectType = ? And ObjectId = ? ");
                         WFSUtil.DB_SetString(1, objType, pstmt, dbType);
                         pstmt.setInt(2, objId);
                         pstmt.execute();
                    }
                    if(pstmt1!=null){
                        pstmt1.close();
                    }
                    if(pstmt!=null){
                        pstmt.close();
                    }
                }
                if(mainCode ==0){
                   if (!con.getAutoCommit()) {
                        con.commit();
                        con.setAutoCommit(true);
                    }
                   arrAuditList.add(new WFAdminLogValue(objId, objType, 0, propName, propValue, null, null, null, null, null, WFSConstant.WFL_ObjecTypePropertySet, 0, 0, null, userid, userName, 0, null, null));
                }
        }
      }else {
            mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
            subCode = 0;
            subject = WFSErrorMsg.getMessage(mainCode);
            descr = WFSErrorMsg.getMessage(subCode);
            errType = WFSError.WF_TMP;
        }if(mainCode == 0){
                WFSUtil.genAdminLogExt(con, engine, arrAuditList);
                outputXml.append(gen.createOutputFile("WFSetObjectProperty"));
                outputXml.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXml.append(gen.closeOutputFile("WFSetObjectProperty"));
          }

      //Read the input xml and make a list or any data structore for the Expertise into
      //And then make a loop for every expertise intfo

     // PreparedStatement pstmt =
       // con.prepareStatement("insert into WFUserSkillDefinitionTable(CategoryId,SkillName,SkillDescription,SkillDefinedBy,SkillAvailableForRating) " +
         // "values(?,?,?,?,?)");



      //pstmt= con.prepareStatement(queryString);
        // ResultSet rs = WFSUtil.jdbcExecuteQuery(null,sessionID,userID,queryString,pstmt,null,printQueryFlag,engine);

         //Prepare the output XML

    }
     catch(SQLException e) {
      WFSUtil.printErr(engine,"", e);
      mainCode = WFSError.WM_INVALID_FILTER;
      subCode = WFSError.WFS_SQL;
      subject = WFSErrorMsg.getMessage(mainCode);
      errType = WFSError.WF_FAT;
      if(e.getErrorCode() == 0) {
        if(e.getSQLState().equalsIgnoreCase("08S01")) {
          descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
            + ")";
        }
      } else {
        descr = e.getMessage();
      }
    } catch(NumberFormatException e) {
      WFSUtil.printErr(engine,"", e);
      mainCode = WFSError.WF_OPERATION_FAILED;
      subCode = WFSError.WFS_ILP;
      subject = WFSErrorMsg.getMessage(mainCode);
      errType = WFSError.WF_TMP;
      descr = e.toString();
    } catch(NullPointerException e) {
      WFSUtil.printErr(engine,"", e);
      mainCode = WFSError.WF_OPERATION_FAILED;
      subCode = WFSError.WFS_SYS;
      subject = WFSErrorMsg.getMessage(mainCode);
      errType = WFSError.WF_TMP;
      descr = e.toString();
    } catch(JTSException e) {
      WFSUtil.printErr(engine,"", e);
      mainCode = WFSError.WF_OPERATION_FAILED;
      subCode = e.getErrorCode();
      subject = WFSErrorMsg.getMessage(mainCode);
      errType = WFSError.WF_TMP;
      descr = e.getMessage();
    } catch(Exception e) {
      WFSUtil.printErr(engine,"", e);
      mainCode = WFSError.WF_OPERATION_FAILED;
      subCode = WFSError.WFS_EXP;
      subject = WFSErrorMsg.getMessage(mainCode);
      errType = WFSError.WF_TMP;
      descr = e.toString();
    } catch(Error e) {
      WFSUtil.printErr(engine,"", e);
      mainCode = WFSError.WF_OPERATION_FAILED;
      subCode = WFSError.WFS_EXP;
      subject = WFSErrorMsg.getMessage(mainCode);
      errType = WFSError.WF_TMP;
      descr = e.toString();
    } finally {
      try {
        if(!con.getAutoCommit()){
			con.rollback();
	        con.setAutoCommit(true);
		}
      } catch(Exception e) {
    	  WFSUtil.printErr(engine,"", e);
      }
      try{
			if(rs!=null){
				rs.close();
				rs=null;
			}
		}catch(Exception e){
			WFSUtil.printErr(engine,"", e);
		}
      try{
			if(rs1!=null){
				rs1.close();
				rs1=null;
			}
		}catch(Exception e){
			WFSUtil.printErr(engine,"", e);
		}
		try{
			if(pstmt!=null){
				pstmt.close();
				pstmt=null;
			}
		}catch(Exception e){
			WFSUtil.printErr(engine,"", e);
		}
		try{
			if(pstmt1!=null){
				pstmt1.close();
				pstmt1=null;
			}
		}catch(Exception e){
			WFSUtil.printErr(engine,"", e);
		}
      
    }
    if(mainCode != 0) {
        throw new WFSException(mainCode, subCode, errType, subject, descr);
      }
    return outputXml.toString();
    }//End of WFSetObjectProperty API.
	  //---------------------------------------------------------------------------------------
    //	Function Name               :	WFGetTaskHistory
    //	Date Written (DD/MM/YYYY)   :	03-06-2015
    //	Author                      :	Sajid Khan
    //	Input Parameters            :	Connection , XMLParser , XMLGenerator
    //	Output Parameters           :   none
    //	Return Values               :	String
    //	Description                 :   API to fetch Task History for TaskStaus Window and Gant Chart Window.
    //----------------------------------------------------------------------------------------
/*******************************************************************************************************************
Case : Task Hisotry is required on Task Status Window:
<WFGetTaskHistory_Input>
	<Option>WFGetTaskHistory</Option>
	<EngineName>ibpcasegmt1aprl</EngineName>
	<SessionId>-559844699</SessionId>
	<ProcessDefId>1</ProcessDefId>	
	<ProcessInstanceId>WF-0000000002-process</ProcessInstanceId>
	<WorkItemId>1</WorkItemId>
	<ActivityId>2</ActivityId>
	<TaskId>12</TaskId>
	<SubTaskId>6</SubTaskId>
</WFGetTaskHistory_Input>

<WFGetTaskHistory_Output>
	<Option>WFGetTaskHistory</Option>
	<Exception>
		<MainCode>0</MainCode>
	</Exception>
	<TaskName>MeetingTask_O2MS_MeetingwithAshish</TaskName>
	<TaskType>2</TaskType>
	<ProcessInstanceId>WF-0000000002-process</ProcessInstanceId>
	<History>
		<HistoryInfo>
			 <ActionId></ActionId>	
			 <ActionDateTime>2015-04-15 11:10:40</ActionDateTime>
			 <SubTaskId>1</SubTaskId>
			 <AssignedToUser>UserA</AssignedToUser>
			 <AssignedByUser>UserB</AssignedByUser>
		</HistoryInfo>
		<HistoryInfo>
			 <ActionId></ActionId>	
			 <ActionDateTime>2015-04-15 11:10:40</ActionDateTime>
			 <SubTaskId>1</SubTaskId>
			 <AssignedToUser>UserA</AssignedToUser>
			 <AssignedByUser>UserB</AssignedByUser>
		</HistoryInfo>
	</History>
</WFGetTaskHistory_Output>


Case: Task Hisotry required on Gant Chart:

Following Output represnt the following actions performed on a processinstanceid through out the process:
Process contains StartEVent, Case_Workstep2, Wordkesk3 and EndEvent4
-Workitem Created at StartEvent1
-Workitem Introduced from Start Event.
-DoM Task Is intiated by Anushree and Assigned to Sajid.
-DOMTask Is completed by Sajid
-Workitem is done at Case_Workstep2
-WorkItem is done at WorkDesk3

<WFGetTaskHistory_Input>
	<Option>WFGetTaskHistory</Option>
	<EngineName>ibpcasegmt1aprl</EngineName>
	<SessionId>-559844699</SessionId>
	<ProcessDefId>1</ProcessDefId>	
	<ProcessInstanceId>WF-0000000002-process</ProcessInstanceId>
	<WorkItemId>1</WorkItemId>
	<ActivityId>2</ActivityId>
</WFGetTaskHistory_Input>

<WFGetTaskHistory_Output>
	<Option>WFGetTaskHistory</Option>
	<Exception>
		<MainCode>0</MainCode>
	</Exception>
	<TaskName>MeetingTask_O2MS_MeetingwithAshish</TaskName>
	<TaskType>2</TaskType>
	<ProcessInstanceId>WF-0000000002-process</ProcessInstanceId>
	<History>
		<HistoryInfo>--Workitem Created at Start Event
			<ActivityId>1</ActivityId>
			<ActivityName>StartEvent1</ActivityName>
			<UserId>7</UserId>
			<Username>anushree</Username>
			<PersonalName>Anushree</PersonalName>
			<ActionId>1</ActionId>
			<ActionDateTime>2015-05-22 16:41:12.663</ActionDateTime>
			<FieldId>5</FieldId>
			<WorkItemId>1</WorkItemId>
		</HistoryInfo>
		<HistoryInfo>--Workitem Introduced  From Start Event
                         <ActivityId>1</ActivityId>
			 <ActivityName>StartEvent1</ActivityName>
			 <UserId>7</UserId>
			 <Username>anushree</Username>
			 <PersonalName>Anushree</PersonalName>
			 <ActionId>2</ActionId>
			 <ActionDateTime>2015-05-22 16:41:59.547</ActionDateTime>
			 <FieldId>0</FieldId>
			 <WorkItemId>1</WorkItemId>
		</HistoryInfo>
		<HistoryInfo>--Workteim Routed to Case Workstep 2 from Start Event
			<ActivityId>1</ActivityId>
			<ActivityName>StartEvent1</ActivityName>
			<UserId>0</UserId>
			<ActionId>4</ActionId>
			<ActionDateTime>2015-05-22 16:41:59.517</ActionDateTime>
			<FieldId>2</FieldId>--TargetActivityId
			<FieldName>Case_WorkStep2</FieldName>--TaregetActivityName
			<WorkItemId>1</WorkItemId>
		</HistoryInfo>
		<HistoryInfo>--Task Initiated on Case Workstep 1
			 <ActionId>701</ActionId>
			 <TaskId>1</TaskId>
			 <SubTaskId>0</SubTaskId>
			 <ActivityId>2</ActivityId>
			 <ActivityName>Case_WorkStep2</ActivityName>
			 <TaskName>DOMTask</TaskName>	
			 <ActionDateTime>2015-06-15 11:45:40</ActionDateTime>
			 <Username>anushree</Username>--Assigned By User
			 <FieldName>sajid</FieldName>--AssignedTo User
		</HistoryInfo>
		<HistoryInfo>--Task Completed on Case WorkStep 1
			 <ActionId>702</ActionId>
			 <TaskId>1</TaskId>
			 <SubTaskId>0</SubTaskId>
			 <ActivityId>2</ActivityId>
			 <ActivityName>Case_WorkStep2</ActivityName>
			 <TaskName>DOMTask</TaskName>	
			 <ActionDateTime>2015-06-16 10:00:00</ActionDateTime>
		     <Username>anushree</Username>--Assigned By User
			 <FieldName>sajid</FieldName>--AssignedTo User
		</HistoryInfo>
		<HistoryInfo>--Workitem Completed on Case Workstep 1
			 <ActivityId>2</ActivityId>
			 <ActivityName>Case_WorkStep2</ActivityName>
			 <UserId>7</UserId>
			 <Username>anushree</Username>
			 <PersonalName>Anushree</PersonalName>
			 <ActionId>27</ActionId>
			 <ActionDateTime>2015-06-16 12:50:59.547</ActionDateTime>
			 <WorkItemId>1</WorkItemId>
		</HistoryInfo>
		<HistoryInfo>--Workitem Routed To Next Workstep Workdesk 3
			 <ActivityId>2</ActivityId>
			 <ActivityName>Case_WorkStep2</ActivityName>
			 <UserId>7</UserId>
			 <Username>anushree</Username>
			 <PersonalName>Anushree</PersonalName>
			 <ActionId>4</ActionId>
			 <ActionDateTime>2015-06-16 17:10:59.547</ActionDateTime>
			 <FieldId>3</FieldId>--TargetActivityId
			 <FieldName>Workdesk3</FieldName>--Target Activity Name
			 <WorkItemId>1</WorkItemId>
		</HistoryInfo>
		<HistoryInfo>--Workitem Completed on Workdesk 3
			 <ActivityId>3</ActivityId>
			 <ActivityName>Workdesk3</ActivityName>
			 <UserId>7</UserId>
			 <Username>anushree</Username>
			 <PersonalName>Anushree</PersonalName>
			 <ActionId>27</ActionId>
			 <ActionDateTime>2015-06-16 17:20:59.547</ActionDateTime>
			 <WorkItemId>1</WorkItemId>
		</HistoryInfo>
		<HistoryInfo>--Workitem Routed To End Event
			 <ActivityId>3</ActivityId>
			 <ActivityName>Workdesk3</ActivityName>
			 <UserId>7</UserId>
			 <Username>anushree</Username>
			 <PersonalName>Anushree</PersonalName>
			 <ActionId>27</ActionId>
			 <ActionDateTime>2015-06-16 17:30:59.547</ActionDateTime>
			 <FieldId>4</FieldId>--TargetActivityId
			 <FieldName>EndEvent4</FieldName>--Target Activity Name
			 <WorkItemId>1</WorkItemId>
		</HistoryInfo>
		<HistoryInfo>--Process Instance Completed and Has Reached End Event
			 <ActivityId>4</ActivityId>
			 <ActivityName>EndEvent4</ActivityName>
			 <UserId>7</UserId>
			 <Username>anushree</Username>
			 <PersonalName>Anushree</PersonalName>
			 <ActionId>20</ActionId>
			 <ActionDateTime>2015-06-16 17:40:59.547</ActionDateTime>
			 <WorkItemId>1</WorkItemId>
		</HistoryInfo>
	</History>
</WFGetTaskHistory_Output>
Auditing of Task Related Operations:
ActionIds:
    int WFL_TaskInitiated = 701; updated when task is initiated
    int WFL_TaskCompleted = 702; updated when task is completed
    int WFL_TaskRevoked = 703; updated when task is reinitiated
    int WFL_TaskAdded = 704;updated when task is added at run time
    int WFL_TaskDataSet = 705; updated when task data is set
    int WFL_TaskDataHasBeenSet = 706; updated when task data is set in WFCurrenroutelogtable which will contain a link whose value will be stored in WFAttributeMessageTable
    Note:
    If ActionId = 705 is enabled then :
        Whenever taskdata is set then there would be an antry in WFCurrentRouteLogTable for ActionId = 706 .
        One entry will go to WFAttributeMessageTable whose messageid will be inserted into WFCurrentRouteLogTable in AssociatedFieldId Column against ActionId 706 for that particular case.
			

1. Enabling or Disabling feature of Task Related Actions from Omniap APp configuration like we have for Audit Log Configuration.
    -For the above actionIds Cabinet Level configuration will be provided for enabling or disabling
    -Ref WFGetActionList and WFSetActionList
    -By Default All The actionids would be enabled except ActionId = 705
2. ActionId 705 will also be on cabinet lavel
3. AssociatedFieldName will store AssignedTo value
   UserName will have AssignedBy value in WFCUrrentRouteLogTable


{"Message":{"ActivityId":1,"TotalWiCount":1,"TotalDuration":0,"DelayTime":0,"ProcessDefId":1,"QueueId":0,"ProcessInstance":"sample-0000000001-Process","UserName":"vivek","UserId":6,"LoggingFlag":1,"ActionId":16,"ReportType":"D","WKInDelay":0,"FieldName":{"Attributes":{"Attribute":[{"Name":"Name","Value":"vivek"},{"Name":"Age","Value":23}]}},"WorkitemId":1,"ActivityName":"StartEvent1","FieldId":0,"TotalPrTime":0}}

<Attributes><Attribute><Name>Name</Name><Value>Vivek</Value></Attribute></Attributes>
*****************************************************************************************************************/
public String WFGetTaskHistory(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException{
	 StringBuffer outputXML = new StringBuffer("");
        PreparedStatement pstmt = null;
        PreparedStatement pstmt1 = null;
        Statement stmt = null;
        ResultSet rs1 = null;
        ResultSet rs2 = null;
        ResultSet rs = null;
        int mainCode = 0;
        int subCode = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        String engine ="";
        String propertyName = "";
        String filterStr = "";
        String comments = "";
        StringBuffer tempStr = new StringBuffer(500);
        int resultRowCount = 0 ;
        ArrayList<Integer> initiatedTaskList = new ArrayList<Integer>();
        ArrayList<Integer> completedTaskList = new ArrayList<Integer>();
        ArrayList<Integer> uninitiatedTaskList = new ArrayList<Integer>();
        StringBuffer initiatedTaskXml = new StringBuffer(500);
        StringBuffer completedTaskXml = new StringBuffer(500);
        StringBuffer uninitiatedTaskXml = new StringBuffer(500);

        Map<String, List<String>> commentsMap = new HashMap<String, List<String>>();
        try{
            int sessionID = parser.getIntOf("SessionId", 0, false);
            engine = parser.getValueOf("EngineName");
            int dbType = ServerProperty.getReference().getDBType(engine);
            WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
            if(participant!=null){
                int processDefId = parser.getIntOf("ProcessDefId", 0, false);
                int activityId = parser.getIntOf("ActivityId",0,true);
                String processInstanceId = parser.getValueOf("ProcessInstanceId","",false);
                int workItemId = parser.getIntOf("WorkItemId", 0, false);
                int taskId = parser.getIntOf("TaskId", 0, true);
                int subTaskId = parser.getIntOf("SubTaskId", 0, true);
    			boolean fetchFutureActivities = parser.getValueOf("FetchFutureActivities","N",true).startsWith("Y"); // Bugzilla Bug 2774
                String strQry = "";
                String tableName = "";
                String selectQryStr = "";
                String actionDateTime = null;
                String userName = null;
                String fieldName = null;
                String conditionStr = "";
                String orderByStr = null;
                String activityName = "";
                String newValue = "";
                int taskStatus = 0;
                int actionId = 0;
                int flag = 0;
                int fieldId = 0;
                HashMap<Integer,String> activityMap = new HashMap<Integer, String>(); 
                HashMap<Integer,String> taskMap = new HashMap<Integer, String>(); 
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                java.util.Date convertedDate = null;
                orderByStr =" Order By ActionDateTime Asc, ActionId Asc";
                if(taskId != 0 && activityId !=0){
                    flag = 1;//all the previous tasks performed for a processinstanceid on a particular case workstep
                    //selectQryStr = "Select ActionId,TaskId,SubTaskId,ProcessInstanceId,WorkItemId,ActivityId, ActionDateTime,UserName, "
                     //           + "AssociatedFieldName From WFCurrentRouteLogTable";
                    conditionStr = " Where ProcessDefId = ? And ProcessInstanceId = ? And WorkItemId = ? And ActivityId = ?  And TaskId = ?"
                            + " And SubTaskId <= "+subTaskId ;
                    //orderByStr =" Order By ActionDateTime Asc";
                }else if (activityId != 0 && taskId==0){
                    flag = 2;//All the tasks performed including basic workitem operations on a particular activity for a processinstanceid.
                   // selectQryStr = "TaskStatus,TaskId,SubTaskId,ProcessInstanceId,WorkItemId,ActivityId, ActionDateTime, AssignedBy,AssignedTo"
                   //         + " From WFTaskStatusTable";
                    conditionStr = " Where ProcessDefId = ? And ProcessInstanceId = ? And WorkItemId = ?  And ActivityId = ? "
							+ " And ActionId IN(1,2,3,4,20,27,701,702,703,707,708, 709, 710, 711, 712, 713, 714, 715) ";
                    //orderByStr =" Order By ActionDateTime Asc";

                }else if (activityId ==0 && taskId == 0 ){
                    flag = 3;// All the task perfromed ncluding basic workitem operations throughout the process for a processinstanceid .
                   // selectQryStr = "TaskStatus,TaskId,SubTaskId,ProcessInstanceId,WorkItemId,ActivityId, ActionDateTime, AssignedBy,AssignedTo"
                  //          + " From WFTaskStatusTable";
                    ArrayList<Integer> parentWorkItems = new ArrayList<Integer>();
                    WFSUtil.getListOfParentWorkitems(con, dbType,engine, processInstanceId,
                    		workItemId,parentWorkItems);
                    StringBuffer workItemClause = new StringBuffer();
                    workItemClause.append(workItemId).append(",");
                    if(workItemId>1){
                    for(int workitemid:parentWorkItems){
                    	workItemClause.append(workitemid);
                    	workItemClause.append(",");
                    }
                    }
                    workItemClause.deleteCharAt(workItemClause.length()-1);
                    conditionStr = " Where ProcessDefId = ? And ProcessInstanceId = ?  And WorkItemId in (  "
                            + workItemClause + ") And ActionId IN(1,2,3,4,20,27,701,702,703,707,708, 709, 710, 711, 712, 713, 714, 715) ";
                    //orderByStr =" Order By ActionDateTime Asc";

                }
                 if(activityId ==0 && taskId == 0){
                	 strQry="Select A.ActionId,A.TaskId,A.SubTaskId,A.ProcessInstanceId,A.WorkItemId,A.ActivityId, A.ActionDateTime,A.UserName,"
                     + "A.AssociatedFieldName,A.NewValue,A.AssociatedFieldId from ( Select ActionId,TaskId,SubTaskId,ProcessInstanceId,WorkItemId,ActivityId, ActionDateTime,UserName,"
                         + " AssociatedFieldName,NewValue,AssociatedFieldId From WFCurrentRouteLogTable "+WFSUtil.getTableLockHintStr(dbType)+conditionStr + ") A" +
                         " where A.ActivityId not in ( select ActivityId from Activitytable where ProcessDefId = "+ processDefId + "  and ActivityType in ( " + WFSConstant.ACT_RULE+ ") )" +
                         		" and (A.associatedfieldname is null or A.associatedfieldname not in (Select ActivityName from Activitytable where ProcessDefId ="+ processDefId + " and ActivityType in ( " + WFSConstant.ACT_RULE+ ") )) "+orderByStr;
                }else{
                	 strQry = "Select ActionId,TaskId,SubTaskId,ProcessInstanceId,WorkItemId,ActivityId, ActionDateTime,UserName,"
                         + "AssociatedFieldName,NewValue,AssociatedFieldId From WFCurrentRouteLogTable "+WFSUtil.getTableLockHintStr(dbType)+conditionStr+orderByStr;
                }
                pstmt = con.prepareStatement(strQry);
                pstmt.setInt(1,processDefId);
                WFSUtil.DB_SetString(2, processInstanceId, pstmt, dbType);
                if (!(activityId ==0 && taskId == 0 )){
                pstmt.setInt(3,workItemId);
                }
                
                if(flag==1){
                    pstmt.setInt(4,activityId);
                    pstmt.setInt(5,taskId);
                }else if(flag==2){
                    pstmt.setInt(4,activityId);
                }
                rs = pstmt.executeQuery();
                tempStr.append("<History>\n");
                while(rs.next()){
                    comments = "";
                    actionId = rs.getInt(1);
                    taskId = rs.getInt(2);
                    subTaskId = rs.getInt(3);
                    processInstanceId = rs.getString(4);
                    workItemId = rs.getInt(5);
                    activityId = rs.getInt(6);
                    actionDateTime = rs.getString(7);
                    userName = rs.getString(8);
                    fieldName = rs.getString(9);
                    newValue = rs.getString(10);
                    fieldId = rs.getInt(11);
				    String keyString = processInstanceId+"#"+workItemId+"#"+activityId+"#"+taskId+"#"+subTaskId+"#"+actionId;
                    //Updated logic to fetch the comments for each log
                    if(actionId == WFSConstant.WFL_TaskApproved || actionId == WFSConstant.WFL_TaskDeclined || actionId == WFSConstant.WFL_TaskReassigned || actionId == WFSConstant.WFL_TaskRejected || actionId == WFSConstant.WFL_TaskRevoked){
                    	int commentsType =0;
                    	if(actionId == WFSConstant.WFL_TaskApproved ){
                    		commentsType = WFSConstant.CONST_COMMENTS_TASK_APPROVAL;
                    	}
                    	else if(actionId == WFSConstant.WFL_TaskDeclined ){
                    		commentsType = WFSConstant.CONST_COMMENTS_DECLINE;
                        }
                    	else if(actionId == WFSConstant.WFL_TaskReassigned ){
                    		commentsType = WFSConstant.CONST_COMMENTS_REASSIGN;
                        }
                    	else if(actionId == WFSConstant.WFL_TaskRejected ){
                    		commentsType = WFSConstant.CONST_COMMENTS_TASK_REJECTED;
                        }
                    	else if(actionId == WFSConstant.WFL_TaskRevoked ){
                    		commentsType = WFSConstant.CONST_COMMENTS_TASK_REVOKED;
                        }
                    	
				    	if(commentsMap.containsKey(keyString)){
				    		List<String> commentsList = commentsMap.get(keyString);
                            if(commentsList != null && !commentsList.isEmpty()){ //Get first value of the list and remove it from the list
                            	comments = commentsList.get(0);
                            	commentsList.remove(0);
                            }
				    	}else{
		                    String qryStr1 = "select comments from WFCOMMENTSTABLE where processdefid = ? and processinstanceid = ? and workitemid = ? "
		                    		+ "and activityid = ? and taskid = ? and subtaskid = ? and CommentsType =? order by ActionDateTime Asc";
						    pstmt1 = con.prepareStatement(qryStr1);
						    pstmt1.setInt(1, processDefId);
						    WFSUtil.DB_SetString(2, processInstanceId, pstmt1, dbType);
						    pstmt1.setInt(3, workItemId);
						    pstmt1.setInt(4, activityId);
						    pstmt1.setInt(5, taskId);
						    pstmt1.setInt(6, subTaskId);
						    pstmt1.setInt(7, commentsType);
						    rs2 = pstmt1.executeQuery();

				    		List<String> commentsList = new ArrayList<String>();
				    		String commentStr;
						    while(rs2.next()) {
						    	commentStr = rs2.getString(1);
						    	commentsList.add(commentStr);
						    }
						    if(commentsList != null && !commentsList.isEmpty()){
						    	comments = commentsList.get(0);
                            	commentsList.remove(0);
    						    commentsMap.put(keyString, commentsList);
						    }
						    if (pstmt1 != null) {
								pstmt1.close();
								pstmt1 = null;
						    }
						    if (rs2 != null) {
								rs2.close();
								rs2 = null;
						    }
					    }
                    }
                    if(!activityMap.containsKey(activityId)){
                        if(stmt!=null){
                           stmt.close();
                           stmt = null;
                        }
                        if(rs1!=null){
                           rs1.close();
                           rs1 = null;
                        }
                        stmt = con.createStatement();
                        String strQry1 = "Select ActivityName from ActivityTable Where ProcessDefId = "+processDefId+" And ActivityId = "+activityId;
                        rs1 = stmt.executeQuery(strQry1);
                        if(rs1.next()){
                            activityName = rs1.getString(1);
                        }
                        activityMap.put(activityId,activityName);
                    }
//                    if(!taskMap.containsKey(taskId)){
//                        if(stmt!=null){
//                           stmt.close();
//                           stmt = null;
//                        }
//                        if(rs1!=null){
//                           rs1.close();
//                           rs1 = null;
//                        }
//                        stmt = con.createStatement();
//                        String strQry1 = "Select TaskName from WFTaskDefTable Where ProcessDefId = "+processDefId+" And TaskId = "+taskId;
//                        rs1 = stmt.executeQuery(strQry1);
//                        if(rs1.next()){
//                            taskName = rs1.getString(1);
//                        }
//                        taskMap.put(taskId,taskName);
//                    }
                    if(actionDateTime!=null){
                        convertedDate =  dateFormat.parse(actionDateTime);
                        actionDateTime = dateFormat.format(convertedDate);
                    }
                    tempStr.append("<HistoryInfo>\n");
                    if(flag==1){
                    	tempStr.append(gen.writeValue("ActionId",String.valueOf(actionId)));
                    	tempStr.append(gen.writeValue("SubTaskId",String.valueOf(subTaskId)));
                    	tempStr.append(gen.writeValue("ActionDateTime", actionDateTime));
                    	tempStr.append(gen.writeValue("AssignedByUser", userName));

                        if(actionId == WFSConstant.WFL_TaskApproved || actionId == WFSConstant.WFL_TaskDeclined || actionId == WFSConstant.WFL_TaskReassigned || actionId == WFSConstant.WFL_TaskRejected || actionId == WFSConstant.WFL_TaskRevoked ){
                        	tempStr.append(gen.writeValue("Comments",WFSUtil.handleSpecialCharInXml(String.valueOf(comments))));
                        }
                    	if(actionId==WFSConstant.WFL_TaskDiverted || actionId==WFSConstant.WFL_AssignBackDivertedTask){
                    		tempStr.append(gen.writeValue("FieldName", fieldName));
                    	}
                    	else
                    		tempStr.append(gen.writeValue("AssignedToUser", fieldName)); 
                    }else if(flag==2 || flag ==3){
                        //taskName = taskMap.get(taskId);
                        activityName = activityMap.get(activityId);
                        tempStr.append(gen.writeValue("ActionId",String.valueOf(actionId)));
                        if(actionId == WFSConstant.WFL_TaskInitiated || actionId == WFSConstant.WFL_TaskCompleted ||actionId == WFSConstant.WFL_TaskRevoked||actionId==WFSConstant.WFL_TaskDiverted || actionId == WFSConstant.WFL_TaskDeclined || actionId == WFSConstant.WFL_TaskReassigned ){
                        	tempStr.append(gen.writeValue("TaskId",String.valueOf(taskId)));
                        	tempStr.append(gen.writeValue("SubTaskId",String.valueOf(subTaskId)));
                        	tempStr.append(gen.writeValue("TaskName",newValue));
                        }
                        if(actionId == WFSConstant.WFL_TaskApproved || actionId == WFSConstant.WFL_TaskDeclined || actionId == WFSConstant.WFL_TaskReassigned || actionId == WFSConstant.WFL_TaskRejected || actionId == WFSConstant.WFL_TaskRevoked){
                        	tempStr.append(gen.writeValue("Comments",WFSUtil.handleSpecialCharInXml(String.valueOf(comments))));
                        }
                        tempStr.append(gen.writeValue("ActivityId",String.valueOf(activityId)));
                        tempStr.append(gen.writeValue("ActivityName",activityName));
                        //tempStr.append(gen.writeValue("ProcessInstanceId",processInstanceId));
                       // tempStr.append(gen.writeValue("WorkItemId",String.valueOf(workItemId)));
                        tempStr.append(gen.writeValue("ActionDateTime", actionDateTime));
                        tempStr.append(gen.writeValue("UserName", userName));
                        tempStr.append(gen.writeValue("FieldId",String.valueOf(fieldId)));
                        tempStr.append(gen.writeValue("FieldName", fieldName));
                    }    
                    tempStr.append("</HistoryInfo>\n");
                /*    if(!locale.equals("") && returnActionDescription.equals("Y"))
                    {
                        WFXmlList taskList = new WFXmlList(duptempXml.toString(),"HistoryInfo",0,duptempXml.length());
                        if(locale.indexOf("-") != -1)
                             loc = new Locale(locale.substring(0, locale.indexOf("-")),
                                locale.substring(locale.indexOf("-")+1, locale.length()));
                        else
                             loc = new Locale(locale);
                        resourceBundle.prepareBundles(loc);
                        dateFormat2 = parser.getValueOf("DateFormat", "dd/mm/yyyy", true);
                        actionText = actionPrint(Integer.parseInt(taskList.getVal("ActionId")), taskList,dateFormat2);
						if(escapeSpecialChar)
							actionText = WFSUtil.handleSpecialCharInXml(actionText);
                        actionText = "<ActionDescription>"+actionText+"</ActionDescription>";
                        duptempXml.insert(duptempXml.lastIndexOf("</HistoryInfo>\n"), actionText);
                    }*/
                   // tempStr.append(duptempXml);
                    resultRowCount++;
                }
                tempStr.append(WFSUtil.getSubProcessDetail(con, taskId, processInstanceId, processDefId));
                tempStr.append("</History>\n");

                if(pstmt != null){
                	pstmt.close();
                	pstmt = null;
                }
                if(rs != null){
                	rs.close();
                	rs = null;
                }
                if(fetchFutureActivities){
                	int currentActivityId = 0;
                	int currentActivityType = 0;
                	
                	pstmt = con.prepareStatement("Select ActivityId,ActivityType from WFInstrumentTable where processinstanceid = ? and workitemid = ?");
                	pstmt.setString(1, processInstanceId);
                	pstmt.setInt(2, workItemId);
                	rs = pstmt.executeQuery();
                	if(rs.next()){
                		currentActivityId=rs.getInt("ActivityId");
                		currentActivityType=rs.getInt("ActivityType");
                		if(pstmt != null){
                        	pstmt.close();
                        	pstmt = null;
                        }
                        if(rs != null){
                        	rs.close();
                        	rs = null;
                        }
                        if(rs1!=null){
                        	rs1.close();
                        	rs1 = null;
                        	
                        }
                		if(currentActivityType==WFSConstant.ACT_CASE){
                        	pstmt = con.prepareStatement("Select TaskId,SubTaskId,TaskStatus,DueDate,ActionDateTime from WFTaskStatusTable where processinstanceid = ? and workitemid = ? and activityid=?");
                        	WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
                        	pstmt.setInt(2, workItemId);
                        	pstmt.setInt(3, currentActivityId);
                        	rs = pstmt.executeQuery();
                        	while(rs.next()){
                        		int status = rs.getInt("TaskStatus");
                        		if(status ==WFSConstant.WF_TaskInitiated){
                        			int initiatedTaskId = rs.getInt("TaskId");
                        			int initiatedSubTaskId = rs.getInt("SubTaskId");
                        			if(initiatedTaskList.isEmpty()){
                        				initiatedTaskXml.append("<InitiatedTasks>");
                        			}
                        			initiatedTaskList.add(initiatedTaskId);
                        			initiatedTaskXml.append("<InitiatedTask>");
                        			initiatedTaskXml.append(gen.writeValue("TaskId", String.valueOf(initiatedTaskId)));
                        			initiatedTaskXml.append(gen.writeValue("SubTaskId", String.valueOf(initiatedSubTaskId)));
                        			initiatedTaskXml.append(gen.writeValue("DueDate", rs.getString("DueDate")));
                        			initiatedTaskXml.append(gen.writeValue("InitiatedOn", rs.getString("ActionDateTime")));
                        			initiatedTaskXml.append("</InitiatedTask>");
                        		}
                        		else {

                        			int completedTaskId = rs.getInt("TaskId");
                        			int completedSubTaskId = rs.getInt("SubTaskId");
                        			if(completedTaskList.isEmpty()){
                        				completedTaskXml.append("<CompletedTasks>");
                        			}
                        			completedTaskList.add(completedTaskId);
                        			completedTaskXml.append("<CompletedTask>");
                        			completedTaskXml.append(gen.writeValue("TaskId", String.valueOf(completedTaskId)));
                        			completedTaskXml.append(gen.writeValue("SubTaskId", String.valueOf(completedSubTaskId)));
                        			completedTaskXml.append(gen.writeValue("DueDate", rs.getString("DueDate")));
                        			completedTaskXml.append(gen.writeValue("CompletedDateTime", rs.getString("ActionDateTime")));
                        			completedTaskXml.append("</CompletedTask>");
                        		}
                        	}
                        	HashMap <Integer,Integer> tempMap=new HashMap<Integer,Integer>();//This Map contains Ready/Waiting status of a Task
                        	pstmt = con.prepareStatement("Select TaskId,Ready from WFTaskPreConditionResultTable where processInstanceId=? and workitemId=? and activityId=?" );
                                    pstmt.setString(1,processInstanceId);
                                    pstmt.setInt(2,workItemId);
                                	pstmt.setInt(3, currentActivityId);
                                	rs = pstmt.executeQuery();
                                	while(rs.next()){ 
                                	taskId =rs.getInt("TaskId"); 
                                	tempMap.put(rs.getInt("TaskId"),rs.getInt("Ready"));
                                	}
                        	if(pstmt != null){
                            	pstmt.close();
                            	pstmt = null;
                            }
                            if(rs != null){
                            	rs.close();
                            	rs = null;
                            }
                            pstmt1=con.prepareStatement("select DefaultStatus,TaskId from WFTaskPropertyTable where processdefid=?");
                        	pstmt1.setInt(1,processDefId);
                        	rs1 = pstmt1.executeQuery();
                        	HashMap <Integer,Integer> defaultStatustMap=new HashMap<Integer,Integer>();
                        	while(rs1.next())
                        	{
                        		defaultStatustMap.put(rs1.getInt("TaskId"),rs1.getInt("DefaultStatus"));
                        	}
                            if(rs1 != null){
                            	rs1.close();
                            	rs1 = null;
                            }
                        	if(pstmt1 != null){
                            	pstmt1.close();
                            	pstmt1 = null;
                            }
                            
                        	 pstmt = con.prepareStatement("(Select TaskId,TaskName from ActivityInterfaceAssocTable a inner join WFTaskDefTable b "+ 
                                    " on a.processdefid = b.processdefid "+ 
                                    " and a.Interfacetype = 'J' " +
                                    " and a.InterfaceElementId =b.TaskId " +   
                                    " where a.processdefid =? and a.activityid =?) " +
                                    " UNION (Select TaskId,TaskName from RTACTIVITYINTERFACEASSOCTABLE a inner join WFTaskDefTable b " + 
                                    " on a.processdefid = b.processdefid and a.Interfacetype = 'J'  and a.InterfaceElementId =b.TaskId " +
                                    " and a.InterfaceElementId =b.TaskId where a.processdefid =? and a.activityid =? and a.processinstanceid = ?)" + 
                                    " order by taskid " );
                                    pstmt.setInt(1,processDefId);
                                	pstmt.setInt(2, currentActivityId);
                                	pstmt.setInt(3,processDefId);
                                	pstmt.setInt(4, currentActivityId);
                                	WFSUtil.DB_SetString(5, processInstanceId, pstmt, dbType);
                                	rs = pstmt.executeQuery();
                                	while(rs.next()){
                                	taskId =rs.getInt("TaskId"); 
                                	if(!(initiatedTaskList.contains(taskId)||(completedTaskList.contains(taskId)))){
                                		if(uninitiatedTaskList.isEmpty()){
                                			uninitiatedTaskXml.append("<UninitiatedTasks>");
                            			}
                                		uninitiatedTaskList.add(taskId);

                                		uninitiatedTaskXml.append("<UninitiatedTask>");
                                		uninitiatedTaskXml.append(gen.writeValue("TaskId", String.valueOf(taskId)));
                                		uninitiatedTaskXml.append(gen.writeValue("TaskName", rs.getString("TaskName")));
                                		String defStatus=String.valueOf(tempMap.get(taskId));
                                		if(defStatus==null||defStatus==""||"NULL".equalsIgnoreCase(defStatus)){
                                			
                                				defStatus=String.valueOf(defaultStatustMap.get(taskId));
                                		}
                                		uninitiatedTaskXml.append(gen.writeValue("TaskStatus",defStatus));
                                		uninitiatedTaskXml.append("</UninitiatedTask>");
                                	}
                                	}
                        	if(pstmt != null){
                            	pstmt.close();
                            	pstmt = null;
                            }
                            if(rs != null){
                            	rs.close();
                            	rs = null;
                            }
                        	if(!completedTaskList.isEmpty()){
                				completedTaskXml.append("</CompletedTasks>");
                				tempStr.append(completedTaskXml.toString());
                			}
                			if(!initiatedTaskList.isEmpty()){
                				initiatedTaskXml.append("</InitiatedTasks>");
                				tempStr.append(initiatedTaskXml.toString());
                			}
                			if(!uninitiatedTaskList.isEmpty()){
                				uninitiatedTaskXml.append("</UninitiatedTasks>");
                				tempStr.append(uninitiatedTaskXml.toString());
                			}
                		}
                	}
                	
                		pstmt = con.prepareStatement("Select act2.ActivityId,act2.ActivityName,act2.ActivityType from ACTIVITYTABLE act1 ,ACTIVITYTABLE act2 where act1.ProcessDefId =act2.ProcessDefId  and act1.TargetActivity= act2.ActivityId and act1.ProcessDefId = ? and act1.ActivityId = ?");
                    	pstmt.setInt(1, processDefId);
                    	pstmt.setInt(2, currentActivityId);
                    	rs = pstmt.executeQuery();
                    	tempStr.append("<FutureActivities>");

                    	while(rs.next()){
                    		int factivityId=rs.getInt("ActivityId");
                    		int factivityType=rs.getInt("ActivityType");
                    		String factivityName=rs.getString("ActivityName");
                    		if(factivityType==WFSConstant.ACT_DISTRIBUTE){

                    			pstmt = con.prepareStatement("Select b.activityId,b.activityName,b.activitytype from " +
                    					"RuleOperationTable a inner join ActivityTable b " +
                    					"on a.processdefid=b.processdefid and a.param1=b.activityname " +
                    			"where a.processdefid=? AND a.ACTIVITYID=? and RuleType = ? and b.activitytype in (?,?)");
                    			pstmt.setInt(1, processDefId);
                    			pstmt.setInt(2, factivityId);
                    			pstmt.setString(3, "D");
                    			pstmt.setInt(4,WFSConstant.ACT_CUSTOM);
                    			pstmt.setInt(5,WFSConstant.ACT_CASE);
                    			rs = pstmt.executeQuery();
                    			while(rs.next()){

                    				tempStr.append("<FutureActivity>");
                    				tempStr.append(gen.writeValue("ActivityId",String.valueOf(rs.getInt("activityId"))));
                    				tempStr.append(gen.writeValue("ActivityName",rs.getString("ActivityName")));
                    				tempStr.append(gen.writeValue("ActivityType",String.valueOf(rs.getInt(("ActivityType")))));
                    				tempStr.append("</FutureActivity>");
                    			}
                    		}
                    		else if((factivityType==WFSConstant.ACT_CUSTOM)||(factivityType==WFSConstant.ACT_CASE)){
                    			tempStr.append("<FutureActivity>");
                    			tempStr.append(gen.writeValue("ActivityId",String.valueOf(factivityId)));
                    			tempStr.append(gen.writeValue("ActivityName",String.valueOf(factivityName)));
                    			tempStr.append(gen.writeValue("ActivityType",String.valueOf(factivityType)));
                    			tempStr.append("</FutureActivity>");
                    		}
                    		else if(factivityType==WFSConstant.ACT_RULE){

                    			pstmt = con.prepareStatement("Select distinct b.activityId,b.activityName,b.activitytype from " +
                    					"RuleOperationTable a inner join ActivityTable b " +
                    					"on a.processdefid=b.processdefid and a.param1=b.activityname " +
                    			"where a.processdefid=? AND a.ACTIVITYID=? and RuleType = ? and a.OperationType = ? and b.activitytype in (?,?)");
                    			pstmt.setInt(1, processDefId);
                    			pstmt.setInt(2, factivityId);
                    			pstmt.setString(3, "X");
                    			pstmt.setInt(4, 4);

                    			pstmt.setInt(5,WFSConstant.ACT_CUSTOM);
                    			pstmt.setInt(6,WFSConstant.ACT_CASE);
                    			rs = pstmt.executeQuery();
                    			while(rs.next()){

                    				tempStr.append("<FutureActivity>");
                    				tempStr.append(gen.writeValue("ActivityId",String.valueOf(rs.getInt("activityId"))));
                    				tempStr.append(gen.writeValue("ActivityName",rs.getString("ActivityName")));
                    				tempStr.append(gen.writeValue("ActivityType",String.valueOf(rs.getInt(("ActivityType")))));
                    				tempStr.append("</FutureActivity>");
                    			}
                    		}

                    	}
                    	if(pstmt != null){
                        	pstmt.close();
                        	pstmt = null;
                        }
                        if(rs != null){
                        	rs.close();
                        	rs = null;
                        }
                tempStr.append("</FutureActivities>");
                }
    			if(resultRowCount==0){
                     mainCode = WFSError.WM_NO_MORE_DATA;
                     subCode  = 0;
                     subject  = WFSErrorMsg.getMessage(mainCode);
                 }
                if(mainCode ==0){
                     outputXML = new StringBuffer(500);
                     outputXML.append(gen.createOutputFile("WFGetTaskHistory"));
                     outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                     outputXML.append(tempStr.toString());
                     
                     outputXML.append(gen.closeOutputFile("WFGetTaskHistory"));
                }
            } else{
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
            if(mainCode == WFSError.WM_NO_MORE_DATA){
                outputXML = new StringBuffer(500);
                outputXML.append(gen.writeError("WFGetTaskHistory", WFSError.WM_NO_MORE_DATA, 0,
                                                WFSError.WF_TMP, WFSErrorMsg.getMessage(WFSError.WM_NO_MORE_DATA), ""));
            }
        } catch(SQLException e){
            WFSUtil.printErr(engine, e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if(e.getErrorCode() == 0){
                if(e.getSQLState().equalsIgnoreCase("08S01")){
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
                        + ")";
                }
            } else{
                descr = e.getMessage();
            }
        } catch(NumberFormatException e){
            WFSUtil.printErr(engine, e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(NullPointerException e){
            WFSUtil.printErr(engine, e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(Exception e){
            WFSUtil.printErr(engine, e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(Error e){
            WFSUtil.printErr(engine, e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally{
            try{
                if(rs != null){
                    rs.close();
                    rs = null;
                }
            } catch(Exception ignored){WFSUtil.printErr(engine,"", ignored);}
            try{
				if(rs1!=null){
					rs1.close();
					rs1=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
            try{
				if(rs2!=null){
					rs2.close();
					rs2=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
            try{
				if(stmt!=null){
					stmt.close();
					stmt=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
            try{
                if(pstmt != null){
                       pstmt.close();
                       pstmt = null;
                }
            } catch(Exception ignored){}
            try{
				if(pstmt1!=null){
					pstmt1.close();
					pstmt1=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
           
        }
        if(mainCode != 0){
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();
    }//End of WFGetTaskHistory API.


//----------------------------------------------------------------------------------------------------
//Function Name 						:	WFHandleEventFunc
//Date Written (DD/MM/YYYY)				:	28/08/2015
//Author								:	Amar Sharma
//Input Parameters						:	Connection , XMLParser , XMLGenerator
//Output Parameters						:   none
//Return Values							:	String
//Description							:   API to add, delete or update event
//
//----------------------------------------------------------------------------------------------------

public String WFHandleEventFunc(Connection con, XMLParser parser, XMLGenerator gen) throws WFSException, JTSException {
        String strReturn = "";
        int mainCode = 0;
        int subCode = 0;
        String subject = "";
        String errType = "";
        String descr = "";
        StringBuilder strOutputXml = null;
        String strQuery = "";
        ResultSet rs = null;
        ResultSet rset = null;
        ResultSet objRs = null;
        Statement stmt = null;
        Statement objStmt = null;
        PreparedStatement pObjStmt=null;
        String strQuery1 = "";
        int iEventID = 0;
        int iResult = 0;
        boolean bTransaction = true;
        String strModificationDate = "null";
        String strMailCC = "";
        String strMailSubject = "";
        String strMailMessage = "";
        int iStartTimeHours = 0;
        int iStartTimeMins = 0;
        int iEndTimeHours = 0;
        int iEndTimeMins = 0;
        String strParticipant_Name = "";
        String strUser_ID = "";
        String strEvent_Summary = "";
        String strCabName="";
        int iInputOption=1;
        //PMLocaleInfo localeInfo = new PMLocaleInfo();
        String option=null;
        try {
            //String strUserDbId = parser.getValueOf(WFSConstant.USERDBID, "0", true);//for session validation
            //if (PMGenFuncs.PM_ValidateUser(con, Integer.parseInt(strUserDbId),strCabName) != PMError.PM_SUCCESS) {
            /*if (PMGenFuncs.PM_ValidateUser(con, Integer.parseInt(strUserDbId),strCabName,localeInfo) != PMError.PM_SUCCESS) {
                iMainCode = PMError.PM_OPERATION_FAILED;
                subCode = PMError.PM_INVALID_USERDBID;
                throw new PMException(PMError.PM_INVALID_USERDBID);
            }*/
        	int sessionID = parser.getIntOf("SessionId", 0, false);
        	strCabName = parser.getValueOf("EngineName");
        	option = parser.getValueOf("Option");
        	int dbType = ServerProperty.getReference().getDBType(strCabName);
            WFParticipant participant = WMUser.WFCheckUpdateSession(con, sessionID, dbType);
			if (participant != null && participant.gettype() == 'U') {

				int iUserID = parser.getIntOf("UserId", 1, true);
				iInputOption = parser.getIntOf("InputOption", 1,true);   // InputOption is 1 for Create,2 for Update and 3 for Delete
				String strUpdationDate = WFSUtil.getDate(dbType);
				int iEventIDInXML = parser.getIntOf("EventId", 0,true);
				// to set AutoCommit as false
				stmt = con.createStatement();
				if (con.getAutoCommit()) {
					con.setAutoCommit(false);
				}
				if (iInputOption == 2 || iInputOption == 3)// update or delete event
				{
					stmt = con.createStatement();
					strQuery1 = "select CreationDateTime,EventRecursive,ParticipantName,CreatedBy,EventSummary from WFEventDetailsTable"+ WFSUtil.getTableLockHintStr(dbType)+ " where EventID = " + iEventIDInXML;
					rset = stmt.executeQuery(strQuery1);
					rset.next();
					String strIfRecursionTrue = rset.getString("EventRecursive");
					String strCreationDate = rset.getString("CreationDateTime");
					
					if (dbType == 1)
						strUpdationDate = "'" + WFSUtil.TO_SANITIZE_STRING(strCreationDate, true) + "'";
					else {
						strUpdationDate = strCreationDate;
						strUpdationDate = WFSUtil.TO_DATE(strUpdationDate, true,dbType); 
					} 
					strParticipant_Name = rset.getString("ParticipantName");
					strUser_ID = rset.getString("CreatedBy");
					strEvent_Summary = rset.getString("EventSummary");
					if (strParticipant_Name.equalsIgnoreCase("")
							|| strParticipant_Name.equalsIgnoreCase(",")) {
						strParticipant_Name = strUser_ID;
					}
					if (rset != null) {
						rset.close();
					}
					rset = null;
					if (stmt != null) {
						stmt.close();
					}
					stmt = null;

					stmt = con.createStatement();
					strQuery1 = "select MailId from PDBUser " + WFSUtil.getTableLockHintStr(dbType) + " where UserName in ("+ WFSUtil.TO_STRING(strUser_ID, true,dbType) + ")";
					rset = stmt.executeQuery(strQuery1);
					while (rset != null && rset.next()) {
						strUser_ID = rset.getString("MailId");
					}
					if (rset != null) {
						rset.close();
					}
					rset = null;
					if (stmt != null) {
						stmt.close();
					}
					stmt = null;
					StringBuilder strGuestNames = new StringBuilder();

					StringTokenizer s = new StringTokenizer(
							strParticipant_Name, ",");
					while (s.hasMoreElements()) {
						strGuestNames
								.append(WFSUtil.TO_STRING(
										String.valueOf(s.nextElement()), true,
										dbType));
						if (s.hasMoreElements()) {
							strGuestNames.append(",");
						}
					}

					strParticipant_Name = "";
					stmt = con.createStatement();
					strQuery1 = "select MailId from PDBUser "
							+ WFSUtil.getTableLockHintStr(dbType)
							+ " where UserName in (" + WFSUtil.TO_SANITIZE_STRING(strGuestNames.toString(), true)
							+ ")";
					rset = stmt.executeQuery(strQuery1);
					while (rset != null && rset.next()) {
						strParticipant_Name = strParticipant_Name
								+ rset.getString("MailId") + ",";
					}
					if (strIfRecursionTrue.equalsIgnoreCase("Y")) {
						stmt = con.createStatement();
						strQuery = "delete from WFEventDetailsTable "
								+ " where EventID = " + iEventIDInXML;
						int ret1 = stmt.executeUpdate(strQuery);
						if (ret1 <= 0) {
							bTransaction = false;
							if (!con.getAutoCommit()) {
								con.rollback();
								con.setAutoCommit(true);
							}
							mainCode = WFSError.WF_OPERATION_FAILED;
							subCode = WFSError.WF_ADDING_EVENT_DETAILS_FAILED;
							//throw new WFSException(WFSError.ADDING_Event_Details_FAILED);
							subject = WFSErrorMsg.getMessage(mainCode);
	    		            errType = WFSError.WF_TMP;
	    		            descr = WFSErrorMsg.getMessage(subCode);
	    		            String error = WFSUtil.generalError(option, strCabName, gen,
	    	   	                   mainCode, subCode,
	    	   	                   errType, subject,
	    	   	                    descr);
	    	   	             
	    	   	        return error;	
						}
						if (stmt != null) {
							stmt.close();
						}
						stmt = null;
					}
					stmt = con.createStatement();
					strQuery = "delete from WFEventDetailsTable"
							+ " where EventID = " + iEventIDInXML;
					int ret = stmt.executeUpdate(strQuery);
					if (ret <= 0) {
						bTransaction = false;
						if (!con.getAutoCommit()) {
							con.rollback();
							con.setAutoCommit(true);
						}
						mainCode = WFSError.WF_OPERATION_FAILED;
						subCode = WFSError.WF_ADDING_EVENT_DETAILS_FAILED;
						subject = WFSErrorMsg.getMessage(mainCode);
    		            errType = WFSError.WF_TMP;
    		            descr = WFSErrorMsg.getMessage(subCode);
    		            String error = WFSUtil.generalError(option, strCabName, gen,
    	   	                   mainCode, subCode,
    	   	                   errType, subject,
    	   	                    descr);
    	   	             
    	   	        return error;	
					
					}
					strMailMessage = strEvent_Summary;
					strMailSubject = "Event Cancelled";
					if(strUser_ID!=null){
						StringBuffer xml= CreateXML.WFAddToMailQueue(strCabName,String.valueOf(sessionID), strUser_ID, strParticipant_Name, strMailCC, strMailSubject, strMailMessage.toString(), "text/HTML","","","","","","","","","","", true);
						String serverIP = (String) WFServerProperty.getSharedInstance().getCallBrokerData().get(WFSConstant.CONST_BROKER_APP_SERVER_IP);
						serverIP =WFSUtil.escapeDN(serverIP);
						String serverPort = (String) WFServerProperty.getSharedInstance().getCallBrokerData().get(WFSConstant.CONST_BROKER_APP_SERVER_PORT);
						serverPort = WFSUtil.escapeDN(serverPort);
						String serverType = (String) WFServerProperty.getSharedInstance().getCallBrokerData().get(WFSConstant.CONST_BROKER_APP_SERVER_TYPE);
						serverType = WFSUtil.escapeDN(serverType);
						String clusterName = (String) WFServerProperty.getSharedInstance().getCallBrokerData().get("ClusterName");
						clusterName = WFSUtil.escapeDN(clusterName);
						NGEjbClient.getSharedInstance().makeCall(WFSUtil.TO_SANITIZE_STRING(serverIP,true), WFSUtil.TO_SANITIZE_STRING(serverPort,true), serverType, xml.toString(), WFSUtil.TO_SANITIZE_STRING(clusterName,true),"");
					}
					if (stmt != null) {
						stmt.close();
					}
					stmt = null;
				}

				if (iInputOption == 1 || iInputOption == 2)// add/update event
				{
					String strCreatedByUserId = parser.getValueOf("CreatedByUserId", "", true);
					stmt = con.createStatement();
					if (iInputOption == 1) {
						objStmt = con.createStatement();
						strQuery = "SELECT MAX(EventID) FROM WFEventDetailsTable"
								+ WFSUtil.getTableLockHintStr(dbType);
						objRs = objStmt.executeQuery(strQuery);
						objRs.next();
						iEventID = objRs.getInt(1);
						iEventID = iEventID + 1;
						if (objRs != null) {
							objRs.close();
						}
						objRs = null;
						if (objStmt != null) {
							objStmt.close();
						}
						objStmt = null;
					} else if (iInputOption == 2) {
						iEventID = iEventIDInXML;
						strModificationDate = WFSUtil.getDate(dbType);
					}
					String strEventName = parser.getValueOf("EventName", "", true);
					String strEventDescription = parser.getValueOf("EventDescription", "", true);
					String strStartDate = parser.getValueOf("StartDate", "", true);
					String strDBStartDate = WFSUtil.TO_DATE(strStartDate, true,dbType);
					String strEndDate = parser.getValueOf("EndDate","", true);
					String strDBEndDate = WFSUtil.TO_DATE(strEndDate, true,dbType);
					String strStartTime = parser.getValueOf("StartTime", "", true);
					String strEndTime = parser.getValueOf("EndTime","", true);
					String strFullDayEvent = parser.getValueOf("FullDayEvent", "", true);
					String strRepeatEvent = parser.getValueOf("RepeatEvent", "", true);
					String strReminderType = parser.getValueOf("ReminderType", "", true);
					String strReminderTimeType = parser.getValueOf("ReminderTimeType", "", true);
					int iReminderTime = Integer.parseInt(parser.getValueOf("ReminderTime", "0", true));
					int iRepeatType = 0;
					String strDBRepeatEnd = "";
					String strRepeatSummary = "";
					String strRepeatDayString = "";
					if (strRepeatEvent.equalsIgnoreCase("Y")) {
						String strRepeatType = parser.getValueOf("Repeat", "", true);
						if (strRepeatType.equalsIgnoreCase("daily")) {
							iRepeatType = 1;
							strRepeatDayString = parser.getValueOf("RepeatInterval", "", true);
						} else if (strRepeatType.equalsIgnoreCase("weekly")) {
							iRepeatType = 2;
							int iRepeatDayCount = parser.getNoOfFields("RepeatDay");

							for (int i = 1; i <= iRepeatDayCount; i++) {
								String strRepeatDay = "";
								if (i == 1) {
									strRepeatDay = parser.getFirstValueOf("RepeatDay");

									strRepeatDayString = strRepeatDayString.concat(WFSUtil.convertDayNameToNumber(strRepeatDay)+ ",");
								} else {

									strRepeatDay = parser.getNextValueOf("RepeatDay");
									if (i != iRepeatDayCount) {
										strRepeatDayString = strRepeatDayString.concat(WFSUtil.convertDayNameToNumber(strRepeatDay)+ ",");
									} else {
										strRepeatDayString = strRepeatDayString.concat(WFSUtil.convertDayNameToNumber(strRepeatDay));
									}
								}
							}

						} else if (strRepeatType.equalsIgnoreCase("monthly")) {
							iRepeatType = 3;
							strRepeatDayString = "0";
						}
						String strRepeatEnd = parser.getValueOf("RepeatEndOn", "", true);
						strDBRepeatEnd = WFSUtil.TO_DATE(strRepeatEnd, true,dbType);
						strRepeatSummary = parser.getValueOf("RepeatSummary", "", true);

					}

					String strEventSummary = parser.getValueOf("EventSummary", "", true);

					int iStartTimeArray[] = WFSUtil.splitTimeIStartEnd(strStartTime);
					iStartTimeHours = iStartTimeArray[0];
					iStartTimeMins = iStartTimeArray[1];

					int iEndTimeArray[] = WFSUtil.splitTimeIStartEnd(strEndTime);
					iEndTimeHours = iEndTimeArray[0];
					iEndTimeMins = iEndTimeArray[1];

					String strParticipantName = "";
					int iGuestsCount = parser.getNoOfFields("GuestName");
					if (iGuestsCount == 0) {
						strParticipantName = strCreatedByUserId;
					}
					for (int i = 1; i <= iGuestsCount; i++) {
						String strGuestname = "";
						if (i == 1) {
							strGuestname = parser.getFirstValueOf("GuestName");
							strParticipantName = strParticipantName.concat(strGuestname + ",");
						} else {

							strGuestname = parser.getNextValueOf("GuestName");
							if (i != iGuestsCount) {
								strParticipantName = strParticipantName.concat(strGuestname + ",");
							} else {
								strParticipantName = strParticipantName.concat(strGuestname);
							}
						}
					}

					//--Putting check for preventing the add or update of the event if another event with the same name is already created in the system for same date time.
					boolean duplicateEventFound = false;
					strQuery1 = "SELECT 1 FROM WFEventDetailsTable "+ WFSUtil.getTableLockHintStr(dbType)+ " where  UPPER(EVENTNAME) = ? "
								+ " AND STARTDATE = " + strDBStartDate + " AND ENDDATE = " + strDBEndDate;
					if("Y".equalsIgnoreCase(strFullDayEvent)){
						strQuery1 = strQuery1 + " AND FULLDAYEVENT = 'Y' ";
					}else{
						strQuery1 = strQuery1 + " AND STARTTIMEHRS = " + iStartTimeHours + " AND STARTTIMEMINS = " + iStartTimeMins;
						strQuery1 = strQuery1 + " AND ENDTIMEHRS = " + iEndTimeHours + " AND ENDTIMEMINS = " + iEndTimeMins;
					}
					pObjStmt = con.prepareStatement(strQuery1);
					pObjStmt.setString(1,strEventName.trim().toUpperCase());
					objRs = pObjStmt.executeQuery();
					if(objRs != null && objRs.next()){
						duplicateEventFound = true;
					}
					if (objRs != null) {
						objRs.close();
						objRs = null;
					}
					if (pObjStmt != null) {
						pObjStmt.close();
						pObjStmt = null;
					}
					if(duplicateEventFound){
						mainCode = WFSError.WF_OPERATION_FAILED;
						subCode = WFSError.WF_DUPLICATE_EVENT_FOUND;
						subject = WFSErrorMsg.getMessage(mainCode);
    		            errType = WFSError.WF_TMP;
    		            descr = WFSErrorMsg.getMessage(subCode);
    		            String error = WFSUtil.generalError(option, strCabName, gen,
	    	   	                   mainCode, subCode,
	    	   	                   errType, subject,
	    	   	                    descr);
	    	   	             
	    	   	        return error;
    		       }
					
					
					String strCreatedByUserEmailId = strCreatedByUserId;
					String strParticipantEmailId = strParticipantName;
					objStmt = con.createStatement();
					strQuery1 = "select MailId from PDBUser "+ WFSUtil.getTableLockHintStr(dbType)+ " where UserName in ("+ WFSUtil.TO_STRING(strCreatedByUserEmailId, true, dbType)+ ")";
					objRs = objStmt.executeQuery(strQuery1);
					while (objRs != null && objRs.next()) {
						strCreatedByUserEmailId = objRs.getString("MailId");
					}
					if (objRs != null) {
						objRs.close();
					}
					objRs = null;
					if (objStmt != null) {
						objStmt.close();
					}
					objStmt = null;
					StringBuilder strGuestNames = new StringBuilder();

					StringTokenizer s = new StringTokenizer(strParticipantEmailId, ",");
					while (s.hasMoreElements()) {
						strGuestNames.append(WFSUtil.TO_STRING(String.valueOf(s.nextElement()), true,dbType));
						if (s.hasMoreElements()) {
							strGuestNames.append(",");
						}
					}

					strParticipantEmailId = "";
					stmt = con.createStatement();
					strQuery1 = "select MailId from PDBUser "+ WFSUtil.getTableLockHintStr(dbType)+ " where UserName in (" + strGuestNames.toString()+ ")";
					rset = stmt.executeQuery(strQuery1);
					while (rset != null && rset.next()) {
						strParticipantEmailId = strParticipantEmailId+ rset.getString("MailId") + ",";
					}

					strMailMessage ="Event Name:"+strEventName+"\n"+"Description:"+strEventDescription+"\n"+"Start:"+strStartDate+" at "+strStartTime+"\n"+"End:"+strEndDate+" at "+strEndTime+"\n"+"Participants:"+strParticipantName;
					if (iInputOption == 1) {
						strMailSubject = strEventName+":"+strStartDate+":"+strStartTime;
					} else if (iInputOption == 2) {
						strMailSubject = "Event Updated"+strEventName+":"+strStartDate+":"+strStartTime;
					}
					strParticipantName=","+strParticipantName+",";
					strQuery = "insert into WFEventDetailsTable"
							+ "(UserID,"
							+ "EventID,"
							+ "EventName,"
							+ "Description,"
							+ "CreationDateTime,"
							+ "ModificationDateTime,"
							+ "CreatedBy,"
							+ "StartTimeHrs,"
							+ "StartTimeMins,"
							+ "EndTimeHrs,"
							+ "EndTimeMins,"
							+ "StartDate,"
							+ "EndDate,"
							+ "EventRecursive,"
							+ "FullDayEvent,"
							+ "ReminderType,"
							+ "ReminderTime,"
							+ "ReminderTimeType,"
							+ "ParticipantName,"
							+ "EventSummary) values ("
							+ iUserID
							+ ","
							+ iEventID
							+ ","
							+ WFSUtil.TO_STRING(strEventName, true,
									dbType)
							+ ","
							+ WFSUtil.TO_STRING(strEventDescription,
									true, dbType)
							+ ","
							+ strUpdationDate
							+ ","
							+ strModificationDate
							+ ","
							+ WFSUtil.TO_STRING(strCreatedByUserId,
									true, dbType)
							+ ","
							+ iStartTimeHours
							+ ","
							+ iStartTimeMins
							+ ","
							+ iEndTimeHours
							+ ","
							+ iEndTimeMins
							+ ","
							+ strDBStartDate
							+ ","
							+ strDBEndDate
							+ ","
							+ WFSUtil.TO_STRING(strRepeatEvent, true,
									dbType)
							+ ","
							+ WFSUtil.TO_STRING(strFullDayEvent, true,
									dbType)
							+ ","
							+ WFSUtil.TO_STRING(strReminderType, true,
									dbType)
							+ ","
							+ iReminderTime
							+ ","
							+ WFSUtil.TO_STRING(strReminderTimeType,
									true, dbType)
							+ ","
							+ WFSUtil.TO_STRING(strParticipantName,
									true, dbType)
							+ ","
							+ WFSUtil.TO_STRING(strEventSummary, true,
									dbType) + ")";

					objStmt = con.createStatement();
					iResult = objStmt.executeUpdate(strQuery);
					if (objStmt != null) {
						objStmt.close();
					}
					objStmt = null;
					if (iResult < 0) {
						bTransaction = false;
						if (!con.getAutoCommit()) {
							con.rollback();
							con.setAutoCommit(true);
						}
						mainCode = WFSError.WF_OPERATION_FAILED;
						subCode = WFSError.WF_ADDING_EVENT_DETAILS_FAILED;
						subject = WFSErrorMsg.getMessage(mainCode);
    		            errType = WFSError.WF_TMP;
    		            descr = WFSErrorMsg.getMessage(subCode);
    		            String error = WFSUtil.generalError(option, strCabName, gen,mainCode, subCode,errType, subject,descr);
    	   	             
    	   	        return error;	
					}

					if (strRepeatEvent.equalsIgnoreCase("Y")) {
						// Query2
						strQuery = "insert into WFRepeatEventTable"
								+ "(EventID,"
								+ "RepeatType,"
								+ "RepeatDays,"
								+ "RepeatEndDate,"
								+ "RepeatSummary) values ("
								+ iEventID
								+ ","
								+ iRepeatType
								+ ","
								+ WFSUtil.TO_STRING(strRepeatDayString,
										true, dbType)
								+ ","
								+ strDBRepeatEnd
								+ ","
								+ WFSUtil.TO_STRING(strRepeatSummary,
										true, dbType) + ")";

						objStmt = con.createStatement();
						iResult = objStmt.executeUpdate(strQuery);
						if (objStmt != null) {
							objStmt.close();
						}
						objStmt = null;

						if (iResult < 0) {
							bTransaction = false;
							if (!con.getAutoCommit()) {
								con.rollback();
								con.setAutoCommit(true);
							}
							mainCode = WFSError.WF_OPERATION_FAILED;
							subCode = WFSError.WF_ADDING_EVENT_DETAILS_FAILED;
							 subject = WFSErrorMsg.getMessage(mainCode);
		    		            errType = WFSError.WF_TMP;
		    		            descr = WFSErrorMsg.getMessage(subCode);
		    		            String error = WFSUtil.generalError(option, strCabName, gen,
		    	   	                   mainCode, subCode,
		    	   	                   errType, subject,
		    	   	                    descr);
		    	   	             
		    	   	        return error;	
							
						}
					}
					if(strCreatedByUserEmailId!=null){
						StringBuffer xml= CreateXML.WFAddToMailQueue(strCabName,String.valueOf(sessionID), strCreatedByUserEmailId, strParticipantEmailId, strMailCC, strMailSubject, strMailMessage.toString(), "text/HTML","","","","","","","","","","", true);
						String serverIP = (String) WFServerProperty.getSharedInstance().getCallBrokerData().get(WFSConstant.CONST_BROKER_APP_SERVER_IP);
						serverIP =WFSUtil.escapeDN(serverIP);
						String serverPort = (String) WFServerProperty.getSharedInstance().getCallBrokerData().get(WFSConstant.CONST_BROKER_APP_SERVER_PORT);
						serverPort = WFSUtil.escapeDN(serverPort);
						String serverType = (String) WFServerProperty.getSharedInstance().getCallBrokerData().get(WFSConstant.CONST_BROKER_APP_SERVER_TYPE);
						serverType = WFSUtil.escapeDN(serverType);
						String clusterName = (String) WFServerProperty.getSharedInstance().getCallBrokerData().get("ClusterName");
						clusterName = WFSUtil.escapeDN(clusterName);
						NGEjbClient.getSharedInstance().makeCall(WFSUtil.TO_SANITIZE_STRING(serverIP,true), WFSUtil.TO_SANITIZE_STRING(serverPort,true), serverType, xml.toString(), WFSUtil.TO_SANITIZE_STRING(clusterName,true),"");
					}
					
				}
			}
        else{
        	 mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
             subCode = 0;
             subject = WFSErrorMsg.getMessage(mainCode);
             descr = WFSErrorMsg.getMessage(subCode);
             errType = WFSError.WF_TMP;
        }
            if (mainCode == 0 && bTransaction) {
                //Generate outputxml.
                strOutputXml = new StringBuilder();
                strOutputXml.append(gen.createOutputFile("WFHandleEvent"));
                strOutputXml.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                if (iInputOption == 1) {
                    strOutputXml.append("<EventId>").append(iEventID).append("</EventId>\n");
                }
                strOutputXml.append(gen.closeOutputFile("WFHandleEvent"));
                strReturn = strOutputXml.toString();
                if(!con.getAutoCommit())
                {
                    con.commit();
                    con.setAutoCommit(true);
                }
            }

        } catch (SQLException e) {
            WFSUtil.printErr(strCabName,"", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr(strCabName,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(strCabName,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Exception e) {
            WFSUtil.printErr(strCabName,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr(strCabName,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        }finally {
        	try{
				if(rs!=null){
					rs.close();
					rs=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(strCabName,"", e);
			}
        	try{
				if(rset!=null){
					rset.close();
					rset=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(strCabName,"", e);
			}
        	try{
				if(objRs!=null){
					objRs.close();
					objRs=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(strCabName,"", e);
			}
        	try{
				if(stmt!=null){
					stmt.close();
					stmt=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(strCabName,"", e);
			}
        	try{
				if(objStmt!=null){
					objStmt.close();
					objStmt=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(strCabName,"", e);
			}
            try {
                if (!con.getAutoCommit()) {
                    con.rollback();
                    con.setAutoCommit(true);
                }
            } catch (SQLException sqlex) {
                //PMUtil.printErr("SQLException : ", sqlex,strCabName);
            }
           
        }
        if (mainCode != 0) {
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return strReturn;

    }

//----------------------------------------------------------------------------------------------------
//Function Name 						:	GetMonthEventsFunc
//Date Written (DD/MM/YYYY)				:	28/08/2015
//Author								:	Amar Sharma
//Input Parameters						:	Connection , XMLParser , XMLGenerator
//Output Parameters						:   none
//Return Values							:	String
//Description							:   Returns Event for Calendar
//
//----------------------------------------------------------------------------------------------------
    private static String GetMonthEventsFunc(Connection con, XMLParser parser, XMLGenerator generator) throws WFSException, JTSException {
        int mainCode = 0;
        int subCode = 0;
        String subject = "";
        String errType = "";
        String descr = "";
        StringBuilder strOutputXml = null;
        String strQuery = "";
        String strQuery2 = "";
        ResultSet rs = null;
        ResultSet rsInner = null;
        Statement stmt = null;
        Statement stmtInner = null;
        String sResult = "";
        String sSnapShotXML="";

        String sEventXML = "";
        String dateWdEvents[] = new String[32];
        //We have TreeMap that extends SortedMap but that class takes heavy cost on insertions...
        String strCabName = "";
        String option="";
        //PMLocaleInfo localeInfo = new PMLocaleInfo();
        try {
            //For user and session validation
            /*String strUserDbId = parser.getValueOf(PMConstant.USERDBID, "0", true);//for session validation
            //if (PMGenFuncs.PM_ValidateUser(con, Integer.parseInt(strUserDbId),strCabName) != PMError.PM_SUCCESS) {
            if (PMGenFuncs.PM_ValidateUser(con, Integer.parseInt(strUserDbId),strCabName,localeInfo) != PMError.PM_SUCCESS) {
                iMainCode = PMError.PM_OPERATION_FAILED;
                subCode = PMError.PM_INVALID_USERDBID;
                throw new PMException(PMError.PM_INVALID_USERDBID);
            }*/
        	int sessionID = parser.getIntOf("SessionId", 0, false);
        	strCabName = parser.getValueOf("EngineName");
        	option = parser.getValueOf("Option");
        	int dbType = ServerProperty.getReference().getDBType(strCabName);
            WFParticipant participant = WMUser.WFCheckUpdateSession(con, sessionID, dbType);
			if (participant != null && participant.gettype() == 'U') {
				
            int iUserID = parser.getIntOf("UserId", 1, true);
            int iDBType = ServerProperty.getReference().getDBType(parser.getValueOf("EngineName"));
            int iMonth = parser.getIntOf("Month", 0, false);
            int iYear = parser.getIntOf("Year", 0, false);
            String sGetSnapShot=parser.getValueOf("GetSnapShot","N",true);//Added by savdeep for Bug Id:33319 on 21/08/2012
            stmt = con.createStatement();
            //Fetch user name from pdbuser table on the basis of userid
            String sUserName = parser.getValueOf("CreatedBy");//WFSUtil.getUserNameById(con, iUserID);

            stmt = con.createStatement();
            //to initialize the DateWdEvents Array
            for (int index = 0; index < 32; index++) {
                dateWdEvents[index] = "";
            }
            String sStartDate = iYear + "-" + iMonth + "-01";
            String sEndDate = iYear + "-" + iMonth + "-" + WFSUtil.getLastDateOfMonth(iMonth, iYear);
            /*strQuery = 		   "select * from WFEventDetailsTable" + WFSUtil.getTableLockHintStr(iDBType)+" where createdBy=" + WFSUtil.TO_STRING(sUserName, true, iDBType) + " and StartDate >= " + WFSUtil.TO_DATE(sStartDate, true, iDBType) + " and EndDate <= " + WFSUtil.TO_DATE(sEndDate, true, iDBType);
            strQuery += " union select * from WFEventDetailsTable" + WFSUtil.getTableLockHintStr(iDBType)+" where createdBy=" + WFSUtil.TO_STRING(sUserName, true, iDBType) + " and StartDate >= " + WFSUtil.TO_DATE(sStartDate, true, iDBType) + " and StartDate <= " + WFSUtil.TO_DATE(sEndDate, true, iDBType) + " and EndDate >= " + WFSUtil.TO_DATE(sEndDate, true, iDBType);
            strQuery += " union select * from WFEventDetailsTable" + WFSUtil.getTableLockHintStr(iDBType)+" where createdBy=" + WFSUtil.TO_STRING(sUserName, true, iDBType) + " and StartDate <= " + WFSUtil.TO_DATE(sStartDate, true, iDBType) + " and EndDate >= " + WFSUtil.TO_DATE(sStartDate, true, iDBType) + " and EndDate <= " + WFSUtil.TO_DATE(sEndDate, true, iDBType);
            strQuery += " union select * from WFEventDetailsTable" + WFSUtil.getTableLockHintStr(iDBType)+" where createdBy=" + WFSUtil.TO_STRING(sUserName, true, iDBType) + " and StartDate <= " + WFSUtil.TO_DATE(sStartDate, true, iDBType) + " and EndDate >= " + WFSUtil.TO_DATE(sEndDate, true, iDBType);
            strQuery += " union select * from WFEventDetailsTable" + WFSUtil.getTableLockHintStr(iDBType)+" where EventId in (select EventId from WFRepeatEventTable"+ WFSUtil.getTableLockHintStr(iDBType)+" where RepeatEndDate >= "+ WFSUtil.TO_DATE(sStartDate, true, iDBType) +") and createdBy=" + WFSUtil.TO_STRING(sUserName, true, iDBType)+" and StartDate <= " + WFSUtil.TO_DATE(sEndDate, true, iDBType);*/
            
            /*strQuery = 		   "select * from WFEventDetailsTable" + WFSUtil.getTableLockHintStr(iDBType)+" where createdBy=" + WFSUtil.TO_STRING(sUserName, true, iDBType) + " and StartDate >= " + WFSUtil.TO_DATE(sStartDate, true, iDBType) + " and EndDate <= " + WFSUtil.TO_DATE(sEndDate, true, iDBType);
            strQuery += " union select * from WFEventDetailsTable" + WFSUtil.getTableLockHintStr(iDBType)+" where createdBy=" + WFSUtil.TO_STRING(sUserName, true, iDBType) + " and StartDate >= " + WFSUtil.TO_DATE(sStartDate, true, iDBType) + " and StartDate <= " + WFSUtil.TO_DATE(sEndDate, true, iDBType) + " and EndDate >= " + WFSUtil.TO_DATE(sEndDate, true, iDBType);
            strQuery += " union select * from WFEventDetailsTable" + WFSUtil.getTableLockHintStr(iDBType)+" where createdBy=" + WFSUtil.TO_STRING(sUserName, true, iDBType) + " and StartDate <= " + WFSUtil.TO_DATE(sStartDate, true, iDBType) + " and EndDate >= " + WFSUtil.TO_DATE(sStartDate, true, iDBType) + " and EndDate <= " + WFSUtil.TO_DATE(sEndDate, true, iDBType);
            strQuery += " union select * from WFEventDetailsTable" + WFSUtil.getTableLockHintStr(iDBType)+" where createdBy=" + WFSUtil.TO_STRING(sUserName, true, iDBType) + " and StartDate <= " + WFSUtil.TO_DATE(sStartDate, true, iDBType) + " and EndDate >= " + WFSUtil.TO_DATE(sEndDate, true, iDBType);
            strQuery += " union select * from WFEventDetailsTable" + WFSUtil.getTableLockHintStr(iDBType)+" where EventId in (select EventId from WFRepeatEventTable"+ WFSUtil.getTableLockHintStr(iDBType)+" where RepeatEndDate >= "+ WFSUtil.TO_DATE(sStartDate, true, iDBType) +") and createdBy=" + WFSUtil.TO_STRING(sUserName, true, iDBType)+" and StartDate <= " + WFSUtil.TO_DATE(sEndDate, true, iDBType);
            strQuery2 =	"select * from WFEventDetailsTable" + WFSUtil.getTableLockHintStr(iDBType)+" Where " + WFSUtil.getLikeFilterStr(parser, "participantname", WFSUtil.TO_STRING(sUserName, true, iDBType), dbType, true) + " and StartDate >= " + WFSUtil.TO_DATE(sStartDate, true, iDBType) + " and EndDate <= " + WFSUtil.TO_DATE(sEndDate, true, iDBType);
            strQuery2 += " union select * from WFEventDetailsTable" + WFSUtil.getTableLockHintStr(iDBType)+"  Where " + WFSUtil.getLikeFilterStr(parser, "participantname", WFSUtil.TO_STRING(sUserName, true, iDBType), dbType, true) + " and StartDate >= " + WFSUtil.TO_DATE(sStartDate, true, iDBType) + " and StartDate <= " + WFSUtil.TO_DATE(sEndDate, true, iDBType) + " and EndDate >= " + WFSUtil.TO_DATE(sEndDate, true, iDBType);
            strQuery2 += " union select * from WFEventDetailsTable" + WFSUtil.getTableLockHintStr(iDBType)+" Where " + WFSUtil.getLikeFilterStr(parser, "participantname", WFSUtil.TO_STRING(sUserName, true, iDBType), dbType, true) + " and StartDate <= " + WFSUtil.TO_DATE(sStartDate, true, iDBType) + " and EndDate >= " + WFSUtil.TO_DATE(sStartDate, true, iDBType) + " and EndDate <= " + WFSUtil.TO_DATE(sEndDate, true, iDBType);
            strQuery2 += " union select * from WFEventDetailsTable" + WFSUtil.getTableLockHintStr(iDBType)+" Where " + WFSUtil.getLikeFilterStr(parser, "participantname", WFSUtil.TO_STRING(sUserName, true, iDBType), dbType, true) + " and StartDate <= " + WFSUtil.TO_DATE(sStartDate, true, iDBType) + " and EndDate >= " + WFSUtil.TO_DATE(sEndDate, true, iDBType);
            strQuery2 += " union select * from WFEventDetailsTable" + WFSUtil.getTableLockHintStr(iDBType)+" where EventId in (select EventId from WFRepeatEventTable"+ WFSUtil.getTableLockHintStr(iDBType)+" where RepeatEndDate >= "+ WFSUtil.TO_DATE(sStartDate, true, iDBType) +") and "+ WFSUtil.getLikeFilterStr(parser, "participantname", WFSUtil.TO_STRING(sUserName, true, iDBType), dbType, true) +" and StartDate <= " + WFSUtil.TO_DATE(sEndDate, true, iDBType); 
            strquery =strquery+strQuery2;*/
            
            /* Removed unneccesary union queries */
            strQuery = 	"select * from WFEventDetailsTable" + WFSUtil.getTableLockHintStr(iDBType)+" where createdBy=" + WFSUtil.TO_STRING(sUserName, true, iDBType);
            strQuery += " union select * from WFEventDetailsTable" + WFSUtil.getTableLockHintStr(iDBType)+" where EventId in (select EventId from WFRepeatEventTable"+ WFSUtil.getTableLockHintStr(iDBType)+" where RepeatEndDate >= "+ WFSUtil.TO_DATE(sStartDate, true, iDBType) +") and createdBy=" + WFSUtil.TO_STRING(sUserName, true, iDBType)+" and StartDate <= " + WFSUtil.TO_DATE(sEndDate, true, iDBType);
            strQuery2 =	" union select * from WFEventDetailsTable" + WFSUtil.getTableLockHintStr(iDBType)+" Where " + WFSUtil.getLikeFilterStr(parser, "participantname", "*,"+sUserName+" *", dbType, true);
            
            /*strQuery2 += " union select * from WFEventDetailsTable" + WFSUtil.getTableLockHintStr(iDBType)+" where EventId in (select EventId from WFRepeatEventTable"+ WFSUtil.getTableLockHintStr(iDBType)+" where RepeatEndDate >= "+ WFSUtil.TO_DATE(sStartDate, true, iDBType) +") and "+ WFSUtil.getLikeFilterStr(parser, "participantname", WFSUtil.TO_STRING(sUserName, true, iDBType), dbType, true) +" and StartDate <= " + WFSUtil.TO_DATE(sEndDate, true, iDBType); */

            strQuery =strQuery+strQuery2;
            rs = stmt.executeQuery(strQuery);
            EventsData eventData;
            ArrayList arrEventData = new ArrayList();
            while (rs != null && rs.next()) {
                eventData = new EventsData();
                eventData.iEventId = rs.getInt("EventId");
                eventData.sEventName = rs.getString("EventName");
                eventData.sEventDesc = rs.getString("Description");
                eventData.EventCreationDT = rs.getDate("CreationDateTime");
                eventData.EventModificationDT = rs.getDate("ModificationDateTime");
                eventData.sCreatedBy = rs.getString("CreatedBy");
                eventData.iStartTimeHrs = rs.getInt("StartTimeHrs");
                eventData.iStartTimeMins = rs.getInt("StartTimeMins");
                eventData.iEndTimeHrs = rs.getInt("EndTimeHrs");
                eventData.iEndTimeMins = rs.getInt("EndTimeMins");
                //Event Duration will be used to sort the data as per EventDuration
                eventData.iEventDuration = getEventDuration(eventData.iStartTimeHrs,eventData.iStartTimeMins,eventData.iEndTimeHrs,eventData.iEndTimeMins);
                eventData.EventStartDate = rs.getDate("StartDate");
                eventData.EventEndDate = rs.getDate("EndDate");
                eventData.sEventRecursive = rs.getString("EventRecursive");
                //if Event is recursive then Repeat data is fetched
                if (eventData.sEventRecursive.equalsIgnoreCase("Y")) {
                    strQuery = "select * from WFRepeatEventTable" + WFSUtil.getTableLockHintStr(iDBType)+" where EventId=" + eventData.iEventId;
                    stmtInner = con.createStatement();
                    rsInner = stmtInner.executeQuery(strQuery);
                    while (rsInner != null && rsInner.next()) {
                        eventData.repeatData = new EventsData.RepeatEventData();
                        eventData.repeatData.iEventID = rsInner.getInt("EventId");
                        eventData.repeatData.iRepeatType = rsInner.getInt("RepeatType");
                      if(!rsInner.getString("RepeatDays").equalsIgnoreCase(""))
                            eventData.repeatData.sRepeatDays = rsInner.getString("RepeatDays");
                        else
                            eventData.repeatData.sRepeatDays = "1";//Added a default value in case FrontEnd sends invalid data 
                       eventData.repeatData.RepeatEndDate = rsInner.getDate("RepeatEndDate");
                        eventData.repeatData.sRepeatSummary = rsInner.getString("RepeatSummary");
                    }
                }
                eventData.sFullDayEvent = rs.getString("FullDayEvent");
                eventData.sReminderDismissed=rs.getString("ReminderDismissed");
                eventData.sReminderType = rs.getString("ReminderType");
                eventData.iReminderTime = rs.getInt("ReminderTime");
                eventData.sReminderTimeType = rs.getString("ReminderTimeType");
                eventData.sEventSummary = rs.getString("EventSummary");
                eventData.iUserID = rs.getInt("UserId");
                eventData.sParticipantName = rs.getString("ParticipantName");
                arrEventData.add(eventData);
            }

            EventsData outEventData = null;
            //For each of the EventId prepare Date Specific data
            int iStartDateDay = 0;
            int iEndDateDay = 0;
            Iterator iter = arrEventData.iterator();
            while (iter.hasNext()) {
                outEventData = (EventsData) iter.next();
                iStartDateDay = outEventData.EventStartDate.getDate();
                iEndDateDay = outEventData.EventEndDate.getDate();
                if (outEventData.EventStartDate.before(new Date(iYear - 1900, iMonth - 1, 1))) {
                    iStartDateDay = getStartDate(outEventData, iMonth, iYear);
                }
                if (outEventData.EventEndDate.after(new Date(iYear - 1900, iMonth - 1, WFSUtil.getLastDateOfMonth(iMonth, iYear)))
                    ||(outEventData.repeatData!=null&&outEventData.repeatData.RepeatEndDate.after(new Date(iYear - 1900, iMonth - 1, WFSUtil.getLastDateOfMonth(iMonth, iYear)))&&outEventData.repeatData.iRepeatType==2)) {
                    iEndDateDay = WFSUtil.getLastDateOfMonth(iMonth, iYear);
                }

                if((iStartDateDay==29 ||iStartDateDay==30||iStartDateDay==31)&&( iEndDateDay==30||iEndDateDay==28||iEndDateDay==29 )){
                    if(iEndDateDay==30)
                    iStartDateDay=30;
                    else if(iEndDateDay==29)
                    iStartDateDay=29;
                    else if(iEndDateDay==28)
                    iStartDateDay=28;
                    else
                    {}
                }
                int iIntermediateDateDay = iStartDateDay;
               
                Calendar monthCal = Calendar.getInstance();
                boolean bAddWeekDay = true;
                while (iIntermediateDateDay <= iEndDateDay) {
                    if (outEventData.sEventRecursive.equalsIgnoreCase("Y")) {

                        if(outEventData.repeatData.iRepeatType == 1){ //For daily on Nth day repeat
                            if (dateWdEvents[iIntermediateDateDay].length() > 0)
                            {
                                dateWdEvents[iIntermediateDateDay] = dateWdEvents[iIntermediateDateDay] + "," + outEventData.iEventId+":"+ outEventData.iEventDuration;
                            }
                            else
                            {
                                dateWdEvents[iIntermediateDateDay] = Integer.toString(outEventData.iEventId) +":"+ outEventData.iEventDuration;
                            }
                        iIntermediateDateDay += Integer.valueOf(outEventData.repeatData.sRepeatDays).intValue();
                        
                        }
                        else if(outEventData.repeatData.iRepeatType == 3){//For Monthly it shuld be incremented by 1
                             
                            if (dateWdEvents[iIntermediateDateDay].length() > 0)
                            {
                                dateWdEvents[iIntermediateDateDay] = dateWdEvents[iIntermediateDateDay] + "," + outEventData.iEventId+":"+ outEventData.iEventDuration;
                            }
                            else
                            {
                                dateWdEvents[iIntermediateDateDay] = Integer.toString(outEventData.iEventId) +":"+ outEventData.iEventDuration;
                            }
                            iIntermediateDateDay += 31;
                        
                        }
                        else if(outEventData.repeatData.iRepeatType == 2)//to be tested for weekly event
                        {
                            int iDayOfWeek = 0;
                            monthCal.set(iYear, iMonth - 1,iIntermediateDateDay);
                            iDayOfWeek = monthCal.get(monthCal.DAY_OF_WEEK);
                            bAddWeekDay = outEventData.repeatData.sRepeatDays.contains(Integer.toString(iDayOfWeek));
                            if(bAddWeekDay)
                                {
                             if (dateWdEvents[iIntermediateDateDay].length() > 0)
                            {
                                dateWdEvents[iIntermediateDateDay] = dateWdEvents[iIntermediateDateDay] + "," + outEventData.iEventId+":"+ outEventData.iEventDuration;
                            }
                            else
                            {
                                dateWdEvents[iIntermediateDateDay] = Integer.toString(outEventData.iEventId) +":"+ outEventData.iEventDuration;
                            }
                                }
                            if(outEventData.repeatData.sRepeatDays.length()==1)
                                iIntermediateDateDay += 7;
                            else{
                                iIntermediateDateDay += 1;
                                }
                            
                        }
                    }
                    else
                    {
                        if (dateWdEvents[iIntermediateDateDay].length() > 0)
                        {
                            dateWdEvents[iIntermediateDateDay] = dateWdEvents[iIntermediateDateDay] + "," + outEventData.iEventId+":"+ outEventData.iEventDuration;
                        } 
                        else
                        {
                            dateWdEvents[iIntermediateDateDay] = Integer.toString(outEventData.iEventId)+":"+ outEventData.iEventDuration;
                        }
                        iIntermediateDateDay += 1;
                    }
                }
                /*Section A : Event is not recursive
                 * case1: Single day event of 2 hours
                 * case2: single day event of full day
                 * case3: full day events from start date to end date
                 * case4: N hr event from Start date to end date
                 *Section B : Event is recursive
                 * case1: 2hrs event on every 10th day
                 * case2: 2hrs & 2 days event on every 10th day
                 * case3: 2 full day events on every 10th day
                 * case4: 2hrs event on every Monday
                 * case5: 2hrs & 2 days event on every Monday
                 * case6: 2 full day events on every Monday
                 * case7: 2hrs event on every 15th
                 * case8: 2hrs & 2 days event on every 15th
                 * case9: 2 full day events on every 15th
                 */
            }

            //Generating the output xml
            sEventXML = getEventsXML(arrEventData,generator);
            if(sGetSnapShot.equalsIgnoreCase("Y"))
                sSnapShotXML = "Any";//PMProjectView.getUserSnapShotData(con, parser, generator);
            StringBuilder tempDateXML = new StringBuilder();
            tempDateXML = tempDateXML.append("<MonthData>\n");
            tempDateXML = tempDateXML.append("<Month>").append(iMonth).append("</Month>\n");
            tempDateXML = tempDateXML.append("<Year>").append(iYear).append("</Year>\n");
            tempDateXML = tempDateXML.append(getMonthDateXML(dateWdEvents,generator));
            tempDateXML = tempDateXML.append("</MonthData>\n");
            sEventXML = sEventXML.concat(tempDateXML.toString());
        }
			else{
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
	             subCode = 0;
	             subject = WFSErrorMsg.getMessage(mainCode);
	             descr = WFSErrorMsg.getMessage(subCode);
	             errType = WFSError.WF_TMP;
			}
            if (mainCode == 0) {
                //Generate outputxml.
                strOutputXml = new StringBuilder();
                strOutputXml.append(generator.createOutputFile("WFGetMonthEvents"));
                strOutputXml.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                strOutputXml.append(sEventXML);
                strOutputXml.append(generator.closeOutputFile("WFGetMonthEvents"));
                if(!sSnapShotXML.equalsIgnoreCase("")){
                	strOutputXml.append(sSnapShotXML);
                }
                sResult = strOutputXml.toString();       
            }
        }  catch (SQLException e) {
            WFSUtil.printErr(strCabName,"", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr(strCabName,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(strCabName,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Exception e) {
            WFSUtil.printErr(strCabName,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr(strCabName,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        }finally {
        	try{
				if(rs!=null){
					rs.close();
					rs=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(strCabName,"", e);
			}
        	try{
				if(rsInner!=null){
					rsInner.close();
					rsInner=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(strCabName,"", e);
			}
        	try{
				if(stmt!=null){
					stmt.close();
					stmt=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(strCabName,"", e);
			}
        	try{
				if(stmtInner!=null){
					stmtInner.close();
					stmtInner=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(strCabName,"", e);
			}
            try {
                if (!con.getAutoCommit()) {
                    con.rollback();
                    con.setAutoCommit(true);
                }
            } catch (SQLException sqlex) {
                //PMUtil.printErr("SQLException : ", sqlex,strCabName);
            }
           
        }
        if (mainCode != 0) {
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return sResult;
    }
    private static String getMonthDateXML(String[] dateWdEvents,XMLGenerator gen)
    {
        StringBuilder strDateXML = new StringBuilder();
        String sDateEvents = "";
        String sEvent = "";
        int strIndex = 0;
        int iEventCount = 0;
        for(int index=1;index<32;index++)
        {
            if(dateWdEvents[index].length()>0)
            {
                strDateXML.append("<Date>");
                strDateXML.append(gen.writeValueOf("EventDate", Integer.toString(index)));
                strDateXML.append("<Events>");
                sDateEvents = dateWdEvents[index];
                sDateEvents = getSortedEventsForDay(sDateEvents);
                iEventCount = 0;
                while(true)
                {
                    iEventCount++;
                    strIndex = sDateEvents.indexOf(",");
                    if(strIndex != -1)
                    {
                        sEvent = sDateEvents.substring(0,strIndex);
                        strDateXML.append(gen.writeValueOf("EventId", sEvent));
                        sDateEvents = sDateEvents.substring(strIndex+1);
                    }
                    else
                    {
                        strDateXML.append(gen.writeValueOf("EventId", sDateEvents));
                        break;
                    }
                }
                strDateXML.append("</Events>");
                strDateXML.append(gen.writeValueOf("EventCount", Integer.toString(iEventCount)));
                strDateXML.append("</Date>");
            }
        }
        return strDateXML.toString();
    }
    static class EventsDurationData
    {
         int iEventId;
         int iEventDuration;
    }
    private static String getSortedEventsForDay(String sDateEvents)
    {
        String result = "";
        int index = sDateEvents.indexOf(",");
        int colIndex = 0;
        String sEvent = "";
        EventsDurationData eventDurData = null;
        ArrayList objEventDurData = new ArrayList();

        while(true)
        {
            index = sDateEvents.indexOf(",");
            if(index != -1)
            {
                sEvent = sDateEvents.substring(0,index);
                colIndex = sEvent.indexOf(":");
                eventDurData = new EventsDurationData();
                eventDurData.iEventId = Integer.parseInt(sEvent.substring(0,colIndex));
                eventDurData.iEventDuration = Integer.parseInt(sEvent.substring(colIndex+1));
                sDateEvents = sDateEvents.substring(index+1);
                objEventDurData.add(eventDurData);
            }
            else
            {
                eventDurData = new EventsDurationData();
                colIndex = sDateEvents.indexOf(":");
                eventDurData.iEventId = Integer.parseInt(sDateEvents.substring(0,colIndex));
                eventDurData.iEventDuration = Integer.parseInt(sDateEvents.substring(colIndex+1));
                objEventDurData.add(eventDurData);
                break;
            }
        }

        //Sorting using Insertion Sort
        for(int j = 1; j < objEventDurData.size(); j++)
        {
            EventsDurationData objJ = (EventsDurationData)objEventDurData.get(j);
            int key = objJ.iEventDuration;
            int i = j - 1;
            EventsDurationData objI = (EventsDurationData)objEventDurData.get(i);
            while(i >= 0 && objI.iEventDuration > key)
            {
                objEventDurData.set(i+1, objI);
                i = i - 1;
                if(i>=0)
                    objI = (EventsDurationData)objEventDurData.get(i);
            }
            objEventDurData.set(i+1, objJ);
        }

        //reversing the sorted data, and formalizing the string
        for(int j = objEventDurData.size(); j > 0 ; j--)
        {
            EventsDurationData objJ = (EventsDurationData)objEventDurData.get(j-1);
            if(result.length() > 0)
                result = result + "," + Integer.toString(objJ.iEventId);
            else
                result = Integer.toString(objJ.iEventId);
        }
        
        return result;
    }
    private static String getEventsXML(ArrayList arrEventData,XMLGenerator gen)
    {
        StringBuilder strEventXML = new StringBuilder();
        Iterator iter = arrEventData.iterator();
        EventsData eventData = null;
        strEventXML.append("<EventData>");
        String  strStartEventTime="";
        String  strEndEventTime="";
        while (iter.hasNext()) {
            eventData = (EventsData) iter.next();
      		strStartEventTime=WFSUtil.concatTimeFunc(eventData.iStartTimeHrs, eventData.iStartTimeMins);
       		strEndEventTime=WFSUtil.concatTimeFunc(eventData.iEndTimeHrs, eventData.iEndTimeMins);                
            strEventXML.append("<Events>");
            strEventXML.append(gen.writeValueOf("EventId", Integer.toString(eventData.iEventId)));
            strEventXML.append(gen.writeValueOf("EventName", eventData.sEventName));
            strEventXML.append(gen.writeValueOf("Description", eventData.sEventDesc));
            strEventXML.append(gen.writeValueOf("StartTime", strStartEventTime));
            strEventXML.append(gen.writeValueOf("EndTime", strEndEventTime));
            strEventXML.append(gen.writeValueOf("StartDate",eventData.EventStartDate.toString()));
            strEventXML.append(gen.writeValueOf("EndDate", eventData.EventEndDate.toString()));
            strEventXML.append(gen.writeValueOf("EventRecursive", eventData.sEventRecursive));
            if(eventData.sEventRecursive.equalsIgnoreCase("Y"))
            {
                strEventXML.append("<RepeatEvent>");
                strEventXML.append(gen.writeValueOf("RepeatType", Integer.toString(eventData.repeatData.iRepeatType)));
                strEventXML.append(gen.writeValueOf("RepeatDays", eventData.repeatData.sRepeatDays));
                strEventXML.append(gen.writeValueOf("RepeatEndDate", eventData.repeatData.RepeatEndDate.toString()));
                strEventXML.append(gen.writeValueOf("RepeatSummary", eventData.repeatData.sRepeatSummary));
                strEventXML.append("</RepeatEvent>");
            }
            strEventXML.append(gen.writeValueOf("FullDayEvent", eventData.sFullDayEvent));
            strEventXML.append(gen.writeValueOf("EventSummary", eventData.sEventSummary));
            strEventXML.append(gen.writeValueOf("UserId", Integer.toString(eventData.iUserID)));
            strEventXML.append(gen.writeValueOf("ParticipantName", eventData.sParticipantName));
            strEventXML.append(gen.writeValueOf("ReminderDismissed",eventData.sReminderDismissed));
            strEventXML.append(gen.writeValueOf("ReminderType",eventData.sReminderType));
            strEventXML.append(gen.writeValueOf("ReminderTimeType",eventData.sReminderTimeType));
            strEventXML.append(gen.writeValueOf("CreatedBy",eventData.sCreatedBy));
            strEventXML.append(gen.writeValueOf("ReminderTime",Integer.toString(eventData.iReminderTime)));
            strEventXML.append("</Events>");
        }
        strEventXML.append("</EventData>");
        return strEventXML.toString();
    }
    private static int getStartDate(EventsData eventData, int iMonth, int iYear) {
        if (eventData.sEventRecursive.equalsIgnoreCase("N")) {
            return 1;
        } else {
            int iDate = 0;
            int iRepeatFactor = 0;
            Calendar first = Calendar.getInstance();
            first.set(eventData.EventStartDate.getYear() + 1900, eventData.EventStartDate.getMonth(), eventData.EventStartDate.getDate());
            Calendar second = Calendar.getInstance();
            second.set(iYear, iMonth - 1, 1);
            switch (eventData.repeatData.iRepeatType) {
                case 1://Daily
                    //get the repeat factor
                    iRepeatFactor = Integer.valueOf(eventData.repeatData.sRepeatDays).intValue();
                    long daysTillMonthStart = WFSUtil.daysBetween(first.getTime(), second.getTime());
                    iDate = iRepeatFactor - (((int) daysTillMonthStart - 1) % iRepeatFactor) + 01;
                    iDate = (iRepeatFactor - ((int) daysTillMonthStart) % iRepeatFactor) % iRepeatFactor + 1;
                    break;
                case 2://Weekly
                    int iStartDay = second.get(second.DAY_OF_WEEK);
                    if(eventData.repeatData.sRepeatDays.length() == 1)
                        iRepeatFactor = Integer.valueOf(eventData.repeatData.sRepeatDays).intValue();//nth day of the week
                    else{
                         iRepeatFactor = Integer.valueOf(eventData.repeatData.sRepeatDays.substring(0, 1)).intValue();//nth day of the week
                        }
                    iDate = (7 - iStartDay + iStartDay + 1) % 7;
                    if (iDate == 0) 
                        iDate = 7;
                    break;
                case 3://Monthly
                    iDate = eventData.EventStartDate.getDate();
                    break;
            }
            return iDate;
        }
    }
    private static int getEventDuration(int startTimeHrs,int startTimeMins,int endTimeHrs, int endTimeMins)
    {
        int iDuration = 0;
        iDuration = (endTimeHrs - startTimeHrs) * 60;
        if(startTimeMins == 0 && endTimeMins == 30)
            iDuration += 30;
        else if(startTimeMins == 30 && endTimeMins == 0)
            iDuration -= 30;
        return iDuration;
    }
    static class EventsData //extends ArrayList
    {

        int iEventId;
        String sEventName;
        String sEventDesc;
        Date EventCreationDT;
        Date EventModificationDT;
        String sCreatedBy;
        int iStartTimeHrs;
        int iStartTimeMins;
        int iEndTimeHrs;
        int iEndTimeMins;
        Date EventStartDate;
        Date EventEndDate;
        String sEventRecursive;
        String sFullDayEvent;
        String sReminderType;
        int iReminderTime;
        String sReminderTimeType;
        String sReminderDismissed;
        String sEventSummary;
        int iUserID;
        int iEventDuration;
        String sParticipantName;
        RepeatEventData repeatData;

        static class RepeatEventData {

            int iEventID;
            int iRepeatType; //1-Daily,2-weekly,3-Monthly
            String sRepeatDays; //Days on which event is to be repeated (a number between 1 to 30 in case of Daily,comma separated list to represent days in case of weekly i.e 1-Monday,2-tuesday and so on) and 0 in case of monthly
            Date RepeatEndDate;
            String sRepeatSummary;
        }
    }



	 private String actionPrint(int nActionID, WFXmlList workItemHistoryXmlResponse,String dateFormat, boolean userHistory,ResourceBundle resourceBundle) throws JTSException,WFException////,String strDateFormat);
	 {
		 return actionPrint(nActionID, workItemHistoryXmlResponse, dateFormat, userHistory, resourceBundle, null, null, null, 0);
	 }
	 private String actionPrint(int nActionID, WFXmlList workItemHistoryXmlResponse, String dateFormat, boolean userHistory, ResourceBundle resourceBundle, String urn, String urnFlag, Connection con, int dbType) throws JTSException, WFException
	 {
        StringBuilder strActionDesc =new StringBuilder("");
        XMLParser objParser = new XMLParser(workItemHistoryXmlResponse.xmlString);
        HashMap multilingualMap = new HashMap();
        HashMap localeMap = new HashMap();
        HashMap activityMap = new HashMap();
        HashMap docTypeMap = new HashMap();
        HashMap attributeMap = new HashMap();
        String  strVarStr = "";
        String strWasSetTo = "";
        String strPrevValue = "";
        String strBY = "";
        String detailAuditTrail = "N";
        if("Y".equalsIgnoreCase(urnFlag)) {
        	if(urn != null && !urn.isEmpty()){
        		objParser.changeValue("ProcessInstanceId", urn);
        	}
        	if(nActionID == WFSConstant.WFL_link || nActionID == WFSConstant.WFL_dlink){
        		String linkedPID = workItemHistoryXmlResponse.getVal("FieldName");
        		String linkedURN = WFSUtil.getURN(con, linkedPID, dbType);
        		if(linkedURN != null && !linkedURN.isEmpty()){
        			objParser.changeValue("FieldName", linkedURN);
        		}
        	}
    		//This will reflect the changes in the above fields if the URNFlag is true.
    		workItemHistoryXmlResponse = new WFXmlList(objParser.toString(), "HistoryInfo", 0, objParser.toString().length());
        }
//        WFApplication  wfApplication =(WFApplication)WFUtility.getManagedBean("wfapplication");
//        FacesContext context=FacesContext.getCurrentInstance();
//        Application application = context.getApplication();
//        WFSession wfsession = (WFSession)application.createValueBinding("#{wfsession}").getValue(context);
//        String localeName = wfsession.getRequestLocale();
//        if(!localeName.contains("en"))
//            {
//            multilingualMap = wfApplication.getMultilingualMap();
//            localeMap = (HashMap)multilingualMap.get(wfsession.getRequestLocale());
//            activityMap = (HashMap)localeMap.get("Activity_"+processName);
//            docTypeMap = (HashMap)localeMap.get("DocumentType_"+processName);
//            if (localeMap.containsKey("Queue")) {
//                        attributeMap = (HashMap) localeMap.get("Attribute_"+processName);
//                    }
//            }
        String strPageMsg = "";
        String strUserAndPersonalName="";
         String strUserAndPersonalFieldName="";
         if(nActionID == 1) {
            strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            if(userHistory){
           	 strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
           }
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_1"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
        } else if(nActionID == 2) {
            strActionDesc.append(resourceBundle.getString("WI_WORKITEM")); 
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            if(userHistory){
           	 strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
           }
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_2"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
        }else if(nActionID == 3) {
        	strActionDesc.append(resourceBundle.getString("WI_WORKITEM")); 
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            if(userHistory){
           	 strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
            }
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_3"));
           //strActionDesc.delete(strActionDesc.length()-3,strActionDesc.length());
        } else if(nActionID == 4) {
            String strUserName = workItemHistoryXmlResponse.getVal("Username");
            strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
            if(userHistory){
              	 strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
            }
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_4"));
            strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("FieldName"));
//            if(!localeName.contains("en"))
//             strActionDesc.append(" ").append((activityMap.get(workItemHistoryXmlResponse.getVal("FieldName")) != null) ? activityMap.get(workItemHistoryXmlResponse.getVal("FieldName")) : workItemHistoryXmlResponse.getVal("FieldName"));
//             else                    
            if(!strUserName.equalsIgnoreCase("")) {
                 strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
                strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_ASSIGNTO"));
                strActionDesc.append(" ").append(strUserAndPersonalName);
            }
        } else if(nActionID == 5) {
        	strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
        	if(userHistory){
              	 strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
            }
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_5"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
        } else if(nActionID == 6) {
            String strUserName = workItemHistoryXmlResponse.getVal("Username");
            strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
            if(userHistory){
              	 strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
            }
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_6"));
//            if(!localeName.contains("en"))
//             strActionDesc.append(" ").append((activityMap.get(workItemHistoryXmlResponse.getVal("FieldName")) != null) ? activityMap.get(workItemHistoryXmlResponse.getVal("FieldName")) : workItemHistoryXmlResponse.getVal("FieldName"));
//             else
            strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("FieldName"));
            
            if(!strUserName.equalsIgnoreCase("")) {
                strActionDesc.append(" ").append( resourceBundle.getString("WI_ACTION_ASSIGNTO"));
                strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
                strActionDesc.append(" ").append(strUserAndPersonalName);
            }
            
        } else if(nActionID == 7) {
        	strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
        	if(userHistory){
              	 strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
            }
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_7"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
        } else if(nActionID == 8) {
        	strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
        	if(userHistory){
              	 strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
            }
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_8"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
        } else if(nActionID == 9) {
            strActionDesc.append(resourceBundle.getString("WI_ACTION_USER_EXP"));
            strActionDesc.append(" \'");

            strActionDesc.append(workItemHistoryXmlResponse.getVal("ExceptionName"));
            strActionDesc.append("\'");

            strActionDesc.append(" ");
            strActionDesc.append(resourceBundle.getString("WI_ACTION_9"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
            strActionDesc.append(" ").append(resourceBundle.getString("WI_FOR_WORKITEM"));
            if(userHistory){
             	 strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
           }
            
            String strExceptionCommemnts = WFSUtil.handleSpecialCharInXml(workItemHistoryXmlResponse.getVal("ExceptionComments"),false); //shubham
            
            if(!strExceptionCommemnts.equalsIgnoreCase("")) {
                strActionDesc.append(" ");

                strActionDesc.append(resourceBundle.getString("WI_ACTION_COMMENTS"));
                strActionDesc.append(" ");
                strActionDesc.append("\'");


                strActionDesc.append(WFSUtil.handleSpecialCharInXml(workItemHistoryXmlResponse.getVal("ExceptionComments"),false)); //shubham
                strActionDesc.append("\'");

            }
        } else if(nActionID == 10) {
            strActionDesc.append(resourceBundle.getString("WI_ACTION_USER_EXP"));
            strActionDesc.append(" \'");

            strActionDesc.append(workItemHistoryXmlResponse.getVal("ExceptionName"));
            strActionDesc.append("\' ");

            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_10"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
            strActionDesc.append(" ").append(resourceBundle.getString("WI_FOR_WORKITEM"));
            if(userHistory){
             	 strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
            }
            String strExceptionCommemnts = workItemHistoryXmlResponse.getVal("ExceptionComments");
            if(!strExceptionCommemnts.equalsIgnoreCase("")) {
                strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_COMMENTS"));
                strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("ExceptionComments"));
            }
        } else if(nActionID == 13) {
        	strActionDesc.append(resourceBundle.getString("WI_ACTION_13_1"));
        	//strActionDesc.append(" ").append(resourceBundle.getString("WI_WORKITEM"));
        	if(userHistory){
             	 strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
            }
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_13"));
			strActionDesc.append(" \' ");
            strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("FieldName"));
            strActionDesc.append(" \' ");
            strActionDesc.append(resourceBundle.getString("WI_ACTION_BY"));
            strActionDesc.append(" ");
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
        } else if(nActionID == 14) {
            strActionDesc.append(resourceBundle.getString("WI_ACTION_13_1"));
        	strActionDesc.append(" ").append(resourceBundle.getString("WI_WORKITEM"));
        	if(userHistory){
             	 strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
            }
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_14"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
        } else if(nActionID == 15) {
            String strTemp = resourceBundle.getString("WI_ACTION_15");
            strTemp = WFUtility.Replace(strTemp,"<TODOITEMNAME>","\'"+workItemHistoryXmlResponse.getVal("Name")+"\'" );
            strTemp = WFUtility.Replace(strTemp,"<TODOITEMVALUE>","\'"+workItemHistoryXmlResponse.getVal("Value")+"\'" );
            
            strActionDesc.append(strTemp).append(" ");
           
            strActionDesc.append(resourceBundle.getString("WI_ACTION_BY"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
            if(userHistory){
                 strActionDesc.append(" ").append(resourceBundle.getString("WI_FOR_WORKITEM"));
             	 strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
            }
        } else if(nActionID == 16) {
            strActionDesc.append(resourceBundle.getString("WI_ACTION_VAR"));
            strActionDesc.append(" \' ");
//            if(!localeName.contains("en"))
//                 strActionDesc.append(" ").append((attributeMap.get(workItemHistoryXmlResponse.getVal("Name")) != null) ? attributeMap.get(workItemHistoryXmlResponse.getVal("Name")) : workItemHistoryXmlResponse.getVal("Name"));
//             else
            strActionDesc.append(workItemHistoryXmlResponse.getVal("Name"));
            strActionDesc.append(" \' ");
            strActionDesc.append(resourceBundle.getString("WI_ACTION_16"));
            strActionDesc.append(" \' ");
            strActionDesc.append(workItemHistoryXmlResponse.getVal("Value"));
            strActionDesc.append(" \' ");
            
            strActionDesc.append(resourceBundle.getString("WI_ACTION_BY"));
            strActionDesc.append(" ");
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(strUserAndPersonalName);
            if(userHistory){
                 strActionDesc.append(" ").append(resourceBundle.getString("WI_FOR_WORKITEM"));
             	 strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
            }
        } else if(nActionID == 17) {
            strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
            if(userHistory){
            	 strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
            }
             strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_17"));
            strUserAndPersonalName= WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc = new StringBuilder(WFUtility.Replace(strActionDesc.toString(),"<FROM>",strUserAndPersonalName));
            strUserAndPersonalFieldName="'" +WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("FieldName"),workItemHistoryXmlResponse.getVal("PersonalFieldName")) +" '";
            strActionDesc = new StringBuilder(WFUtility.Replace(strActionDesc.toString(),"<TO>",strUserAndPersonalFieldName));
            
        } else if(nActionID == 18) {
            strActionDesc.append(resourceBundle.getString("LABEL_DOCUMENTTYPE"));
            if(workItemHistoryXmlResponse.getVal("FieldName").indexOf(resourceBundle.getString("SEPERATOR9")) != -1)
                strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("FieldName").substring(0,workItemHistoryXmlResponse.getVal("FieldName").indexOf(resourceBundle.getString("SEPERATOR9"))));
            else
            {
//                if(!localeName.contains("en"))
//                 strActionDesc.append(" ").append((docTypeMap.get(workItemHistoryXmlResponse.getVal("FieldName")) != null) ? docTypeMap.get(workItemHistoryXmlResponse.getVal("FieldName")) : workItemHistoryXmlResponse.getVal("FieldName"));
//             else
                strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("FieldName"));
            }
             strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));    
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_18")).append(" ").append(strUserAndPersonalName);
            if(userHistory){
                strActionDesc.append(" ").append(resourceBundle.getString("WI_FOR_WORKITEM"));
            	strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
           }
        } else if(nActionID == 19) {
            strPageMsg = workItemHistoryXmlResponse.getVal("FieldName");
            strActionDesc.append(strPageMsg.substring(0,strPageMsg.indexOf(resourceBundle.getString("SEPERATOR9"))));
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_19"));
             strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
            strActionDesc.append(" ").append(resourceBundle.getString("AT_PAGE_NO")).append(strPageMsg.substring(strPageMsg.indexOf(resourceBundle.getString("SEPERATOR9"))+1,strPageMsg.length()));
            if(userHistory){
                strActionDesc.append(" ").append(resourceBundle.getString("WI_FOR_WORKITEM"));
            	strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
           }
        } else if(nActionID == 20) {
        	strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
        	if(userHistory){
            	strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
           }
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_20"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
        } else if(nActionID == 21) {
            strActionDesc.append(resourceBundle.getString("WI_ACTION_21"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
            strActionDesc.append(" ").append(resourceBundle.getString("LABEL_FROM"));
        	strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("OldState"));
        	strActionDesc.append(" ").append(resourceBundle.getString("LABEL_TO"));
        	strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("ChangedState"));
        	if(userHistory){
                strActionDesc.append(" ").append(resourceBundle.getString("WI_FOR_PROCESS"));
            	strActionDesc.append(" '").append(workItemHistoryXmlResponse.getVal("ProcessName")).append("'");
           }
            
        } else if(nActionID == 22) {
            strActionDesc.append(resourceBundle.getString("WI_ACTION_22"));
            if( (workItemHistoryXmlResponse.getVal("FieldName")!=null) && (!workItemHistoryXmlResponse.getVal("FieldName").trim().equalsIgnoreCase("")))
                strActionDesc = new StringBuilder( WFUtility.Replace(strActionDesc.toString(),"<ACTIONNAME>","\'"+workItemHistoryXmlResponse.getVal("FieldName")+"\' " ) );
             strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
        } else if(nActionID == 23) {
            strActionDesc.append(resourceBundle.getString("USER")).append(" ");
            strActionDesc.append(objParser.getValueOf("Username","",true)).append(" ");
            strActionDesc.append(resourceBundle.getString("LOGGED_IN"));
        } else if(nActionID == 24) {
             strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" ").append(objParser.getValueOf("Username","",true)).append(" ");
            strActionDesc.append(resourceBundle.getString("LOGGED_OUT"));
        } else if(nActionID == 25) {
        	strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
        	if(userHistory){
            	strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
             }
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_25"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
        } else if(nActionID == 26) {
            strActionDesc.append(resourceBundle.getString("WI_ACTION_26"));
             strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
            if(userHistory){
                strActionDesc.append(" ").append(resourceBundle.getString("WI_FOR_WORKITEM"));
            	strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
           }
        } else if(nActionID == 27) {
        	strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
        	if(userHistory){
            	strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
             }
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_27"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
        } else if(nActionID == 28) {
        	strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
            if(userHistory){
            	strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
             }
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_28"));
        } else if(nActionID == 32) {
        	strActionDesc.append(resourceBundle.getString("WI_WORKITEM_AUDIT"));
        	if(userHistory){
            	strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
             }
            strActionDesc.append(resourceBundle.getString("WI_ACTION_32"));
           strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
            
        } else if(nActionID == 33) {
        	strActionDesc.append(resourceBundle.getString("WI_WORKITEM_AUDIT"));
        	if(userHistory){
            	strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
             }
            strActionDesc.append(resourceBundle.getString("WI_ACTION_33"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
            
        } else if(nActionID == 34) {
            strActionDesc.append(resourceBundle.getString("WI_ACTION_34"));
           strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
        } else if(nActionID == 36) {
            strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
            if(userHistory){
            	strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
            }
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_36")).append(" ");
            strActionDesc.append(" '").append(workItemHistoryXmlResponse.getVal("FieldName")).append(" '");
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_BY"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" '").append(strUserAndPersonalName).append(" '");
        } else if(nActionID == 37) {
        	strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
            if(userHistory){
            	strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
            }
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_37"));
            strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("FieldName"));
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_BY"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
        } else if(nActionID == 38) {
        	strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
            if(userHistory){
            	strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
            }
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_38"));
            strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("FieldName"));
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_BY")).append(" ");
             strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(strUserAndPersonalName);
        }else if(nActionID == 39) {
            strActionDesc.append(resourceBundle.getString("PROCESS_INSTANCE_ID"));
            strActionDesc.append(" '").append(objParser.getValueOf("ProcessInstanceId","",true)).append(" '");
            strActionDesc.append(resourceBundle.getString("WI_ACTION_39"));
            strActionDesc.append(" '").append(objParser.getValueOf("Username","",true)).append("'.") ;
        } else if(nActionID == 41) {
        	strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
            if(userHistory){
            	strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
            }
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_41"));
             strUserAndPersonalFieldName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("FieldName"),workItemHistoryXmlResponse.getVal("PersonalFieldName"));
            strActionDesc.append(" ").append(strUserAndPersonalFieldName);
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_BY")); 
             strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
        } else if(nActionID == 42) {
        	strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
            if(userHistory){
            	strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
            }
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_42"));
            strUserAndPersonalFieldName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("FieldName"),workItemHistoryXmlResponse.getVal("PersonalFieldName"));
            strActionDesc.append(" ").append(strUserAndPersonalFieldName);
        } else if(nActionID == 43) {
        	strActionDesc.append(resourceBundle.getString("WI_REFERRED_WORKITEM"));
            if(userHistory){
            	strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
            }
            strActionDesc.append(resourceBundle.getString("WI_ACTION_43"));
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_BY"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
        } else if(nActionID == 44) {
        	strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
            if(userHistory){
            	strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
            }
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_44"));
            strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("FieldName"));
        } else if(nActionID == 45) {    
        	strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
            if(userHistory){
            	strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
            }
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_45"));
//            if(!localeName.contains("en"))
//             strActionDesc.append(" ").append((activityMap.get(workItemHistoryXmlResponse.getVal("FieldName")) != null) ? activityMap.get(workItemHistoryXmlResponse.getVal("FieldName")) : workItemHistoryXmlResponse.getVal("FieldName"));
//             else
            strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("FieldName"));
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_BY"));
             strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
        } else if(nActionID == 46) {
        	strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
            if(userHistory){
            	strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
            }
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_46"));
            strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("FieldName"));
        } else if(nActionID == 47) {
            strActionDesc.append(resourceBundle.getString("WI_ACTION_47_1"));
            strActionDesc.append(" '").append(WFUtility.dateDBtoLocal(workItemHistoryXmlResponse.getVal("ActionDateTime"),dateFormat));
            strActionDesc.append("' ").append(resourceBundle.getString("WI_ACTION_47_2"));
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_BY"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
            if(userHistory){
            strActionDesc.append(" ").append(resourceBundle.getString("WI_FOR_WORKITEM"));
        	strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
            }
        }else if(nActionID == 48) {
        	 strActionDesc.append(resourceBundle.getString("WI_ACTION_47_1"));
             strActionDesc.append(" '").append(WFUtility.dateDBtoLocal(workItemHistoryXmlResponse.getVal("ActionDateTime"),dateFormat));
             strActionDesc.append("' ").append(resourceBundle.getString("WI_ACTION_48"));
             /*strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_BY"));
             strActionDesc.append(resourceBundle.getString("REMINDER_DELETED_BY_USER"));*/
             strActionDesc.append(" '").append(objParser.getValueOf("Username","",true)).append(" '");
            if(userHistory){
                strActionDesc.append(" ").append(resourceBundle.getString("WI_FOR_WORKITEM"));
            	strActionDesc.append(" ").append("\'").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("\'");
                }
        } else if(nActionID == 49) {
            strActionDesc.append(resourceBundle.getString("LOG_DELETED_BY_USER"));
            strActionDesc.append(" '").append(objParser.getValueOf("Username","",true)).append("'.");
        } else if(nActionID == 50) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '").append(objParser.getValueOf("Username","",true)).append("' ");
            strActionDesc.append(resourceBundle.getString("ADDED_THE_QUEUE"));
            if(userHistory){
            strActionDesc.append(" '").append(objParser.getValueOf("FieldName","",true)).append("'");
            }
        } else if(nActionID == 51) {
            
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '").append(objParser.getValueOf("Username","",true)).append("' ");
            strActionDesc.append(resourceBundle.getString("CHANGED_THE_QUEUE"));
            String strSubXml = objParser.getValueOf("FieldName","",true);
            XMLParser objParser1 = new XMLParser(strSubXml);
            XMLParser objParser2;
            strActionDesc.append(" '").append(objParser1.getValueOf("originalQueueName","",true)).append("'");
            String strQueueNameSubXml = objParser1.getValueOf("QueueName","",true);
            if(strQueueNameSubXml.length()>0)
            {
                objParser2 = new XMLParser(strQueueNameSubXml);
                String strOldVal = objParser2.getValueOf("old","",true);
                String strNewVal = objParser2.getValueOf("new","",true);
                if(strOldVal.equalsIgnoreCase(strNewVal))
                {
                    
                }
                else
                {
                    strActionDesc.append(" , ").append(resourceBundle.getString("QUEUE_NAME")).append(" ").append(resourceBundle.getString("FROM")).append(" '").append(strOldVal+"' "+resourceBundle.getString("TO")+" '"+strNewVal+"' ");
                }
            }
            String strQueueTypeSubXml = objParser1.getValueOf("QueueType","",true);
            if(strQueueTypeSubXml.length()>0)
            {
                objParser2 = new XMLParser(strQueueTypeSubXml);
                String strOldVal = objParser2.getValueOf("old","",true);
                String strNewVal = objParser2.getValueOf("new","",true);
                if(strOldVal.equalsIgnoreCase(strNewVal))
                {
                    
                }
                else
                {   
                    if(strOldVal.equalsIgnoreCase("F")) {
                        strOldVal = resourceBundle.getString("QUEUE_TYPE_FIFO");
                    } 
                    else if(strOldVal.equalsIgnoreCase("I")) {
                        strOldVal = resourceBundle.getString("QUEUE_TYPE_INTRODUCTION");
                    }
                    else if(strOldVal.equalsIgnoreCase("N")) {
                        strOldVal = resourceBundle.getString("QUEUE_TYPE_NOASSIGNMENT");
                    }
                    else if(strOldVal.equalsIgnoreCase("D")) {
                        strOldVal = resourceBundle.getString("QUEUE_TYPE_DYNAMIC");
                    }
                    else if(strOldVal.equalsIgnoreCase("S")) {
                        strOldVal = resourceBundle.getString("QUEUE_TYPE_PERMANENT");
                    }
                    
                    if(strNewVal.equalsIgnoreCase("F")) {
                        strNewVal = resourceBundle.getString("QUEUE_TYPE_FIFO");
                    } 
                    else if(strNewVal.equalsIgnoreCase("I")) {
                        strNewVal = resourceBundle.getString("QUEUE_TYPE_INTRODUCTION");
                    }
                    else if(strNewVal.equalsIgnoreCase("N")) {
                        strNewVal = resourceBundle.getString("QUEUE_TYPE_NOASSIGNMENT");
                    }
                    else if(strNewVal.equalsIgnoreCase("D")) {
                        strNewVal = resourceBundle.getString("QUEUE_TYPE_DYNAMIC");
                    }
                    else if(strNewVal.equalsIgnoreCase("S")) {
                        strNewVal = resourceBundle.getString("QUEUE_TYPE_PERMANENT");
                    }
                    
                    strActionDesc.append(" , "+ resourceBundle.getString("QUEUE_TYPE") +" "+resourceBundle.getString("FROM")+" '"+strOldVal+"' "+resourceBundle.getString("TO")+" '"+strNewVal+"' ");
                }
            }
            String strCommentsSubXml = objParser1.getValueOf("Comments","",true);
            if(strCommentsSubXml.length()>0)
            {
                objParser2 = new XMLParser(strCommentsSubXml);
                String strOldVal = objParser2.getValueOf("old","",true);
                String strNewVal = objParser2.getValueOf("new","",true);
                if(strOldVal.equalsIgnoreCase(strNewVal))
                {
                    
                }
                else
                {
                    strActionDesc.append(" , "+ resourceBundle.getString("TITLE_COMMENTS") +" "+resourceBundle.getString("FROM")+" '"+strOldVal+"' "+resourceBundle.getString("TO")+" '"+strNewVal+"' ");
                }
            }
            String strReassignmentSubXml = objParser1.getValueOf("allowReassingment","",true);
            if(strReassignmentSubXml.length()>0)
            {
                objParser2 = new XMLParser(strReassignmentSubXml);
                String strOldVal = objParser2.getValueOf("old","",true);
                String strNewVal = objParser2.getValueOf("new","",true);
                if(strOldVal.equalsIgnoreCase(strNewVal))
                {
                    
                }
                else
                {
                    if(strOldVal.equalsIgnoreCase("N")) {
                        strOldVal = resourceBundle.getString("NO");
                    } else if(strOldVal.equalsIgnoreCase("Y")) {
                        strOldVal = resourceBundle.getString("YES");
                    }
                    if(strNewVal.equalsIgnoreCase("N")) {
                        strNewVal = resourceBundle.getString("NO");
                    } else if(strNewVal.equalsIgnoreCase("Y")) {
                        strNewVal = resourceBundle.getString("YES");
                    }
                    strActionDesc.append(" , "+ resourceBundle.getString("ALLOW_REASSIGNMENT") +" "+resourceBundle.getString("FROM")+" '"+strOldVal+"' "+resourceBundle.getString("TO")+" '"+strNewVal+"' ");
                }
            }
            String strFilterOptionSubXml = objParser1.getValueOf("FilterOption","",true);
            if(strFilterOptionSubXml.length()>0)
            {
                objParser2 = new XMLParser(strFilterOptionSubXml);
                String strOldVal = objParser2.getValueOf("old","",true);
                String strNewVal = objParser2.getValueOf("new","",true);
                if(strOldVal.equalsIgnoreCase(strNewVal))
                {
                    
                }
                else
                {
                    if(strOldVal.equalsIgnoreCase("0")) {
                        strOldVal = resourceBundle.getString("NONE");
                    } else if(strOldVal.equalsIgnoreCase("1")) {
                        strOldVal = resourceBundle.getString("SHOW_ALL");
                    }
                    else if(strOldVal.equalsIgnoreCase("2")) {
                        strOldVal = resourceBundle.getString("LOGGED_IN_INDEX_EQUAL_TO");
                    }
                    else if(strOldVal.equalsIgnoreCase("3")) {
                        strOldVal = resourceBundle.getString("LOGGED_IN_INDEX_NOT_EQUAL_TO");
                    }
                    if(strNewVal.equalsIgnoreCase("0")) {
                        strNewVal = resourceBundle.getString("NONE");
                    } else if(strNewVal.equalsIgnoreCase("1")) {
                        strNewVal = resourceBundle.getString("SHOW_ALL");
                    }
                    else if(strNewVal.equalsIgnoreCase("2")) {
                        strNewVal = resourceBundle.getString("LOGGED_IN_INDEX_EQUAL_TO");
                    }
                    else if(strNewVal.equalsIgnoreCase("3")) {
                        strNewVal = resourceBundle.getString("LOGGED_IN_INDEX_NOT_EQUAL_TO");
                    }
                    strActionDesc.append(" , "+ resourceBundle.getString("FILTER_OPTION") +" "+resourceBundle.getString("FROM")+" '"+strOldVal+"' "+resourceBundle.getString("TO")+" '"+strNewVal+"' ");
                }
            }
            String strFilterValueSubXml = objParser1.getValueOf("FilterValue","",true);
            if(strFilterValueSubXml.length()>0)
            {
                objParser2 = new XMLParser(strFilterValueSubXml);
                String strOldVal = objParser2.getValueOf("old","",true);
                String strNewVal = objParser2.getValueOf("new","",true);
                if(strOldVal.equalsIgnoreCase(strNewVal))
                {
                    
                }
                else
                {
                    if(strOldVal.equalsIgnoreCase("")) {
                        strOldVal = resourceBundle.getString("NONE");
                    } 
                    if(strNewVal.equalsIgnoreCase("")) {
                        strNewVal = resourceBundle.getString("NONE");
                    } 
                    strActionDesc.append(" , "+ resourceBundle.getString("FILTER_VALUE") +" "+resourceBundle.getString("FROM")+" '"+strOldVal+"' "+resourceBundle.getString("TO")+" '"+strNewVal+"' ");
                }
            }
            String strQueryFilterSubXml = objParser1.getValueOf("QueueFilter","",true); // Logging of change in Queue Filter 
            if(strQueryFilterSubXml.length()>0)
            {
                objParser2 = new XMLParser(strQueryFilterSubXml);
                String strOldVal = objParser2.getValueOf("old","",true);
                String strNewVal = objParser2.getValueOf("new","",true);
                if(strOldVal.equalsIgnoreCase(strNewVal))
                {
                    
                }
                else
                {
                    if(strOldVal.equalsIgnoreCase("")) {
                        strOldVal = resourceBundle.getString("NONE");
                    } 
                    if(strNewVal.equalsIgnoreCase("")) {
                        strNewVal = resourceBundle.getString("NONE");
                    } 
                    strActionDesc.append(" , "+ resourceBundle.getString("FILTER_VALUE") +" "+resourceBundle.getString("FROM")+" '"+strOldVal+"' "+resourceBundle.getString("TO")+" '"+strNewVal+"' ");
                }
            }
            
            String strOrderBySubXml = objParser1.getValueOf("OrderBy","",true);
            if(strOrderBySubXml.length()>0)
            {
                objParser2 = new XMLParser(strOrderBySubXml);
                String strOldVal = objParser2.getValueOf("old","",true);
                
                String strNewVal = objParser2.getValueOf("new","",true);
                
                if(strOldVal.equalsIgnoreCase(strNewVal))
                {
                    
                }
                else {
                    if(strOldVal.equalsIgnoreCase("10")) {
                        strOldVal = resourceBundle.getString("FETCH_ORDER_ENTRY_DATE_TIME");
                    } else if(strOldVal.equalsIgnoreCase("13")) {
                        strOldVal = resourceBundle.getString("FETCH_ORDER_INTRODUCTION_DATE_TIME");
                    }
                    if(strNewVal.equalsIgnoreCase("10")) {
                        strNewVal = resourceBundle.getString("FETCH_ORDER_ENTRY_DATE_TIME");
                    } else if(strNewVal.equalsIgnoreCase("13")) {
                        strNewVal = resourceBundle.getString("FETCH_ORDER_INTRODUCTION_DATE_TIME");
                    }
                    
                    strActionDesc.append(" , "+ resourceBundle.getString("ORDER_BY") +" "+resourceBundle.getString("FROM")+" '"+strOldVal+"' "+resourceBundle.getString("TO")+" '"+strNewVal+"' ");
                }
            }
        }else if(nActionID == 52) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(resourceBundle.getString("DELETED_THE_QUEUE"));
            strActionDesc.append(" '"+ objParser.getValueOf("FieldName","",true) +  "'");
        } else if(nActionID == 53) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + ReturnList("FieldName", "DivertedByName",objParser.getValueOf("FieldName","",true)) + "' ");
            strActionDesc.append(" " + resourceBundle.getString("DIVERTED_THE_WORK_OF"));
            strActionDesc.append(" '" + ReturnList("FieldName", "DivertedForName",objParser.getValueOf("FieldName","",true))+ "' ");
            strActionDesc.append(" " + resourceBundle.getString("TO_USER"));
            strActionDesc.append(" '" + ReturnList("FieldName", "DivertedToName",objParser.getValueOf("FieldName","",true))+ "' ");
            strActionDesc.append(" From "+objParser.getValueOf("From","",true)+" To "+objParser.getValueOf("To","",true));
            if(!objParser.getValueOf("ProcessName","0",true).equalsIgnoreCase("0"))
            strActionDesc.append(" FOR Process: "+objParser.getValueOf("ProcessName","0",true) +" And Activity : "+objParser.getValueOf("ActivityName","0",true));
        } else if(nActionID == 54) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + ReturnList("FieldName", "DivertedByName",objParser.getValueOf("FieldName","",true)));
            strActionDesc.append("' " + resourceBundle.getString("DELETED_THE_DIVERSION_SET_FOR"));
            strActionDesc.append(" '" + ReturnList("FieldName", "DivertedForName",objParser.getValueOf("FieldName","",true)) +  "'");
            strActionDesc.append(" From "+objParser.getValueOf("From","",true)+" To "+objParser.getValueOf("To","",true));
            if(!objParser.getValueOf("ProcessName","0",true).equalsIgnoreCase("0"))
            strActionDesc.append(" FOR Process: "+objParser.getValueOf("ProcessName","",true) +" And Activity : "+objParser.getValueOf("ActivityName","",true));
        } else if(nActionID == 60) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            
            if(objParser.getValueOf("GroupList","",true).length()>0) {
                strActionDesc.append(resourceBundle.getString("ADDED_THE_FOLLOWING_GROUPS") + " '");
                strActionDesc.append(ReturnList("GroupList", "GroupName",objParser.getValueOf("GroupList","",true))+ "'");
            } else if(objParser.getValueOf("GroupName","",true).length()>0) {
                strActionDesc.append(resourceBundle.getString("ADDED_THE_GROUP") + " '");
                strActionDesc.append(objParser.getValueOf("GroupName","",true)+ "'");
            }
            
            if(objParser.getValueOf("UserList","",true).length()>0) {
                if((objParser.getValueOf("GroupList","",true).length()>0)||(objParser.getValueOf("GroupName","",true).length()>0))
                    strActionDesc.append(" "+ resourceBundle.getString("AND_ADDED_THE_FOLLOWING_USERS") + " '");
                else
                    strActionDesc.append(" "+ resourceBundle.getString("ADDED_THE_FOLLOWING_USERS") + " '");
                strActionDesc.append(ReturnList("UserList","Username",objParser.getValueOf("UserList","",true))+ "'");
            }
            if(userHistory){
            	  strActionDesc.append(" " + resourceBundle.getString("IN_THE_QUEUE"));
            	strActionDesc.append(" '"+ objParser.getValueOf("QueueName","",true) +  "'");
            }
        } else if(nActionID == 61) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            
            if(objParser.getValueOf("GroupList","",true).length()>0) {
                strActionDesc.append(resourceBundle.getString("DELETED_THE_FOLLOWING_GROUPS") + " '");
                strActionDesc.append(ReturnList("GroupList", "GroupName",objParser.getValueOf("GroupList","",true))+ "'");
            } else if(objParser.getValueOf("GroupName","",true).length()>0) {
                strActionDesc.append(resourceBundle.getString("DELETED_THE_GROUP") + " '");
                strActionDesc.append(objParser.getValueOf("GroupName","",true)+ "'");
            }
            
            if(objParser.getValueOf("UserList","",true).length()>0) {
                if((objParser.getValueOf("GroupList","",true).length()>0)||(objParser.getValueOf("GroupName","",true).length()>0))
                    strActionDesc.append(" "+ resourceBundle.getString("AND_DELETED_THE_FOLLOWING_USERS") + " '");
                else
                    strActionDesc.append(" "+ resourceBundle.getString("DELETED_THE_FOLLOWING_USERS") + " '");
                strActionDesc.append(ReturnList("UserList","Username",objParser.getValueOf("UserList","",true))+ "'");
            }
            if(userHistory){
            	strActionDesc.append(" " + resourceBundle.getString("FROM_THE_QUEUE"));
            	strActionDesc.append(" '"+ objParser.getValueOf("QueueName","",true) +  "'");
            }
        } else if(nActionID == 62) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(resourceBundle.getString("ADDED_THE_FOLLOWING_WORKSTEPS") +" '");
            strActionDesc.append(ReturnList("StreamList","StreamName", objParser.getValueOf("StreamList","",true))).append("'");
            if(userHistory){
            	strActionDesc.append("' " + resourceBundle.getString("IN_THE_QUEUE"));
            	strActionDesc.append(" '"+ objParser.getValueOf("QueueName","",true) +  "'");
            }
        } else if(nActionID == 63) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(resourceBundle.getString("DELETED_THE_FOLLOWING_WORKSTEPS") +" '");
            strActionDesc.append(ReturnList("StreamList","StreamName", objParser.getValueOf("StreamList","",true))).append("'");
            if(userHistory){
            	strActionDesc.append("' " + resourceBundle.getString("FROM_THE_QUEUE"));
            	strActionDesc.append(" '"+ objParser.getValueOf("QueueName","",true) +  "'");
            }
        } else if(nActionID == 64) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '"+ objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(resourceBundle.getString("HAS_SET_QUEUE"));
            if(userHistory){
            strActionDesc.append(ReturnList("QueueList","QueueName", objParser.getValueOf("QueueList","",true)));
            }strActionDesc.append(" '"+ resourceBundle.getString("AS_PREFERRED_QUEUES") +  "'");
        } else if(nActionID == 65) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" "+ objParser.getValueOf("Username","",true) + " ");
            strActionDesc.append(resourceBundle.getString("HAS_DELETED_PREFERRED_QUEUE"));
        } else if(nActionID == 66) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(resourceBundle.getString("CREATED_THE_FOLLOWING_ALIASES") + " '");
            strActionDesc.append(ReturnList("AliasList","AliasName",objParser.getValueOf("AliasList","",true) ));
            if(userHistory){
            	strActionDesc.append("' " + resourceBundle.getString("IN_THE_QUEUE"));
            	strActionDesc.append(" '"+ objParser.getValueOf("QueueName","",true) +  "'");
            }
        } else if(nActionID == 67) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(resourceBundle.getString("DELETED_SOME_ALIASES_FROM_THE_QUEUE"));
            if(userHistory){
            	strActionDesc.append(" '"+ objParser.getValueOf("QueueName","",true) +  "'");
            }
        } else if(nActionID == 68) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" +objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(resourceBundle.getString("SET_THE_TURN_AROUND_TIME_TO"));
            strActionDesc.append(" " + getTATProcessString(objParser.getValueOf("ProcessTATime","",true),resourceBundle) + " ");
            if(userHistory){
            strActionDesc.append(resourceBundle.getString("FOR_THE_PROCESS"));
            strActionDesc.append(" '" + objParser.getValueOf("ProcessName","",true) +  "'");
            }
        } else if(nActionID == 69) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(resourceBundle.getString("SET_THE_TURN_AROUND_TIME_OF_THE_FOLLOWING_ACTIVITIES") +" ");
            strActionDesc.append(ReturnList("ActivityList","ActivityName",objParser.getValueOf("ActivityList","",true)));
            strActionDesc.append(" " + resourceBundle.getString("TOSMALL") + " ");
            strActionDesc.append(getTATActivityList("ActivityList","ActivityTATime",objParser.getValueOf("ActivityList","",true),resourceBundle));
            strActionDesc.append(" " + resourceBundle.getString("RESPECTIVELY")) ;
        }else if(nActionID == 70){
             strActionDesc.append(resourceBundle.getString("WI_ACTION_70"));
             strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("FieldName"));
        } else if(nActionID == 71){
             strActionDesc.append(resourceBundle.getString("WI_ACTION_71"));
             strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("FieldName"));
             strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_71_3"));
         }
		
        /* else if(nActionID == 71){
            strActionDesc.append(resourceBundle.getString("WI_ACTION_71_1")); 
            strActionDesc.append(" ").append(resourceBundle.getString("AT")).append(" '").append( workItemHistoryXmlResponse.getVal("ActivityName")).append("' ");
            strActionDesc.append(resourceBundle.getString("WI_ACTION_71_2"));
            strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("FieldName"));
            }*/
        else if(nActionID == 73) {
			strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
			if(userHistory){
				strActionDesc.append(" '").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append(" '");
			}
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_73_1"));
            strActionDesc.append(" '").append(workItemHistoryXmlResponse.getVal("ConcernedAuthInfo") ).append("' ").append(resourceBundle.getString("BY")) ;
            strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("Mode"));
        } else if(nActionID == 75){
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            detailAuditTrail = workItemHistoryXmlResponse.getVal("DetailAuditTrail");
            if(detailAuditTrail.equalsIgnoreCase("Y")){
                strVarStr = resourceBundle.getString("WI_ACTION_VAR");
                strWasSetTo = resourceBundle.getString("WI_ACTION_16");
                strBY    = resourceBundle.getString("WI_ACTION_BY");
                strPrevValue    = resourceBundle.getString("WI_ACTION_715");
                strActionDesc = JSONObject.getAttributeFields(workItemHistoryXmlResponse.getVal("FieldName"),strVarStr,strWasSetTo,strPrevValue,strBY,strUserAndPersonalName);
                if(strActionDesc == null || strActionDesc.toString().equalsIgnoreCase("")){
                //	strActionDesc.append("invalid");  // code for discarding actionId 75 for Omniflow Workitems
                	 /*strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
                	 strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_75"));
     
                     strActionDesc.append(" ").append(strUserAndPersonalName);*/
                	
                	strActionDesc.append("<Message><ActivityName>"+workItemHistoryXmlResponse.getVal("ActivityName")+"</ActivityName><ProcessInstanceID>"+workItemHistoryXmlResponse.getVal("ProcessInstanceID")+"</ProcessInstanceID><Attributes><Attribute>Variable was set by "+workItemHistoryXmlResponse.getVal("Username")+"</Attribute></Attributes></Message>");
                }
            }else{
                strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
                if(userHistory){
                    strActionDesc.append(" '").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append("'");
                }
                strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_75"));
                
                strActionDesc.append(" ").append(strUserAndPersonalName);
            }
        }else if(nActionID == 76) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(resourceBundle.getString("CHANGE_AUDITLOG_PREF") +".");
        }   else if(nActionID == 77) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(resourceBundle.getString("SET_FILTER"));
            strActionDesc.append(" '" + objParser.getValueOf("QueryFilter","",true) + "' ");
            strActionDesc.append(resourceBundle.getString("ON"));
            XMLParser subTag =new XMLParser(objParser.getValueOf("UserInfo","",true));
            strActionDesc.append(" '" +subTag.getValueOf("Username","",true)+" '") ;
            strActionDesc.append(" "+resourceBundle.getString("FOR_QUEUE"));
            strActionDesc.append(" '" + objParser.getValueOf("QueueName","",true) + "' ");
            
        } else if(nActionID == 78) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(resourceBundle.getString("SET_VALUE_OF_CONSTANTS") +" '");
            strActionDesc.append(objParser.getValueOf("Name","",true));
            strActionDesc.append("' " + resourceBundle.getString("TOSMALL") + " '");
            strActionDesc.append(objParser.getValueOf("Value","",true));
            strActionDesc.append("'. ");
        } else if(nActionID == 79) {
            strActionDesc.append(resourceBundle.getString("WI_ACTION_79_1"));
            strActionDesc.append(" ").append(resourceBundle.getString("AT")).append(" '").append(workItemHistoryXmlResponse.getVal("ActivityName")).append("' ");
            strActionDesc.append(resourceBundle.getString("WI_ACTION_79_2"));
            strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("FieldName"));
        } else if(nActionID == 80) {
            strActionDesc.append(resourceBundle.getString("WI_ACTION_80"));
            strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("FieldName"));
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_80_1"));
            strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("processName"));
            strActionDesc.append(" ").append(resourceBundle.getString("BY_USER"));
            strActionDesc.append(" " + objParser.getValueOf("Username","",true));
        } else if(nActionID == 83) {
            strActionDesc.append(resourceBundle.getString("WI_ACTION_83"));
            strActionDesc.append(" '").append(workItemHistoryXmlResponse.getVal("FieldName")).append(" '");
        } else if(nActionID == 84) {
        	strActionDesc.append("Quick search variable:").append(" '").append(workItemHistoryXmlResponse.getVal("VariableName")).append(" '");
            strActionDesc.append(resourceBundle.getString("ADD_QUICK_SEARCH_VARIABLE"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));            
            strActionDesc.append(" '").append(strUserAndPersonalName).append(" '");
        } else if(nActionID == 85) {
        	strActionDesc.append("Quick search variable:").append(" '").append(workItemHistoryXmlResponse.getVal("VariableName")).append(" '");
            strActionDesc.append(resourceBundle.getString("DELETE_QUICK_SEARCH_VARIABLE"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));            
            strActionDesc.append(" '").append(strUserAndPersonalName).append(" '");
        }else if(nActionID == 86) {
        	String operation =(objParser.getValueOf("Operation","",true).equalsIgnoreCase("A"))?"accepted":"rejected";
        	String entityType=(objParser.getValueOf("EntityType","",true).equalsIgnoreCase("P"))?"process":"queue";
        	strActionDesc.append(resourceBundle.getString("LABEL_CHECKER")).append(" '" + objParser.getValueOf("CheckerUserName","",true) + " '");
        	strActionDesc.append( " " + operation + " " + resourceBundle.getString("LABEL_AUTHORIZATION"));  
        	strActionDesc.append(resourceBundle.getString("LABEL_MAKER")).append(" '"+objParser.getValueOf("MakerUserName") +" '");
        	strActionDesc.append(resourceBundle.getString("LABEL_FOR")).append( " " + "entityType" +" ").append(" '" +objParser.getValueOf("EntityName")+" '" );
        }
        else if (nActionID == 87) {
            strActionDesc.append(resourceBundle.getString("WI_ACTION_87"));
            strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("Username"));
            
		}
        else if(nActionID == 88) {
            strActionDesc.append(resourceBundle.getString("AUDIT_DOCUMENT"));
        }
        else if(nActionID == 89) {
//             if(!localeName.contains("en"))
//            strActionDesc.append((docTypeMap.get(workItemHistoryXmlResponse.getVal("FieldName")) != null) ? docTypeMap.get(workItemHistoryXmlResponse.getVal("FieldName")) : workItemHistoryXmlResponse.getVal("FieldName"));
//             else
            strActionDesc.append(workItemHistoryXmlResponse.getVal("FieldName"));
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_89"));    
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));            
             strActionDesc.append(" '").append(strUserAndPersonalName).append(" '");
        }
        else if(nActionID == 90) {
//            if(!localeName.contains("en"))
//            strActionDesc.append((docTypeMap.get(workItemHistoryXmlResponse.getVal("FieldName")) != null) ? docTypeMap.get(workItemHistoryXmlResponse.getVal("FieldName")) : workItemHistoryXmlResponse.getVal("FieldName"));
//             else
            strActionDesc.append(workItemHistoryXmlResponse.getVal("FieldName"));
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_90"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));            
             strActionDesc.append(" '").append(strUserAndPersonalName).append(" '");
        }else if(nActionID == 91) {
//            if(!localeName.contains("en"))
//            strActionDesc.append((docTypeMap.get(workItemHistoryXmlResponse.getVal("FieldName")) != null) ? docTypeMap.get(workItemHistoryXmlResponse.getVal("FieldName")) : workItemHistoryXmlResponse.getVal("FieldName"));
//             else
            strActionDesc.append(workItemHistoryXmlResponse.getVal("FieldName"));
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_91"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));            
            strActionDesc.append(" '").append(strUserAndPersonalName).append(" '");
        }else if(nActionID == 92) {
//            if(!localeName.contains("en"))
//            strActionDesc.append((docTypeMap.get(workItemHistoryXmlResponse.getVal("FieldName")) != null) ? docTypeMap.get(workItemHistoryXmlResponse.getVal("FieldName")) : workItemHistoryXmlResponse.getVal("FieldName"));
//             else
            strPageMsg = workItemHistoryXmlResponse.getVal("FieldName");
            strActionDesc.append(strPageMsg.substring(0,strPageMsg.indexOf(resourceBundle.getString("SEPERATOR9"))));
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_92"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));            
            strActionDesc.append(" '").append(strUserAndPersonalName).append(" '");
            strActionDesc.append(" ").append(resourceBundle.getString("AT_PAGE_NO")).append(strPageMsg.substring(strPageMsg.indexOf(resourceBundle.getString("SEPERATOR9"))+1,strPageMsg.length()) );
        }else if(nActionID == 93) {
//            if(!localeName.contains("en"))
//            strActionDesc.append((docTypeMap.get(workItemHistoryXmlResponse.getVal("FieldName")) != null) ? docTypeMap.get(workItemHistoryXmlResponse.getVal("FieldName")) : workItemHistoryXmlResponse.getVal("FieldName"));
//             else
            strActionDesc.append(workItemHistoryXmlResponse.getVal("FieldName"));
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_93"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));            
            strActionDesc.append(" '").append(strUserAndPersonalName).append(" ' ");
            strActionDesc.append(resourceBundle.getString("LABEL_FOR"));
            strActionDesc.append(" ");
            strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
            if(userHistory){
                strActionDesc.append(" '").append(workItemHistoryXmlResponse.getVal("ProcessInstanceId")).append(" '");
            }
        }else if(nActionID == 94) {
//            if(!localeName.contains("en"))
//            strActionDesc.append((docTypeMap.get(workItemHistoryXmlResponse.getVal("FieldName")) != null) ? docTypeMap.get(workItemHistoryXmlResponse.getVal("FieldName")) : workItemHistoryXmlResponse.getVal("FieldName"));
//             else
            strActionDesc.append(workItemHistoryXmlResponse.getVal("FieldName"));
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_94"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));            
            strActionDesc.append(" '").append(strUserAndPersonalName).append(" '");
        }        
        else if(nActionID == 95) {
//            if(!localeName.contains("en"))
//            strActionDesc.append((docTypeMap.get(workItemHistoryXmlResponse.getVal("FieldName")) != null) ? docTypeMap.get(workItemHistoryXmlResponse.getVal("FieldName")) : workItemHistoryXmlResponse.getVal("FieldName"));
//             else
            strActionDesc.append(workItemHistoryXmlResponse.getVal("FieldName"));
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_95"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));            
            strActionDesc.append(" '").append(strUserAndPersonalName).append(" '");
        }else if(nActionID == 96) {
//            if(!localeName.contains("en"))
//            strActionDesc.append((docTypeMap.get(workItemHistoryXmlResponse.getVal("FieldName")) != null) ? docTypeMap.get(workItemHistoryXmlResponse.getVal("FieldName")) : workItemHistoryXmlResponse.getVal("FieldName"));
//             else
            strActionDesc.append(workItemHistoryXmlResponse.getVal("FieldName"));
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_96"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));            
            strActionDesc.append(" '").append(strUserAndPersonalName).append(" '");
        } else if(nActionID == 101) {
            strActionDesc.append(resourceBundle.getString("ONMESSAGE_EVENT_RAISED_FOR_WORKITEM_AT"));
            strActionDesc.append(" "+objParser.getValueOf("ActivityName","",true)+" ");
            strActionDesc.append(resourceBundle.getString("AT_SMALL")+" ");
            try {
                strActionDesc.append(WFUtility.dateDBtoLocal(objParser.getValueOf("ActionDateTime","",true),dateFormat));
            } catch (Exception ex) {
            }
            strActionDesc.append(" "+resourceBundle.getString("BY"));
             strActionDesc.append(" '"+objParser.getValueOf("Username","",true)+" '" +".");
        } else if(nActionID == 102) {
            strActionDesc.append("");
        }else if(nActionID == 103) {
             strActionDesc.append(resourceBundle.getString("WORKITEM_SPLITTED_AT"));
            strActionDesc.append(" "+objParser.getValueOf("ActivityName","",true)+" ");
            strActionDesc.append(resourceBundle.getString("AT_SMALL")+" ");
            try {
                strActionDesc.append(WFUtility.dateDBtoLocal(objParser.getValueOf("ActionDateTime","",true),dateFormat));
            } catch (Exception ex) {
            }
            strActionDesc.append(" "+resourceBundle.getString("BY"));
            strActionDesc.append(" '"+objParser.getValueOf("Username","",true)+" '"+".");
        }else if(nActionID == 104) {
            strActionDesc.append(resourceBundle.getString("WI_ACTION_USER_EXP"));
            strActionDesc.append(" \'");

            strActionDesc.append(workItemHistoryXmlResponse.getVal("ExceptionName"));
            strActionDesc.append("\'");

            strActionDesc.append(" ");
            strActionDesc.append(resourceBundle.getString("WI_ACTION_104"));
            strActionDesc.append(" ");
             strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" '" + strUserAndPersonalName +" '");

            String strExceptionCommemnts = workItemHistoryXmlResponse.getVal("ExceptionComments");

            if(!strExceptionCommemnts.equalsIgnoreCase("")) {
                strActionDesc.append(" ");

                strActionDesc.append(resourceBundle.getString("WI_ACTION_COMMENTS"));
                strActionDesc.append(" ");
                strActionDesc.append("\'");


                strActionDesc.append(workItemHistoryXmlResponse.getVal("ExceptionComments"));
                strActionDesc.append("\'");

            }
        }else if(nActionID == 105){
            strActionDesc.append(resourceBundle.getString("WI_ACTION_USER_EXP"));
            strActionDesc.append(" \'");

            strActionDesc.append(workItemHistoryXmlResponse.getVal("ExceptionName"));
            strActionDesc.append("\'");

            strActionDesc.append(" ");
            strActionDesc.append(resourceBundle.getString("WI_ACTION_105"));
            strActionDesc.append(" ");
             strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(strUserAndPersonalName);

            String strExceptionCommemnts = workItemHistoryXmlResponse.getVal("ExceptionComments");

            if(!strExceptionCommemnts.equalsIgnoreCase("")) {
                strActionDesc.append(" ");

                strActionDesc.append(resourceBundle.getString("WI_ACTION_COMMENTS"));
                strActionDesc.append(" ");
                strActionDesc.append("\'");


                strActionDesc.append(workItemHistoryXmlResponse.getVal("ExceptionComments"));
                strActionDesc.append("\'");

            }
        }else if(nActionID == 107) {
            strActionDesc.append(resourceBundle.getString("WI_ACTION_107"));
            strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("CalendarName"));
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_107_1"));
            strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("processName"));
            strActionDesc.append(" ").append(resourceBundle.getString("BY_USER"));
            strActionDesc.append(" " + objParser.getValueOf("Username","",true));
        } else if(nActionID == 109) {
            strActionDesc.append(resourceBundle.getString("WI_ACTION_109"));
        }else if(nActionID == 110) {
            strActionDesc.append(resourceBundle.getString("WI_ACTION_110"));
		} else if (nActionID == 112) {
					
			StringBuilder strTemp = new StringBuilder(); //shubham changes for Hide Mail Audit LOG 
			String HideEmailIdInLog = (String) WFFindClass.wfGetServerPropertyMap()
					.get(WFSConstant.CONST_HideEmailIdInLog);

			if (HideEmailIdInLog.equalsIgnoreCase("Y")) {
				strTemp = new StringBuilder("Mail Initiated");
			} else {
				strPageMsg = workItemHistoryXmlResponse.getVal("FieldName");
				strTemp = new StringBuilder(resourceBundle.getString("WI_ACTION_112"));
				strTemp.append(" \'").append(workItemHistoryXmlResponse.getVal("MailTo")).append("\'");
				strTemp.append(",\'").append(workItemHistoryXmlResponse.getVal("MailCC")).append("\'");
				strTemp.append(" ").append(resourceBundle.getString("LABEL_FROM"));
				strTemp.append(" \'").append(workItemHistoryXmlResponse.getVal("MailFrom")).append("\'");
				if (!workItemHistoryXmlResponse.getVal("MailSubject").equals("")) {
					strTemp.append(" ").append(resourceBundle.getString("WITH_SUBJECT"));
					strTemp.append(" \'").append(workItemHistoryXmlResponse.getVal("MailSubject")).append("\'");
				}
			}
			strActionDesc.append(strTemp);
		}
        else if(nActionID == 200){
           /* strActionDesc.append(resourceBundle.getString("WI_ACTION_200"));
            strActionDesc.append(" " + resourceBundle.getString("LABEL_FOR") + " ");
            strActionDesc.append(" " + resourceBundle.getString("SCREENHEADER_WORKITEM") + " ");*/
            strActionDesc.append("'"+ objParser.getValueOf("ProcessInstanceId","",true) + "' ");
            strActionDesc.append(resourceBundle.getString("WI_ACTION_200"));
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
        
        /*else if(nActionID == 1001) {            
            strActionDesc.append(resourceBundle.getString("SCREENHEADER_WORKITEM"));
            strActionDesc.append(" ").append(resourceBundle.getString("WI_ACTION_1001"));
            strActionDesc.append(" '").append(workItemHistoryXmlResponse.getVal("FieldName")).append("' ");
        }*/
        }else if(nActionID == 113) {
            strActionDesc.append(resourceBundle.getString("WI_ACTION_113"));
            String users = workItemHistoryXmlResponse.getVal("FieldName");
            String divertedUser = "";
            String actualUser = "";
            if(users.indexOf(",")!=-1)
            {
            	divertedUser = "'" + users.substring(0, users.indexOf(",")) +"["+WFSUtil.getPersonalName(con, users.substring(0, users.indexOf(",")), dbType)+ "]'";
                actualUser = "'" + users.substring(users.indexOf(",")+1) +"["+WFSUtil.getPersonalName(con, users.substring(users.indexOf(",")+1), dbType)+ "]'";
            }
            strActionDesc = new StringBuilder(WFUtility.Replace(strActionDesc.toString(),"<PREV>",actualUser));
            strActionDesc = new StringBuilder(WFUtility.Replace(strActionDesc.toString(),"<TO>",divertedUser));
        }
        else if(nActionID == 114) {
            strActionDesc.append(resourceBundle.getString("WI_ACTION_114"));
            if(workItemHistoryXmlResponse.getVal("FieldName")==null || workItemHistoryXmlResponse.getVal("FieldName").equalsIgnoreCase(""))
            {
                strActionDesc.append(" activityid ").append(workItemHistoryXmlResponse.getVal("FieldId"));
            }
//            else if(!localeName.contains("en"))
//
//                strActionDesc.append(" ").append((activityMap.get(workItemHistoryXmlResponse.getVal("FieldName")) != null) ? activityMap.get(workItemHistoryXmlResponse.getVal("FieldName")) : workItemHistoryXmlResponse.getVal("FieldName"));
             else
                strActionDesc.append(" '").append(workItemHistoryXmlResponse.getVal("FieldName")).append("'");
        }
        else if(nActionID == 115) {             
            strActionDesc.append(resourceBundle.getString("WI_ACTION_115"));            
        }else if(nActionID == 116) {
            strActionDesc.append(resourceBundle.getString("SET_EXPORT_CABINET_TO"));
            strActionDesc.append(" "+ objParser.getValueOf("FieldName","",true) + " ");
            strActionDesc.append(resourceBundle.getString("BY_USER"));
            strActionDesc.append(" " + objParser.getValueOf("Username","",true));
        }
         else if(nActionID == 117) {
            strActionDesc.append(resourceBundle.getString("MODIFY_EXPORT_CABINET"));
            strActionDesc.append(" "+ objParser.getValueOf("FieldName","",true) + " ");
            strActionDesc.append(resourceBundle.getString("BY_USER"));
            strActionDesc.append(" " + objParser.getValueOf("Username","",true));
        }
         else if(nActionID == 118) {
            strActionDesc.append(resourceBundle.getString("DELETE_EXPORT_CABINET"));
            strActionDesc.append(" "+ objParser.getValueOf("FieldName","",true) + " ");
            strActionDesc.append(resourceBundle.getString("BY_USER"));
            strActionDesc.append(" " + objParser.getValueOf("Username","",true));
        }
        else if(nActionID == 119) {
            strActionDesc.append(resourceBundle.getString("ADD_PURGE_CRITERIA"));            
            strActionDesc.append(" " + resourceBundle.getString("BY_USER"));
            strActionDesc.append(" " + objParser.getValueOf("Username","",true));
        }
        else if(nActionID == 120) {
            strActionDesc.append(resourceBundle.getString("MODIFY_PURGE_CRITERIA"));       
            strActionDesc.append(" " + resourceBundle.getString("BY_USER"));
            strActionDesc.append(" " + objParser.getValueOf("Username","",true));
        }
        else if(nActionID == 121) {
            strActionDesc.append(resourceBundle.getString("DELETE_PURGE_CRITERIA"));            
            strActionDesc.append(" " + resourceBundle.getString("BY_USER"));
            strActionDesc.append(" " + objParser.getValueOf("Username","",true));
        }
        
        else if(nActionID == 123) {
            strActionDesc.append(resourceBundle.getString("WI_ACTION_123")); 
            strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("FieldName"));
            strActionDesc.append(resourceBundle.getString("LABEL_FROM"));
            strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("Username"));
        } 
		else if(nActionID == 124) {
        	 strActionDesc.append(resourceBundle.getString("USER"));
        	 strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
             strActionDesc.append(resourceBundle.getString("WI_ACTION_124"));
        
        } 
        else if(nActionID == 125) {
        	strActionDesc.append(resourceBundle.getString("USER"));
       	    strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(resourceBundle.getString("WI_ACTION_125"));
        }else if(nActionID == 126) {
        	strActionDesc.append(resourceBundle.getString("WORK_AUDIT_DELETED_FOR_USER"));
        	strActionDesc.append(" ").append(workItemHistoryXmlResponse.getVal("AuditeeName"));
        	strActionDesc.append(" " + resourceBundle.getString("BY_USER"));
        	strActionDesc.append(" " + objParser.getValueOf("Username","",true));
        }else if(nActionID == 128) {
        	strActionDesc.append(workItemHistoryXmlResponse.getVal("Message"));
        }
        else if(nActionID == 501) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(" " + resourceBundle.getString("REGISTERED"));
            strActionDesc.append(" " + resourceBundle.getString("THE_PROCESS"));
            strActionDesc.append(" '"+ objParser.getValueOf("ProcessName","",true) +  "'");
        } else if(nActionID == 502) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(" " + resourceBundle.getString("UNREGISTERED"));
            strActionDesc.append(" " + resourceBundle.getString("THE_PROCESS"));
            strActionDesc.append(" '"+ objParser.getValueOf("ProcessName","",true) +  "'");
        } else if(nActionID == 503) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(" " + resourceBundle.getString("CHECK_OUT"));
            strActionDesc.append(" " + resourceBundle.getString("THE_PROCESS"));
            strActionDesc.append(" '"+ objParser.getValueOf("ProcessName","",true) +  "'");
        } else if(nActionID == 504) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(" " + resourceBundle.getString("CHECK_IN"));
            strActionDesc.append(" " + resourceBundle.getString("THE_PROCESS"));
            strActionDesc.append(" '"+ objParser.getValueOf("ProcessName","",true) +  "'");
        } else if(nActionID == 505) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(" " + resourceBundle.getString("UNDO_CHECK_OUT"));
            strActionDesc.append(" " + resourceBundle.getString("THE_PROCESS"));
            strActionDesc.append(" '"+ objParser.getValueOf("ProcessName","",true) +  "'");
        } else if(nActionID == 506) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(" " + resourceBundle.getString("UNREGISTERED"));
            strActionDesc.append(" " + resourceBundle.getString("THE_PROJECT"));
            strActionDesc.append(" '"+ objParser.getValueOf("ProcessName","",true) +  "'");
        } else if(nActionID == 507) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(" " + resourceBundle.getString("CHECK_IN_NEW"));
            strActionDesc.append(" " + resourceBundle.getString("THE_PROCESS"));
            strActionDesc.append(" '"+ objParser.getValueOf("ProcessName","",true) +  "'");
        }else if(nActionID == 508) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(" " + resourceBundle.getString("MODIFY_ALIAS"));
            strActionDesc.append(" " + resourceBundle.getString("THE_PROCESS"));
            strActionDesc.append(" '"+ objParser.getValueOf("ProcessName","",true) +  "'");
        } else if(nActionID == 509) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(" " + resourceBundle.getString("MODIFY_TEMPLATE"));
            strActionDesc.append(" " + resourceBundle.getString("THE_PROCESS"));
            strActionDesc.append(" '"+ objParser.getValueOf("ProcessName","",true) +  "'");
        } else if(nActionID == 510) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(" " + resourceBundle.getString("MODIFY_FORM"));
            strActionDesc.append(" " + resourceBundle.getString("THE_PROCESS"));
            strActionDesc.append(" '"+ objParser.getValueOf("ProcessName","",true) +  "'");
        }else if(nActionID == 511) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(" " + resourceBundle.getString("PURGE_FROM"));
            strActionDesc.append(" " + resourceBundle.getString("THE_PROCESS"));
            strActionDesc.append(" '"+ objParser.getValueOf("ProcessName","",true) +  "'");
        }else if(nActionID == 512) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(" " + resourceBundle.getString("ADDED"));
            strActionDesc.append(" " + resourceBundle.getString("THE_DOCUMENT"));
            strActionDesc.append(" '"+ objParser.getValueOf("FieldName","",true) +  "'");
        }else if(nActionID == 1001) {
            strActionDesc.append(resourceBundle.getString("PROFILE_WITH_NAME"));
			strActionDesc.append(" '" + objParser.getValueOf("ProfileName") + "' ");
			strActionDesc.append(" " + resourceBundle.getString("HAS_BEEN_ADDED_BY"));
			strActionDesc.append(" '" + objParser.getValueOf("UserName") + "'");			
        }else if(nActionID == 1002) {
            strActionDesc.append(resourceBundle.getString("PROFILE_WITH_NAME"));
			strActionDesc.append(" '" + objParser.getValueOf("ProfileName") + "' ");
			strActionDesc.append(" " +resourceBundle.getString("HAS_BEEN_DELETED_BY"));
			strActionDesc.append(" '" + objParser.getValueOf("UserName") + "'");			
        }else if(nActionID == 1003) {
            String stSubXml = "";
			strActionDesc.append(resourceBundle.getString("USER"));
			strActionDesc.append(" '" + objParser.getValueOf("UserName") + "' ");
			strActionDesc.append(" " + resourceBundle.getString("MODIFIED_PROFILE"));
			strActionDesc.append(" '" + objParser.getValueOf("ProfileName") + "' ");

			if (!"".equals(objParser.getValueOf("ProfileName"))) {
				strActionDesc.append(" " + resourceBundle.getString("PROPERTY_PROFILE_NAME"));
				stSubXml = objParser.getValueOf("ProfileName");
			}
			if (!"".equals(objParser.getValueOf("Description"))) {
				strActionDesc.append(" " + resourceBundle.getString("LABEL_DESCRIPTION"));
				stSubXml = objParser.getValueOf("Description");
			}

			XMLParser objParsersub;
			if (stSubXml.length() > 0) {
				objParsersub = new XMLParser(stSubXml);
				String strOldVal = objParsersub.getValueOf("old");
				String strNewVal = objParsersub.getValueOf("new");
				if (strOldVal.equalsIgnoreCase(strNewVal)) {
				} else {
					strActionDesc.append(" '" + strOldVal + "'");
					strActionDesc.append(" " + resourceBundle.getString("LABEL_TO"));
					strActionDesc.append(" '" + strNewVal + "'");
				}
			}
        }else if(nActionID == 1004) {
            if (!"0".equals(objParser.getValueOf("ObjectId"))) {
				strActionDesc.append(resourceBundle.getString("PROFILE_WITH_NAME"));
				strActionDesc.append(" '" + objParser.getValueOf("ProfileName") + "' ");
				strActionDesc.append(" " + resourceBundle.getString("ADDED"));
				strActionDesc.append(" " + resourceBundle.getString("OBJECT_NAME"));
				strActionDesc.append(" '" + objParser.getValueOf("ObjectName") + "'");
				strActionDesc.append(" " + resourceBundle.getString("LABEL_IN"));
				strActionDesc.append(" " + resourceBundle.getString("OBJECT_TYPE"));
				strActionDesc.append(" '" + objParser.getValueOf("ObjectType") + "'");
				strActionDesc.append(" " + resourceBundle.getString("TO_USER"));
				strActionDesc.append(" '" + objParser.getNextValueOf("UserName") + "'");
			} else {
				strActionDesc.append(objParser.getNextValueOf("UserName")); 
				strActionDesc.append(" " + resourceBundle.getString("ADDED_USER"));
				strActionDesc.append(" '"+objParser.getNextValueOf("Username")+" '");
				strActionDesc.append(" " + resourceBundle.getString("LABEL_IN"));
				strActionDesc.append(" " );
				strActionDesc.append(resourceBundle.getString("PROFILE_WITH_NAME"));
				strActionDesc.append(" '" + objParser.getValueOf("ProfileName") + "' ");
			}
        }else if(nActionID == 1005) {
            if (!"0".equals(objParser.getValueOf("ObjectId"))) {
				strActionDesc.append(resourceBundle.getString("PROFILE_WITH_NAME"));
				strActionDesc.append(" '" + objParser.getValueOf("ProfileName") + "' ");
				strActionDesc.append(" " + resourceBundle.getString("DELETED"));
				strActionDesc.append(" " + resourceBundle.getString("OBJECT_NAME"));
				strActionDesc.append(" '" + objParser.getValueOf("ObjectName") + "'");
				strActionDesc.append(" " + resourceBundle.getString("LABEL_IN"));
				strActionDesc.append(" " + resourceBundle.getString("OBJECT_TYPE"));
				strActionDesc.append(" '" + objParser.getValueOf("ObjectType") + "'");
				strActionDesc.append(" " + resourceBundle.getString("FROM_USER"));
				strActionDesc.append(" '" + objParser.getNextValueOf("UserName") + "'");
            } else {
            	strActionDesc.append(objParser.getNextValueOf("UserName")); 
            	strActionDesc.append(" " + resourceBundle.getString("DELETED_USER"));
            	strActionDesc.append("'"+objParser.getNextValueOf("Username")+"'");
            	strActionDesc.append(" " + resourceBundle.getString("LABEL_IN"));
            	strActionDesc.append(resourceBundle.getString("PROFILE_WITH_NAME"));
            	strActionDesc.append(" '" + objParser.getValueOf("ProfileName") + "' ");
            }
        }else if(nActionID == 1006) {
            strActionDesc.append(resourceBundle.getString("USER"));
			strActionDesc.append(" '" + objParser.getValueOf("Username") + "' ");
			strActionDesc.append(" " + resourceBundle.getString("UPDATED_USER"));
			strActionDesc.append(" '" + objParser.getNextValueOf("UserName") + "' ");
			strActionDesc.append(" " + resourceBundle.getString("LABEL_IN"));
			strActionDesc.append(" " + resourceBundle.getString("PROFILE") + " ");
			strActionDesc.append(" '" + objParser.getValueOf("ProfileName") + "'");
        }else if(nActionID == 1007) {
            strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username") + "' ");
            strActionDesc.append(" " + resourceBundle.getString("ADDED_OBJECT_TYPE"));
            strActionDesc.append(" '" + objParser.getValueOf("ObjectType") + "' ");
            strActionDesc.append(resourceBundle.getString("LABEL_TO"));
            strActionDesc.append(" ").append(resourceBundle.getString("THE_PROFILE"));
            strActionDesc.append(" '" + objParser.getValueOf("ProfileName") + "' "); 
        }else if(nActionID == 1008) {
            strActionDesc.append(resourceBundle.getString("PROFILE_WITH_NAME"));
			strActionDesc.append(" '" + objParser.getValueOf("ProfileName") + "' ");
			strActionDesc.append(" " + resourceBundle.getString("DELETED_OBJECT_TYPE"));
			strActionDesc.append(" '" + objParser.getValueOf("ObjectType") + "'");
        }else if(nActionID == 1009) {
            strActionDesc.append(resourceBundle.getString("PROFILE_WITH_NAME"));
			strActionDesc.append(" '" + objParser.getValueOf("ProfileName") + "' ");
			strActionDesc.append(" " + resourceBundle.getString("UPDATED_OBJECT_TYPE"));
			strActionDesc.append(" '" + objParser.getValueOf("ObjectType") + "'");
        }else if(nActionID == 1010) {
            strActionDesc.append(resourceBundle.getString("USER"));
			strActionDesc.append(" '" + objParser.getValueOf("Username") + "' ");
			if (!"0".equals(objParser.getValueOf("ObjectId"))) {
				strActionDesc.append(" " + resourceBundle.getString("ADDED"));
				strActionDesc.append(" " + resourceBundle.getString("OBJECT_NAME"));
				strActionDesc.append(" '" + objParser.getValueOf("ObjectName") + "'");
				strActionDesc.append(" " + resourceBundle.getString("LABEL_IN"));
				strActionDesc.append(" " + resourceBundle.getString("OBJECT_TYPE"));
				strActionDesc.append(" '" + objParser.getValueOf("ObjectType") + "'");
				strActionDesc.append(" " + resourceBundle.getString("TO_USER"));
				strActionDesc.append(" '" + objParser.getNextValueOf("UserName") + "'");
			} else {
				strActionDesc.append(" " + resourceBundle.getString("ADDED_OBJECT_TYPE"));
				strActionDesc.append(" '" + objParser.getValueOf("ObjectType") + "'");
				strActionDesc.append(" " + resourceBundle.getString("TO_USER"));
				strActionDesc.append(" '" + objParser.getNextValueOf("UserName") + "'");
			}
        }else if(nActionID == 1011) {
            strActionDesc.append(resourceBundle.getString("USER"));
			strActionDesc.append(" '" + objParser.getValueOf("Username") + "' ");
			if (!"0".equals(objParser.getValueOf("ObjectId"))) {
				strActionDesc.append(" " + resourceBundle.getString("DELETED"));
				strActionDesc.append(" " + resourceBundle.getString("OBJECT_NAME"));
				strActionDesc.append(" '" + objParser.getValueOf("ObjectName") + "'");
				strActionDesc.append(" " + resourceBundle.getString("LABEL_IN"));
				strActionDesc.append(" " + resourceBundle.getString("OBJECT_TYPE"));
				strActionDesc.append(" '" + objParser.getValueOf("ObjectType") + "'");
				strActionDesc.append(" " + resourceBundle.getString("FROM_USER"));
				strActionDesc.append(" '" + objParser.getNextValueOf("UserName") + "'");
			} else {
				strActionDesc.append(" " + resourceBundle.getString("DELETED_OBJECT_TYPE"));
				strActionDesc.append(" '" + objParser.getValueOf("ObjectType") + "'");
				strActionDesc.append(" " + resourceBundle.getString("FROM_USER"));
				strActionDesc.append(" '" + objParser.getNextValueOf("UserName") + "'");
			}
        }else if(nActionID == 1012) {
            XMLParser objParsersub1;
			String stSubXml1 = objParser.getValueOf("Description");
			strActionDesc.append(resourceBundle.getString("USER"));
			strActionDesc.append("'" + objParser.getValueOf("UserName") + "'");
			strActionDesc.append(" " + resourceBundle.getString("UPDATED_OBJECT_TYPE"));
			strActionDesc.append(" '" + objParser.getValueOf("ObjectType") + "'");
			if (stSubXml1.length() > 0) {
				objParsersub1 = new XMLParser(stSubXml1);
				String strOldVal = objParsersub1.getValueOf("old");
				String strNewVal = objParsersub1.getValueOf("new");
				if (strOldVal.equalsIgnoreCase(strNewVal)) {
				} else {
					strActionDesc.append(" '" + strOldVal + "'");
					strActionDesc.append(" " + resourceBundle.getString("LABEL_TO"));
					strActionDesc.append(" '" + strNewVal + "'");
				}
			}
        }else if(nActionID == 1101){
        	strActionDesc.append(resourceBundle.getString("USER")).append(" ");
            strActionDesc.append(" '").append(objParser.getValueOf("Username","",true)).append(" '").append(resourceBundle.getString("HAS_UPDATED_PROPERTY"));
            strActionDesc.append(" '").append(workItemHistoryXmlResponse.getVal("PropertyName")).append("'");
            strActionDesc.append(" " + resourceBundle.getString("LABEL_TO")).append(" '").append(workItemHistoryXmlResponse.getVal("PropertyValue")).append(" '");
            /*strActionDesc.append(" " + resourceBundle.getString("MODIFIED"));
            strActionDesc.append(workItemHistoryXmlResponse.getVal("FieldId"));*/
		}else if(nActionID == 601) {
        	strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(" " + resourceBundle.getString("CREATED"));
            strActionDesc.append(" " + resourceBundle.getString("THE_PROCESS_VARIANT"));
            strActionDesc.append(" '"+ objParser.getValueOf("VariantName","",true) +  "'");
        }else if(nActionID == 602) {
        	strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(" " + resourceBundle.getString("MODIFIED"));
            strActionDesc.append(" " + resourceBundle.getString("THE_PROCESS_VARIANT"));
            strActionDesc.append(" '"+ objParser.getValueOf("VariantName","",true) +  "'");
        }else if(nActionID == 603) {
        	strActionDesc.append(resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(" " + resourceBundle.getString("DELETED"));
            strActionDesc.append(" " + resourceBundle.getString("THE_PROCESS_VARIANT"));
            strActionDesc.append(" '"+ objParser.getValueOf("VariantName","",true) +  "'");
        }else if(nActionID == 604) {
        	strActionDesc.append(" " + resourceBundle.getString("CHANGE_VARIANT_STATE"));
        	strActionDesc.append(" " + resourceBundle.getString("THE_PROCESS_VARIANT"));
        	strActionDesc.append(" '"+ objParser.getValueOf("VariantName","",true) +  "'");
        	strActionDesc.append(" " + resourceBundle.getString("WAS_CHANGE"));
        	strActionDesc.append(" "+resourceBundle.getString("USER"));
            strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strActionDesc.append(" " + resourceBundle.getString("AS"));
            strActionDesc.append(" '" + objParser.getValueOf("ChangedState","",true) + "' ");    
        }else if(nActionID == 800) {
            String holdType = objParser.getValueOf("HoldType","",true);
            if(holdType.equalsIgnoreCase("T")){
                //actiondesc = Workitem was temporarily  hold by 'user1'
            	strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
            	strActionDesc.append(" '" + objParser.getValueOf("ProcessInstanceId","",true) + "' ");
                strActionDesc.append(resourceBundle.getString("WI_ACTION_800_T"));
               // strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
                strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
                strActionDesc.append(" ").append(strUserAndPersonalName);
            }else if(holdType.equalsIgnoreCase("A")){
                //actiondesc = Workitem was hold to activity 'TargetAct1' from 'sourceact1' by 'user1'
            	strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
            	strActionDesc.append(" '" + objParser.getValueOf("ProcessInstanceId","",true) + " '");
                strActionDesc.append(resourceBundle.getString("WI_ACTION_800"));
                strActionDesc.append(" '" + objParser.getValueOf("FieldName","",true) + "' ");
                strActionDesc.append(" " + resourceBundle.getString("FROM"));
                strActionDesc.append(" '"+ objParser.getValueOf("ActivityName","",true) +  "'");
                strActionDesc.append(resourceBundle.getString("WI_ACTION_BY"));
               // strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
                strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
                strActionDesc.append(" ").append(strUserAndPersonalName);
            }
        }else if(nActionID == 801) {
            String holdType = objParser.getValueOf("HoldType","",true);
            if(holdType.equalsIgnoreCase("T")){
                //actiondesc = Workitem was unhold from temporary hold by 'user1' 
            	strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
            	strActionDesc.append(" " + "'" + objParser.getValueOf("ProcessInstanceId","",true) + "'" + " ");
                strActionDesc.append(resourceBundle.getString("WI_ACTION_801_T"));
              //  strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
                strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
                strActionDesc.append(" ").append(strUserAndPersonalName);
            }else if(holdType.equalsIgnoreCase("A")){
                //actiondesc = Workitem was unhold from  activity 'CurrentWorkste' to  'TargetWorkstep' by 'user1'
            	strActionDesc.append(resourceBundle.getString("WI_WORKITEM"));
            	strActionDesc.append(" '" + objParser.getValueOf("ProcessInstanceId","",true) + " '");
                strActionDesc.append(resourceBundle.getString("WI_ACTION_801"));
                strActionDesc.append(" '" + objParser.getValueOf("ActivityName","",true) + "' ");
                strActionDesc.append(" " + resourceBundle.getString("TO"));
                strActionDesc.append(" '"+ objParser.getValueOf("FieldName","",true) +  "'");
                strActionDesc.append(resourceBundle.getString("WI_ACTION_BY"));
              //  strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
                strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
                strActionDesc.append(" ").append(strUserAndPersonalName);
            }
        }
		else if(nActionID == 804) {
       	 strActionDesc.append(resourceBundle.getString("WFS_Action_804")+" ");
         strActionDesc.append(resourceBundle.getString("WI_ACTION_BY"));
         strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
         strActionDesc.append(" ").append(strUserAndPersonalName);       
      } else if(nActionID == 701) {
            strActionDesc.append("'" + objParser.getValueOf("Taskname","",true) + "' ");
            strActionDesc.append(resourceBundle.getString("WI_ACTION_701"));
          //  strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
            strActionDesc.append(resourceBundle.getString("WI_ACTION_701_assgnto"));
         //   strActionDesc.append(" '" + objParser.getValueOf("FieldName","",true) + "' ");
            strUserAndPersonalFieldName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("FieldName"),workItemHistoryXmlResponse.getVal("PersonalFieldName"));
            strActionDesc.append(" ").append(strUserAndPersonalFieldName);
        }else if(nActionID == 702) {
            strActionDesc.append("'" + objParser.getValueOf("TaskName","",true) + "' ");
            strActionDesc.append(resourceBundle.getString("WI_ACTION_702"));
         //   strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
        }else if(nActionID == 703) {
            strActionDesc.append("'" + objParser.getValueOf("TaskName","",true) + "' ");
            strActionDesc.append(resourceBundle.getString("WI_ACTION_703"));
          //  strActionDesc.append(" '" + objParser.getValueOf("FieldName","",true) + "' ");
            strUserAndPersonalFieldName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("FieldName"),workItemHistoryXmlResponse.getVal("PersonalFieldName"));
            strActionDesc.append(" ").append(strUserAndPersonalFieldName);
            strActionDesc.append(resourceBundle.getString("WI_ACTION_BY"));
        //    strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
        }else if(nActionID == 704) {
            strActionDesc.append("'" + objParser.getValueOf("TaskName","",true) + "' ");
            strActionDesc.append(resourceBundle.getString("WI_ACTION_704"));
          //  strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
        }else if(nActionID == 706) {
            strActionDesc.append(resourceBundle.getString("WI_ACTION_706"));
            strActionDesc.append(" '" + objParser.getValueOf("TaskName","",true) + "' ");
            strActionDesc.append(resourceBundle.getString("WI_ACTION_BY"));
          //  strActionDesc.append(" '" + objParser.getValueOf("Username","",true) + "' ");
            strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
        } else if(nActionID == 707) {
        	strActionDesc.append("'" + objParser.getValueOf("TaskName","",true) + "' ");
            strActionDesc.append(resourceBundle.getString("WI_ACTION_707"));
		//	strActionDesc.append(" '" + objParser.getValueOf("FieldName", "", true) + "' ");
            strUserAndPersonalFieldName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("FieldName"),workItemHistoryXmlResponse.getVal("PersonalFieldName"));
            strActionDesc.append(" ").append(strUserAndPersonalFieldName);
			strActionDesc.append(resourceBundle.getString("WI_ACTION_BY"));
		//	strActionDesc.append(" '" + objParser.getValueOf("Username", "", true) + "' ");
			strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
		} else if (nActionID == 708) {
			strActionDesc.append(" '" + objParser.getValueOf("TaskName", "", true) + "' ");
			strActionDesc.append(resourceBundle.getString("WI_ACTION_708"));
		//	strActionDesc.append(" '" + objParser.getValueOf("FieldName", "", true) + "' ");
			strUserAndPersonalFieldName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("FieldName"),workItemHistoryXmlResponse.getVal("PersonalFieldName"));
            strActionDesc.append(" ").append(strUserAndPersonalFieldName);
		} else if (nActionID == WFSConstant.WFL_TaskReassigned) {
			strActionDesc.append(" '" + objParser.getValueOf("TaskName", "", true) + "' ");
			strActionDesc.append(resourceBundle.getString("WI_ACTION_709"));
		//	strActionDesc.append(" '" + objParser.getValueOf("UserName", "", true) + "' ");
			strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
			strActionDesc.append(resourceBundle.getString("LABEL_TO"));
		//	strActionDesc.append(" '" + objParser.getValueOf("FieldName", "", true) + "' ");
			strUserAndPersonalFieldName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("FieldName"),workItemHistoryXmlResponse.getVal("PersonalFieldName"));
            strActionDesc.append(" ").append(strUserAndPersonalFieldName);
		} else if (nActionID == WFSConstant.WFL_TaskExpired) {
			strActionDesc.append(" '" + objParser.getValueOf("TaskName", "", true) + "' ");
			strActionDesc.append(resourceBundle.getString("WI_ACTION_710"));
			strActionDesc.append(" '" + objParser.getValueOf("ActionDateTime", "", true) + "' ");
		} else if (nActionID == WFSConstant.WFL_TaskEscalated) {
			strActionDesc.append(" '" + objParser.getValueOf("TaskName", "", true) + "' ");
			strActionDesc.append(resourceBundle.getString("WI_ACTION_711"));
			strActionDesc.append(" '" + objParser.getValueOf("ActionDateTime", "", true) + "' ");
		} else if (nActionID == WFSConstant.WFL_TaskUnlocked) {
			strActionDesc.append(" '" + objParser.getValueOf("TaskName", "", true) + "' ");
			strActionDesc.append(resourceBundle.getString("WI_ACTION_712"));
		//	strActionDesc.append(" '" + objParser.getValueOf("UserName", "", true) + "' ");
			strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
			strActionDesc.append(resourceBundle.getString("LABEL_ON"));
			strActionDesc.append(" '" + objParser.getValueOf("ActionDateTime", "", true) + "' ");
		} else if (nActionID == WFSConstant.WFL_TaskApproved) {
			strActionDesc.append(" '" + objParser.getValueOf("TaskName", "", true) + "' ");
			strActionDesc.append(resourceBundle.getString("WI_ACTION_713"));
		//	strActionDesc.append(" '" + objParser.getValueOf("UserName", "", true) + "' ");
			strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
			strActionDesc.append(resourceBundle.getString("LABEL_ON"));
			strActionDesc.append(" '" + objParser.getValueOf("ActionDateTime", "", true) + "' ");
		} else if (nActionID == WFSConstant.WFL_TaskRejected) {
			strActionDesc.append(" '" + objParser.getValueOf("TaskName", "", true) + "' ");
			strActionDesc.append(resourceBundle.getString("WI_ACTION_714"));
		//	strActionDesc.append(" '" + objParser.getValueOf("UserName", "", true) + "' ");
			strUserAndPersonalName=WFUtility.getConcatFields(workItemHistoryXmlResponse.getVal("Username"),workItemHistoryXmlResponse.getVal("PersonalName"));
            strActionDesc.append(" ").append(strUserAndPersonalName);
			strActionDesc.append(resourceBundle.getString("LABEL_ON"));
			strActionDesc.append(" '" + objParser.getValueOf("ActionDateTime", "", true) + "' ");
		}else if (nActionID >=5000 && nActionID <=6000){
			
            strActionDesc.append(resourceBundle.getString("CUSTOM_ACTION_"+nActionID));
            strActionDesc = new StringBuilder(WFUtility.Replace(strActionDesc.toString(),"<ACTIVITYID>",workItemHistoryXmlResponse.getVal("ActivityId")));
            strActionDesc = new StringBuilder(WFUtility.Replace(strActionDesc.toString(),"<ACTIVITYNAME>",workItemHistoryXmlResponse.getVal("ActivityName")));
            strActionDesc = new StringBuilder(WFUtility.Replace(strActionDesc.toString(),"<USERID>",workItemHistoryXmlResponse.getVal("UserId")));
            strActionDesc = new StringBuilder(WFUtility.Replace(strActionDesc.toString(),"<USERNAME>",workItemHistoryXmlResponse.getVal("Username")));
            strActionDesc = new StringBuilder(WFUtility.Replace(strActionDesc.toString(),"<ACTIONID>",workItemHistoryXmlResponse.getVal("ActionId")));
            strActionDesc = new StringBuilder(WFUtility.Replace(strActionDesc.toString(),"<ACTIONDATETIME>",workItemHistoryXmlResponse.getVal("ActionDateTime")));
            strActionDesc = new StringBuilder(WFUtility.Replace(strActionDesc.toString(),"<ASSOCIATEDFIELDID>",workItemHistoryXmlResponse.getVal("FieldId")));
            strActionDesc = new StringBuilder(WFUtility.Replace(strActionDesc.toString(),"<ASSOCIATEDFIELDNAME>",workItemHistoryXmlResponse.getVal("FieldName")));
            strActionDesc = new StringBuilder(WFUtility.Replace(strActionDesc.toString(),"<NEWVALUE>",workItemHistoryXmlResponse.getVal("NewValue")));
            strActionDesc = new StringBuilder(WFUtility.Replace(strActionDesc.toString(),"<WORKITEMID>",workItemHistoryXmlResponse.getVal("WorkItemId")));
            strActionDesc = new StringBuilder(WFUtility.Replace(strActionDesc.toString(),"<LOGID>",workItemHistoryXmlResponse.getVal("LogId")));
            strActionDesc = new StringBuilder(WFUtility.Replace(strActionDesc.toString(),"<TASKID>",workItemHistoryXmlResponse.getVal("TaskId")));
            strActionDesc = new StringBuilder(WFUtility.Replace(strActionDesc.toString(),"<SUBTASKID>",workItemHistoryXmlResponse.getVal("SubTaskId")));
            strActionDesc = new StringBuilder(WFUtility.Replace(strActionDesc.toString(),"<PROCESSDEFID>",workItemHistoryXmlResponse.getVal("ProcessDefId")));
            strActionDesc = new StringBuilder(WFUtility.Replace(strActionDesc.toString(),"<PROCESSINSTANCEID>",workItemHistoryXmlResponse.getVal("ProcessInstanceId")));
            strActionDesc = new StringBuilder(WFUtility.Replace(strActionDesc.toString(),"<URN>",workItemHistoryXmlResponse.getVal("URN")));
            
         
		}
		else if (nActionID == WFSConstant.WFL_Export_Data)
		{
			strActionDesc.append(resourceBundle.getString("WORKITEM_EXPORT"));
			strActionDesc.append(" "+objParser.getValueOf("TableName", "", true)+" ");
			strActionDesc.append(resourceBundle.getString("ROWCOUNT_EXPORT"));
			strActionDesc.append(" "+objParser.getValueOf("RowCount", "", true));
		}
		else if (nActionID == WFSConstant.WFL_Import_Data)
		{
			strActionDesc.append(resourceBundle.getString("WORKITEM_IMPORT"));
			strActionDesc.append(" "+objParser.getValueOf("TableName", "", true)+" ");
			strActionDesc.append(resourceBundle.getString("ROWCOUNT_IMPORT"));
			strActionDesc.append(" "+objParser.getValueOf("RowCount", "", true));
		}
         
        return(strActionDesc.toString());
     }
     
     private String ReturnList(String ListTagName, String ValueTagName, String TagValue) {
        String strActionDesc="";
        
        String strTemp = "<" + ListTagName +">" + TagValue + "</" + ListTagName +">";
        XMLParser objParser = new XMLParser(strTemp);
        int iCount =objParser.getNoOfFields(ValueTagName, 0, strTemp.length());
        if(iCount>0) {
            for(int iCounter=0;iCounter<iCount;iCounter++) {
                if(iCounter== 0)
                    strActionDesc = objParser.getFirstValueOf(ValueTagName, 0);
                else
                    strActionDesc  =strActionDesc + "," + objParser.getNextValueOf(ValueTagName);
            }
        } else
            return("");
        return strActionDesc;
    }
     
     private String getTATProcessString(String TatXML,ResourceBundle resourceBundle) throws JTSException
    {
        String outString="";
        XMLParser TatParser=new XMLParser(TatXML);
        int iTurnAroundTimeInMinutes=0;
        int iTurnAroundTimeInHours=0;
        int iTurnAroundTimeInDays=0;
        iTurnAroundTimeInMinutes = TatParser.getIntOf("Minutes",0,true);
        iTurnAroundTimeInHours = TatParser.getIntOf("Hours",0,true);
        iTurnAroundTimeInDays = TatParser.getIntOf("Days",0,true);
        outString=iTurnAroundTimeInDays+" "+resourceBundle.getString("DAYS")+" "+iTurnAroundTimeInHours+" "+resourceBundle.getString("HOURS")+" "+iTurnAroundTimeInMinutes+" "+resourceBundle.getString("MINS");
       
        return outString; 
    }
     
     private String  getTATActivityList(String ListTagName, String ValueTagName, String TagValue,ResourceBundle resourceBundle) throws JTSException
    {
        String strActionDesc="";
        String strActXml="";
        String outString="";
        String strTemp = "<" + ListTagName +">" + TagValue + "</" + ListTagName +">";
        XMLParser objParser = new XMLParser(strTemp);
        
        int iCount =objParser.getNoOfFields(ValueTagName, 0, strTemp.length());
        if(iCount>0) {
            for(int iCounter=0;iCounter<iCount;iCounter++) 
            {
                if(iCounter== 0)
                    strActXml = objParser.getFirstValueOf(ValueTagName, 0);
                else
                    strActXml  = objParser.getNextValueOf(ValueTagName);
                
                XMLParser TatParser=new XMLParser(strActXml);
                int iTurnAroundTimeInMinutes=0;
                int iTurnAroundTimeInHours=0;
                int iTurnAroundTimeInDays=0;
                iTurnAroundTimeInMinutes = TatParser.getIntOf("Minutes",0,true);
                iTurnAroundTimeInHours = TatParser.getIntOf("Hours",0,true);
                iTurnAroundTimeInDays = TatParser.getIntOf("Days",0,true);
                outString=iTurnAroundTimeInDays+" "+resourceBundle.getString("DAYS")+" "+iTurnAroundTimeInHours+" "+resourceBundle.getString("HOURS")+" "+iTurnAroundTimeInMinutes+" "+resourceBundle.getString("MINS");
                
                if(iCounter== 0)
                    strActionDesc=outString;
                else
                    strActionDesc=strActionDesc+","+outString;
            }
        } else
            return("");
        return strActionDesc;
    }
     
	private String getLocale(WFParticipant user){
		String locale = "en-US";
		int userID = 0;
		if(user != null && user.gettype() == 'U'){
			userID = user.getid();
			String scope = user.getscope();
			if(!scope.equalsIgnoreCase("ADMIN") && user.getlocale() != null && !("").equals(user.getlocale()))
				locale = user.getlocale();
		}
		return locale;				
	 }	
//----------------------------------------------------------------------------------------------------
//	Function Name 				:	WFGetHoldEvents
//	Date Written (DD/MM/YYYY)               :	05 Nov 2015
//	Author					:	Sajid Khan
//	Input Parameters			:	Connection , XMLParser , XMLGenerator
//	Output Parameters			:       none
//	Return Values				:	String
//	Description				:       Fetch the list of Events defined on any workstep(Hold Type).
//----------------------------------------------------------------------------------------------------
 /**
         <WFGetHoldEvents_Input>
		<Option>WFGetHoldEvents </Option>
                <EngineName>sqlcab15july</EngineName>
                <SessionId>-344889690</SessionId>
		<ProcessDefinitionID>25</ProcessDefinitionID>
		<ActivityId>3</ActivityId>
		<EventPrefix>ev*</EventPrefix>>
	</WFGetHoldEvents_Input>

        <WFGetHoldEvents_Output>
		<Option> WFGetHoldEvents </Option>
		<Exception>
                    <MainCode>0</MainCode>
		</Exception>
		<EventList>
                    <EventInfo>
			<ID>2</ID>
                        <Name>event1</Name>
                        <TriggerName>trigger1</TriggerName>
                        <TargetActivityId>13</TargetActivityId>
                        <TargetActivityName>workdesk4</TargetActivityName>		
                    </EventInfo >
                    <EventInfo>
			<ID>3</ID>
                        <Name>event2</Name>
                        <TriggerName>trigger1</TriggerName>
                        <TargetActivityId>21</TargetActivityId>
                        <TargetActivityName>workdesk12</TargetActivityName>		
                    </EventInfo >
		</EventList >
            <TotalCount>2</TotalCount><RetrievedCount>2</RetrievedCount>
	</WFGetHoldEvents_Output>*/
public String WFGetHoldEvents(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
        String engine = parser.getValueOf("EngineName", "", false);
        int  processDefId =  parser.getIntOf("ProcessDefinitionID", 0, false);
        int  activityId =  parser.getIntOf("ActivityId", 0, false);
        String eventPrefix = parser.getValueOf("EventPrefix", "", true);
        int dbType = ServerProperty.getReference().getDBType(engine);
        StringBuffer outputXML = new StringBuffer("");
        PreparedStatement pstmt = null;
        int mainCode = 0;
        int subCode = 0;
        int totalCount = 0;
        String subject = null;
        String descr = null;
        String errType = WFSError.WF_TMP;
        ResultSet rs = null;
        int sessionID = parser.getIntOf("SessionId", 0, false);
        StringBuffer tempXML = new StringBuffer();
        String appendStr = null;
        StringBuffer condStr = null;
        condStr = new StringBuffer(500);
        String colName = "EventName";
        try{
            Object[] result = null;
            WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
            if (participant != null) {
		if (con.getAutoCommit()) {
                    con.setAutoCommit(false);
                }
                if( eventPrefix !=null && !(eventPrefix.equals("")) ){
                    eventPrefix = WFSUtil.TO_STRING(eventPrefix, true, dbType);
                    if(eventPrefix.indexOf("*") > 0 || eventPrefix.indexOf("?") > 0){
                        if(dbType == JTSConstant.JTS_ORACLE){
                            appendStr = WFSUtil.getLikeFilterStr(parser,colName, eventPrefix.trim(), dbType, true);
                            condStr.append(" AND ").append(appendStr);
                        }else{
                           condStr.append(" and upper(").append(colName);
                           condStr.append(") like ");
                           appendStr = parser.convertToSQLString(eventPrefix.trim().toUpperCase()).replace('*', '%');
                           condStr.append("UPPER(").append(appendStr).append(")");
                       }
                    }else{
                        condStr.append(" and upper(").append(colName);
                        condStr.append(") = ");
                        appendStr = eventPrefix.trim().toUpperCase();
                        condStr.append("UPPER(").append(appendStr).append(")");
                    }
                }
                boolean noMoreRecord = true;
		pstmt = con.prepareStatement("Select EventId,EventName,TriggerName,TargetActId, TargetActName from WFHoldEventsDefTable"
                        + " " + WFSUtil.getTableLockHintStr(dbType) + "  Where ProcessDefId  = ? And ActivityId = ? "+condStr);
                pstmt.setInt(1, processDefId);
                pstmt.setInt(2, activityId);
                pstmt.execute();
                rs = pstmt.getResultSet();
                tempXML.append("<EventList>\n");
                while(rs.next()) {
                    tempXML.append("<EventInfo>\n");
                    tempXML.append(gen.writeValueOf("ID", rs.getString(1)));
                    tempXML.append(gen.writeValueOf("Name", rs.getString(2)));
                    tempXML.append(gen.writeValueOf("TriggerName", rs.getString(3)));
                    tempXML.append(gen.writeValueOf("TargetActivityId", rs.getString(4)));
                    tempXML.append(gen.writeValueOf("TargetActivityName", rs.getString(5)));
                    tempXML.append("</EventInfo>\n");
                    noMoreRecord = false;
                    totalCount++;
                }
                tempXML.append("</EventList>\n");
                if(noMoreRecord){
                    mainCode = WFSError.WM_NO_MORE_DATA;
                    subCode = 0;
                    subject = WFSErrorMsg.getMessage(mainCode);
                    descr = WFSErrorMsg.getMessage(subCode);
                    errType = WFSError.WF_TMP;
                }        
            }else{
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            } if(mainCode == 0){
                outputXML = new StringBuffer();
                outputXML.append(gen.createOutputFile("WFGetHoldEvents"));
                outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
                outputXML.append(tempXML);
                 outputXML.append("<TotalCount>"+totalCount+"</TotalCount>");
                outputXML.append(gen.closeOutputFile("WFGetHoldEvents"));
            }
               
			
		}catch (SQLException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if (e.getErrorCode() == 0) {
                if (e.getSQLState().equalsIgnoreCase("08S01")) {
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
                }
            } else {
                descr = e.getMessage();
            }
        } catch (NumberFormatException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (NullPointerException e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Exception e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch (Error e) {
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally {
            try {
                if (!con.getAutoCommit()) {
                    con.setAutoCommit(true);
                }
            } catch (SQLException sqle) {
            }
            try {
                if (rs != null) {
                    rs.close();
                    rs = null;
                }
            } catch (SQLException sqle) {
            }
            try {
                if (pstmt != null) {
                    pstmt.close();
                    pstmt = null;
                }
            } catch (Exception e) {
            }
           
        }
        if (mainCode != 0) {
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
        return outputXML.toString();
}

//----------------------------------------------------------------------------------------------------
//Function Name 				:	WFGetCaseDataVariableMapping
//Date Written (DD/MM/YYYY)	:	16/11/2015
//Author						:	Mohnish Chopra
//Input Parameters			:	Connection , XMLParser , XMLGenerator
//Output Parameters			:   none
//Return Values				:	String
//Description					:   Api to fetch case variables for detailed view.
//----------------------------------------------------------------------------------------------------
public String WFGetCaseDataVariableMapping(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
	
	 StringBuffer outputXML = new StringBuffer("");
   PreparedStatement pstmt = null;
   int mainCode = 0;
   int subCode = 0;
   String subject = null;
   String descr = null;
   String errType = WFSError.WF_TMP;
	ResultSet rs = null;
	StringBuffer tempXML = new StringBuffer();
	String engine = null;
	String option = null;
	int count = 0;
	String processName = null;
	int processDefId = 0;
	int activityId = 0;
	PreparedStatement pstmt1 = null;
	ResultSet rs1 = null;
	try{
		int sessionID = parser.getIntOf("SessionId", 0, false);
		engine = parser.getValueOf("EngineName", null, false);
		option =parser.getValueOf("option",null,false);
		int dbType = ServerProperty.getReference().getDBType(engine);
		LinkedList<VariableClass> listOfVariableClass = new LinkedList<VariableClass>(); 
		boolean isArtifactMigrationCase = parser.getValueOf("ArtificationMigration", "N", true).equalsIgnoreCase("Y");
		HashMap<Integer,String> actIdActivityNameMap = new HashMap();
		boolean caseActivityExists = false;
		boolean moreThanOneCaseActivity = false;
		boolean isFirstIter = true;
		String activityIdList = null;
		if(isArtifactMigrationCase)
		{
			processName = parser.getValueOf("ProcessName", null, false);
			String exeStr = "select ProcessDefId from ProcessDefTable "+ WFSUtil.getTableLockHintStr(dbType) + " where ProcessName = ? order by VersionNo desc ";
			pstmt = con.prepareStatement(exeStr);
			WFSUtil.DB_SetString(1, processName, pstmt, dbType);
			pstmt.execute();
			rs = pstmt.getResultSet();
			if (rs.next()) {
				processDefId = rs.getInt(1);
				String query = "SELECT ActivityName, ActivityId FROM ACTIVITYTABLE "+ WFSUtil.getTableLockHintStr(dbType) + " Where ProcessDefId = ? AND ActivityType= ? ";
				pstmt1 = con.prepareStatement(query);
				pstmt1.setInt(1, processDefId);
				pstmt1.setInt(2, 32);
				pstmt1.execute();
				rs1 = pstmt1.getResultSet();
				while(rs1.next())
				{
					activityId = rs1.getInt("ActivityId");
					caseActivityExists = true;
					if(isFirstIter){
						activityIdList = String.valueOf(activityId);
						isFirstIter = false; 	
					}else{
						activityIdList = activityIdList + "," + String.valueOf(activityId) ;	
						moreThanOneCaseActivity = true;
					}	
					actIdActivityNameMap.put(activityId,rs1.getString("ActivityName"));

				}
				if(rs1 != null){
					rs1.close();
					rs1 = null;
				}
				if(pstmt1 != null){
					pstmt1.close();
					pstmt1 = null;
				}	
				if(!caseActivityExists)
				{
					mainCode = WFSError.WF_NO_CASE_ACTIVITY_EXISTS;
					subCode = 0;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP; 
				}
			}
			else
			{
				mainCode = WFSError.WF_INVALID_PROCESS_NAME;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;   
			}
			if(rs != null){
				rs.close();
				rs = null;
			}
			if(pstmt != null){
				pstmt.close();
				pstmt = null;
			}	
		}
		else
		{
		 processDefId =  parser.getIntOf("ProcessDefinitionId", 0, false);
		 activityId =  parser.getIntOf("ActivityId", 0, false);
		}
		
		WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
		if (participant != null) {
             if (mainCode == 0)
             {
           	  if(isArtifactMigrationCase && moreThanOneCaseActivity)
           	  {

           		  pstmt = con.prepareStatement("Select a.VariableId,b.SystemDefinedName,b.UserDefinedName,a.DisplayName,a.activityid from " +
					" WFCaseDataVariableTable a inner join VarMappingTable b" +
					" on a.ProcessDefId = b.ProcessDefId and a.variableid = b.variableid " +
     				" where a.processdefid = ? and a.activityid IN ( "+activityIdList+" ) ORDER BY a.ActivityID");
     				pstmt.setInt(1, processDefId);
           		   }
           	  else
           	  {
					pstmt = con.prepareStatement("Select a.VariableId,b.SystemDefinedName,b.UserDefinedName,a.DisplayName,a.activityid from " +
							" WFCaseDataVariableTable a inner join VarMappingTable b" +
							" on a.ProcessDefId = b.ProcessDefId and a.variableid = b.variableid " +
			" where a.processdefid = ? and a.activityid = ?	");
			pstmt.setInt(1, processDefId);
			pstmt.setInt(2, activityId);
           	  }
			rs=pstmt.executeQuery();
			while(rs.next()){
				count =1;
				int variableId = rs.getInt("VariableId");
				String systemDefinedName = rs.getString("SystemDefinedName");
				String userDefinedName = rs.getString("UserDefinedName");
				String displayName = rs.getString("DisplayName");
				tempXML.append("<CaseVariable>");
				tempXML.append(gen.writeValueOf("Name", userDefinedName));
				tempXML.append(gen.writeValueOf("DisplayName", displayName));
					if(isArtifactMigrationCase)
					{
						int actId = rs.getInt("activityid");
						tempXML.append(gen.writeValueOf("ActivityId", String.valueOf(actId)));
						tempXML.append(gen.writeValueOf("ActivityName", actIdActivityNameMap.get(actId)));
				tempXML.append("</CaseVariable>");
					}
					else
					{
					tempXML.append("</CaseVariable>");
				VariableClass obj = new VariableClass(variableId, systemDefinedName, userDefinedName, displayName);
				listOfVariableClass.add(obj);
					}

			}

			if (con.getAutoCommit()) {
				con.setAutoCommit(false);
			}


			if(count == 0){
				mainCode = WFSError.WM_NO_MORE_DATA;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}

             }
		}else{
			mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
			subCode = 0;
			subject = WFSErrorMsg.getMessage(mainCode);
			descr = WFSErrorMsg.getMessage(subCode);
			errType = WFSError.WF_TMP;
		} 
		
		if(mainCode == 0){
			outputXML = new StringBuffer();
			outputXML.append(gen.createOutputFile(option));
			outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
			if(isArtifactMigrationCase)
			{
				outputXML.append("<CaseVariablesData>\n");
				outputXML.append("<ProcessName>"+processName+"</ProcessName>\n");
				outputXML.append("<CaseVariables>");
				outputXML.append(tempXML);
				outputXML.append("</CaseVariables>");
				outputXML.append("</CaseVariablesData>\n");
			}
			else
			{
			outputXML.append("<CaseVariables>");
			outputXML.append(tempXML);
			outputXML.append("</CaseVariables>");
			}
			outputXML.append(gen.closeOutputFile(option));
			if(!isArtifactMigrationCase)
			{
			WFCaseDataVariableMap.getSharedInstance().getCaseDataMap().put(processDefId+"#"+activityId, listOfVariableClass);
		}
		}


	}catch (SQLException e) {
       WFSUtil.printErr(engine,"", e);
       mainCode = WFSError.WM_INVALID_FILTER;
       subCode = WFSError.WFS_SQL;
       subject = WFSErrorMsg.getMessage(mainCode);
       errType = WFSError.WF_FAT;
       if (e.getErrorCode() == 0) {
           if (e.getSQLState().equalsIgnoreCase("08S01")) {
               descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
           }
       } else {
           descr = e.getMessage();
       }
   } catch (NumberFormatException e) {
       WFSUtil.printErr(engine,"", e);
       mainCode = WFSError.WF_OPERATION_FAILED;
       subCode = WFSError.WFS_ILP;
       subject = WFSErrorMsg.getMessage(mainCode);
       errType = WFSError.WF_TMP;
       descr = e.toString();
   } catch (NullPointerException e) {
       WFSUtil.printErr(engine,"", e);
       mainCode = WFSError.WF_OPERATION_FAILED;
       subCode = WFSError.WFS_SYS;
       subject = WFSErrorMsg.getMessage(mainCode);
       errType = WFSError.WF_TMP;
       descr = e.toString();
   } catch (Exception e) {
       WFSUtil.printErr(engine,"", e);
       mainCode = WFSError.WF_OPERATION_FAILED;
       subCode = WFSError.WFS_EXP;
       subject = WFSErrorMsg.getMessage(mainCode);
       errType = WFSError.WF_TMP;
       descr = e.toString();
   } catch (Error e) {
       WFSUtil.printErr(engine,"", e);
       mainCode = WFSError.WF_OPERATION_FAILED;
       subCode = WFSError.WFS_EXP;
       subject = WFSErrorMsg.getMessage(mainCode);
       errType = WFSError.WF_TMP;
       descr = e.toString();
   } finally {
       try {
           if (!con.getAutoCommit()) {
               con.setAutoCommit(true);
           }
       } catch (SQLException sqle) {
       }
       try {
           if (rs != null) {
               rs.close();
               rs = null;
           }
       } catch (SQLException sqle) {
       }
       try {
           if (pstmt != null) {
               pstmt.close();
               pstmt = null;
           }
       } catch (Exception e) {
       }
      
   }
   if (mainCode != 0) {
       throw new WFSException(mainCode, subCode, errType, subject, descr);

   }
   return outputXML.toString();

}
//----------------------------------------------------------------------------------------------------
//Function Name 				:	WFSetCaseDataVariableMapping
//Date Written (DD/MM/YYYY)		:	16/11/2015
//Author						:	Mohnish Chopra
//Input Parameters				:	Connection , XMLParser , XMLGenerator
//Output Parameters				:   none
//Return Values					:	String
//Description					:   Api to set case variables for detailed view.
//----------------------------------------------------------------------------------------------------
public String WFSetCaseDataVariableMapping(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {

String engine = null;
StringBuffer outputXML = new StringBuffer("");
PreparedStatement pstmt = null;
PreparedStatement pstmt1 = null;
PreparedStatement pstmtNew = null;
String option = null;
int mainCode = 0;
int subCode = 0;
String subject = null;
String descr = null;
String errType = WFSError.WF_TMP;
ResultSet rs = null;
ResultSet rs1 = null;
StringBuffer tempXML = new StringBuffer();
XMLParser tmpParser =new XMLParser();
StringBuffer userVariables = new StringBuffer();
int processDefId = 0;
int activityId = 0;
int prevActivityId =0;

WFCaseDataVariableMap caseDataVariableObject= WFCaseDataVariableMap.getSharedInstance();
LinkedHashMap<String, LinkedList<VariableClass>> caseDataMap = caseDataVariableObject.getCaseDataMap();
HashMap<String,String> activityValidationMap = new HashMap();
StringBuffer failedList = new StringBuffer(1000);
boolean insertFlag = false;
MultiValueMap actictyIDVariableClassMap = new MultiValueMap();


LinkedList<VariableClass> listOfVariableClass = new LinkedList<VariableClass>(); 
try{
	int sessionID = parser.getIntOf("SessionId", 0, false);
	engine = parser.getValueOf("EngineName", "", false);
	int dbType = ServerProperty.getReference().getDBType(engine);
	option = parser.getValueOf("Option");
	Set<String> displayNameSet = new HashSet<String>();
	boolean isArtifactMigrationCase = parser.getValueOf("ArtificationMigration", "N", true).equalsIgnoreCase("Y");
	
	if(isArtifactMigrationCase)
	{
		String processName = parser.getValueOf("ProcessName", null, false);
		String exeStr = "select ProcessDefId from ProcessDefTable "+ WFSUtil.getTableLockHintStr(dbType) + " where ProcessName = ? order by VersionNo desc ";
		pstmt = con.prepareStatement(exeStr);
		WFSUtil.DB_SetString(1, processName, pstmt, dbType);
		pstmt.execute();
		rs = pstmt.getResultSet();
		if (rs.next()) {
			processDefId = rs.getInt(1);
			String query = "SELECT ActivityName, ActivityId FROM ACTIVITYTABLE "+ WFSUtil.getTableLockHintStr(dbType) + " Where ProcessDefId = ? AND ActivityType= ? ";
			pstmt1 = con.prepareStatement(query);
			pstmt1.setInt(1, processDefId);
			pstmt1.setInt(2, 32);
			pstmt1.execute();
			rs1 = pstmt1.getResultSet();
			if(!rs1.next())
			{
				mainCode = WFSError.WF_NO_CASE_ACTIVITY_EXISTS_TARGET;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP; 
			}
			if(rs1 != null){
				rs1.close();
				rs1 = null;
			}
			if(pstmt1 != null){
				pstmt1.close();
				pstmt1 = null;
			}
		}
		else
		{
			mainCode = WFSError.WF_INVALID_PROCESS_NAME;
			subCode = WFSError.WF_PROCESS_NOT_EXISTS;
			subject = WFSErrorMsg.getMessage(mainCode);
			descr = WFSErrorMsg.getMessage(subCode);
			errType = WFSError.WF_TMP;   
		}
		if(rs != null){
			rs.close();
			rs = null;
		}
		if(pstmt != null){
			pstmt.close();
			pstmt = null;
		}	
	}
	else
	{
	processDefId =  parser.getIntOf("ProcessDefinitionId", 0, false);
	activityId =  parser.getIntOf("ActivityId", 0, false);
	}
	
	if(caseDataMap.isEmpty() || isArtifactMigrationCase){
		WFCaseDataVariableMap.populateCaseDataMap(con, dbType);
	}
	HashMap<String,String> variableDisplayNameMap  = new HashMap<String, String>();

	WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
	if (participant != null) {
		if (con.getAutoCommit()) {
			con.setAutoCommit(false);
		}
        if(mainCode == 0)
        {
		int noOfCaseVariables= parser.getNoOfFields("CaseVariable");
		int counter = 0;
		if(!isArtifactMigrationCase)
		{
		userVariables.append("'");
		while(noOfCaseVariables>0){
			if(counter == 0){
				tmpParser.setInputXML(parser.getFirstValueOf("CaseVariable"));
				counter++;
			}
			else{
				tmpParser.setInputXML("");
				tmpParser.setInputXML(parser.getNextValueOf("CaseVariable"));
			}
			String variableName = tmpParser.getValueOf("Name");
			String displayName = tmpParser.getValueOf("DisplayName");
			if((displayName==null)||(displayName.trim().isEmpty())||(displayNameSet.contains(displayName.trim().toUpperCase())))
			{
				mainCode = WFSError.WF_OPERATION_FAILED;
				subCode = WFSError.WF_INVALID_DISPLAYNAME_FOUND;
				subject = WFSErrorMsg.getMessage(mainCode);
	            errType = WFSError.WF_TMP;
	            descr = WFSErrorMsg.getMessage(subCode);
	            String error = WFSUtil.generalError(option, engine, gen,
	   	                   mainCode, subCode,
	   	                   errType, subject,
	   	                    descr);
	            WFSUtil.printErr(engine, error);
	   	        return error;
			}
			else{
			displayNameSet.add(displayName.trim().toUpperCase());
			}
			variableDisplayNameMap.put(variableName, displayName);
			userVariables.append(variableName);
			if(noOfCaseVariables>1){
				userVariables.append("','");
			}
			noOfCaseVariables --;
		}
		userVariables.append("'");

		pstmt = con.prepareStatement("Delete from WFCaseDataVariableTable where processdefid = ? and activityid =?") ;
		pstmt.setInt(1, processDefId);
		pstmt.setInt(2, activityId);
		pstmt.execute();

		pstmt = con.prepareStatement("Select VariableId,SystemDefinedName,UserDefinedName from VarMappingTable where processdefid = ? and userdefinedname in ( "+ userVariables.toString() + ")") ;
		pstmt.setInt(1, processDefId);
		rs= pstmt.executeQuery();
		pstmtNew = con.prepareStatement("Insert into WFCaseDataVariableTable(ProcessDefId , ActivityId ,VariableId,DisplayName) values (?,?,?,?)");
		while (rs.next()){
			int variableId = rs.getInt("VariableId");
			String variableName = rs.getString ("UserDefinedName");
			String systemDefinedName = rs.getString ("SystemDefinedName");
			String displayName = variableDisplayNameMap.get(variableName);
			pstmtNew.setInt(1, processDefId);
			pstmtNew.setInt(2, activityId);
			pstmtNew.setInt(3,variableId );
			pstmtNew.setString(4, displayName);
			pstmtNew.addBatch();
			VariableClass object = new VariableClass(variableId,systemDefinedName,variableName,displayName);
			listOfVariableClass.add(object);

		}
		pstmtNew.executeBatch();
		}
		else
		{

			pstmtNew = con.prepareStatement("Insert into WFCaseDataVariableTable(ProcessDefId , ActivityId ,VariableId,DisplayName) values (?,?,?,?)");//Change for Bug Id-104200
			for(int fc = 0; fc < noOfCaseVariables; fc++){
				if(counter == 0){
					tmpParser.setInputXML(parser.getFirstValueOf("CaseVariable"));
					counter++;
				}
				else{
					tmpParser.setInputXML("");
					tmpParser.setInputXML(parser.getNextValueOf("CaseVariable"));
				}
				String variableName = tmpParser.getValueOf("Name");
				String displayName = tmpParser.getValueOf("DisplayName");
				String activityName = tmpParser.getValueOf("ActivityName");				
				try {
					activityId =  tmpParser.getIntOf("ActivityId", 0, false);
					} catch (JTSException e1) {
						failedList.append("<FailedCaseVariable>");
	   					failedList.append("<FailedCaseVariableName>"+variableName+"</FailedCaseVariableName>");
	   					failedList.append("<FailedCaseVariableActivtyName>"+activityName+"</FailedCaseVariableActivtyName>");
	   					failedList.append("<Reason>ActivityID is not Provided</Reason>");
	   					failedList.append("</FailedCaseVariable>");
	   					continue;	
				}
				if(!activityValidationMap.containsKey(activityName+"#"+activityId))
				{
					String query = "SELECT * FROM ACTIVITYTABLE "+ WFSUtil.getTableLockHintStr(dbType) + " Where ProcessDefId = ? AND ActivityName= ? AND ActivityId = ?";
					pstmt1 = con.prepareStatement(query);
					pstmt1.setInt(1, processDefId);
					pstmt1.setString(2, activityName);
					pstmt1.setInt(3, activityId);
					pstmt1.execute();
					rs1 = pstmt1.getResultSet();
					if(rs1.next())
					{
						activityValidationMap.put(activityName+"#"+activityId,"exist");
					}
					else
					{
						activityValidationMap.put(activityName+"#"+activityId,"not exist");
					}
					if(rs1 != null){
						rs1.close();
						rs1 = null;
					}
					if(pstmt1 != null){
						pstmt1.close();
						pstmt1 = null;
					}
				}
				if("exist".equalsIgnoreCase(activityValidationMap.get(activityName+"#"+activityId)))
				{
					pstmt = con.prepareStatement("Select VariableId,SystemDefinedName,UserDefinedName from VarMappingTable where processdefid = ? and userdefinedname = ?") ;
					pstmt.setInt(1, processDefId);
					pstmt.setString(2, variableName);
					rs= pstmt.executeQuery();
					if(rs.next()){
						int variableId = rs.getInt("VariableId");						
						String systemDefinedName = rs.getString ("SystemDefinedName");
						pstmtNew.setInt(1, processDefId);
						pstmtNew.setInt(2, activityId);
						pstmtNew.setInt(3,variableId );
						pstmtNew.setString(4, displayName);
						pstmtNew.addBatch();
						insertFlag = true;
						VariableClass object = new VariableClass(variableId,systemDefinedName,variableName,displayName);
						actictyIDVariableClassMap.put(activityId, object);
					}
					else
					{
						failedList.append("<FailedCaseVariable>");
	   					failedList.append("<FailedCaseVariableName>"+variableName+"</FailedCaseVariableName>");
	   					failedList.append("<FailedCaseVariableActivtyName>"+activityName+"</FailedCaseVariableActivtyName>");
	   					failedList.append("<Reason>Variable with name '"+variableName+"' does not exists in target environment.Kindly Migrate or Sync the process first</Reason>");
	   					failedList.append("</FailedCaseVariable>");
	   					continue;						
					}
					if(rs != null){
						rs.close();
						rs = null;
					}
					if(pstmt != null){
						pstmt.close();
						pstmt = null;
					}	
				}
				else
				{
					failedList.append("<FailedCaseVariable>");
   					failedList.append("<FailedCaseVariableName>"+variableName+"</FailedCaseVariableName>");
   					failedList.append("<FailedCaseVariableActivtyName>"+activityName+"</FailedCaseVariableActivtyName>");
   					failedList.append("<Reason>Activty with name '"+activityName+"' does not exists in target environment.Kindly Migrate or Sync the process first</Reason>");
   					failedList.append("</FailedCaseVariable>");
   					continue;
				}
				
			}
			if(insertFlag)
		       {
		    	   pstmt = con.prepareStatement("Delete from WFCaseDataVariableTable where processdefid = ? ") ;
		   		pstmt.setInt(1, processDefId);
		   		pstmt.execute(); 
		   		pstmtNew.executeBatch();
		       }
		}
		if (!con.getAutoCommit()) {
			con.commit();
			con.setAutoCommit(true);
		}
       }
	}else{
		mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
		subCode = 0;
		subject = WFSErrorMsg.getMessage(mainCode);
		descr = WFSErrorMsg.getMessage(subCode);
		errType = WFSError.WF_TMP;
	} if(mainCode == 0){
		if(!isArtifactMigrationCase)
		{
		String key = processDefId +"#"  + activityId;
		caseDataMap.remove(key);
		caseDataMap.put(key,listOfVariableClass);
		}
		else
		{
			Set<Integer> activityIds = actictyIDVariableClassMap.keySet();
            for (Integer actId : activityIds) 
			{	  
            	//Changes for Bug Id 104199 starts here
            	List<VariableClass> variableClasslist = (List<VariableClass>) actictyIDVariableClassMap.get(actId);
            	LinkedList<VariableClass> linkedListOfVariableClass = new LinkedList<VariableClass>();
            	linkedListOfVariableClass.addAll(variableClasslist);
            	//Changes for Bug Id 104199 ends here
            	String key = processDefId +"#"  + actId;
        		caseDataMap.remove(key);
        		caseDataMap.put(key,linkedListOfVariableClass);
			}
			
		}
		outputXML = new StringBuffer();
		outputXML.append(gen.createOutputFile("WFSetCaseDataVariableMapping"));
		outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
		if (failedList.length() > 0) {
		outputXML.append("<FailedList>");
        outputXML.append(failedList+ "\n");
        outputXML.append("</FailedList>");
		}
		outputXML.append(gen.closeOutputFile("WFSetCaseDataVariableMapping"));
	}


}catch (SQLException e) {
	WFSUtil.printErr(engine,"", e);
	mainCode = WFSError.WM_INVALID_FILTER;
	subCode = WFSError.WFS_SQL;
	subject = WFSErrorMsg.getMessage(mainCode);
	errType = WFSError.WF_FAT;
	if (e.getErrorCode() == 0) {
		if (e.getSQLState().equalsIgnoreCase("08S01")) {
			descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
		}
	} else {
		descr = e.getMessage();
	}
} catch (NumberFormatException e) {
	WFSUtil.printErr(engine,"", e);
	mainCode = WFSError.WF_OPERATION_FAILED;
	subCode = WFSError.WFS_ILP;
	subject = WFSErrorMsg.getMessage(mainCode);
	errType = WFSError.WF_TMP;
	descr = e.toString();
} catch (NullPointerException e) {
	WFSUtil.printErr(engine,"", e);
	mainCode = WFSError.WF_OPERATION_FAILED;
	subCode = WFSError.WFS_SYS;
	subject = WFSErrorMsg.getMessage(mainCode);
	errType = WFSError.WF_TMP;
	descr = e.toString();
} catch (Exception e) {
	WFSUtil.printErr(engine,"", e);
	mainCode = WFSError.WF_OPERATION_FAILED;
	subCode = WFSError.WFS_EXP;
	subject = WFSErrorMsg.getMessage(mainCode);
	errType = WFSError.WF_TMP;
	descr = e.toString();
} catch (Error e) {
	WFSUtil.printErr(engine,"", e);
	mainCode = WFSError.WF_OPERATION_FAILED;
	subCode = WFSError.WFS_EXP;
	subject = WFSErrorMsg.getMessage(mainCode);
	errType = WFSError.WF_TMP;
	descr = e.toString();
} finally {
	try {
		if (!con.getAutoCommit()) {
			con.rollback();
			con.setAutoCommit(true);
		}
	} catch (SQLException sqle) {
	}
	try {
		if (rs != null) {
			rs.close();
			rs = null;
		}
	} catch (SQLException sqle) {
	}
	try {
		if (pstmt != null) {
			pstmt.close();
			pstmt = null;
		}
	} catch (Exception e) {
	}

	
}
if (mainCode != 0) {
    throw new WFSException(mainCode, subCode, errType, subject, descr);

}
return outputXML.toString();

}



//----------------------------------------------------------------------------------------------------
//Function Name 				:	WFGetCaseInfoVariables
//Date Written (DD/MM/YYYY)		:	22/08/2017
//Author						:	Mohnish Chopra
//Input Parameters				:	Connection , XMLParser , XMLGenerator
//Output Parameters				:   none
//Return Values					:	String
//Description					:   Api to set case information variables.
//----------------------------------------------------------------------------------------------------
public String WFGetCaseInfoVariables(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {
	
	 StringBuffer outputXML = new StringBuffer("");
   PreparedStatement pstmt = null;
   int mainCode = 0;
   int subCode = 0;
   String subject = null;
   String descr = null;
   String errType = WFSError.WF_TMP;
	ResultSet rs = null;
	StringBuffer tempXML = new StringBuffer();
	String engine = null;
	String option = null;
	int count = 0;
	String processName = null;
	int processDefId = 0;
	int activityId = 0;
	PreparedStatement pstmt1 = null;
	ResultSet rs1 = null;
	try{
		int sessionID = parser.getIntOf("SessionId", 0, false);
		engine = parser.getValueOf("EngineName", null, false);
		option =parser.getValueOf("option",null,false);
		int dbType = ServerProperty.getReference().getDBType(engine);
		boolean isArtifactMigrationCase = parser.getValueOf("ArtificationMigration", "N", true).equalsIgnoreCase("Y");
		HashMap<Integer,String> actIdActivityNameMap = new HashMap();
		boolean caseActivityExists = false;
		boolean moreThanOneCaseActivity = false;
		boolean isFirstIter = true;
		String activityIdList = null;
		if(isArtifactMigrationCase)
		{
			processName = parser.getValueOf("ProcessName", null, false);
			String exeStr = "select ProcessDefId from ProcessDefTable "+ WFSUtil.getTableLockHintStr(dbType) + " where ProcessName = ? order by VersionNo desc ";
			pstmt = con.prepareStatement(exeStr);
			WFSUtil.DB_SetString(1, processName, pstmt, dbType);
			pstmt.execute();
			rs = pstmt.getResultSet();
			if (rs.next()) {
				processDefId = rs.getInt(1);
				String query = "SELECT ActivityName, ActivityId FROM ACTIVITYTABLE "+ WFSUtil.getTableLockHintStr(dbType) + " Where ProcessDefId = ? AND ActivityType= ? ";
				pstmt1 = con.prepareStatement(query);
				pstmt1.setInt(1, processDefId);
				pstmt1.setInt(2, 32);
				pstmt1.execute();
				rs1 = pstmt1.getResultSet();
				while(rs1.next())
				{
					activityId = rs1.getInt("ActivityId");
					caseActivityExists = true;
					if(isFirstIter){
						activityIdList = String.valueOf(activityId);
						isFirstIter = false; 	
					}else{
						activityIdList = activityIdList + "," + String.valueOf(activityId) ;	
						moreThanOneCaseActivity = true;
					}	
					actIdActivityNameMap.put(activityId,rs1.getString("ActivityName"));

				}
				if(rs1 != null){
					rs1.close();
					rs1 = null;
				}
				if(pstmt1 != null){
					pstmt1.close();
					pstmt1 = null;
				}	
				if(!caseActivityExists)
				{
					mainCode = WFSError.WF_NO_CASE_ACTIVITY_EXISTS;
					subCode = 0;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP; 
				}
			}
			else
			{
				mainCode = WFSError.WF_INVALID_PROCESS_NAME;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;   
			}
			if(rs != null){
				rs.close();
				rs = null;
			}
			if(pstmt != null){
				pstmt.close();
				pstmt = null;
			}	
		}
		else
		{
		 processDefId =  parser.getIntOf("ProcessDefinitionId", 0, false);
		 activityId =  parser.getIntOf("ActivityId", 0, false);
		}
		
		

		WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
		if (participant != null) {
			if (mainCode == 0)
           {
         	  if(isArtifactMigrationCase && moreThanOneCaseActivity)
         	  {

         		  pstmt = con.prepareStatement("Select a.VariableId,b.SystemDefinedName,b.UserDefinedName,a.DisplayName,a.activityid from " +
					" WFCaseInfoVariableTable a inner join VarMappingTable b" +
					" on a.ProcessDefId = b.ProcessDefId and a.variableid = b.variableid " +
   				" where a.processdefid = ? and a.activityid IN ( "+activityIdList+" ) ORDER BY a.ActivityID");
   				pstmt.setInt(1, processDefId);
         		   }
         	  else
         	  {
					pstmt = con.prepareStatement("Select a.VariableId,b.SystemDefinedName,b.UserDefinedName,a.DisplayName,a.activityid from " +
							" WFCaseInfoVariableTable a inner join VarMappingTable b" +
							" on a.ProcessDefId = b.ProcessDefId and a.variableid = b.variableid " +
			" where a.processdefid = ? and a.activityid = ?	");
			pstmt.setInt(1, processDefId);
			pstmt.setInt(2, activityId);
         	  }
			rs=pstmt.executeQuery();
			while(rs.next()){
				count =1;
				int variableId = rs.getInt("VariableId");
				String systemDefinedName = rs.getString("SystemDefinedName");
				String userDefinedName = rs.getString("UserDefinedName");
				String displayName = rs.getString("DisplayName");
				tempXML.append("<CaseVariable>");
				tempXML.append(gen.writeValueOf("Name", userDefinedName));
				tempXML.append(gen.writeValueOf("DisplayName", displayName));
				if(isArtifactMigrationCase)
				{
					int actId = rs.getInt("activityid");
					tempXML.append(gen.writeValueOf("ActivityId", String.valueOf(actId)));
					tempXML.append(gen.writeValueOf("ActivityName", actIdActivityNameMap.get(actId)));
				}
				tempXML.append("</CaseVariable>");

			}

			if (con.getAutoCommit()) {
				con.setAutoCommit(false);
			}


			if(count == 0){
				mainCode = WFSError.WM_NO_MORE_DATA;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
         }

		}else{
			mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
			subCode = 0;
			subject = WFSErrorMsg.getMessage(mainCode);
			descr = WFSErrorMsg.getMessage(subCode);
			errType = WFSError.WF_TMP;
		} 
		
		if(mainCode == 0){
			outputXML = new StringBuffer();
			outputXML.append(gen.createOutputFile(option));
			outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
			if(isArtifactMigrationCase)
			{
				outputXML.append("<CaseVariablesData>\n");
				outputXML.append("<ProcessName>"+processName+"</ProcessName>\n");
				outputXML.append("<CaseVariables>");
				outputXML.append(tempXML);
				outputXML.append("</CaseVariables>");
				outputXML.append("</CaseVariablesData>\n");
			}
			else
			{
			outputXML.append("<CaseVariables>");
			outputXML.append(tempXML);
			outputXML.append("</CaseVariables>");
			}
			outputXML.append(gen.closeOutputFile(option));
		}


	}catch (SQLException e) {
       WFSUtil.printErr(engine,"", e);
       mainCode = WFSError.WM_INVALID_FILTER;
       subCode = WFSError.WFS_SQL;
       subject = WFSErrorMsg.getMessage(mainCode);
       errType = WFSError.WF_FAT;
       if (e.getErrorCode() == 0) {
           if (e.getSQLState().equalsIgnoreCase("08S01")) {
               descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
           }
       } else {
           descr = e.getMessage();
       }
   } catch (NumberFormatException e) {
       WFSUtil.printErr(engine,"", e);
       mainCode = WFSError.WF_OPERATION_FAILED;
       subCode = WFSError.WFS_ILP;
       subject = WFSErrorMsg.getMessage(mainCode);
       errType = WFSError.WF_TMP;
       descr = e.toString();
   } catch (NullPointerException e) {
       WFSUtil.printErr(engine,"", e);
       mainCode = WFSError.WF_OPERATION_FAILED;
       subCode = WFSError.WFS_SYS;
       subject = WFSErrorMsg.getMessage(mainCode);
       errType = WFSError.WF_TMP;
       descr = e.toString();
   } catch (Exception e) {
       WFSUtil.printErr(engine,"", e);
       mainCode = WFSError.WF_OPERATION_FAILED;
       subCode = WFSError.WFS_EXP;
       subject = WFSErrorMsg.getMessage(mainCode);
       errType = WFSError.WF_TMP;
       descr = e.toString();
   } catch (Error e) {
       WFSUtil.printErr(engine,"", e);
       mainCode = WFSError.WF_OPERATION_FAILED;
       subCode = WFSError.WFS_EXP;
       subject = WFSErrorMsg.getMessage(mainCode);
       errType = WFSError.WF_TMP;
       descr = e.toString();
   } finally {
       try {
           if (!con.getAutoCommit()) {
               con.setAutoCommit(true);
           }
       } catch (SQLException sqle) {
       }
       try {
           if (rs != null) {
               rs.close();
               rs = null;
           }
       } catch (SQLException sqle) {
       }
       try {
           if (pstmt != null) {
               pstmt.close();
               pstmt = null;
           }
       } catch (Exception e) {
       }
     
   }
   if (mainCode != 0) {
       throw new WFSException(mainCode, subCode, errType, subject, descr);

   }
   return outputXML.toString();

}
//----------------------------------------------------------------------------------------------------
//Function Name 				:	WFSetCaseInfoVariables
//Date Written (DD/MM/YYYY)		:	22/08/2017
//Author						:	Mohnish Chopra
//Input Parameters				:	Connection , XMLParser , XMLGenerator
//Output Parameters				:   none
//Return Values					:	String
//Description					:   Api to set case information variables.
//----------------------------------------------------------------------------------------------------
public String WFSetCaseInfoVariables(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {

	String engine = null;
	 StringBuffer outputXML = new StringBuffer("");
	PreparedStatement pstmt = null;
	PreparedStatement pstmt1 = null;
	PreparedStatement pstmtNew = null;
    String option = null;
	int mainCode = 0;
	int subCode = 0;
	String subject = null;
	String descr = null;
	String errType = WFSError.WF_TMP;
	ResultSet rs = null;
	ResultSet rs1 = null;
	StringBuffer tempXML = new StringBuffer();
	XMLParser tmpParser =new XMLParser();
	StringBuffer userVariables = new StringBuffer();
	int processDefId = 0;
	int activityId = 0;
	HashMap<String,String> activityValidationMap = new HashMap();
	StringBuffer failedList = new StringBuffer(1000);
	boolean insertFlag = false; 
	try{
		int sessionID = parser.getIntOf("SessionId", 0, false);
		engine = parser.getValueOf("EngineName", "", false);
		int dbType = ServerProperty.getReference().getDBType(engine);
		option = parser.getValueOf("Option");
		Set<String> displayNameSet = new HashSet<String>();

		boolean isArtifactMigrationCase = parser.getValueOf("ArtificationMigration", "N", true).equalsIgnoreCase("Y");

		if(isArtifactMigrationCase)
		{
			String processName = parser.getValueOf("ProcessName", null, false);
			String exeStr = "select ProcessDefId from ProcessDefTable "+ WFSUtil.getTableLockHintStr(dbType) + " where ProcessName = ? order by VersionNo desc ";
			pstmt = con.prepareStatement(exeStr);
			WFSUtil.DB_SetString(1, processName, pstmt, dbType);
			pstmt.execute();
			rs = pstmt.getResultSet();
			if (rs.next()) {
				processDefId = rs.getInt(1);
				String query = "SELECT ActivityName, ActivityId FROM ACTIVITYTABLE "+ WFSUtil.getTableLockHintStr(dbType) + " Where ProcessDefId = ? AND ActivityType= ? ";
				pstmt1 = con.prepareStatement(query);
				pstmt1.setInt(1, processDefId);
				pstmt1.setInt(2, 32);
				pstmt1.execute();
				rs1 = pstmt1.getResultSet();
				if(!rs1.next())
				{
					mainCode = WFSError.WF_NO_CASE_ACTIVITY_EXISTS_TARGET;
					subCode = 0;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP; 
				}
				if(rs1 != null){
					rs1.close();
					rs1 = null;
				}
				if(pstmt1 != null){
					pstmt1.close();
					pstmt1 = null;
				}
			}
			else
			{
				mainCode = WFSError.WF_INVALID_PROCESS_NAME;
				subCode = WFSError.WF_PROCESS_NOT_EXISTS;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;   
			}
			if(rs != null){
				rs.close();
				rs = null;
			}
			if(pstmt != null){
				pstmt.close();
				pstmt = null;
			}	
		}
		else
		{
		processDefId =  parser.getIntOf("ProcessDefinitionId", 0, false);
		activityId =  parser.getIntOf("ActivityId", 0, false);
		}

		HashMap<String,String> variableDisplayNameMap  = new HashMap<String, String>();

		WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
		if (participant != null) {
			if (con.getAutoCommit()) {
				con.setAutoCommit(false);
			}

			if(mainCode == 0)
	        {
			int noOfCaseVariables= parser.getNoOfFields("CaseVariable");
			int counter = 0;
			if(!isArtifactMigrationCase)
			{
			userVariables.append("'");
			while(noOfCaseVariables>0){
				if(counter == 0){
					tmpParser.setInputXML(parser.getFirstValueOf("CaseVariable"));
					counter++;
				}
				else{
					tmpParser.setInputXML("");
					tmpParser.setInputXML(parser.getNextValueOf("CaseVariable"));
				}
				String variableName = tmpParser.getValueOf("Name");
				String displayName = tmpParser.getValueOf("DisplayName");
				if((displayName==null)||(displayName.trim().isEmpty())||(displayNameSet.contains(displayName.trim().toUpperCase())))
				{
					mainCode = WFSError.WF_OPERATION_FAILED;
					subCode = WFSError.WF_INVALID_DISPLAYNAME_FOUND;
					subject = WFSErrorMsg.getMessage(mainCode);
		            errType = WFSError.WF_TMP;
		            descr = WFSErrorMsg.getMessage(subCode);
		            String error = WFSUtil.generalError(option, engine, gen,
		   	                   mainCode, subCode,
		   	                   errType, subject,
		   	                    descr);
		            WFSUtil.printErr(engine, error);
		   	        return error;
				}
				else{
				displayNameSet.add(displayName.trim().toUpperCase());
				}
				variableDisplayNameMap.put(variableName, displayName);
				userVariables.append(variableName);
				if(noOfCaseVariables>1){
					userVariables.append("','");
				}
				noOfCaseVariables --;
			}
			userVariables.append("'");

			pstmt = con.prepareStatement("Delete from WFCaseInfoVariableTable where processdefid = ? and activityid =?") ;
			pstmt.setInt(1, processDefId);
			pstmt.setInt(2, activityId);
			pstmt.execute();

			pstmt = con.prepareStatement("Select VariableId,SystemDefinedName,UserDefinedName from VarMappingTable where processdefid = ? and userdefinedname in ( "+ userVariables.toString() + ")") ;
			pstmt.setInt(1, processDefId);
			rs= pstmt.executeQuery();
			pstmtNew = con.prepareStatement("Insert into WFCaseInfoVariableTable(ProcessDefId , ActivityId ,VariableId,DisplayName) values (?,?,?,?)");
			while (rs.next()){
				int variableId = rs.getInt("VariableId");
				String variableName = rs.getString ("UserDefinedName");
				String systemDefinedName = rs.getString ("SystemDefinedName");
				String displayName = variableDisplayNameMap.get(variableName);
				pstmtNew.setInt(1, processDefId);
				pstmtNew.setInt(2, activityId);
				pstmtNew.setInt(3,variableId );
				pstmtNew.setString(4, displayName);
				pstmtNew.addBatch();
			}
			pstmtNew.executeBatch();
		}
			else
			{
				pstmtNew = con.prepareStatement("Insert into WFCaseInfoVariableTable(ProcessDefId , ActivityId ,VariableId,DisplayName) values (?,?,?,?)");//Change for Bug 104200
				for(int fc = 0; fc < noOfCaseVariables; fc++){
					if(counter == 0){
						tmpParser.setInputXML(parser.getFirstValueOf("CaseVariable"));
						counter++;
					}
					else{
						tmpParser.setInputXML("");
						tmpParser.setInputXML(parser.getNextValueOf("CaseVariable"));
					}
					String variableName = tmpParser.getValueOf("Name");
					String displayName = tmpParser.getValueOf("DisplayName");
					String activityName = tmpParser.getValueOf("ActivityName");				
					try {
						activityId =  tmpParser.getIntOf("ActivityId", 0, false);
						} catch (JTSException e1) {
							failedList.append("<FailedCaseVariable>\n");
		   					failedList.append("<FailedCaseVariableName>"+variableName+"</FailedCaseVariableName>\n");
		   					failedList.append("<FailedCaseVariableActivtyName>"+activityName+"</FailedCaseVariableActivtyName>\n");
		   					failedList.append("<Reason>ActivityID is not Provided</Reason>\n");
		   					failedList.append("</FailedCaseVariable>\n");
		   					continue;	
					}
					if(!activityValidationMap.containsKey(activityName+"#"+activityId))
					{
						String query = "SELECT * FROM ACTIVITYTABLE "+ WFSUtil.getTableLockHintStr(dbType) + " Where ProcessDefId = ? AND ActivityName= ? AND ActivityId = ?";
						pstmt1 = con.prepareStatement(query);
						pstmt1.setInt(1, processDefId);
						pstmt1.setString(2, activityName);
						pstmt1.setInt(3, activityId);
						pstmt1.execute();
						rs1 = pstmt1.getResultSet();
						if(rs1.next())
						{
							activityValidationMap.put(activityName+"#"+activityId,"exist");
						}
						else
						{
							activityValidationMap.put(activityName+"#"+activityId,"not exist");
						}
						if(rs1 != null){
							rs1.close();
							rs1 = null;
						}
						if(pstmt1 != null){
							pstmt1.close();
							pstmt1 = null;
						}
					}
					if("exist".equalsIgnoreCase(activityValidationMap.get(activityName+"#"+activityId)))
					{
						pstmt = con.prepareStatement("Select VariableId,SystemDefinedName,UserDefinedName from VarMappingTable where processdefid = ? and userdefinedname = ?") ;
						pstmt.setInt(1, processDefId);
						pstmt.setString(2, variableName);
						rs= pstmt.executeQuery();
						if(rs.next()){
							int variableId = rs.getInt("VariableId");						
							String systemDefinedName = rs.getString ("SystemDefinedName");
							pstmtNew.setInt(1, processDefId);
							pstmtNew.setInt(2, activityId);
							pstmtNew.setInt(3,variableId );
							pstmtNew.setString(4, displayName);
							pstmtNew.addBatch();
							insertFlag = true;
						}
						else
						{
							failedList.append("<FailedCaseVariable>\n");
		   					failedList.append("<FailedCaseVariableName>"+variableName+"</FailedCaseVariableName>\n");
		   					failedList.append("<FailedCaseVariableActivtyName>"+activityName+"</FailedCaseVariableActivtyName>\n");
		   					failedList.append("<Reason>Variable with name '"+variableName+"' does not exists in target environment.Kindly Migrate or Sync the process first</Reason>\n");
		   					failedList.append("</FailedCaseVariable>\n");
		   					continue;						
						}
						if(rs != null){
							rs.close();
							rs = null;
						}
						if(pstmt != null){
							pstmt.close();
							pstmt = null;
						}	
					}
					else
					{
						failedList.append("<FailedCaseVariable>\n");
	   					failedList.append("<FailedCaseVariableName>"+variableName+"</FailedCaseVariableName>\n");
	   					failedList.append("<FailedCaseVariableActivtyName>"+activityName+"</FailedCaseVariableActivtyName>\n");
	   					failedList.append("<Reason>Activty with name '"+activityName+"' does not exists in target environment.Kindly Migrate or Sync the process first</Reason>\n");
	   					failedList.append("</FailedCaseVariable>\n");
	   					continue;
					}

				}
				if(insertFlag)
			       {
			    	   pstmt = con.prepareStatement("Delete from WFCaseInfoVariableTable where processdefid = ? ") ;
			   		pstmt.setInt(1, processDefId);
			   		pstmt.execute(); 
			   		pstmtNew.executeBatch();
			       }
			
			}

			if (!con.getAutoCommit()) {
				con.commit();
				con.setAutoCommit(true);
			}
	      }
		}else{
			mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
			subCode = 0;
			subject = WFSErrorMsg.getMessage(mainCode);
			descr = WFSErrorMsg.getMessage(subCode);
			errType = WFSError.WF_TMP;
		} if(mainCode == 0){
			outputXML = new StringBuffer();
			outputXML.append(gen.createOutputFile("WFSetCaseInfoVariables"));
			outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
			if (failedList.length() > 0) {
			outputXML.append("<FailedList>");
	        outputXML.append(failedList+ "\n");
	        outputXML.append("</FailedList>");
			}
			outputXML.append(gen.closeOutputFile("WFSetCaseInfoVariables"));
		}


	}catch (SQLException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WM_INVALID_FILTER;
		subCode = WFSError.WFS_SQL;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_FAT;
		if (e.getErrorCode() == 0) {
			if (e.getSQLState().equalsIgnoreCase("08S01")) {
				descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
			}
		} else {
			descr = e.getMessage();
		}
	} catch (NumberFormatException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_ILP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (NullPointerException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_SYS;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (Exception e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (Error e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} finally {
		try {
			if (!con.getAutoCommit()) {
				con.rollback();
				con.setAutoCommit(true);
			}
		} catch (SQLException sqle) {
		}
		try {
			if (rs != null) {
				rs.close();
				rs = null;
			}
		} catch (SQLException sqle) {
		}
		try {
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
		} catch (Exception e) {
		}

		
	}
	if (mainCode != 0) {
		throw new WFSException(mainCode, subCode, errType, subject, descr);

	}
	return outputXML.toString();

}

private String WFGenerateCaseSummaryReport(Connection con, XMLParser parser, XMLGenerator gen) throws WFSException {

	int mainCode = 0;
	int mainCodeInternal=0;
	int subCode = 0;
	int error = 0;
	int qId = 0;
	String subject = null;
	String descr = null;
	String errType = WFSError.WF_TMP;
	ResultSet rs = null; 
	ResultSet rs1 = null;
	PreparedStatement pstmt = null;
	PreparedStatement pstmt1 = null;
	String errorMsg = "";
	StringBuffer tempXml = new StringBuffer();
	 StringBuffer outputXML = new StringBuffer("");
	String inputXML = null;
	String output = null;
	XMLParser parser1 = new XMLParser();
	XMLGenerator generator = new XMLGenerator();
	File caseSummaryFile = null;
	String caseFilePath = null;
	String userLocale = null;
	int noOfPages = 0;
	String pdaFlag = "N"; //Bug 78939 -- By default this flag will be Y - to delete case summary pdf
	try{
		
		CaseSummaryDocument report=null;

		String engine = parser.getValueOf("EngineName");
		int dbType = ServerProperty.getReference().getDBType(engine);
		int sessionID = parser.getIntOf("SessionId", 0, false);
		int dmsSessionID =0;
		WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
		if (participant != null) {
			if(participant.gettype()=='P'){
			 dmsSessionID = parser.getIntOf("DMSSessionId", 0, false);
				}
			else{
				dmsSessionID = sessionID;
			}
			long millis = System.currentTimeMillis() % 1000;
			userLocale = participant.getlocale();
			pdaFlag = parser.getValueOf("PDAFlag","N",true);
			int processDefId = parser.getIntOf("ProcessDefId", 0, false);
			int activityId = parser.getIntOf("ActivityId",0,false);
			String processInstanceId = parser.getValueOf("ProcessInstanceId","",false);
			int workItemId = parser.getIntOf("WorkItemId", 0, false);
			//String documentPath = parser.getValueOf("DocumentPath","",false);
			boolean hasCaseDocRights = WFSUtil.isGenerationCaseDocRequired(con, dbType, processDefId, activityId);
			if(hasCaseDocRights){
				WFConfigLocator configLocator = WFConfigLocator.getInstance();
				File documentPath = new File(configLocator.getPath(Location.IBPS_TEMP));
				String reportName= "CaseSummaryDoc"+"_"+processDefId +"_"+activityId + "_"+ millis+".pdf";
				StringBuffer strBuff = CreateXML.WFGetCaseSummaryReport(engine, String.valueOf(sessionID),String.valueOf(sessionID), processInstanceId,workItemId,processDefId,activityId);
				output = WFGetCaseSummaryReport(con, new XMLParser(strBuff.toString()), generator);
				//String fileName = System.getProperty("user.dir") + documentPath +System.getProperty("file.separator") +reportName;
				report = new CaseSummaryDocument(new XMLParser(output), userLocale);
				report.createCaseSummaryPDF(documentPath.toString(), reportName);
				
				caseFilePath =documentPath + System.getProperty("file.separator") +reportName;
				caseSummaryFile = new File(caseFilePath);
				byte[] caseSummaryContent = new byte[(int)caseSummaryFile.length()];
				FileInputStream fis = new FileInputStream(caseSummaryFile); 
				int count=fis.read(caseSummaryContent);
				if(count<=0){
					WFSUtil.printOut(engine,"WMMiscellaneous:WFGenerateCaseSummaryReport count is zero or -1");
				}
				String encodedStr = EncodeImage.encodeImageData(caseSummaryContent).toString();
				
				//Adding change to read the noOfPages in PDF
				PdfReader pdfReader = new PdfReader(caseFilePath);
				noOfPages = pdfReader.getNumberOfPages();
				pdfReader.close();
				
				tempXml.append(gen.writeValueOf("FileName", reportName));
		        tempXml.append(gen.writeValueOf("FileSize", Integer.toString(encodedStr.length())));
				tempXml.append(gen.writeValueOf("FileType", FilenameUtils.getExtension(reportName)));
				if("N".equalsIgnoreCase(pdaFlag)){
					tempXml.append(gen.writeValueOf("FileBuffer", encodedStr));
				}
				tempXml.append(gen.writeValueOf("FileName", reportName));
				tempXml.append(gen.writeValueOf("NoOfPages", Integer.toString(noOfPages)));
				
				fis.close();
				//Bug 78939
				if("N".equalsIgnoreCase(pdaFlag)){
					boolean result=caseSummaryFile.delete();	
					if(!result){
						WFSUtil.printOut(engine,"caseSummayFile deletion failed");
					}
				}
				caseSummaryFile = null;
			}else{
				mainCode = WFSError.WF_NO_AUTHORIZATION;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
		} else {
			mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
			subCode = 0;
			subject = WFSErrorMsg.getMessage(mainCode);
			descr = WFSErrorMsg.getMessage(subCode);
			errType = WFSError.WF_TMP;
		}
		if (mainCode == 0) {
			outputXML = new StringBuffer(500);
			outputXML.append(gen.createOutputFile("WFGenerateCaseSummaryReport"));
			outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
			outputXML.append(tempXml);
			outputXML.append(gen.closeOutputFile("WFGenerateCaseSummaryReport"));
		}
	}  catch (Exception e) {
		WFSUtil.printErr("", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (Error e) {
		WFSUtil.printErr("", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} finally {
		try {
			if (rs != null) {
				rs.close();
				rs = null;
			}
		} catch (Exception ignored) {
		}
		try {
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
		} catch (Exception e) {
		}

		try {
			if (!con.getAutoCommit()) {
				con.rollback();
				con.setAutoCommit(true);
			}
		} catch (SQLException ex) {
		}
		if(caseSummaryFile != null && caseSummaryFile.exists()){
			//Bug 78939
			if("N".equalsIgnoreCase(pdaFlag)){
				boolean result=caseSummaryFile.delete();	
				if(!result){
					WFSUtil.printOut("","caseSummayFile deletion failed");
				}
			}
			caseSummaryFile = null;
		}
		
	}
	if (mainCode != 0) {
		throw new WFSException(mainCode, subCode, errType, subject, descr);
	}
	return outputXML.toString();

	
}

public String WFCaseSummaryQueueItemFail(Connection con, XMLParser parser, XMLGenerator gen) throws
JTSException, WFSException{
	 StringBuffer outputXML = new StringBuffer("");
	PreparedStatement pstmt = null;
	int mainCode = 0;
	int subCode = 0;
	String subject = null;
	String descr = null;
	String errType = WFSError.WF_TMP;
	String engine = "";
	try{
		String processInstanceId = parser.getValueOf("ProcessInstanceId","",false);
		int workItemId = parser.getIntOf("WorkItemId",0,false);
		int sessionID = parser.getIntOf("SessionId", 0, false);
		engine = parser.getValueOf("EngineName");
		int dbType = ServerProperty.getReference().getDBType(engine);
		WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
		int queryTimeout = WFSUtil.getQueryTimeOut();
		int userID = 0;
		char pType = '\0';
		if(user != null){
			userID = user.getid();
			pType = user.gettype();
			String username = user.getname();
			String strComments = parser.getValueOf("Comments");
			if(con.getAutoCommit())
				con.setAutoCommit(false);
			String strUpdateSQL = "UPDATE WFCaseSummaryDetailsTable SET lockedBy = NULL, status = ? WHERE processinstanceid = ? AND workitemid = ? ";
			pstmt = con.prepareStatement(strUpdateSQL);
			pstmt.setInt(1, WFSConstant.CASE_SUMMARY_DOCUMENT_FAILURE);
			WFSUtil.DB_SetString(2, processInstanceId, pstmt, dbType);
			pstmt.setInt(3 , workItemId);

			if(queryTimeout <= 0)
				pstmt.setQueryTimeout(60);
			else
				pstmt.setQueryTimeout(queryTimeout);
			int iRows = pstmt.executeUpdate();
			if(iRows <= 0){
				mainCode = WFSError.WM_INVALID_ATTRIBUTE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if(pstmt != null){
				pstmt.close();
				pstmt = null;
			}
			if(!con.getAutoCommit()){
				con.commit();
				con.setAutoCommit(true);
			}
		} else{
			mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
			subCode = 0;
			subject = WFSErrorMsg.getMessage(mainCode);
			descr = WFSErrorMsg.getMessage(subCode);
			errType = WFSError.WF_TMP;
		}
		if(mainCode == 0){
			outputXML = new StringBuffer(500);
			outputXML.append(gen.createOutputFile("WFCaseSummaryQueueItemFail"));
			outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
			outputXML.append(gen.closeOutputFile("WFCaseSummaryQueueItemFail"));
		}
	} catch(SQLException e){
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WM_INVALID_FILTER;
		subCode = WFSError.WFS_SQL;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_FAT;
		if(e.getErrorCode() == 0){
			if(e.getSQLState().equalsIgnoreCase("08S01"))
				descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " +
						e.getSQLState() + ")";
		} else
			descr = e.getMessage();
	} catch(NumberFormatException e){
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_ILP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch(NullPointerException e){
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_SYS;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch(JTSException e){
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = e.getErrorCode();
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.getMessage();
	} catch(Exception e){
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch(Error e){
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} finally{
		try{
			if(!con.getAutoCommit()){
				con.rollback();
				con.setAutoCommit(true);
			}
			if(pstmt != null){
				pstmt.close();
				pstmt = null;
			}
		} catch(Exception e){}
		
	}
	if(mainCode != 0)
		throw new WFSException(mainCode, subCode, errType, subject, descr);
	return outputXML.toString();
}


public String WFCaseSummaryQueueItemSuccess(Connection con, XMLParser parser, XMLGenerator gen) throws
JTSException, WFSException{
	 StringBuffer outputXML = new StringBuffer("");
	PreparedStatement pstmt = null;
	int mainCode = 0;
	int subCode = 0;
	String subject = null;
	String descr = null;
	String errType = WFSError.WF_TMP;
	String engine = "";
	try{
		int sessionID = parser.getIntOf("SessionId", 0, false);
		engine = parser.getValueOf("EngineName");
		String processInstanceId = parser.getValueOf("ProcessInstanceId","",false);
		int workItemId = parser.getIntOf("WorkItemId",0,false);
		int dbType = ServerProperty.getReference().getDBType(engine);
		WFParticipant user = WFSUtil.WFCheckSession(con, sessionID);
		int queryTimeout = WFSUtil.getQueryTimeOut();
		int userID = 0;
		char pType = '\0';
		if(user != null){
			userID = user.getid();
			pType = user.gettype();
			String username = user.getname();
			if(con.getAutoCommit())
				con.setAutoCommit(false);
			String strUpdateSQL = "UPDATE WFCaseSummaryDetailsTable SET lockedBy = NULL, status = ? WHERE processinstanceid = ? AND workitemid = ? ";
			pstmt = con.prepareStatement(strUpdateSQL);
			pstmt.setInt(1, WFSConstant.CASE_SUMMARY_DOCUMENT_SUCCESS);
			WFSUtil.DB_SetString(2, processInstanceId, pstmt, dbType);
			pstmt.setInt(3 , workItemId);

			if(queryTimeout <= 0)
				pstmt.setQueryTimeout(60);
			else
				pstmt.setQueryTimeout(queryTimeout);
			int iRows = pstmt.executeUpdate();
			if(iRows <= 0){
				mainCode = WFSError.WM_INVALID_ATTRIBUTE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if(pstmt != null){
				pstmt.close();
				pstmt = null;
			}
			if(!con.getAutoCommit()){
				con.commit();
				con.setAutoCommit(true);
			}
		} else{
			mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
			subCode = 0;
			subject = WFSErrorMsg.getMessage(mainCode);
			descr = WFSErrorMsg.getMessage(subCode);
			errType = WFSError.WF_TMP;
		}
		if(mainCode == 0){
			outputXML = new StringBuffer(500);
			outputXML.append(gen.createOutputFile("WFCaseSummaryQueueItemSuccess"));
			outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
			outputXML.append(gen.closeOutputFile("WFCaseSummaryQueueItemSuccess"));
		}
	} catch(SQLException e){
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WM_INVALID_FILTER;
		subCode = WFSError.WFS_SQL;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_FAT;
		if(e.getErrorCode() == 0){
			if(e.getSQLState().equalsIgnoreCase("08S01"))
				descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " +
						e.getSQLState() + ")";
		} else
			descr = e.getMessage();
	} catch(NumberFormatException e){
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_ILP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch(NullPointerException e){
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_SYS;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch(JTSException e){
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = e.getErrorCode();
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.getMessage();
	} catch(Exception e){
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch(Error e){
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} finally{
		try{
			if(!con.getAutoCommit()){
				con.rollback();
				con.setAutoCommit(true);
			}
			if(pstmt != null){
				pstmt.close();
				pstmt = null;
			}
		} catch(Exception e){}
		
	}
	if(mainCode != 0)
		throw new WFSException(mainCode, subCode, errType, subject, descr);
	return outputXML.toString();
}

//----------------------------------------------------------------------------------------------------
//Function Name 				:	GetCaseSummaryReport
//Date Written (DD/MM/YYYY) 	  :	19/06/2015
//Author					    :	Mohnish Chopra
//Input Parameters				:	Connection , XMLParser , XMLGenerator
//Output Parameters				:   none
//Return Values						:	String
//Description				:       This Api generates case summary report for a workitem at case workstep.
//----------------------------------------------------------------------------------------------------
//Change Summary *
//----------------------------------------------------------------------------
/*
<?xml version="1.0" encoding="UTF-8"?>
<WFGetCaseSummaryReport_Input><Option>WFGetCaseSummaryReport</Option>
<EngineName>div_mssql_15sep</EngineName>
<SessionID>1039907928</SessionID>
<ProcessDefID>6</ProcessDefID>
<ProcessInstanceId>WFfsdf-0000000002-process</ProcessInstanceId>
<WorkItemId>1</WorkItemId>
<ActivityId>3</ActivityId>
</WFGetCaseSummaryReport_Input>
*/
private String WFGetCaseSummaryReport(Connection con, XMLParser parser, XMLGenerator gen) throws WFSException {
	int mainCode = 0;
	int mainCodeInternal=0;
	int subCode = 0;
	int error = 0;
	int qId = 0;
	String subject = null;
	String descr = null;
	String errType = WFSError.WF_TMP;
	ResultSet rs = null; 
	ResultSet rs1 = null;
	PreparedStatement pstmt = null;
	PreparedStatement pstmt1 = null;
	String errorMsg = "";
	StringBuffer tempXml = new StringBuffer();
	 StringBuffer outputXML = new StringBuffer("");
	String inputXML = null;
	String output = null;
	XMLParser parser1 = new XMLParser();
	XMLGenerator generator = new XMLGenerator();
	String folderIndex = "-1";
	String urn= null;
	Set<Integer> allTaskList = new TreeSet<Integer>();
	Set<Integer> initiatedTaskList = new TreeSet<Integer>();
    Set<Integer> completedTaskList = new TreeSet<Integer>();
    Set<Integer> uninitiatedTaskList = new TreeSet<Integer>();
    StringBuffer initiatedTaskXml = new StringBuffer(500);
    StringBuffer completedTaskXml = new StringBuffer(500);
    StringBuffer uninitiatedTaskXml = new StringBuffer(500);
    HashMap<Integer,String> taskNameMap = new HashMap<Integer, String>();
    String currentCaseManager = null;
    String caseManagerName = null;
	try{
		String engine = parser.getValueOf("EngineName");
		int dbType = ServerProperty.getReference().getDBType(engine);
		int sessionID = parser.getIntOf("SessionId", 0, false);
		int dmsSessionID =0;
		WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
		if (participant != null) {
			if(participant.gettype()=='P'){
			 dmsSessionID = parser.getIntOf("DMSSessionId", 0, false);
				}
			else{
				dmsSessionID = sessionID;
			}
			int processDefId = parser.getIntOf("ProcessDefId", 0, false);
			int activityId = parser.getIntOf("ActivityId",0,false);
			String processInstanceId = parser.getValueOf("ProcessInstanceId","",false);
			int workItemId = parser.getIntOf("WorkItemId", 0, false);
			String dateFormat = parser.getValueOf("DateFormat", "dd/mm/yyyy", true);
			tempXml.append("<CaseSummaryData>\n");
			//Case data
			tempXml.append("<CaseData>\n");
			tempXml.append("<CaseDetails>\n");
			pstmt = con.prepareStatement("select VAR_REC_1,URN from WFINSTRUMENTTABLE where ProcessInstanceID = ? and workitemid= ?");
			WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
			pstmt.setInt(2,workItemId);
			pstmt.execute();
			rs = pstmt.getResultSet();
			if(rs.next()){
				folderIndex=rs.getString(1);
				folderIndex = StringEscapeUtils.escapeHtml4(folderIndex);
				folderIndex = StringEscapeUtils.unescapeHtml4(folderIndex);
				urn = rs.getString(2);
			}
			if (rs != null) {
				rs.close();
				rs = null;
			} 
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
			if(urn!=null&&!("").equals(urn)){
				tempXml.append(gen.writeValueOf("CaseID", urn));
					
			}
			else{
			tempXml.append(gen.writeValueOf("CaseID", processInstanceId));
			}  /*Query for Case Manager : Select AssociatedFieldName as CaseManager , ActionDateTime as CaseAssignedTime 
			  from WFCurrentRouteLogTable where processinstanceid='CaseAgain-0000000016-process' 
			  and actionid= 17 order by ActionDateTime */
			pstmt =con.prepareStatement("Select processname,"+WFSUtil.getDate(dbType)+" as CurrentDate from processdeftable " + WFSUtil.getTableLockHintStr(dbType) + " where processdefid  = ? ");
			pstmt.setInt(1, processDefId);
			pstmt.execute();
			rs=pstmt.getResultSet();
			if(rs.next()){
				tempXml.append(gen.writeValueOf("ProcessName", rs.getString("ProcessName")));
				String docGenerationDate =rs.getString("CurrentDate");
				docGenerationDate = new SimpleDateFormat("dd/MMM/yyyy HH:mm:ss", Locale.US).format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss" , Locale.US).parse(docGenerationDate));
				tempXml.append(gen.writeValueOf("DocumentGenerationDate",docGenerationDate));
			}
			if(rs!=null){
				rs.close();
				rs=null;
			}
			if(pstmt!=null){
				pstmt.close();
				pstmt=null;
			}
			pstmt = con.prepareStatement("select AssociatedFieldName as CaseManager , ActionDateTime as CaseAssignedTime from WFCurrentRouteLogTable where "
					+ "processinstanceid=? and workitemid = ? and actionid= ? order by ActionDateTime desc");
			WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
			pstmt.setInt(2,workItemId);
			pstmt.setInt(3,WFSConstant.WFL_WorkItemReassigned);
			pstmt.execute();
			rs = pstmt.getResultSet();
			tempXml.append("<CaseManagers>");
			String lastFromDate = null;
			if(rs.next()){
				tempXml.append("<CaseManager>");
				currentCaseManager= rs.getString("CaseManager");
				caseManagerName= rs.getString("CaseManager");
				tempXml.append(gen.writeValueOf("Name", WFSUtil.getFullUserName(con, dbType, engine, currentCaseManager)));
				lastFromDate = rs.getString("CaseAssignedTime");
				lastFromDate = new SimpleDateFormat("dd/MMM/yyyy HH:mm:ss", Locale.US).format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss" , Locale.US).parse(lastFromDate));
				
				tempXml.append(gen.writeValueOf("FromDate", lastFromDate ));
				tempXml.append(gen.writeValueOf("ToDate","Present"));
				tempXml.append("</CaseManager>");
				
			}
			while (rs.next()){
				tempXml.append("<CaseManager>");
				String caseManager  =rs.getString("CaseManager");
				tempXml.append(gen.writeValueOf("Name", WFSUtil.getFullUserName(con, dbType, engine, caseManager)));
				String fromDate = rs.getString("CaseAssignedTime");
				fromDate = new SimpleDateFormat("dd/MMM/yyyy HH:mm:ss", Locale.US).format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss" , Locale.US).parse(fromDate));
				tempXml.append(gen.writeValueOf("FromDate", fromDate));
				tempXml.append(gen.writeValueOf("ToDate",lastFromDate));
				lastFromDate = fromDate;
				tempXml.append("</CaseManager>");
			}
			tempXml.append("</CaseManagers>");
			if (rs != null) {
				rs.close();
				rs = null;
			} 
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
			 /* Query for Case Exit time :select ActionDateTime as CaseExitTime  from wfcURRENTROUTELOGTABLE
  where ProcessInstanceId = 'CaseAgain-0000000017-process' and workitemid = 1 and actionid= 27 and ActivityId = 3 
			  */
			pstmt = con.prepareStatement("select ActionDateTime as CaseExitTime  from WFCurrentRouteLogTable"
					+ "  where ProcessInstanceId = ? and workitemid = ? and actionid= ? and ActivityId = ? ");
			WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
			pstmt.setInt(2,workItemId);
			pstmt.setInt(3,WFSConstant.WFL_WorkItemCompleted);
			pstmt.setInt(4,activityId);
			pstmt.execute();
			rs = pstmt.getResultSet();
			if(rs.next()){
				String exitTime = rs.getString("CaseExitTime");
				exitTime = new SimpleDateFormat("dd/MMM/yyyy HH:mm:ss", Locale.US).format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss" , Locale.US).parse(exitTime));
				
				tempXml.append(gen.writeValueOf("CaseExitTime", exitTime));
			}
			
			if (rs != null) {
				rs.close();
				rs = null;
			} 
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
			pstmt = con.prepareStatement("select ActionDateTime as CaseEntryTime  from WFCurrentRouteLogTable"
					+ "  where ProcessInstanceId = ? and workitemid = ? and actionid= ? and AssociatedFieldId = ? ");
			WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
			pstmt.setInt(2,workItemId);
			pstmt.setInt(3,WFSConstant.WFL_ProcessInstanceRouted);
			pstmt.setInt(4,activityId);
			pstmt.execute();
			rs = pstmt.getResultSet();
			if(rs.next()){
				String entryDateTime = rs.getString("CaseEntryTime");
				entryDateTime = new SimpleDateFormat("dd/MMM/yyyy HH:mm:ss", Locale.US).format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss" , Locale.US).parse(entryDateTime));
				
				tempXml.append(gen.writeValueOf("CaseEntryDateTime", entryDateTime));
			}  
			if (rs != null) {
				rs.close();
				rs = null;
			} 
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
			
			tempXml.append("\n<CaseVisualization>");
			pstmt = con.prepareStatement("Select TaskId,TaskName from ActivityInterfaceAssocTable a inner join WFTaskDefTable b "+ 
        			" on a.processdefid = b.processdefid "+ 
        			" and a.Interfacetype = ? " +
        			" and a.InterfaceElementId =b.TaskId " +   
        			" where a.processdefid =? and a.activityid =? union " +
        		    " Select TaskId,TaskName from RTActivityInterfaceAssocTable a inner join "+  
        			" WFTaskDefTable b  on a.processdefid = b.processdefid  and a.Interfacetype = ?"+  
        			" and a.InterfaceElementId =b.TaskId" +
        			" where a.processinstanceid= ? and a.workitemid =?"+ 
        			" and a.activityid =?"+
        			" order by taskid  " );
        			pstmt.setString(1,"J");
                    pstmt.setInt(2,processDefId);
                	pstmt.setInt(3, activityId);
                	pstmt.setString(4,"J");
                    pstmt.setString(5,processInstanceId);
                	pstmt.setInt(6, workItemId);
                	pstmt.setInt(7, activityId);
                	rs = pstmt.executeQuery();
                	while(rs.next()){
                		int taskId =rs.getInt("TaskId"); 
                		String TaskName = rs.getString("TaskName");
                		allTaskList.add(taskId); 
                		uninitiatedTaskList.add(taskId);
                		taskNameMap.put(taskId , TaskName);
                		/*if(!(initiatedTaskList.contains(taskId)||(completedTaskList.contains(taskId)))){
                			if(uninitiatedTaskList.isEmpty()){
                				uninitiatedTaskXml.append("<UninitiatedTasks>");
                			}
                			uninitiatedTaskList.add(taskId);

                			uninitiatedTaskXml.append("<UninitiatedTask>");
                			uninitiatedTaskXml.append(gen.writeValue("TaskId", String.valueOf(taskId)));
                			uninitiatedTaskXml.append(gen.writeValue("TaskName", rs.getString("TaskName")));
                			uninitiatedTaskXml.append("</UninitiatedTask>");
                		}*/
                	}
        	
            if(rs != null){
            	rs.close();
            	rs = null;
            }
            if(pstmt != null){
            	pstmt.close();
            	pstmt = null;
            }
        	pstmt = con.prepareStatement("Select TaskId,SubTaskId,TaskStatus,DueDate,ActionDateTime,AssignedTo from WFTaskStatusTable where processinstanceid = ? and workitemid = ? and activityid=?");
        	WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
        	pstmt.setInt(2, workItemId);
        	pstmt.setInt(3, activityId);
        	rs = pstmt.executeQuery();
        	while(rs.next()){
        		int status = rs.getInt("TaskStatus");
        		if(status ==WFSConstant.WF_TaskCompleted){
        			int completedTaskId = rs.getInt("TaskId");
        			int completedSubTaskId = rs.getInt("SubTaskId");
        			if(completedTaskList.isEmpty()){
        				completedTaskXml.append("<CompletedTasks>");
        			}
        			completedTaskList.add(completedTaskId);
        			completedTaskXml.append("<CompletedTask>");
        			completedTaskXml.append(gen.writeValue("TaskId", String.valueOf(completedTaskId)));
        			completedTaskXml.append(gen.writeValue("SubTaskId", String.valueOf(completedSubTaskId)));
        			completedTaskXml.append(gen.writeValue("TaskName", taskNameMap.get(completedTaskId)));
    				String dueDate = rs.getString("DueDate");
    				dueDate = new SimpleDateFormat("dd/MMM/yyyy HH:mm:ss", Locale.US).format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss" , Locale.US).parse(dueDate));

        			
        			completedTaskXml.append(gen.writeValue("DueDate",dueDate));
    				String completedDate = rs.getString("ActionDateTime");
    				completedDate = new SimpleDateFormat("dd/MMM/yyyy HH:mm:ss", Locale.US).format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss" , Locale.US).parse(completedDate));
        			completedTaskXml.append(gen.writeValue("CompletedDateTime", completedDate));
        			completedTaskXml.append(gen.writeValue("AssignedTo", WFSUtil.getFullUserName(con, dbType, engine, rs.getString("AssignedTo"))));
        			completedTaskXml.append("</CompletedTask>");
        			uninitiatedTaskList.remove(completedTaskId);
        		} else if(status ==WFSConstant.WF_TaskRevoked){
        			int revokedTaskId = rs.getInt("TaskId");
        			int revokedSubTaskId = rs.getInt("SubTaskId");
        			if(completedTaskList.isEmpty()){
        				completedTaskXml.append("<CompletedTasks>");
        			}
        			completedTaskList.add(revokedTaskId);
        			completedTaskXml.append("<RevokedTask>");
        			completedTaskXml.append(gen.writeValue("TaskId", String.valueOf(revokedTaskId)));
        			completedTaskXml.append(gen.writeValue("SubTaskId", String.valueOf(revokedSubTaskId)));
        			completedTaskXml.append(gen.writeValue("TaskName", taskNameMap.get(revokedTaskId)));
        			String revokedDateTime = rs.getString("ActionDateTime");
        			revokedDateTime= new SimpleDateFormat("dd/MMM/yyyy HH:mm:ss", Locale.US).format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss" , Locale.US).parse(revokedDateTime));
        			
        			completedTaskXml.append(gen.writeValue("RevokedDate", revokedDateTime));
        			String revokedFromUserName = WFSUtil.getRevokedFromUser(con, parser, dbType, engine, processDefId, processInstanceId, workItemId, activityId, revokedTaskId, revokedSubTaskId);
        			completedTaskXml.append(gen.writeValue("AssignedTo", "{" + WFSUtil.getFullUserName(con, dbType, engine, revokedFromUserName) + "}"));
        			completedTaskXml.append("</RevokedTask>");
        			uninitiatedTaskList.remove(revokedTaskId);
        		} else if(status ==WFSConstant.WF_TaskInitiated){
        			int initiatedTaskId = rs.getInt("TaskId");
        			int initiatedSubTaskId = rs.getInt("SubTaskId");
        			if(completedTaskList.isEmpty()){
        				completedTaskXml.append("<CompletedTasks>");
        			}
        			completedTaskList.add(initiatedTaskId);
        			completedTaskXml.append("<InitiatedTask>");
        			completedTaskXml.append(gen.writeValue("TaskId", String.valueOf(initiatedTaskId)));
        			completedTaskXml.append(gen.writeValue("SubTaskId", String.valueOf(initiatedSubTaskId)));
        			completedTaskXml.append(gen.writeValue("TaskName", taskNameMap.get(initiatedTaskId)));
        			String initiatedDateTime = rs.getString("ActionDateTime");
        			initiatedDateTime = new SimpleDateFormat("dd/MMM/yyyy HH:mm:ss", Locale.US).format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss" , Locale.US).parse(initiatedDateTime ));
        			
        			completedTaskXml.append(gen.writeValue("InitiatedDate", initiatedDateTime));
        			completedTaskXml.append(gen.writeValue("AssignedTo", WFSUtil.getFullUserName(con, dbType, engine, rs.getString("AssignedTo"))));
        			completedTaskXml.append("</InitiatedTask>");
        			uninitiatedTaskList.remove(initiatedTaskId);
        		}
        	}
        	
        	if(!completedTaskList.isEmpty()){
				completedTaskXml.append("</CompletedTasks>");
				tempXml.append(completedTaskXml.toString());
			}
			/*if(!initiatedTaskList.isEmpty()){
				initiatedTaskXml.append("</InitiatedTasks>");
				tempXml.append(initiatedTaskXml.toString());
			}*/
        	if(rs != null){
            	rs.close();
            	rs = null;
            }
            if(pstmt != null){
            	pstmt.close();
            	pstmt = null;
            }
			if(!uninitiatedTaskList.isEmpty()){
				uninitiatedTaskXml.append("<UninitiatedTasks>");
				Iterator<Integer> iterator = uninitiatedTaskList.iterator();
				while(iterator.hasNext()){
					int uninitiatedTaskId  =iterator.next();
					uninitiatedTaskXml.append("<UninitiatedTask>");
        			uninitiatedTaskXml.append(gen.writeValue("TaskId", String.valueOf(uninitiatedTaskId)));
        			uninitiatedTaskXml.append(gen.writeValue("TaskName", taskNameMap.get(uninitiatedTaskId)));
        			uninitiatedTaskXml.append("</UninitiatedTask>");
				}
				uninitiatedTaskXml.append("</UninitiatedTasks>");
				tempXml.append(uninitiatedTaskXml.toString());
			}
			tempXml.append("</CaseVisualization>\n");
			tempXml.append("</CaseDetails>\n");
			tempXml.append("<CaseMembers>\n");
			pstmt = con.prepareStatement("select AssignedTo, CanInitiate  from WFTaskStatusTable where ProcessInstanceId = ? and workitemid = ? and ActivityId = ? order by CanInitiate desc"); // check activity check
			WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
			pstmt.setInt(2,workItemId);
			pstmt.setInt(3,activityId);
			pstmt.execute();
			rs = pstmt.getResultSet();
			HashSet<String> assignedToSet = new HashSet<String>(); 
			while(rs.next()){
				
				String assignedTo =rs.getString(1) ; 
				String canInitiate=rs.getString(2) ; 
				if((assignedTo  != null && !assignedTo .equals(""))&&(!assignedToSet.contains(assignedTo))){
					tempXml.append("<CaseMember>");
					tempXml.append(gen.writeValueOf("MemberName", assignedTo));
					//If the current user is case manager too, then set member type as case manager- Bug#75815
					if(caseManagerName != null && caseManagerName.equalsIgnoreCase(assignedTo)){
						tempXml.append(gen.writeValueOf("MemberType", "Case Manager"));
					}else{
						if(canInitiate.equalsIgnoreCase("Y")){
							tempXml.append(gen.writeValueOf("MemberType", "Case Worker"));
						}else{
							tempXml.append(gen.writeValueOf("MemberType", "Case Participant"));
						}
					}
					tempXml.append("</CaseMember>");
				}
				assignedToSet .add(assignedTo);

			}
			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
			tempXml.append("\n</CaseMembers>\n");
		/*	tempXml.append("<CaseForm>");
			tempXml.append(WFSUtil.fetchAttributesExt(con, processDefId, activityId, processInstanceId, workItemId, "", engine, dbType, gen, "", false, false, 0));
			tempXml.append("\n</CaseForm>\n");*/
			tempXml.append("<CaseDocuments>");
			// Query to fetch document :: select Name from PDBDocument where DocumentIndex in (select DocumentIndex from PDBDocumentContent where ParentFolderIndex in (select VAR_REC_1 from WFINSTRUMENTTABLE where ProcessInstanceID ='MobileProcess~`!@$-0000000000001-process') )
			StringBuilder wfGetDocumentListXML  = new StringBuilder();
			String wfGetDocumentListResult = "";
			wfGetDocumentListXML.append("<?xml version=\"1.0\"?><NGOGetDocumentListExt_Input><Option>NGOGetDocumentListExt</Option>");
            wfGetDocumentListXML.append("<CabinetName>" + engine + "</CabinetName>");
            wfGetDocumentListXML.append("<UserDBId>" + dmsSessionID  + "</UserDBId>");
            wfGetDocumentListXML.append("<FolderIndex>" +  folderIndex  + "</FolderIndex>");
            wfGetDocumentListXML.append("<NoOfRecordsToFetch>" +  1000   + "</NoOfRecordsToFetch>");
            wfGetDocumentListXML.append("<OrderBy>5</OrderBy>");
            wfGetDocumentListXML.append("<SortOrder>A</SortOrder>");
            wfGetDocumentListXML.append("<ISDocFlag>N</ISDocFlag>");
            wfGetDocumentListXML.append("<DataAlsoFlag>N</DataAlsoFlag>");                
            wfGetDocumentListXML.append("<ClientSite>1</ClientSite>");    
            wfGetDocumentListXML.append("</NGOGetDocumentListExt_Input>");   
            parser1 = new XMLParser(wfGetDocumentListXML.toString());
			wfGetDocumentListResult =  WFFindClass.getReference().execute("NGOGetDocumentListExt", engine, con, parser1,gen);
			//Add these documents in <DocumentName> tag in Arraylist 
			XMLParser getDocumentListOutput = new XMLParser(wfGetDocumentListResult.toString());
			//tempXml.append("<Documents>");
			tempXml.append(getDocumentListOutput.getValueOf("Documents"));
			//tempXml.append("</Documents>");
			tempXml.append("</CaseDocuments>\n");
			pstmt = con.prepareStatement("Select DocumentIndex, ISIndex,TaskId,SubTaskId from WFCaseDocStatusTable " +WFSUtil.getTableLockHintStr(dbType) + " "
					+ "where processinstanceid = ? and workitemid = ? and activityid = ? ");
			WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
			pstmt.setInt(2, workItemId);
			pstmt.setInt(3,activityId);
			rs=pstmt.executeQuery();
			tempXml.append("<TaskDocuments>");
			while(rs.next()){
				tempXml.append("<TaskDocument>");
				String documentIndex = rs.getString("DocumentIndex");
				 int taskId = rs.getInt("TaskId");
				 String taskName = taskNameMap.get(taskId);
				 tempXml.append(gen.writeValueOf("DocumentIndex",documentIndex));
			     tempXml.append(gen.writeValueOf("AddedAt",taskName));
			     tempXml.append("</TaskDocument>");

			}
			tempXml.append("</TaskDocuments>");
			tempXml.append("</CaseData>\n");
			//task data
			tempXml.append("<TaskData>\n");
			pstmt = con.prepareStatement("select A.TaskName,A.Goal,A.Instructions,B.InitiatedDateTime,B.InitiatedBy ,A.CompletionTime,A.CompletedBy,A.DueDate, A.TaskId, A.SubTaskId from " + 
					"(select a.TaskName,a.Goal,a.Instructions,b.ActionDatetime CompletionTime,b.DueDate,b.AssignedTo CompletedBy, b.TaskId,b.SubTaskId " +
					"from WFTaskDefTable a inner join  WFTaskStatusTable b  on  a.TaskId=b.TaskId and a.ProcessDefId=b.ProcessDefId " +
					"where b.ProcessInstanceId= ? and workitemid = ? and b.ActivityId= ? and b.TaskStatus= ?  ) A  inner join   (  select A.TaskId,A.SubTaskId, " +
					"A.ActionDatetime as InitiatedDateTime,A.UserName as InitiatedBy from (select TaskId,SubTaskId,ActionDatetime,UserName from " +
					"WFCURRENTROUTELOGTABLE  where ProcessInstanceId= ? and Workitemid = ? and ActivityId= ? and ActionId= ? ) A inner join (select TaskId,SubTaskId, " +
					"max(ActionDatetime) Actiondatetime from WFCURRENTROUTELOGTABLE  where ProcessInstanceId= ? and Workitemid = ? and ActivityId= ? and ActionId= ?  " +
			"group by TaskId,SubTaskId) B on  A.TaskId=B.TaskId and A.SubTaskId= B.SubTaskId and A.ActionDatetime=B.Actiondatetime ) B on  A.TaskId=B.TaskId and A.SubTaskId= B.SubTaskId ");
			WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
			pstmt.setInt(2,workItemId);
			pstmt.setInt(3,activityId);
			pstmt.setInt(4,3);
			WFSUtil.DB_SetString(5, processInstanceId, pstmt, dbType);
			pstmt.setInt(6,workItemId);
			pstmt.setInt(7,activityId);
			pstmt.setInt(8,701);
			WFSUtil.DB_SetString(9, processInstanceId, pstmt, dbType);
			pstmt.setInt(10,workItemId);
			pstmt.setInt(11,activityId);
			pstmt.setInt(12,701);
			pstmt.execute();
			rs = pstmt.getResultSet();
			int noOfCompletedTasks = 0;
			while(rs.next()){
				if(noOfCompletedTasks==0){
					tempXml.append("<CompletedTask>\n");	
				}
				noOfCompletedTasks++;
				tempXml.append("<TaskDetails>\n");
				tempXml.append(gen.writeValueOf("TaskName", rs.getString(1)));
				//Bug 83485
				tempXml.append(gen.writeValueOf("Goal", WFSUtil.handleSpecialCharInXml(rs.getString(2), false)));
				tempXml.append(gen.writeValueOf("Instructions", WFSUtil.handleSpecialCharInXml(rs.getString(3), false)));
				tempXml.append(gen.writeValueOf("TaskInitiatedBy", "System".equalsIgnoreCase(rs.getString(5))?"System":WFSUtil.getFullUserName(con, dbType, engine, rs.getString(5))));
				tempXml.append(gen.writeValueOf("TaskAssignedTo", "System".equalsIgnoreCase(rs.getString(7))?"System":WFSUtil.getFullUserName(con, dbType, engine, rs.getString(7))));
				String initiatedOn =  rs.getString(4);
				initiatedOn = new SimpleDateFormat("dd/MMM/yyyy HH:mm:ss", Locale.US).format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss" , Locale.US).parse(initiatedOn));
				tempXml.append(gen.writeValueOf("TaskInitiatedOn", initiatedOn));
				String taskDueDate =  rs.getString(8);
				taskDueDate = new SimpleDateFormat("dd/MMM/yyyy HH:mm:ss", Locale.US).format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss" , Locale.US).parse(taskDueDate));
				tempXml.append(gen.writeValueOf("TaskDueDate", taskDueDate));
				String taskCompletionDate =  rs.getString(6);
				taskCompletionDate = new SimpleDateFormat("dd/MMM/yyyy HH:mm:ss", Locale.US).format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss" , Locale.US).parse(taskCompletionDate));
				tempXml.append(gen.writeValueOf("TaskCompletionDate", taskCompletionDate));
				tempXml.append("<TaskForm>");
            	inputXML= CreateXML.WFGetTemplateForTask(engine, sessionID, processInstanceId, workItemId, processDefId, activityId, rs.getInt(9), rs.getInt(10)).toString();
                parser1.setInputXML(inputXML);
                output = WFFindClass.getReference().execute("WFGetTemplateForTask", engine, con, parser1, generator);
                
                parser1.setInputXML(output);
                mainCodeInternal = Integer.parseInt(parser1.getValueOf("MainCode", null, false));
                if(mainCodeInternal == 0){
                	tempXml.append(WFSUtil.handleSpecialCharInXml(parser1.getValueOf("TemplateFields"), false));
                }
                tempXml.append("</TaskForm>");
				//Bug 83485
                String instructions= parser1.getValueOf("Instruction");
                instructions= WFSUtil.handleSpecialCharInXml(instructions, false);
            	tempXml.append(gen.writeValueOf("Instruction", instructions));
            	tempXml.append(gen.writeValueOf("Goal", WFSUtil.handleSpecialCharInXml(parser1.getValueOf("Goal"), false)));
				tempXml.append("<TaskDocuments>");
				pstmt1 = con.prepareStatement("select InterfaceId, Attribute  from WFRTTaskInterfaceAssocTable where ProcessInstanceId = ? and WorkItemId = ? and ActivityId = ? and TaskId = ? and InterfaceType = ? ");
				WFSUtil.DB_SetString(1, processInstanceId, pstmt1, dbType);
				pstmt1.setInt(2,workItemId);
				pstmt1.setInt(3,activityId);
				pstmt1.setInt(4,rs.getInt(9));
				WFSUtil.DB_SetString(5, "D", pstmt1, dbType);
				pstmt1.execute();
				rs1 = pstmt1.getResultSet();
				while(rs1.next()){
					tempXml.append(gen.writeValueOf("InterfaceId", rs1.getString(1)));	
					tempXml.append(gen.writeValueOf("Attribute", rs1.getString(2)));
				}
				tempXml.append("</TaskDocuments>");
				if (rs1 != null) {
					rs1.close();
					rs1 = null;
				}
				if (pstmt1 != null) {
					pstmt1.close();
					pstmt1 = null;
				}
				tempXml.append("</TaskDetails>\n");
			}
			if(noOfCompletedTasks>0){
				tempXml.append("</CompletedTask>\n");
			}
			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
			pstmt = con.prepareStatement("select a.TaskName,b.ActionDatetime InitiatedDateTime,b.DueDate,b.InitiatedBy InitiatedBy,b.AssignedTo, b.TaskId,b.SubTaskId " +
					"from WFTaskDefTable a inner join  WFTaskStatusTable b  on  a.TaskId=b.TaskId and a.ProcessDefId=b.ProcessDefId " +
					"where b.ProcessInstanceId= ? and workitemid = ? and b.ActivityId= ? and b.TaskStatus= ?  ");
			WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
			pstmt.setInt(2,workItemId);
			pstmt.setInt(3,activityId);
			pstmt.setInt(4,WFSConstant.WF_TaskInitiated);
			pstmt.execute();
			rs = pstmt.getResultSet();
			int noOfInitiatedTasks = 0;
			while(rs.next()){
				if(noOfInitiatedTasks==0){
					tempXml.append("<InitiatedTask>\n");	
				}
				noOfCompletedTasks++;
				tempXml.append("<TaskDetails>\n");
				tempXml.append(gen.writeValueOf("TaskName", rs.getString(1)));
				String initiatedOn =  rs.getString(2);
				initiatedOn = new SimpleDateFormat("dd/MMM/yyyy HH:mm:ss", Locale.US).format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss" , Locale.US).parse(initiatedOn));
				tempXml.append(gen.writeValueOf("TaskInitiatedOn", initiatedOn));
				String taskDueDate =  rs.getString(3);
				taskDueDate = new SimpleDateFormat("dd/MMM/yyyy HH:mm:ss", Locale.US).format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss" , Locale.US).parse(taskDueDate));
				tempXml.append(gen.writeValueOf("TaskDueDate", taskDueDate));

				tempXml.append(gen.writeValueOf("TaskInitiatedBy","System".equalsIgnoreCase(rs.getString(4))?"System": WFSUtil.getFullUserName(con, dbType, engine, rs.getString(4))));
				tempXml.append(gen.writeValueOf("TaskAssignedTo", "System".equalsIgnoreCase(rs.getString(5))?"System":WFSUtil.getFullUserName(con, dbType, engine, rs.getString(5))));
				tempXml.append("<TaskForm>");
            	inputXML= CreateXML.WFGetTemplateForTask(engine, sessionID, processInstanceId, workItemId, processDefId, activityId, rs.getInt(6), rs.getInt(7)).toString();
                parser1.setInputXML(inputXML);
                output = WFFindClass.getReference().execute("WFGetTemplateForTask", engine, con, parser1, generator);
                
                parser1.setInputXML(output);
                mainCodeInternal = Integer.parseInt(parser1.getValueOf("MainCode", null, false));
                if(mainCodeInternal == 0){
                	tempXml.append(WFSUtil.handleSpecialCharInXml(parser1.getValueOf("TemplateFields"), false));
                }
                tempXml.append("</TaskForm>");
            	tempXml.append(gen.writeValueOf("Instruction", WFSUtil.handleSpecialCharInXml(parser1.getValueOf("Instruction"), false)));
            	tempXml.append(gen.writeValueOf("Goal", WFSUtil.handleSpecialCharInXml(parser1.getValueOf("Goal"), false)));
/*				tempXml.append("<TaskDocuments>");
				pstmt1 = con.prepareStatement("select InterfaceId, Attribute  from WFRTTaskInterfaceAssocTable where ProcessInstanceId = ? and WorkItemId = ? and ActivityId = ? and TaskId = ? and InterfaceType = ? ");
				WFSUtil.DB_SetString(1, processInstanceId, pstmt1, dbType);
				pstmt1.setInt(2,workItemId);
				pstmt1.setInt(3,activityId);
				pstmt1.setInt(4,rs.getInt(9));
				WFSUtil.DB_SetString(5, "D", pstmt1, dbType);
				pstmt1.execute();
				rs1 = pstmt1.getResultSet();
				while(rs1.next()){
					tempXml.append(gen.writeValueOf("InterfaceId", rs1.getString(1)));	
					tempXml.append(gen.writeValueOf("Attribute", rs1.getString(2)));
				}
				tempXml.append("</TaskDocuments>");
*/				if (rs1 != null) {
					rs1.close();
					rs1 = null;
				}
				if (pstmt1 != null) {
					pstmt1.close();
					pstmt1 = null;
				}
				tempXml.append("</TaskDetails>\n");
			}
			if(noOfCompletedTasks>0){
				tempXml.append("</InitiatedTask>\n");
			}
			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}


			int noOfRevokedTasks = 0;
			
			pstmt = con.prepareStatement("select a.TaskName,a.Scope,b.assignedBy,b.actionDateTime,b.TaskId,b.SubTaskId from WFTaskDefTable a inner join  WFTaskStatusTable b  on  a.TaskId=b.TaskId and " +
			" a.ProcessDefId=b.ProcessDefId  where b.ProcessInstanceId= ?  and workitemid= ? and ActivityId = ? and b.TaskStatus= ?  ");
			WFSUtil.DB_SetString(1, processInstanceId, pstmt, dbType);
			pstmt.setInt(2,workItemId);
			pstmt.setInt(3,activityId);
			pstmt.setInt(4,4);
			pstmt.execute();
			rs = pstmt.getResultSet();
			while(rs.next()){
				if(noOfRevokedTasks ==0){
					tempXml.append("<RevokedTask>\n"); 
				}
				int taskId = rs.getInt("TaskId");
				int subTaskId = rs.getInt("SubTaskId");
				noOfRevokedTasks++;
				tempXml.append("<TaskDetails>\n");
				tempXml.append(gen.writeValueOf("TaskName", rs.getString(1)));
				tempXml.append(gen.writeValueOf("TaskType", rs.getString(2).equalsIgnoreCase("U")? "Run Time" : "Design Time"));
				tempXml.append(gen.writeValueOf("RevokedBy", WFSUtil.getFullUserName(con, dbType, engine, rs.getString(3))));
				tempXml.append(gen.writeValueOf("Comments", WFSUtil.getTaskActionComments(con, parser, dbType, engine, processInstanceId, workItemId, activityId, taskId, subTaskId, WFSConstant.CONST_COMMENTS_TASK_REVOKED)));
				String taskrevokedDate = rs.getString(4);
				taskrevokedDate = new SimpleDateFormat("dd/MMM/yyyy HH:mm:ss", Locale.US).format(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss" , Locale.US).parse(taskrevokedDate ));
	
				tempXml.append(gen.writeValueOf("RevokedDateTime",taskrevokedDate));

				tempXml.append("</TaskDetails>\n");
			}
			if(noOfRevokedTasks>0){
				tempXml.append("</RevokedTask>\n"); 
			}
			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
			int noOfUninitiatedTasks= 0;
			pstmt = con.prepareStatement("select a.TaskName,a.Scope from WFTaskDefTable a inner join   (select InterfaceElementId,processdefid from ACTIVITYINTERFACEASSOCTABLE " +
					" where  processdefid= ? and InterfaceType= ? and ActivityId= ? union select interfaceElementid,processdefid from  RTActivityInterfaceAssocTable where " +
					" ProcessInstanceId= ? and WorkItemId= ? and InterfaceType= ? and ActivityId= ? )  b on  a.TaskId=b.InterfaceElementId and a.processdefid = b.processdefid " +
			" where a.TaskId not in (select distinct(TaskId) from WFTaskStatusTable where ProcessInstanceId= ?  and WorkItemId= ? and ActivityId= ?  )");
			pstmt.setInt(1,processDefId);
			WFSUtil.DB_SetString(2, "J", pstmt, dbType);
			pstmt.setInt(3,activityId);
			WFSUtil.DB_SetString(4, processInstanceId, pstmt, dbType);
			pstmt.setInt(5,workItemId);
			WFSUtil.DB_SetString(6, "J", pstmt, dbType);
			pstmt.setInt(7,activityId);
			WFSUtil.DB_SetString(8, processInstanceId, pstmt, dbType);
			pstmt.setInt(9,workItemId);
			pstmt.setInt(10,activityId);
			pstmt.execute();
			rs = pstmt.getResultSet();
			while(rs.next()){
				if(noOfUninitiatedTasks==0){
					tempXml.append("<UnInitiatedTask>\n");
				}
				noOfUninitiatedTasks++;
				tempXml.append("<TaskDetails>\n");
				tempXml.append(gen.writeValueOf("TaskName", rs.getString(1)));
				tempXml.append(gen.writeValueOf("TaskType", rs.getString(2).equalsIgnoreCase("U")? "Run Time" : "Design Time"));
				tempXml.append("</TaskDetails>\n");
			}
			if(noOfUninitiatedTasks>0){
				tempXml.append("</UnInitiatedTask>\n");
			}
			tempXml.append("</TaskData>\n");

			tempXml.append("</CaseSummaryData>\n");

			if(rs != null){
            	rs.close();
            	rs = null;
            }
            if(pstmt != null){
            	pstmt.close();
            	pstmt = null;
            }
		} else {
			mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
			subCode = 0;
			subject = WFSErrorMsg.getMessage(mainCode);
			descr = WFSErrorMsg.getMessage(subCode);
			errType = WFSError.WF_TMP;
		}
		if (mainCode == 0) {
			outputXML = new StringBuffer(500);
			outputXML.append(gen.createOutputFile("WFGetCaseSummaryReport"));
			outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
			outputXML.append(tempXml);
			outputXML.append(gen.closeOutputFile("WFGetCaseSummaryReport"));
		}
	} catch (SQLException e) {
		WFSUtil.printErr("", e);
		mainCode = WFSError.WM_INVALID_FILTER;
		subCode = WFSError.WFS_SQL;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_FAT;
		if (e.getErrorCode() == 0) {
			if (e.getSQLState().equalsIgnoreCase("08S01")) {
				descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
			}
		} else {
			descr = e.getMessage();
		}
	} catch (NumberFormatException e) {
		WFSUtil.printErr("", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_ILP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (NullPointerException e) {
		WFSUtil.printErr("", e);
		//e.printStackTrace();
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_SYS;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (JTSException e) {
		WFSUtil.printErr("", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = e.getErrorCode();
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.getMessage();
	} catch (Exception e) {
		WFSUtil.printErr("", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (Error e) {
		WFSUtil.printErr("", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} finally {
		try {
			if (rs != null) {
				rs.close();
				rs = null;
			}
		} catch (Exception ignored) {
		}
		try {
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
		} catch (Exception e) {
		}

		try {
			if (!con.getAutoCommit()) {
				con.rollback();
				con.setAutoCommit(true);
			}
		} catch (SQLException ex) {
		}
		
	}
	if (mainCode != 0) {
		throw new WFSException(mainCode, subCode, errType, subject, descr);
	}
	return outputXML.toString();
}



//----------------------------------------------------------------------------------------------------
//Function Name 				:	WFSetCaseDocumentStatus
//Date Written (DD/MM/YYYY)		:	22/08/2017
//Author						:	Mohnish Chopra
//Input Parameters				:	Connection , XMLParser , XMLGenerator
//Output Parameters				:   none
//Return Values					:	String
//Description					:   Api to set case document status.
//----------------------------------------------------------------------------------------------------

public String WFSetCaseDocumentStatus(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException {

	String engine = null;
	 StringBuffer outputXML = new StringBuffer("");
	PreparedStatement pstmt = null;
	PreparedStatement pstmtNew = null;

	int mainCode = 0;
	int subCode = 0;
	String subject = null;
	String descr = null;
	String errType = WFSError.WF_TMP;
	ResultSet rs = null;
	StringBuffer tempXML = new StringBuffer();
	StringBuffer userVariables = new StringBuffer();
	int processDefId = 0;
	int activityId = 0;
	String processInstanceId = null;
	int workitemId= 0;
	int taskId= 0; 
	int subTaskId = 0; 
	boolean callTaskListThread=false;		
	int sessionID=0;
	try{
		sessionID = parser.getIntOf("SessionId", 0, false);
		engine = parser.getValueOf("EngineName", "", false);
		int dbType = ServerProperty.getReference().getDBType(engine);
		processInstanceId = parser.getValueOf("ProcessInstanceId","",false);
		workitemId = parser.getIntOf("WorkItemId", 0, false);
		processDefId = parser.getIntOf("ProcessDefId", 0, false);
		activityId = parser.getIntOf("ActivityId",0,false);
		taskId=parser.getIntOf("taskId", 0, true);
		subTaskId = parser.getIntOf("SubTaskId", 0, true);
		String docIndex = parser.getValueOf("DocumentIndex", "", false);
		String isIndex = parser.getValueOf("ISIndex", "", false);
		String docType = parser.getValueOf("DocType", "", true);
		
		WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
		if (participant != null) {
			if (con.getAutoCommit()) {
				con.setAutoCommit(false);
			}
			if(taskId>0){
			pstmtNew = con.prepareStatement("Insert into WFCaseDocStatusTable(ProcessInstanceId ,WorkItemId, ProcessDefId, ActivityId ,TaskId,SubTaskId,DocumentType,DocumentIndex, ISIndex,CompleteStatus ) "
					+ "values (?,?,?,?,?,?,?,?,?,?)");
				WFSUtil.DB_SetString(1, processInstanceId, pstmtNew, dbType);
				pstmtNew.setInt(2, workitemId);
				pstmtNew.setInt(3,processDefId );
				pstmtNew.setInt(4, activityId);
				pstmtNew.setInt(5, taskId);
				pstmtNew.setInt(6, subTaskId);
				WFSUtil.DB_SetString(7, docType, pstmtNew, dbType);
				WFSUtil.DB_SetString(8, docIndex, pstmtNew, dbType);
				WFSUtil.DB_SetString(9, isIndex, pstmtNew, dbType);
				WFSUtil.DB_SetString(10, "N", pstmtNew, dbType);
				pstmtNew.executeUpdate();
			}
			else{
				//Update precondition flag if condition is applied on document...If check is to be added..Mohnish..
		 		WFSUtil.updateWFTaskPreCheckTable( con,  processInstanceId,  workitemId ,activityId,"Y");
		 		callTaskListThread=true;
				

			}
			if (!con.getAutoCommit()) {
				con.commit();
				con.setAutoCommit(true);
			}

		}else{
			mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
			subCode = 0;
			subject = WFSErrorMsg.getMessage(mainCode);
			descr = WFSErrorMsg.getMessage(subCode);
			errType = WFSError.WF_TMP;
		} if(mainCode == 0){
			outputXML = new StringBuffer();
			outputXML.append(gen.createOutputFile("WFSetCaseDocumentStatus"));
			outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
			outputXML.append(gen.closeOutputFile("WFSetCaseDocumentStatus"));
		}


	}catch (SQLException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WM_INVALID_FILTER;
		subCode = WFSError.WFS_SQL;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_FAT;
		if (e.getErrorCode() == 0) {
			if (e.getSQLState().equalsIgnoreCase("08S01")) {
				descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
			}
		} else {
			descr = e.getMessage();
		}
	} catch (NumberFormatException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_ILP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (NullPointerException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_SYS;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (Exception e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (Error e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} finally {
		try {
			if (!con.getAutoCommit()) {
				con.rollback();
				con.setAutoCommit(true);
			}
		} catch (SQLException sqle) {
		}
		try {
			if (rs != null) {
				rs.close();
				rs = null;
			}
		} catch (SQLException sqle) {
		}
		try {
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
		} catch (Exception e) {
		}
		if(callTaskListThread){
        	WFSUtil.printOut(engine,"Calling TaskList thread starts");
        	ExecutorService executor = Executors.newFixedThreadPool(1);
        	Runnable worker = new WorkerThread(engine,"WFSetCaseDocumentStatus", processInstanceId, workitemId, activityId, sessionID,processDefId );
        	executor.execute(worker);
        	WFSUtil.printOut(engine,"Calling TaskList thread ends");
        }
		
	}
	if (mainCode != 0) {
		throw new WFSException(mainCode, subCode, errType, subject, descr);

	}
	return outputXML.toString();

}


//----------------------------------------------------------------------------------------------------
//Function Name 				:	WFChangeTaskProperty
//Date Written (DD/MM/YYYY) 	  :	21/08/2017
//Author					    :	Kumar Kimil
//Input Parameters				:	Connection , XMLParser , XMLGenerator
//Output Parameters				:   none
//Return Values						:	String
//Description				:       This Api updates The List of task to Mandatory/Optional
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------
/*
 * Input XML

<?xml version="1.0"?><WFChangeTaskProperty_Input>
<Option>WFChangeTaskProperty</Option>
<EngineName>ibps17may</EngineName>
<SessionId>-1318620086</SessionId>
<TaskList>
	<TaskInfo>
		<ProcessInstanceId>AccountOpening-0000000012-process</ProcessInstanceId>
		<ProcessDefId>227</ProcessDefId>
		<ActivityId>3</ActivityId>
		<WorkItemId>1</WorkItemId>
		<TaskId>18</TaskId>
		<IsMandatory>Y</IsMandatory>
	</TaskInfo>

	<TaskInfo>
		<ProcessInstanceId>AccountOpening-0000000012-process</ProcessInstanceId>
		<ProcessDefId>227</ProcessDefId>
		<ActivityId>3</ActivityId>
		<WorkItemId>1</WorkItemId>
		<TaskId>18</TaskId>
		<IsMandatory>N</IsMandatory>
	</TaskInfo>

</TaskList>
</WFChangeTaskProperty_Input>



Output-

<WFChangeTaskProperty_Output>
<Option>WFChangeTaskProperty</Option>
<Exception>
<MainCode>0</MainCode>
</Exception>
</WFChangeTaskProperty_Output>
*/

private String WFChangeTaskProperty(Connection con, XMLParser parser,
		XMLGenerator gen) throws WFSException {
	
	PreparedStatement pstmt = null;
	StringBuilder outputXML = new StringBuilder("");
	int mainCode = 0;
	int subCode = 0;
	String subject = null;
	String descr = null;
	String errType = WFSError.WF_TMP;
	String engine = parser.getValueOf("EngineName");
	

	
	try {
		int sessionID = parser.getIntOf("SessionId", 0, false);
		WFParticipant user = WFSUtil.WFCheckSession(con, sessionID); 
		
		if (user != null) {
			WFSUtil.changeTaskProperty(con,user,parser,gen);
		} 
		else {
			mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
			subCode = 0;
			subject = WFSErrorMsg.getMessage(mainCode);
			descr = WFSErrorMsg.getMessage(subCode);
			errType = WFSError.WF_TMP;
		}

		if (mainCode == 0) {

			if (!con.getAutoCommit()) {
				con.commit();
				con.setAutoCommit(true);
			}
			outputXML = new StringBuilder(500);
			outputXML.append(gen.createOutputFile("WFChangeTaskProperty"));
			outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
			outputXML.append(gen.closeOutputFile("WFChangeTaskProperty"));
		}

	}

	catch (SQLException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WM_INVALID_FILTER;
		subCode = WFSError.WFS_SQL;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_FAT;
		if (e.getErrorCode() == 0)
			if (e.getSQLState().equalsIgnoreCase("08S01"))
				descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
			else
				descr = e.getMessage();
	} catch (NumberFormatException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_ILP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (NullPointerException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_SYS;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (WFSException e) {
		mainCode = WFSError.WM_NO_MORE_DATA;
		subCode = 0;
		subject = WFSErrorMsg.getMessage(mainCode);
		descr = WFSErrorMsg.getMessage(subCode);
		errType = WFSError.WF_TMP;
	} catch (JTSException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = e.getErrorCode();
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.getMessage();
	} catch (Exception e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (Error e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} finally {
		try {
			if (!con.getAutoCommit()) {
				con.rollback();
				con.setAutoCommit(true);
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
		}
		try {
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
		} catch (Exception e) {}
		
	}
	if (mainCode != 0) {
		throw new WFSException(mainCode, subCode, errType, subject, descr);
	}
	return outputXML.toString();
}

/**
 * This method will set(add as well as remove) the Users and Groups that will work on a particular task for given ProcessDefID and ActivityID
 * @param con
 * @param parser
 * @param gen
 * @return
 * @throws JTSException
 * @throws WFSException
 * @author ambuj.tripathi
 */
public String WFSetTaskUserGroup(Connection con, XMLParser parser, XMLGenerator gen) throws WFSException{
	StringBuilder outputXML = new StringBuilder();
	PreparedStatement insertPS = null;
	PreparedStatement deletePS = null;
	int mainCode = 0;
	int subCode = 0;
	String subject = null;
	String descr = null;
	String errType = WFSError.WF_TMP;
	String engine = "";
	String option = "";
	try{
		int sessionID = parser.getIntOf("SessionId", 0, false);
		engine = parser.getValueOf("EngineName", "", false);
		option = parser.getValueOf("Option");
		WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
		int insertCount = 0;
		int deleteCount = 0;
		if (participant != null) {
			if(con.getAutoCommit()) {
				con.setAutoCommit(false);
			}
			
			int processDefId = parser.getIntOf("ProcessDefId", 0, false);
			int activityId = parser.getIntOf("ActivityId", 0, false);
			
			insertPS = con.prepareStatement("insert into WFTaskUserAssocTable(ProcessDefId, ActivityId, TaskId, UserId, AssociationType) values( ?, ?, ?, ?, ?)");
			deletePS = con.prepareStatement("delete from WFTaskUserAssocTable where ProcessDefId=? and ActivityId= ? and TaskId=? and userId=? and AssociationType = ?");

			XMLParser taskInfoParser = new XMLParser();
			XMLParser userInfoParser = new XMLParser();
			XMLParser groupInfoParser = new XMLParser();

			int totalTasksCount = parser.getNoOfFields("TaskInfo");
			for(int taskItr = 0; taskItr < totalTasksCount; taskItr++){
		        
				taskInfoParser.setInputXML((taskItr > 0)? parser.getNextValueOf("TaskInfo") : parser.getFirstValueOf("TaskInfo"));
				int taskId = taskInfoParser.getIntOf("TaskId", 0, false);
				int totalUsersCount = taskInfoParser.getNoOfFields("UserInfo");
				for(int userItr = 0; userItr < totalUsersCount; userItr++){
					userInfoParser.setInputXML((userItr > 0) ? taskInfoParser.getNextValueOf("UserInfo") : taskInfoParser.getFirstValueOf("UserInfo"));
					int userId = userInfoParser.getIntOf("Id", 0, false);
					String operation = userInfoParser.getValueOf("Operation", "", false);
					if("I".equalsIgnoreCase(operation)){
						insertCount++;
						insertPS.setInt(1, processDefId);
						insertPS.setInt(2, activityId);
						insertPS.setInt(3, taskId);
						insertPS.setInt(4, userId);
						insertPS.setInt(5, WFSConstant.USER_TYPE_ASSOCIATION);
						insertPS.addBatch();
					}else if("D".equalsIgnoreCase(operation)){
						deleteCount++;
						deletePS.setInt(1, processDefId);
						deletePS.setInt(2, activityId);
						deletePS.setInt(3, taskId);
						deletePS.setInt(4, userId);
						deletePS.setInt(5, WFSConstant.USER_TYPE_ASSOCIATION);
						deletePS.addBatch();
					}
				}
				
				int totalGroupsCount = taskInfoParser.getNoOfFields("GroupInfo");
				
				for(int groupItr = 0; groupItr < totalGroupsCount; groupItr++){
					groupInfoParser.setInputXML((groupItr > 0) ? taskInfoParser.getNextValueOf("GroupInfo") : taskInfoParser.getFirstValueOf("GroupInfo"));
					int userId = groupInfoParser.getIntOf("Id", 0, false);
					String operation = groupInfoParser.getValueOf("Operation", "", false);
					if("I".equalsIgnoreCase(operation)){
						insertCount++;
						insertPS.setInt(1, processDefId);
						insertPS.setInt(2, activityId);
						insertPS.setInt(3, taskId);
						insertPS.setInt(4, userId);
						insertPS.setInt(5, WFSConstant.GROUP_TYPE_ASSOCIATION);
						insertPS.addBatch();
					}else if("D".equalsIgnoreCase(operation)){
						deleteCount++;
						deletePS.setInt(1, processDefId);
						deletePS.setInt(2, activityId);
						deletePS.setInt(3, taskId);
						deletePS.setInt(4, userId);
						deletePS.setInt(5, WFSConstant.GROUP_TYPE_ASSOCIATION);
						deletePS.addBatch();
					}
				}
			}
			if(insertCount > 0){
				insertPS.executeBatch();
			}
			if(deleteCount > 0){
				deletePS.executeBatch();
			}
			if(insertPS != null){
				insertPS.close();
				insertPS = null;
			}
			if(deletePS != null){
				deletePS.close();
				deletePS = null;
			}
		}else{
			mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
			subCode = 0;
			subject = WFSErrorMsg.getMessage(mainCode);
			descr = WFSErrorMsg.getMessage(subCode);
			errType = WFSError.WF_TMP;
		}
		if(mainCode == 0){
	        if (!con.getAutoCommit()) {
	            con.commit();
	            con.setAutoCommit(true);
	        }
			outputXML.append(gen.createOutputFile("WFSetTaskUserGroup"));
			outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
			outputXML.append("<TotalRowsInserted>" + insertCount + "<TotalRowsInserted>\n");
			outputXML.append("<TotalRowsDeleted>" + deleteCount+ "<TotalRowsDeleted>\n");
			outputXML.append(gen.closeOutputFile("WFSetTaskUserGroup"));
		}
	}catch (SQLException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WM_INVALID_FILTER;
		subCode = WFSError.WFS_SQL;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_FAT;
		descr = e.getMessage();
	} catch (NumberFormatException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_ILP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (NullPointerException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_SYS;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (Exception e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} finally {
		try {
			if (!con.getAutoCommit()) {
				con.rollback();
				con.setAutoCommit(true);
			}
			if (deletePS != null) {
				deletePS.close();
				deletePS = null;
			}
			if (insertPS != null) {
				insertPS.close();
				insertPS = null;
			}
		} catch (Exception e) {
			WFSUtil.printErr(engine, "", e);
		}
		try {
			if (deletePS != null) {
				deletePS.close();
				deletePS = null;
			}
		} catch (Exception e) {
			WFSUtil.printErr(engine, "", e);
		}
		try {
			if (insertPS != null) {
				insertPS.close();
				insertPS = null;
			}
		} catch (Exception e) {
			WFSUtil.printErr(engine, "", e);
		}
		
	}
	if (mainCode != 0) {
		String errorString = WFSUtil.generalError(option, engine, gen, mainCode, subCode, errType, subject, descr);
		outputXML = new StringBuilder();			
		outputXML.append(errorString);
	}
	return outputXML.toString();
}

/**
 * This method fetches the list of the Tasks and corresp users List and Groups List for given ProcessDefID and ActivityID
 * @param con
 * @param parser
 * @param gen
 * @return
 * @throws JTSException
 * @throws WFSException
 * @author ambuj.tripathi
 */
public String WFGetTaskUserGroup(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException{
	StringBuilder outputXML = new StringBuilder();
	String engine = null;
	PreparedStatement pstmt = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	ResultSet rs1 = null;
	int mainCode = 0;
	int subCode = 0;
	String subject = null;
	String descr = null;
	String errType = WFSError.WF_TMP;
	String option = null;
	try{
		int sessionID = parser.getIntOf("SessionId", 0, false);
		engine = parser.getValueOf("EngineName", "", false);
		option = parser.getValueOf("Option");
		int dbType = ServerProperty.getReference().getDBType(engine);
		WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
		if (participant != null) {
			if(con.getAutoCommit()) {
				con.setAutoCommit(false);
			}
			
			int processDefId = parser.getIntOf("ProcessDefId", 0, false);
			int activityId = parser.getIntOf("ActivityId", 0, false);
			outputXML.append(gen.createOutputFile("WFGetTaskUserGroup"));
			outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>");
			outputXML.append("<TaskList>");
			pstmt = con.prepareStatement("select T.TaskId, T.TaskName, T.TaskType from ActivityInterfaceAssoctable A, Wftaskdeftable T where "
					+ "A.processdefid = ? and A.activityid =? and A.interfaceType =? and A.InterfaceElementId = T.TaskId and T.processdefid=?");
			pstmt.setInt(1, processDefId);
			pstmt.setInt(2, activityId);
			WFSUtil.DB_SetString(3, "J", pstmt, dbType);
			pstmt.setInt(4, processDefId);
			rs = pstmt.executeQuery();

			while(rs.next()){
				//Adding task level details 
				int taskId = rs.getInt("TaskId");
				String taskName = rs.getString("TaskName");
				int taskType = rs.getInt("TaskType");
				outputXML.append("<TaskInfo>");
				outputXML.append("<TaskId>" + taskId + "</TaskId>");
				outputXML.append("<TaskName>" + taskName + "</TaskName>");
				outputXML.append("<TaskType>" + taskType + "</TaskType>");
				
				//Adding the users list
				outputXML.append("<UserList>");
				stmt = con.prepareStatement("select A.UserId, U.UserName, U.PersonalName, U.FamilyName from WFTaskUserAssocTable A, WFUserView U "
						+ "where A.ProcessDefId = ? and A.ActivityId = ? and A.TaskId = ? and AssociationType = 0 and A.UserId = U.UserIndex");
				stmt.setInt(1, processDefId);
				stmt.setInt(2, activityId);
				stmt.setInt(3, taskId);
				rs1 = stmt.executeQuery();
				while(rs1.next()){
					int userId = rs1.getInt("UserId");
					String userName = rs1.getString("UserName");
					String personalName = rs1.getString("PersonalName");
					String familyName = rs1.getString("FamilyName");
					if(familyName == null){
						familyName = "";
					}
					outputXML.append("<UserInfo><Id>" + userId + "</Id><Name>" + personalName + " " + familyName + "</Name><UserName>" + userName + "</UserName></UserInfo>");
				}
				outputXML.append("</UserList><GroupList>");
				if (rs1 != null) {
					rs1.close();
					rs1 = null;
				}
				if (stmt != null) {
					stmt.close();
					stmt = null;
				}

				//Adding the groups list
				stmt = con.prepareStatement("select A.UserId, G.GroupName from WFTaskUserAssocTable A, wfgroupview G where A.ProcessDefId =? "
						+ " and A.ActivityId =? and A.TaskId =? and AssociationType =1 and A.UserId = G.groupindex");
				stmt.setInt(1, processDefId);
				stmt.setInt(2, activityId);
				stmt.setInt(3, taskId);
				
				rs1 = stmt.executeQuery();
				while(rs1.next()){
					int userId = rs1.getInt("UserId");
					String groupName = rs1.getString("GroupName");
					outputXML.append("<GroupInfo><Id>" + userId + "</Id><GroupName>" + groupName + "</GroupName></GroupInfo>");
				}
				outputXML.append("</GroupList></TaskInfo>");
				if (rs1 != null) {
					rs1.close();
					rs1 = null;
				}
				if (stmt != null) {
					stmt.close();
					stmt = null;
				}
			}
			outputXML.append("</TaskList>");
			outputXML.append(gen.closeOutputFile("WFGetTaskUserGroup"));
		}else{
			mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
			subCode = 0;
			subject = WFSErrorMsg.getMessage(mainCode);
			descr = WFSErrorMsg.getMessage(subCode);
			errType = WFSError.WF_TMP;
		}
	}catch (SQLException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WM_INVALID_FILTER;
		subCode = WFSError.WFS_SQL;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_FAT;
		descr = e.getMessage();
	} catch (NumberFormatException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_ILP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (NullPointerException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_SYS;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (Exception e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} finally {
		try{
			if(rs!=null){
				rs.close();
				rs=null;
			}
		}catch(Exception e){
			WFSUtil.printErr(engine,"", e);
		}
		try{
			if(rs1!=null){
				rs1.close();
				rs1=null;
			}
		}catch(Exception e){
			WFSUtil.printErr(engine,"", e);
		}
		try{
			if(stmt!=null){
				stmt.close();
				stmt=null;
			}
		}catch(Exception e){
			WFSUtil.printErr(engine,"", e);
		}
		try {
			if (pstmt != null && !pstmt.isClosed()) {
				pstmt.close();
				pstmt = null;
			}
		} catch (Exception ignored) {
			WFSUtil.printErr(engine, "", ignored);
		}
		
	}
	if (mainCode != 0) {
		String errorString = WFSUtil.generalError(option, engine, gen, mainCode, subCode, errType, subject, descr);
		outputXML = new StringBuilder();			
		outputXML.append(errorString);
	}
	return outputXML.toString();
}

/**
 * This API will set the Default users that are defined for the corresponding tasks.
 * @param con
 * @param parser
 * @param gen
 * @return 
 * @throws JTSException
 * @throws WFSException
 * @author ambuj.tripathi
 */
public String WFSetCasePreferences(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException{
	StringBuilder outputXML = new StringBuilder();
	String engine = null;
	PreparedStatement updatePS = null;
	PreparedStatement insertPS = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	int mainCode = 0;
	int subCode = 0;
	String subject = null;
	String descr = null;
	String errType = WFSError.WF_TMP;
	int updateCount = 0;
	int insertCount = 0;
	String option = null;
	try{
		int sessionID = parser.getIntOf("SessionId", 0, false);
		engine = parser.getValueOf("EngineName", "", false);
		option = parser.getValueOf("Option");
		int dbType = ServerProperty.getReference().getDBType(engine);
		WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
		if (participant != null) {
			if(con.getAutoCommit()) {
				con.setAutoCommit(false);
			}
			
			//Get the current list of tasks and its default users from WFDefaultTaskUser table
			Map<Integer, Integer> taskUserMap = new HashMap<Integer, Integer>();
			int processDefId = parser.getIntOf("ProcessDefId", 0, false);
			int activityId = parser.getIntOf("ActivityId", 0, false);
			int caseManagerId = participant.getid();	//Added for Bug#72218
			stmt = con.prepareStatement(" select taskid, userid from WFDefaultTaskUser " + WFSUtil.getTableLockHintStr(dbType)+ " where processdefid= ? and activityid=? and caseManagerId= ?");
			stmt.setInt(1, processDefId);
			stmt.setInt(2, activityId);
			stmt.setInt(3, caseManagerId);
			rs = stmt.executeQuery();
			while(rs.next()){
				int taskId = rs.getInt(1);
				int userId = rs.getInt(2); 
				taskUserMap.put(taskId, userId);
			}
			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (stmt != null) {
				stmt.close();
				stmt = null;
			}
			
			insertPS = con.prepareStatement(" insert into WFDefaultTaskUser(ProcessDefId, ActivityId, TaskId, UserId, CaseManagerId) values(?,?,?,?,?)");
			updatePS = con.prepareStatement(" update WFDefaultTaskUser set UserId = ? where ProcessDefId = ? and activityid=? and taskId = ? and CaseManagerId= ?");
			
			XMLParser taskInfoParser = new XMLParser();
			int totalTasksCount = parser.getNoOfFields("TaskInfo");
			for(int taskItr = 0; taskItr < totalTasksCount; taskItr++){
				taskInfoParser.setInputXML((taskItr > 0)? parser.getNextValueOf("TaskInfo") : parser.getFirstValueOf("TaskInfo"));
				int taskId = taskInfoParser.getIntOf("TaskId", 0, false);
				int userId = taskInfoParser.getIntOf("DefaultUserId", 0, true);
				if(taskUserMap.containsKey(taskId)){
					//update if the values are different otherwise do nothing
					int currentUserId = taskUserMap.get(taskId);
					if(userId != currentUserId){
						updatePS.setInt(1, userId);
						updatePS.setInt(2, processDefId);
						updatePS.setInt(3, activityId);
						updatePS.setInt(4, taskId);
						updatePS.setInt(5, caseManagerId);
						updatePS.addBatch();
						updateCount ++;
					}
				}else{
					//insert since the values are not present at all
					insertPS.setInt(1, processDefId);
					insertPS.setInt(2, activityId);
					insertPS.setInt(3, taskId);
					insertPS.setInt(4, userId);
					insertPS.setInt(5, caseManagerId);
					insertPS.addBatch();
					insertCount++;
				}
			}
			if(insertCount > 0){
				insertPS.executeBatch();
			}
			if(updateCount > 0){
				updatePS.executeBatch();
			}
			if(insertPS != null){
				insertPS.close();
				insertPS = null;
			}
			if(updatePS != null){
				updatePS.close();
				updatePS = null;
			}
		}else{
			mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
			subCode = 0;
			subject = WFSErrorMsg.getMessage(mainCode);
			descr = WFSErrorMsg.getMessage(subCode);
			errType = WFSError.WF_TMP;
		}
		if(mainCode == 0){
	        if (!con.getAutoCommit()) {
	            con.commit();
	            con.setAutoCommit(true);
	        }
			outputXML.append(gen.createOutputFile("WFSetCasePreferences"));
			outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
			outputXML.append("<TotalRowsInserted>" + insertCount + "<TotalRowsInserted>\n");
			outputXML.append("<TotalRowsUpdated>" + updateCount + "<TotalRowsUpdated>\n");
			outputXML.append(gen.closeOutputFile("WFSetCasePreferences"));
		}
	}catch (SQLException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WM_INVALID_FILTER;
		subCode = WFSError.WFS_SQL;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_FAT;
		descr = e.getMessage();
	} catch (NumberFormatException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_ILP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (NullPointerException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_SYS;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (Exception e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} finally {
		try {
			if (!con.getAutoCommit()) {
				con.rollback();
				con.setAutoCommit(true);
			}
		} catch (Exception e) {
			WFSUtil.printErr(engine, "", e);
		}
		try{
			if(rs!=null){
				rs.close();
				rs=null;
			}
		}catch(Exception e){
			WFSUtil.printErr(engine,"", e);
		}
		try{
			if (updatePS != null) {
				updatePS.close();
				updatePS = null;
			}
		}catch(Exception e){
			WFSUtil.printErr(engine,"", e);
		}
		try{
			if (insertPS != null) {
				insertPS.close();
				insertPS = null;
			}
		}catch(Exception e){
			WFSUtil.printErr(engine,"", e);
		}
		try{
			if(stmt!=null){
				stmt.close();
				stmt=null;
			}
		}catch(Exception e){
			WFSUtil.printErr(engine,"", e);
		}
	}
	if (mainCode != 0) {
		String errorString = WFSUtil.generalError(option, engine, gen, mainCode, subCode, errType, subject, descr);
		outputXML = new StringBuilder();
		outputXML.append(errorString);
	}
	return outputXML.toString();
}

/**
 * This API will return the Default users that are defined for the corresponding tasks.
 * @param con
 * @param parser
 * @param gen
 * @return
 * @throws JTSException
 * @throws WFSException
 * @author ambuj.tripathi
 */

public String WFGetCasePreferences(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException{
	StringBuilder outputXML = new StringBuilder();
	String engine = null;
	PreparedStatement pstmt = null;
	PreparedStatement pstmt1 = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	ResultSet rs1 = null;
	int mainCode = 0;
	int subCode = 0;
	String subject = null;
	String descr = null;
	String errType = WFSError.WF_TMP;
	String option = null;
	try{
		int sessionID = parser.getIntOf("SessionId", 0, false);
		engine = parser.getValueOf("EngineName", "", false);
		option = parser.getValueOf("Option");
		int dbType = ServerProperty.getReference().getDBType(engine);
		WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
		if (participant != null) {
			if(con.getAutoCommit()) {
				con.setAutoCommit(false);
			}
			
			int processDefId = parser.getIntOf("ProcessDefId", 0, false);
			int activityId = parser.getIntOf("ActivityId", 0, false);
			int caseManagerId = participant.getid();
			outputXML.append(gen.createOutputFile("WFGetCasePreferences"));
			outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>");
			outputXML.append("<TaskList>");
			pstmt = con.prepareStatement("select T.TaskId, T.TaskName from ActivityInterfaceAssoctable A, Wftaskdeftable T where "
					+ "A.processdefid = ? and A.activityid =? and A.interfaceType =? and A.InterfaceElementId = T.TaskId and T.processdefid=?");
			pstmt.setInt(1, processDefId);
			pstmt.setInt(2, activityId);
			WFSUtil.DB_SetString(3, "J", pstmt, dbType);
			pstmt.setInt(4, processDefId);
			rs = pstmt.executeQuery();
			
			//Iterating through the tasks list for given Processdefid and activityId
			while(rs.next()){
				int taskId = rs.getInt("TaskId");
				String taskName = rs.getString("TaskName");
				outputXML.append("<TaskInfo>");
				outputXML.append("<TaskId>" + taskId + "</TaskId>");
				outputXML.append("<TaskName>" + taskName + "</TaskName>");
				
				stmt = con.prepareStatement("select U.UserIndex, U.UserName, U.PersonalName, U.FamilyName from wfuserview U, wfdefaulttaskuser D where D.userid = U.userindex "
						+ "and D.processdefid=? and D.activityid =? and D.taskid =? and D.caseManagerId = ?");
				stmt.setInt(1, processDefId);
				stmt.setInt(2, activityId);
				stmt.setInt(3, taskId);
				stmt.setInt(4, caseManagerId);
				rs1 = stmt.executeQuery();
				if(rs1.next()){
					int userId = rs1.getInt("UserIndex");
					String userName = rs1.getString("UserName");
					String personalName = rs1.getString("PersonalName");
					String familyName = rs1.getString("FamilyName");
					if(familyName == null)
					{
						familyName = "";
					}
					outputXML.append("<DefaultUserId>" + userId + "</DefaultUserId>");
					outputXML.append("<DefaultUserName>" + userName + "</DefaultUserName>");
					outputXML.append("<PersonalName>" + personalName + " " + familyName + "</PersonalName>");
				}else{
					outputXML.append("<DefaultUserId>0</DefaultUserId>");
					outputXML.append("<DefaultUserName></DefaultUserName>");
					outputXML.append("<PersonalName></PersonalName>");
				}
				if (rs1 != null) {
					rs1.close();
					rs1 = null;
				}
				if (stmt != null) {
					stmt.close();
					stmt = null;
				}
				//Adding change to send the UserGroupAssociated flag for the task:
				String userGroupAssociated = "N";
				if(taskId > 0 && processDefId > 0 && activityId > 0){
					if(dbType == JTSConstant.JTS_MSSQL){
						pstmt1 = con.prepareStatement("select top 1 userid from wftaskuserassoctable where processdefid =? and activityid =? and taskid = ?");
					}else if(dbType == JTSConstant.JTS_ORACLE){
						pstmt1 = con.prepareStatement("select count(1) as userid from wftaskuserassoctable where processdefid =? and activityid =? and taskid = ?");
					}else if(dbType == JTSConstant.JTS_POSTGRES){
						pstmt1 = con.prepareStatement("select exists(select 1 from wftaskuserassoctable where processdefid =? and activityid =? and taskid = ?)");
					}
					pstmt1.setInt(1, processDefId);
					pstmt1.setInt(2, activityId);
					pstmt1.setInt(3, taskId);
					rs1 = pstmt1.executeQuery();
					if(dbType == JTSConstant.JTS_ORACLE || dbType == JTSConstant.JTS_MSSQL){
						if(rs1.next()){
							userGroupAssociated = "Y";
						}
					}else if(dbType == JTSConstant.JTS_POSTGRES){
						if(rs1.next()){
							String booleanVal = rs1.getString(1);
							if("T".equalsIgnoreCase(booleanVal)){
								userGroupAssociated = "Y";
							}
						}
					}
					if(rs1 != null) {
						rs1.close();
						rs1 = null;
					}
					if(pstmt1 != null) {
						pstmt1.close();
						pstmt1 = null;
					}
				}else{
					mainCode = WFSError.WF_OPERATION_FAILED;
					subCode = WFSError.WFS_TEMP;
					subject = WFSErrorMsg.getMessage(mainCode);
					errType = WFSError.WF_TMP;
					descr = WFSErrorMsg.getMessage(mainCode);
				}
				outputXML.append("<UserGroupAssociated>" + userGroupAssociated + "</UserGroupAssociated>");
				outputXML.append("</TaskInfo>");
			}
			outputXML.append("</TaskList>");
			outputXML.append(gen.closeOutputFile("WFGetCasePreferences"));
			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
			if(mainCode == 0){
		        if (!con.getAutoCommit()) {
		            con.commit();
		            con.setAutoCommit(true);
		        }
			}
		}else{
			mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
			subCode = 0;
			subject = WFSErrorMsg.getMessage(mainCode);
			descr = WFSErrorMsg.getMessage(subCode);
			errType = WFSError.WF_TMP;
		}
	}catch (SQLException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WM_INVALID_FILTER;
		subCode = WFSError.WFS_SQL;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_FAT;
		descr = e.getMessage();
	} catch (NumberFormatException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_ILP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (NullPointerException e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_SYS;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} catch (Exception e) {
		WFSUtil.printErr(engine,"", e);
		mainCode = WFSError.WF_OPERATION_FAILED;
		subCode = WFSError.WFS_EXP;
		subject = WFSErrorMsg.getMessage(mainCode);
		errType = WFSError.WF_TMP;
		descr = e.toString();
	} finally {
		try{
			if(rs!=null){
				rs.close();
				rs=null;
			}
		}catch(Exception e){
			WFSUtil.printErr(engine,"", e);
		}
		try{
			if (rs1 != null) {
				rs1.close();
				rs1 = null;
			}
		}catch(Exception e){
			WFSUtil.printErr(engine,"", e);
		}
		try{
			if (stmt != null) {
				stmt.close();
				stmt = null;
			}
		}catch(Exception e){
			WFSUtil.printErr(engine,"", e);
		}
		try{
			if(pstmt1!=null){
				pstmt1.close();
				pstmt1=null;
			}
		}catch(Exception e){
			WFSUtil.printErr(engine,"", e);
		}
		try {
			
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
		} catch (Exception ignored) {
			WFSUtil.printErr(engine, "", ignored);
		}
		
	}if (mainCode != 0) {
		String errorString = WFSUtil.generalError(option, engine, gen, mainCode, subCode, errType, subject, descr);
		outputXML = new StringBuilder();
		outputXML.append(errorString);
	}
	return outputXML.toString();
}



	/***
	*	Function Name 				:	WMChangeActivityName
	*	Date Written (DD/MM/YYYY)   :	03/01/2018
	*	Author						:	Ambuj Tripathi
	*	Input Parameters			:	Connection , XMLParser , XMLGenerator
	*	Output Parameters			:   output XML
	*	Return Values				:	String
	*	Description					:   This method calls SP to rename the activity of any process.
	 */
	public String WFChangeActivityName(Connection con, XMLParser parser, XMLGenerator gen) throws WFSException {
	    int mainCode = 0;
	    int subCode = 0;
	    String message = null;
	    String subject = null;
	    String descr = null;
	    String engine = "";
	    String option = "";
	    String errType = WFSError.WF_TMP;
	    CallableStatement cstmt = null;
	    StringBuffer  outputXML = new StringBuffer();
	    try {
			engine = parser.getValueOf("EngineName", "", false);
			int sessionId = parser.getIntOf("SessionId", 0, false);
			int processDefId = parser.getIntOf("ProcessDefId", -1, false);
		    engine = parser.getValueOf("EngineName");
		    option = parser.getValueOf("Option","",false);
			int dbType = ServerProperty.getReference().getDBType(engine);
			String isAdmin = parser.getValueOf("ISADMIN","N",true);
			WFParticipant user = WFSUtil.WFCheckSession(con, sessionId);
			if(user != null){
				if("Y".equalsIgnoreCase(isAdmin) || "ADMIN".equalsIgnoreCase(user.getscope())){
					if((processDefId != -1 )){
						if (con.getAutoCommit())
							con.setAutoCommit(false);
	
						int userId = user.getid();
	                    String username = user.getname();
	                    int start = parser.getStartIndex("Activities", 0, 0);
	                    int deadend = parser.getEndIndex("Activities", start, 0);
	                    int noOfAtt = parser.getNoOfFields("Activity", start, deadend);
	                    int end = 0;
	                    for (int i = 0; i < noOfAtt; i++) {
	                        start = parser.getStartIndex("Activity", end, 0);
	                        end = parser.getEndIndex("Activity", start, 0);
	                        String activityName = parser.getValueOf("OldName", start, end);
	                        String newActivityName = parser.getValueOf("NewName", start, end);
	                        cstmt = con.prepareCall("{call WFChangeActivityName(?,?,?,?,?,?,?)}");
	                        if (dbType == JTSConstant.JTS_MSSQL || dbType == JTSConstant.JTS_ORACLE) {
	                            cstmt.setInt(1, processDefId);
	                            cstmt.setString(2, activityName);
	                            cstmt.setString(3, newActivityName);
	                            cstmt.setInt(4, userId);
	                            cstmt.setString(5, username);
	                            cstmt.registerOutParameter(6, java.sql.Types.BIGINT);
	                            cstmt.registerOutParameter(7, java.sql.Types.NVARCHAR);
	                            cstmt.execute();
	                            mainCode = cstmt.getInt(6);
	                            descr = cstmt.getString(7);
	                            cstmt.close();
	                        }
	                    }
					}else{
	                    mainCode = WFSError.WF_INVALID_PROCESS_DEFINITION;
	                    subCode = 0;
	                    subject = WFSErrorMsg.getMessage(mainCode);
	                    descr = WFSErrorMsg.getMessage(subCode);
	                    errType = WFSError.WF_TMP;
					}
				}else{
	                mainCode = WFSError.WF_NO_AUTHORIZATION;
	                subCode = 0;
	                subject = WFSErrorMsg.getMessage(mainCode);
	                descr = WFSErrorMsg.getMessage(subCode);
	                errType = WFSError.WF_TMP;
				}
			}else{
	            mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
	            subCode = 0;
	            subject = WFSErrorMsg.getMessage(mainCode);
	            descr = WFSErrorMsg.getMessage(subCode);
	            errType = WFSError.WF_TMP;
			}
	        if (mainCode == 0) {
	        	if (!con.getAutoCommit()){
	        		con.commit();
	        		con.setAutoCommit(true);
	        	}
	            outputXML.append(gen.createOutputFile("WFChangeActivityName"));
	            outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
	            outputXML.append("<Message>Activity name changed successfully</Message>\n");
	            outputXML.append(gen.closeOutputFile("WFChangeActivityName"));
	        }
	    } catch (SQLException exc) {
	        WFSUtil.printErr(engine,"", exc);
	        mainCode = WFSError.WM_INVALID_PROCESS_DEFINITION;
	        subCode = WFSError.WFS_SQL;
	        subject = WFSErrorMsg.getMessage(mainCode);
	        errType = WFSError.WF_FAT;
	        if (exc.getErrorCode() == 0) {
	            if (exc.getSQLState().equalsIgnoreCase("08S01")) {
	                descr = (new JTSSQLError(exc.getSQLState())).getMessage() + "(SQL State : " + exc.getSQLState() + ")";
	            }
	        } else {
	            descr = exc.getMessage();
	        }
	    } catch (Exception exc) {
	        WFSUtil.printErr(engine,"", exc);
	        mainCode = WFSError.WF_OPERATION_FAILED;
	        subCode = WFSError.WFS_EXP;
	        subject = WFSErrorMsg.getMessage(mainCode);
	        descr = exc.toString();
	        errType = WFSError.WF_FAT;
	    } catch (Error err) {
	    	WFSUtil.printErr(engine,"", err);
	    	mainCode = WFSError.WF_OPERATION_FAILED;
	        subCode = WFSError.WFS_EXP;
	        subject = WFSErrorMsg.getMessage(mainCode);
	        descr = err.toString();
	        errType = WFSError.WF_FAT;
	    }finally{
	    	try{
				if (!con.getAutoCommit()) {
					con.rollback();
					con.setAutoCommit(true);
				}
	    	} catch(Exception ignored){}
			try {
	            if (cstmt != null) {
	                cstmt.close();
	                cstmt = null;
	            }
	        } catch (Exception ignored) {}
	       
	    }
	    if (mainCode != 0) {
            throw new WFSException(mainCode, subCode, errType, subject, descr);
        }
	    return outputXML.toString();
	}
	
	
	/***
	*	Function Name 				:	WFCheckRestAssociation
	*	Date Written (DD/MM/YYYY)   :	30/01/2018
	*	Author						:	Anwar Danish
	*	Input Parameters			:	Connection , XMLParser , XMLGenerator
	*	Output Parameters			:   output XML
	*	Return Values				:	String
	*	Description					:   This method checks and returns list of all associated process with a REST service .
	 */		
	
	 public String WFCheckRestAssociation(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException{
        
        int subCode = 0;
        int mainCode = 0;
        ResultSet rs = null;
		ResultSet rs2 = null;
        String descr = null;
        String subject = null;
        StringBuffer outputXML = new StringBuffer("");
        String errType = WFSError.WF_TMP;
        Statement stmt = null;
		PreparedStatement pstmt = null;
		PreparedStatement pstmt2 = null;
        String option = null;
        String engine = "";
        StringBuffer tempStr = null;
		boolean existFlag = false;
        try{
            option = parser.getValueOf("Option","", false);
            engine = parser.getValueOf("EngineName","", false);
            int sessionID = parser.getIntOf("SessionId", 0, false);
            int serviceId = parser.getIntOf("ServiceId", 0, true);           
            int dbType = ServerProperty.getReference().getDBType(engine);            
            char omniServiceFlag = parser.getCharOf("OmniService", 'N', true);
            WFParticipant participant = null;            
            if(omniServiceFlag == 'Y'){
                participant = new WFParticipant(0, "System", 'P', "SERVER", Locale.getDefault().toString());
            } else{
                participant = WFSUtil.WFCheckSession(con, sessionID);
            }

            if(participant != null){                
                stmt = con.createStatement();                
                String queryStr = "Select ProcessDefId from WFRestActivityAssocTable where ExtMethodIndex = ? ";
				pstmt = con.prepareStatement(queryStr);            
				pstmt.setInt(1, serviceId);
				rs = pstmt.executeQuery();	
				tempStr = new StringBuffer(1000);
				tempStr.append("<ProcessList>\n"); 
				while(rs != null && rs.next()){
					if(!existFlag){
						existFlag = true;
					}

					int processDefId = rs.getInt(1);

					queryStr = "Select ProcessName from PROCESSDEFTABLE " + WFSUtil.getTableLockHintStr(dbType) + " where ProcessDefId = ? ";
					pstmt2 = con.prepareStatement(queryStr);            
					pstmt2.setInt(1, processDefId);
					rs2 = pstmt2.executeQuery();						
					
					if(rs2 != null && rs2.next()){						
						tempStr.append("<ProcessInfo>\n"); 
						tempStr.append(gen.writeValueOf("ProcessDefId", String.valueOf(processDefId)));
						tempStr.append(gen.writeValueOf("ProcessName", rs2.getString("ProcessName")));					                 
						tempStr.append("\n</ProcessInfo>");						                   
					}
					
					
					if(rs2 != null){
						rs2.close();
						rs2 = null;
					}
					if(pstmt2 != null){
						pstmt2.close();
						pstmt2 = null;
					} 
				}
				tempStr.append("</ProcessList>\n"); 
				
				if(rs != null){
					rs.close();
					rs = null;
				}
				if(pstmt != null){
					pstmt.close();
					pstmt = null;
				} 
                
            } else{
                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
                subCode = 0;
                subject = WFSErrorMsg.getMessage(mainCode);
                descr = WFSErrorMsg.getMessage(subCode);
                errType = WFSError.WF_TMP;
            }
			
			if(existFlag){				
				outputXML = new StringBuffer(1000);
				outputXML.append(gen.createOutputFile("WFCheckRestAssociation"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");				
				outputXML.append("\n<AssociationExist>");
				outputXML.append("Y");
				outputXML.append("\n</AssociationExist>");
				outputXML.append(tempStr.toString());				
				outputXML.append(gen.closeOutputFile("WFCheckRestAssociation"));				
			}else{
				outputXML = new StringBuffer(1000);
				outputXML.append(gen.createOutputFile("WFCheckRestAssociation"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");				
				outputXML.append("\n<AssociationExist>");
				outputXML.append("N");
				outputXML.append("\n</AssociationExist>");								
				outputXML.append(gen.closeOutputFile("WFCheckRestAssociation"));				
			}
            
        } catch(SQLException e){
            WFSUtil.printErr("", e);
            mainCode = WFSError.WM_INVALID_FILTER;
            subCode = WFSError.WFS_SQL;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_FAT;
            if(e.getErrorCode() == 0){
                if(e.getSQLState().equalsIgnoreCase("08S01")){
                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
                        + ")";
                }
            } else{
                descr = e.getMessage();
            }
        } catch(NumberFormatException e){
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_ILP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(NullPointerException e){
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_SYS;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(Exception e){
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } catch(Error e){
            WFSUtil.printErr(engine,"", e);
            mainCode = WFSError.WF_OPERATION_FAILED;
            subCode = WFSError.WFS_EXP;
            subject = WFSErrorMsg.getMessage(mainCode);
            errType = WFSError.WF_TMP;
            descr = e.toString();
        } finally{
        	try{
				if(rs!=null){
					rs.close();
					rs=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
        	try{
				if(rs2!=null){
					rs2.close();
					rs2=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
            try{
                if(stmt != null){
                    stmt.close();
                    stmt = null;
                }
            } catch(Exception ignored){
            	WFSUtil.printErr(engine,"", ignored);
            }
            try{
				if(pstmt!=null){
					pstmt.close();
					pstmt=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
            try{
				if(pstmt2!=null){
					pstmt2.close();
					pstmt2=null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"", e);
			}
           
        }
        if(mainCode != 0){
            return (WFSUtil.generalError(option, engine, gen, mainCode, subCode, errType, subject, descr));
        }
        return outputXML.toString();
    }
	/**
	 * This API returns the map of QueueVariables and their ALIAS on all the queues of given processdefid.
	 * @param con
	 * @param parser
	 * @param gen
	 * @return Output XML
	 * @throws JTSException
	 * @throws WFSException
	 */
	 public String WFGetVarAliasMappingOnQueue(Connection con, XMLParser parser, XMLGenerator gen) throws JTSException, WFSException{
	        int subCode = 0;
	        int mainCode = 0;
	        String subject = null;
	        String descr = null;
	        StringBuffer outputXML = new StringBuffer("");
	        String errType = WFSError.WF_TMP;
			PreparedStatement pstmt = null;
	        ResultSet rs = null;
	        String option = null;
	        String engine = "";
	        StringBuilder tempStr = null;
	        try{
	            option = parser.getValueOf("Option","", false);
	            engine = parser.getValueOf("EngineName","", false);
	            int sessionID = parser.getIntOf("SessionId", 0, false);
	            int processDefId = parser.getIntOf("ProcessDefId", 0, false);
	            int dbType = ServerProperty.getReference().getDBType(engine);
	            WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
	            if(participant != null){
	            	pstmt = con.prepareStatement("SELECT DISTINCT VA.QUEUEID,VM.USERDEFINEDNAME,VA.ALIAS FROM VARMAPPINGTABLE VM " + WFSUtil.getTableLockHintStr(dbType) + " ,VARALIASTABLE VA " + WFSUtil.getTableLockHintStr(dbType) + " WHERE VM.PROCESSDEFID = ? AND VM.SYSTEMDEFINEDNAME = VA.PARAM1 AND VA.QUEUEID IN (SELECT DISTINCT QUEUEID FROM QUEUESTREAMTABLE " + WFSUtil.getTableLockHintStr(dbType) + " WHERE PROCESSDEFID = VM.PROCESSDEFID) ORDER BY VA.QUEUEID");
					pstmt.setInt(1, processDefId);
					rs = pstmt.executeQuery();	
					tempStr = new StringBuilder(2000);
					tempStr.append("<ProcessDefId>" + processDefId + "</ProcessDefId><AliasList>");
					while(rs != null && rs.next()){
						int queueId = rs.getInt("QUEUEID");
						String varName = rs.getString("USERDEFINEDNAME");
						String aliasName = rs.getString("ALIAS");
						tempStr.append("<AliasDetails>");
						tempStr.append("<QueueId>" + queueId + "</QueueId>");
						tempStr.append("<VarName>" + varName + "</VarName>");
						tempStr.append("<AliasName>" + aliasName + "</AliasName>");
						tempStr.append("</AliasDetails>");
					}
					tempStr.append("</AliasList>"); 
					if(rs != null){
						rs.close();
						rs = null;
					}
					if(pstmt != null){
						pstmt.close();
						pstmt = null;
					} 
	                
	            } else{
	                mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
	                subCode = 0;
	                subject = WFSErrorMsg.getMessage(mainCode);
	                descr = WFSErrorMsg.getMessage(subCode);
	                errType = WFSError.WF_TMP;
	            }
				
				if(mainCode == 0){				
					outputXML = new StringBuffer(1000);
					outputXML.append(gen.createOutputFile("WFGetVarAliasMappingOnQueue"));
					outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");				
					outputXML.append(tempStr.toString());				
					outputXML.append(gen.closeOutputFile("WFGetVarAliasMappingOnQueue"));				
				}
	        } catch(SQLException e){
	            WFSUtil.printErr("", e);
	            mainCode = WFSError.WM_INVALID_FILTER;
	            subCode = WFSError.WFS_SQL;
	            subject = WFSErrorMsg.getMessage(mainCode);
	            errType = WFSError.WF_FAT;
	            if(e.getErrorCode() == 0){
	                if(e.getSQLState().equalsIgnoreCase("08S01")){
	                    descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState()
	                        + ")";
	                }
	            } else{
	                descr = e.getMessage();
	            }
	        } catch(NumberFormatException e){
	            WFSUtil.printErr(engine,"", e);
	            mainCode = WFSError.WF_OPERATION_FAILED;
	            subCode = WFSError.WFS_ILP;
	            subject = WFSErrorMsg.getMessage(mainCode);
	            errType = WFSError.WF_TMP;
	            descr = e.toString();
	        } catch(NullPointerException e){
	            WFSUtil.printErr(engine,"", e);
	            mainCode = WFSError.WF_OPERATION_FAILED;
	            subCode = WFSError.WFS_SYS;
	            subject = WFSErrorMsg.getMessage(mainCode);
	            errType = WFSError.WF_TMP;
	            descr = e.toString();
	        } catch(Exception e){
	            WFSUtil.printErr(engine,"", e);
	            mainCode = WFSError.WF_OPERATION_FAILED;
	            subCode = WFSError.WFS_EXP;
	            subject = WFSErrorMsg.getMessage(mainCode);
	            errType = WFSError.WF_TMP;
	            descr = e.toString();
	        } catch(Error e){
	            WFSUtil.printErr(engine,"", e);
	            mainCode = WFSError.WF_OPERATION_FAILED;
	            subCode = WFSError.WFS_EXP;
	            subject = WFSErrorMsg.getMessage(mainCode);
	            errType = WFSError.WF_TMP;
	            descr = e.toString();
	        } finally{
	            try{
	                if(rs != null){
	                    rs.close();
	                    rs = null;
	                }
	            } catch(Exception ignored){}
	            try{
	                if(pstmt != null){
	                    pstmt.close();
	                    pstmt = null;
	                }
	            } catch(Exception ignored){}
	            
	        }
	        if(mainCode != 0){
                return (WFSUtil.generalError(option, engine, gen, mainCode, subCode, errType, subject, descr));
            }
	        return outputXML.toString();
	   }
	 
	/* New APIs related to Custom Criteria report Dashborad are added here.*/
	
	//----------------------------------------------------------------------------------------------------
	//		Function Name 				:	WFSetReportCriteria
	//		Date Written (DD/MM/YYYY)	:	15/07/2019
	//		Author						:	Ambuj Tripathi
	//		Input Parameters			:	Connection , XMLParser , XMLGenerator
	//		Output Parameters			:   none
	//		Return Values				:	String
	//		Description					:   This method creates the Report Criteria Data by provided the input details of report.
	//----------------------------------------------------------------------------------------------------   
	public String WFSetReportCriteria(Connection con, XMLParser parser, XMLGenerator gen) {
		int mainCode = 0;
		int subCode = 0;
		String errType = WFSError.WF_TMP;
		String subject = null;
		String descr = null;
		StringBuilder outputXML = new StringBuilder();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String option = null;
		String engine = "";
		StringBuilder tempStr = null;
		PreparedStatement stmt = null;
		PreparedStatement stmt1 = null;
		Statement statement = null;
		ResultSet rs1 = null;
		ResultSet rs2 = null;
		boolean commit = false;
		try{
			option = parser.getValueOf("Option","", false);
			engine = parser.getValueOf("EngineName","", false);
			int sessionID = parser.getIntOf("SessionId", 0, false);
			int dbType = ServerProperty.getReference().getDBType(engine);
			String operationType = parser.getValueOf("OperationFlag", "", false);
			WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
			boolean isArtifactMigrationCase = parser.getValueOf("ArtificationMigration", "N", true).equalsIgnoreCase("Y");
			HashSet<String> variableListSet=new HashSet<String>();
			int criteriaId = 0;
			if(participant != null){
				if(con.getAutoCommit()){
					con.setAutoCommit(false);
					commit = true;
				}
				//Check for the validity of the criteria Name :
				if(("I".equalsIgnoreCase(operationType) || "U".equalsIgnoreCase(operationType)) && !isArtifactMigrationCase){
					String criteriaName = parser.getValueOf("CriteriaName","", false);
					int criteriaIdForUpdate = 0;
					if( "U".equalsIgnoreCase(operationType) ){
						criteriaIdForUpdate = parser.getIntOf("CriteriaId", 0, false);
					}
					
					pstmt = con.prepareStatement("select CriteriaId from WFReportPropertiesTable " + WFSUtil.getTableLockHintStr(dbType) + " where UPPER(CriteriaName) = ?");
					pstmt.setString(1, criteriaName.toUpperCase());
					rs = pstmt.executeQuery();
					if(rs.next()){
						int existingCriteriaId = rs.getInt(1);
						if( ("I".equalsIgnoreCase(operationType) ) || ("U".equalsIgnoreCase(operationType)  && criteriaIdForUpdate != existingCriteriaId )){
	                        if(rs != null){
	                        	rs.close();
	                        	rs = null;
	                        }
	                        if(pstmt != null){
	                        	pstmt.close();
	                        	pstmt = null;
	                        }
				            mainCode = WFSError.WFS_ILP;
				            subCode = WFSError.WM_CRITERIA_ALR_EXST;
				            subject = "";
				            errType = WFSError.WF_TMP;
				            descr = WFSErrorMsg.getMessage(subCode);
				            throw new WFSException(mainCode, subCode, errType, subject, descr);
						}
					}
                    if(rs != null){
                    	rs.close();
                    	rs = null;
                    }
                    if(pstmt != null){
                    	pstmt.close();
                    	pstmt = null;
                    }
				}
				
				//Code changes to call WFGetProcessVariableListExt API for ArtifactMigration
				String queueName = "";
            	int queueId = 0;
            	if(isArtifactMigrationCase)
            	{
            		queueName = parser.getValueOf("QueueName", "", false);
            		if(!"".equalsIgnoreCase(queueName.trim()))
                	{
                		if("All Queues".equalsIgnoreCase(queueName.trim()))
                		{
                			queueId = -1;
                		}
                		else
                		{
    	            		pstmt = con.prepareStatement("select queueid from queuedeftable "+ WFSUtil.getTableLockHintStr(dbType) +" where queuename=?");    				
    	    				WFSUtil.DB_SetString(1, queueName, pstmt, dbType);
    	    				pstmt.execute();
    	    				rs = pstmt.getResultSet();
    	    				if (rs.next()) {
    	    					queueId = rs.getInt(1);
    	    				}
    	    				else
    	    				{
    	    					mainCode = WFSError.WFS_NOQ;
    	    					subCode = WFSError.WF_QUEUE_NOT_EXISTS;
    	    					subject = WFSErrorMsg.getMessage(mainCode);
    	    					descr = WFSErrorMsg.getMessage(subCode);
    	    					errType = WFSError.WF_TMP;    					
    	    				}
    	    				if(rs != null){
    	    					rs.close();
    	    					rs = null;
    	    				}
    	    				if(pstmt != null){
    	    					pstmt.close();
    	    					pstmt = null;
    	    				}	
                		}
                	}
                	else
                	{
    					mainCode = WFSError.WF_QUEUENAME_CANNOT_BE_NULL;
    					subCode = 0;
    					subject = WFSErrorMsg.getMessage(mainCode);
    					descr = WFSErrorMsg.getMessage(subCode);
    					errType = WFSError.WF_TMP;    					
    				}
            	}
            	else if((!"D".equalsIgnoreCase(operationType))|| isArtifactMigrationCase)
            	{
				queueName = parser.getValueOf("QueueName", "", false);
				queueId = parser.getIntOf("QueueID", 0, false);
            	}
				String procName = "";
				int procDefId = 0;
				if(isArtifactMigrationCase)
            	{
					 procName = parser.getValueOf("ProcessName", "", false);
					 if(!"".equalsIgnoreCase(procName.trim()))
         			{
						 if("All Processes".equalsIgnoreCase(procName.trim()))
                    		{
							 procDefId = -1;
                    		}
                    		else
                    		{
	             				String exeStr = "select ProcessDefId from ProcessDefTable "+ WFSUtil.getTableLockHintStr(dbType) + " where ProcessName = ? order by VersionNo desc ";
	 							pstmt = con.prepareStatement(exeStr);
	 							WFSUtil.DB_SetString(1, procName, pstmt, dbType);
	 							pstmt.execute();
	 							rs = pstmt.getResultSet();
	 							if (rs.next()) {
	 								procDefId = rs.getInt(1);								
	 							}
	 							else
	 							{
	 								mainCode = WFSError.WF_INVALID_PROCESS_NAME;
	 		    					subCode = WFSError.WF_PROCESS_NOT_EXISTS;
	 		    					subject = WFSErrorMsg.getMessage(mainCode);
	 		    					descr = WFSErrorMsg.getMessage(subCode);
	 		    					errType = WFSError.WF_TMP;   
	 							}
                    		}             				
         			}
					 else
						{
							mainCode = WFSError.WF_INVALID_PROCESS_NAME;
	    					subCode = 0;
	    					subject = WFSErrorMsg.getMessage(mainCode);
	    					descr = WFSErrorMsg.getMessage(subCode);
	    					errType = WFSError.WF_TMP;   
						}
				
            	}
				else if((!"D".equalsIgnoreCase(operationType))|| isArtifactMigrationCase)
				{
				 procName = parser.getValueOf("ProcessName", "", false);
				 procDefId = parser.getIntOf("ProcessDefinitionID", 0, false);
				}
				
				if(isArtifactMigrationCase)
				{
					variableListSet = populateVariableListSet(con,gen,engine,sessionID,participant,procName,procDefId,queueName,queueId);
				}
				
				/**
				 * In case opertationType is U - Update, the old values gets removed first
				 * and then new values will be parsed and reinserted again into the table for all the tables except the WFReportPropertiesTable.
				 */
				if("D".equalsIgnoreCase(operationType) || "U".equalsIgnoreCase(operationType) || isArtifactMigrationCase){
					if(isArtifactMigrationCase)
					{
						String criteriaName = parser.getValueOf("CriteriaName","", false);
						pstmt = con.prepareStatement("select CriteriaId from WFReportPropertiesTable " + WFSUtil.getTableLockHintStr(dbType) + " where UPPER(CriteriaName) = ?");
						pstmt.setString(1, criteriaName.toUpperCase());
						rs = pstmt.executeQuery();
						if(rs.next()){
							criteriaId = rs.getInt(1);
						}
						 if(rs != null){
		                    	rs.close();
		                    	rs = null;
		                    }
		                    if(pstmt != null){
		                    	pstmt.close();
		                    	pstmt = null;
		                    }
					}
					else {
					criteriaId = parser.getIntOf("CriteriaId", 0, false);
					}
					if("D".equalsIgnoreCase(operationType) || isArtifactMigrationCase){
						pstmt = con.prepareStatement("Delete from WFReportPropertiesTable where CriteriaId = ?");
						pstmt.setInt(1, criteriaId);
						pstmt.executeUpdate();
						if(pstmt != null){
							pstmt.close();
							pstmt = null;
						}
					}
					pstmt = con.prepareStatement("Delete from WFFilterDefTable where FilterID IN (select ObjectID from WFReportObjAssocTable where ObjectType = 'F' and CriteriaId = ?) and CriteriaId = ?");
					pstmt.setInt(1, criteriaId);
					pstmt.setInt(2, criteriaId);
					pstmt.executeUpdate();
					if(pstmt != null){
						pstmt.close();
						pstmt = null;
					}
					pstmt = con.prepareStatement("Delete from WFReportObjAssocTable where CriteriaId = ?");
					pstmt.setInt(1, criteriaId);
					pstmt.executeUpdate();
					if(pstmt != null){
						pstmt.close();
						pstmt = null;
					}
					pstmt = con.prepareStatement("Delete from WFReportVarMappingTable where CriteriaId = ?");
					pstmt.setInt(1, criteriaId);
					pstmt.executeUpdate();
					if(pstmt != null){
						pstmt.close();
						pstmt = null;
					}
				}
				if("I".equalsIgnoreCase(operationType) || "U".equalsIgnoreCase(operationType) || isArtifactMigrationCase){
					String criteriaName = parser.getValueOf("CriteriaName","", false);
					String description = parser.getValueOf("Description","", true);
					String chartInfo = parser.getValueOf("ChartInfo","", false);
					String excludeExitWorkitems = parser.getValueOf("ExcludeExitWorkitems","N", true);
					int stateVal = parser.getIntOf("State", 2, false);
					if("I".equalsIgnoreCase(operationType) || isArtifactMigrationCase){
						if (dbType == JTSConstant.JTS_MSSQL || dbType == JTSConstant.JTS_POSTGRES) {
							pstmt = con.prepareStatement("Insert into WFReportPropertiesTable(CriteriaName, Description, ChartInfo, ExcludeExitWorkitems, State, LastModifiedOn) values (?, ?, ?, ?, ?,"+ WFSUtil.getDate(dbType) +")");
							pstmt.setString(1, criteriaName);
							pstmt.setString(2, description);
							pstmt.setString(3, chartInfo);
							pstmt.setString(4, excludeExitWorkitems);
							pstmt.setInt(5, stateVal);
							pstmt.executeUpdate();
							
							if(dbType == JTSConstant.JTS_MSSQL){
								stmt = con.prepareStatement("SELECT @@IDENTITY");
		                        rs1 = stmt.executeQuery();
		                        if (rs1.next()) {
		                            criteriaId = rs1.getInt(1);
		                        }
							} else if(dbType == JTSConstant.JTS_POSTGRES){
								stmt = con.prepareStatement("SELECT CURRVAL(pg_get_serial_sequence('wfreportpropertiestable', 'criteriaid'))");
		                        rs1 = stmt.executeQuery();
		                        if (rs1.next()) {
		                            criteriaId = rs1.getInt(1);
		                        }
							}
	                        if(rs1 != null){
	                        	rs1.close();
	                        	rs1 = null;
	                        }
	                        if(stmt != null){
	                        	stmt.close();
	                        	stmt = null;
	                        }
						} else{
							String strCriteriaId = WFSUtil.nextVal(con, "CriteriaId", dbType);
							criteriaId = Integer.parseInt(strCriteriaId);
							pstmt = con.prepareStatement("Insert into WFReportPropertiesTable(CriteriaId, CriteriaName, Description, ChartInfo, ExcludeExitWorkitems, State, LastModifiedOn) values (?, ?, ?, ?, ?, ?,"+ WFSUtil.getDate(dbType) +")");
							pstmt.setInt(1, criteriaId);
							pstmt.setString(2, criteriaName);
							pstmt.setString(3, description);
							pstmt.setString(4, chartInfo);
							pstmt.setString(5, excludeExitWorkitems);
							pstmt.setInt(6, stateVal);
							pstmt.executeUpdate();
						}
					}else{
						pstmt = con.prepareStatement("Update WFReportPropertiesTable set CriteriaName =?, Description =?, ChartInfo =?, ExcludeExitWorkitems =?, State =?,LastModifiedOn ="+ WFSUtil.getDate(dbType) +" where CriteriaId =? ");
						pstmt.setString(1, criteriaName);
						pstmt.setString(2, description);
						pstmt.setString(3, chartInfo);
						pstmt.setString(4, excludeExitWorkitems);
						pstmt.setInt(5, stateVal);
						pstmt.setInt(6, criteriaId);
						pstmt.executeUpdate();
					}
					if(rs != null){
						rs.close();
	                	rs = null;
					}
					if(pstmt != null){
	                	pstmt.close();
	                	pstmt = null;
					}
					
                	pstmt = con.prepareStatement("insert into WFReportObjAssocTable(CriteriaID, ObjectID, ObjectType, ObjectName) values (?, ?, ?, ?)");
                	
                	String xmlPartInfo = parser.getValueOf("FilterInfo", "", true);
                	if(!xmlPartInfo.isEmpty()){
                		XMLParser filterInfoParser = new XMLParser(xmlPartInfo);
                		XMLParser filterParser = new XMLParser();
                    	int filterCount = parser.getNoOfFields("Filter");
            			for(int fc = 0; fc < filterCount; fc++){
            				filterParser.setInputXML((fc > 0) ? filterInfoParser.getNextValueOf("Filter") : filterInfoParser.getFirstValueOf("Filter"));
            				String filterAlias = filterParser.getValueOf("FilterAlias", "", false);
            				String filterXML = filterParser.getValueOf("FilterXML", "", false);
            				if(isArtifactMigrationCase)
            				{
            					checkFilterIsValidOrNot(filterXML,variableListSet);
            				}
            				filterXML = filterXML.replaceAll("&amp;UserIndex&amp;", "&UserIndex&");
            				filterXML = filterXML.replaceAll("&amp;UserName&amp;", "&UserName&");
            				String filterColor = filterParser.getValueOf("FilterColor", "", false);
            				int conditionOption = filterParser.getIntOf("ConditionOption", 0, false);
            				int filterId = 0;
        					if (dbType == JTSConstant.JTS_MSSQL || dbType == JTSConstant.JTS_POSTGRES) {
        						stmt = con.prepareStatement("insert into WFFilterDefTable(FilterName, FilterXML, CriteriaID, FilterColor, ConditionOption)"
        								+ " values (?, ?, ?, ?, ?)");
        						stmt.setString(1, filterAlias);
        						stmt.setString(2, filterXML);
        						stmt.setInt(3, criteriaId);
        						stmt.setString(4, filterColor);
        						stmt.setInt(5, conditionOption);
        						stmt.executeUpdate();
        						if (dbType == JTSConstant.JTS_MSSQL){
	        						stmt1 = con.prepareStatement("SELECT @@IDENTITY");
	        						rs2 = stmt1.executeQuery();
	        						if(rs2 != null && rs2.next()){
	        							filterId = rs2.getInt(1);
	        						}
        						}else if (dbType == JTSConstant.JTS_POSTGRES){
        							stmt1 = con.prepareStatement("SELECT CURRVAL(pg_get_serial_sequence('wffilterdeftable', 'filterid'))");
        							rs2 = stmt1.executeQuery();
    		                        if (rs2.next()) {
    		                        	filterId = rs2.getInt(1);
    		                        }
        						}
        						if(rs2 != null){
        							rs2.close();
        							rs2 = null;
        						}
        						if(stmt1 != null){
        							stmt1.close();
        							stmt1 = null;
        						}
        					}else{
        						stmt = con.prepareStatement("insert into WFFilterDefTable(FilterID, FilterName, FilterXML, CriteriaID, FilterColor, ConditionOption)"
        								+ " values (?, ?, ?, ?, ?, ?)");
        						String filterIdStr = WFSUtil.nextVal(con, "FilterId", dbType);
        						filterId = Integer.parseInt(filterIdStr);
        						stmt.setInt(1, filterId);
        						stmt.setString(2, filterAlias);
        						stmt.setString(3, filterXML);
        						stmt.setInt(4, criteriaId);
        						stmt.setString(5, filterColor);
        						stmt.setInt(6, conditionOption);
        						stmt.executeUpdate();
        					}
    						if(stmt != null){
    							stmt.close();
    							stmt = null;
    						}
    						pstmt.setInt(1, criteriaId);
    						pstmt.setInt(2, filterId);
    						pstmt.setString(3, "F");
    						pstmt.setString(4, filterAlias);
    						pstmt.addBatch();
            			}
                	}
                	
                	
					pstmt.setInt(1, criteriaId);
					pstmt.setInt(2, queueId);
					pstmt.setString(3, "Q");
					pstmt.setString(4, queueName);
					pstmt.addBatch();
                	
					pstmt.setInt(1, criteriaId);
					pstmt.setInt(2, procDefId);
					pstmt.setString(3, "P");
					pstmt.setString(4, procName);
					pstmt.addBatch();
                	
                	pstmt.executeBatch();
                	if(pstmt != null){
                		pstmt.close();
                		pstmt = null;
                	}
                	
                	int varCount = parser.getNoOfFields("Variable");
					pstmt = con.prepareStatement("Insert into WFReportVarMappingTable(CriteriaId,VariableId,VariableName,"
							+ " Type,DisplayName,SystemDefinedName,OrderId,IsHidden,IsSortable,LastModifiedDateTime,VariableType,DisableSorting,MappedType) "
							+ " values(?,?,?,?,?,?,?,?,?,"+ WFSUtil.getDate(dbType)+",?,?,?)");
					for(int inx = 0; inx < varCount; inx++){
						XMLParser varParser = new XMLParser();
						if( inx != 0 ){
							varParser.setInputXML(parser.getNextValueOf("Variable"));
						}else{
							varParser.setInputXML(parser.getFirstValueOf("Variable"));
						}
						int variableId = varParser.getIntOf("VariableId", 0, false);
						String variableType = varParser.getValueOf("VariableType","", false);
						String variableName = null;
						if("A".equalsIgnoreCase(variableType)){
							variableName = varParser.getValueOf("Name","", false);
						}else{
							variableName = varParser.getValueOf("VariableName","", false);
						}
						int type = varParser.getIntOf("Type",0, false);
						String displayName = varParser.getValueOf("DisplayName","", false);
						String systemDefinedName = varParser.getValueOf("SystemDefinedName","", false);
						int orderId = varParser.getIntOf("OrderId", 0, false);
						String isHidden = varParser.getValueOf("IsHidden","", false);
						String isSortable = varParser.getValueOf("IsSortable","", false);
						String disableSorting = varParser.getValueOf("DisableSorting","", false);
						int mappedType = varParser.getIntOf("MappedType", 0, false);
						if(isArtifactMigrationCase)
        				{
							if(!("S".equalsIgnoreCase(variableType) || "M".equalsIgnoreCase(variableType)) && (("U".equalsIgnoreCase(variableType) && !variableName.equalsIgnoreCase(systemDefinedName)) ||"I".equalsIgnoreCase(variableType) || "A".equalsIgnoreCase(variableType)))
						{
							if(variableListSet.size()>0  && !variableListSet.contains(variableName+"#"+systemDefinedName))
							{
								mainCode = WFSError.WF_VARIABLE_INFO_NOT_FOUND;
								subCode = WFSError.WF_VARIABLE_NOT_EXISTS;
								if("A".equalsIgnoreCase(variableType) )
								{
									subject = WFSErrorMsg.getMessage(mainCode)+"Name of Invalid Alias is '"+variableName+"'";
								}
								else
								{
								subject = WFSErrorMsg.getMessage(mainCode)+"Name of Invalid Variable is '"+variableName+"'";
								}
								descr = WFSErrorMsg.getMessage(subCode);
								errType = WFSError.WF_TMP;
								throw new WFSException(mainCode, subCode, errType, subject, descr);
							}
						}
        				}
						pstmt.setInt(1, criteriaId);
						pstmt.setInt(2, variableId);
						pstmt.setString(3, variableName);
						pstmt.setInt(4, type);
						pstmt.setString(5, displayName);
						pstmt.setString(6, systemDefinedName);
						pstmt.setInt(7, orderId);
						pstmt.setString(8, isHidden);
						pstmt.setString(9, isSortable);
						pstmt.setString(10, variableType);
						pstmt.setString(11, disableSorting);
						pstmt.setInt(12, mappedType);
						pstmt.addBatch();
					}
					if(pstmt != null && varCount > 0){
						pstmt.executeBatch();
						pstmt.close();
						pstmt = null;
					}
                	
				}
				
				//Setting rights on the criteria for the creator of the criteria 
				if("I".equalsIgnoreCase(operationType) && !isArtifactMigrationCase){
					String[] objectTypeStr = WFSUtil.getIdForName(con, dbType, WFSConstant.CONST_OBJTYPE_CRITERIA, "O");
					int objTypeId = Integer.parseInt(objectTypeStr[1]);
					statement = con.createStatement();
					WFSUtil.associateObjectsWithUser(statement, dbType, participant.getid(), 0, criteriaId, objTypeId, 0, WFSConstant.CONST_DEFAULT_CRITERIA_RIGHTSTR, null, 'I',engine);
				}
				
				if(!("I".equalsIgnoreCase(operationType) || "D".equalsIgnoreCase(operationType) || "U".equalsIgnoreCase(operationType))){
					mainCode = WFSError.WFS_ILP;
					subCode = WFSError.WM_INVALID_OPERATION_TYPE;
					subject = "";
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}
			} else{
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			
			if(mainCode == 0){
				if(commit && !con.getAutoCommit()){
					con.commit();
					con.setAutoCommit(true);
					commit = false;
				}
				outputXML = new StringBuilder(1000);
				outputXML.append(gen.createOutputFile("WFSetReportCriteria"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				if("I".equalsIgnoreCase(operationType) || "D".equalsIgnoreCase(operationType) || "U".equalsIgnoreCase(operationType)){
					outputXML.append("<CriteriaId>" + criteriaId + "</CriteriaId>\n");
				}
				outputXML.append(gen.closeOutputFile("WFSetReportCriteria"));
			}
		} catch(SQLException e){
			WFSUtil.printErr(engine, e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if(e.getErrorCode() == 0){
				if("08S01".equalsIgnoreCase(e.getSQLState())){
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
				}
			} else{
				descr = e.getMessage();
			}
		} catch(NumberFormatException e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(NullPointerException e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
        } catch (WFSException e) {
			WFSUtil.printErr(engine,"", e);
            mainCode = e.getMainErrorCode();
            subCode = e.getSubErrorCode();
            if(mainCode==1093)
            {
            subject = e.getErrorMessage();
            }
            else
            {
            subject = WFSErrorMsg.getMessage(mainCode);
            }
            errType = WFSError.WF_TMP;
            descr = WFSErrorMsg.getMessage(subCode);
		} catch(Exception e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(Error e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} finally{
			try{
				if(mainCode == 0){
					if(commit && !con.getAutoCommit()){
						con.commit();
						con.setAutoCommit(true);
					}
				}else{
					if(commit && !con.getAutoCommit()){
						con.rollback();
						con.setAutoCommit(true);
					}
				}
			}catch(SQLException exc){
				WFSUtil.printErr(engine,"Exception occurred on commit/rollback of transaction for WFSetReportCriteria ", exc);
			}
			try{
				if(statement != null){
					statement.close();
					statement = null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"",e);
			}
			try{
				if(rs != null){
					rs.close();
					rs = null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"",e);
			}
			try{
				if(rs1 != null){
					rs1.close();
					rs1 = null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"",e);
			}
			try{
				if(rs2 != null){
					rs2.close();
					rs2 = null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"",e);
			}
			try{
				if(stmt != null){
					stmt.close();
					stmt = null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"",e);
			}
			try{
				if(stmt1 != null){
					stmt1.close();
					stmt1 = null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"",e);
			}
			try{
				if(pstmt != null){
					pstmt.close();
					pstmt = null;
				}
			}catch(Exception e){
				WFSUtil.printErr(engine,"",e);
			}
			
		}
		if(mainCode != 0){
			return (WFSUtil.generalError(option, engine, gen, mainCode, subCode, errType, subject, descr));
		}
		return outputXML.toString();
	}
	
	//----------------------------------------------------------------------------------------------------
//	Function Name				:	checkFilterIsValidOrNot
//	Date Written (DD/MM/YYYY)	:	08/12/2021
//	Author						:	Ravi Raj Mewara
//	Input Parameters			:	String,HashSet<String>
//	Output Parameters			:   none
//	Return Values				:	none
//	Description					:   Validate the variables sent in FilterXML against the variableList
//----------------------------------------------------------------------------------------------------

	private void checkFilterIsValidOrNot(String filterXML, HashSet<String> variableListSet) throws Exception,WFSException {
		int mainCode = 0;
		int subCode = 0;
		String errType = WFSError.WF_TMP;
		String subject = null;
		String descr = null;
		Document doc = WFXMLUtil.createDocument("<FilterXML>"+filterXML.replaceAll(">[\\s\r\n]*<", "><")+"</FilterXML>");
		Node mainNode = doc.getDocumentElement();
		Node node = null;
		NodeList searchVariableList = WFXMLUtil.getChildListByName(mainNode, "Condition");
		Node childNode;
		int noOffields = searchVariableList.getLength();
		for (int i = 0;i< noOffields;i++ ){
				node = (Node) searchVariableList.item(i);
				childNode = (Node) node.getFirstChild();
				String childNodeName = childNode.getNodeName();
				NamedNodeMap nnmap = childNode.getAttributes();
				String systemDefinedName = nnmap.getNamedItem("SystemDefinedName").getNodeValue();
				String variableType = nnmap.getNamedItem("VariableType").getNodeValue();
				if("A".equalsIgnoreCase(variableType) )
				{
					childNodeName = nnmap.getNamedItem("Name").getNodeValue();
				}
				if(!("S".equalsIgnoreCase(variableType) || "M".equalsIgnoreCase(variableType)) && (("U".equalsIgnoreCase(variableType) && !childNodeName.equalsIgnoreCase(systemDefinedName)) ||"I".equalsIgnoreCase(variableType) || "A".equalsIgnoreCase(variableType)))
				{
					
					if(variableListSet.size()>0  && !variableListSet.contains(childNodeName+"#"+systemDefinedName))
					{
						mainCode = WFSError.WF_VARIABLE_INFO_NOT_FOUND;
						subCode = WFSError.WF_VARIABLE_NOT_EXISTS;
						if("A".equalsIgnoreCase(variableType) )
						{
							subject = WFSErrorMsg.getMessage(mainCode)+"Name of Invalid Alias is '"+childNodeName+"'";
						}
						else
						{
						subject = WFSErrorMsg.getMessage(mainCode)+"Name of Invalid Variable is '"+childNodeName+"'";
						}
						descr = WFSErrorMsg.getMessage(subCode);
						errType = WFSError.WF_TMP;
						throw new WFSException(mainCode, subCode, errType, subject, descr);
					}
				}
			}
				
	}

	
//----------------------------------------------------------------------------------------------------
//	Function Name				:	populateVariableListSet
//	Date Written (DD/MM/YYYY)	:	08/12/2021
//	Author						:	Ravi Raj Mewara
//	Input Parameters			:	Connection , XMLParser , XMLGenerator,ProcessName,QueueName,WFParticipant,SessionId
//	Output Parameters			:   none
//	Return Values				:	HashSet<String>
//	Description					:   Reads the Information from the input XML and returns the list of variables according to the process and queue
//----------------------------------------------------------------------------------------------------

	private HashSet<String> populateVariableListSet(Connection con, XMLGenerator gen, String engine, int sessionID, WFParticipant participant, String procName, int procDefId,
			String queueName, int queueId) throws Exception,WFSException {
		
		StringBuilder WFGetProcessVariablesExt = new StringBuilder();
		XMLParser parser1 = new XMLParser();
		long startTime = 0L;
		long endTime = 0L;
		String WFGetProcessVariablesExtResult = "";
		int userId = participant.getid(); 
		HashSet<String> variableListSet=new HashSet<String>();

		WFGetProcessVariablesExt.append("<?xml version=\"1.0\"?><WFGetProcessVariablesExt_Input><Option>WFGetProcessVariablesExt</Option>");
		WFGetProcessVariablesExt.append("<EngineName>" + engine + "</EngineName>");
		WFGetProcessVariablesExt.append("<SessionId>" + sessionID  + "</SessionId>");                      
		WFGetProcessVariablesExt.append("<ProcessName>" +  procName  + "</ProcessName>");                      
		WFGetProcessVariablesExt.append("<QueueName>" +  queueName  + "</QueueName>");
		WFGetProcessVariablesExt.append("<EnableMultiLingual>Y</EnableMultiLingual>");
		WFGetProcessVariablesExt.append("<openMode>PM</openMode>");                     
		WFGetProcessVariablesExt.append("<ProcessDefinitionId>" +  procDefId  + "</ProcessDefinitionId>");                      
		WFGetProcessVariablesExt.append("<QueueId>" +  queueId  + "</QueueId>"); 
		WFGetProcessVariablesExt.append("<IsCriteriaCase>Y</IsCriteriaCase>"); 
		WFGetProcessVariablesExt.append("</WFGetProcessVariablesExt_Input>");

		parser1.setInputXML(WFGetProcessVariablesExt.toString());

		try{
			startTime = System.currentTimeMillis();
			//call WMCompleteWorkItem API                                                                         
			WFGetProcessVariablesExtResult =  WFFindClass.getReference().execute("WFGetProcessVariablesExt", engine, con, parser1,gen);                                                        
			endTime = System.currentTimeMillis();  
		}catch(WFSException wfse){                       
			WFSUtil.printErr(engine," IN populateVariableListSet :Exception occurred on calling WFGetProcessVariablesExt API", wfse);
			throw wfse;
		}
		WFSUtil.writeLog("WFClientServiceHandlerBean", "WFGetProcessVariablesExt", startTime, endTime, 0, WFGetProcessVariablesExt.toString(),WFGetProcessVariablesExtResult,engine,0,sessionID,userId);                              
		WFGetProcessVariablesExt = null;  	
		if(WFGetProcessVariablesExtResult.length() > 0){
			parser1.setInputXML(WFGetProcessVariablesExtResult);
			Document doc = WFXMLUtil.createDocument("<Attributes>"+parser1.getValueOf("Attributes")+"</Attributes>");
			Node mainNode = doc.getDocumentElement();
			NodeList attributelist = mainNode.getChildNodes();
			if(attributelist!=null){
		        for(int i=0;i<attributelist.getLength();i++){
		        	Node node=attributelist.item(i);
			        if(node!=null){
			        	String nodeName=node.getNodeName();
			        	NamedNodeMap nnmap = node.getAttributes();
						String systemDefinedName = nnmap.getNamedItem("SystemDefinedName").getNodeValue();
						String variableType = nnmap.getNamedItem("VariableType").getNodeValue();
						if("A".equalsIgnoreCase(variableType) )
						{
							nodeName = nnmap.getNamedItem("Name").getNodeValue();
						}
						if(!("S".equalsIgnoreCase(variableType) || "M".equalsIgnoreCase(variableType)) && (("U".equalsIgnoreCase(variableType) && !nodeName.equalsIgnoreCase(systemDefinedName)) ||"I".equalsIgnoreCase(variableType) || "A".equalsIgnoreCase(variableType)))
						{
							variableListSet.add(nodeName+"#"+systemDefinedName);
						}
		        	}
		        }
			}
		}
		else
		{
			WFSUtil.printOut(engine,"In WFGetProcessVariablesExt API some error occurred due to which variableList is not coming ");
		}
    
		
		return variableListSet;
	}

	 
	//----------------------------------------------------------------------------------------------------
	//		Function Name 				:	WFGetReportCriteria
	//		Date Written (DD/MM/YYYY)	:	15/07/2019
	//		Author						:	Ambuj Tripathi
	//		Input Parameters			:	Connection , XMLParser , XMLGenerator
	//		Output Parameters			:   none
	//		Return Values				:	String
	//		Description					:   This method returns the Report Criteria Details of the CriteriaId passed as input parameter.
	//----------------------------------------------------------------------------------------------------
	public String WFGetReportCriteria(Connection con, XMLParser parser, XMLGenerator gen) {
		int mainCode = 0;
		int subCode = 0;
		String errType = WFSError.WF_TMP;
		String subject = null;
		String descr = null;
		StringBuilder outputXML = new StringBuilder();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String option = null;
		String engine = "";
		StringBuilder tempSB = new StringBuilder();
		boolean commit = false;
		String locale=null;
		int criteriaId = 0;
		try{
			option = parser.getValueOf("Option","", false);
			engine = parser.getValueOf("EngineName","", false);
			int sessionID = parser.getIntOf("SessionId", 0, false);
			int dbType = ServerProperty.getReference().getDBType(engine);
			String enableMultiLingual = parser.getValueOf("EnableMultiLingual", "N", true);
			boolean pmMode = parser.getValueOf("OpenMode", "WD", true).equalsIgnoreCase("PM");
			boolean isArtifactMigrationCase = parser.getValueOf("ArtificationMigration", "N", true).equalsIgnoreCase("Y");
			if(pmMode){
				enableMultiLingual="N";
			}
			WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
			if(participant != null){
				if(con.getAutoCommit()){
					con.setAutoCommit(false);
					commit = true;
				}
				
				if(isArtifactMigrationCase)
	            {
	            	String criteriaName = parser.getValueOf("CriteriaName", "", true);
	            	if(!"".equalsIgnoreCase(criteriaName.trim()))
	            	{
	            		String exeStr = "select criteriaId from WFReportPropertiesTable "+ WFSUtil.getTableLockHintStr(dbType) + " where CriteriaName = ? ";
						pstmt = con.prepareStatement(exeStr);
						WFSUtil.DB_SetString(1, criteriaName, pstmt, dbType);
						pstmt.execute();
						rs = pstmt.getResultSet();
						if (rs.next()) {
							criteriaId = rs.getInt(1);								
						}
						else
						{
							mainCode = WFSError.WF_INVALID_CRITERIA_NAME;
	    					subCode = WFSError.WF_CRITERIA_NOT_EXISTS;
	    					subject = WFSErrorMsg.getMessage(mainCode);
	    					descr = WFSErrorMsg.getMessage(subCode);
	    					errType = WFSError.WF_TMP;   
						}
						if(rs != null){
							rs.close();
							rs = null;
						}
						if(pstmt != null){
							pstmt.close();
							pstmt = null;
						}
	            		
	            	}
	            	else
	            	{
						mainCode = WFSError.WF_INVALID_CRITERIA_NAME;
    					subCode = WFSError.WF_CRITERIA_NOT_EXISTS;
    					subject = WFSErrorMsg.getMessage(mainCode);
    					descr = WFSErrorMsg.getMessage(subCode);
    					errType = WFSError.WF_TMP;   
					}
	            }
				else
				{

					 criteriaId = parser.getIntOf("CriteriaId", 0, false);
				}
				if(mainCode == 0){
				 String scope = participant.getscope();
				 if(!"ADMIN".equalsIgnoreCase(scope))
	                	locale = participant.getlocale();
				
				tempSB = new StringBuilder("");
				tempSB.append("<CriteriaId>" + criteriaId + "</CriteriaId>");
				if((locale == null) || (locale != null && locale.equalsIgnoreCase("en-us")) || !enableMultiLingual.equalsIgnoreCase("Y")){
					pstmt = con.prepareStatement("Select CriteriaName, Description, ChartInfo, ExcludeExitWorkitems, State from WFReportPropertiesTable " + WFSUtil.getTableLockHintStr(dbType) + " where criteriaId = ?");
				}else{
					pstmt = con.prepareStatement(" Select A.CriteriaName, A.Description, A.ChartInfo, A.ExcludeExitWorkitems, A.State ,B.EntityName from WFReportPropertiesTable A" + WFSUtil.getTableLockHintStr(dbType) + " LEFT OUTER JOIN WFMultiLingualTable B "+WFSUtil.getTableLockHintStr(dbType)+" on A.criteriaId=B.EntityId and B.EntityType="+WFSConstant.CRITERIA_ENTITY_TYPE+ " and Locale='"+WFSUtil.TO_SANITIZE_STRING(locale, true)+"' where A.criteriaId = ?");
				}
				pstmt.setInt(1, criteriaId);
				rs = pstmt.executeQuery();
				if(rs.next()){
					tempSB.append("<CriteriaName>" + rs.getString("CriteriaName") + "</CriteriaName>");
					String entityName = "";
					if(locale != null && !locale.equalsIgnoreCase("en-us") && enableMultiLingual.equalsIgnoreCase("Y"))
                    {
                        entityName = rs.getString("EntityName");
                        if(rs.wasNull())
                            entityName = "";
                    }
					tempSB.append("<EntityName>" +entityName + "</EntityName>");
					tempSB.append("<Description>" + rs.getString("Description") + "</Description>");
					tempSB.append("<ChartInfo>" + rs.getString("ChartInfo") + "</ChartInfo>");
					tempSB.append("<ExcludeExitWorkitems>" + rs.getString("ExcludeExitWorkitems") + "</ExcludeExitWorkitems>");
					tempSB.append("<State>" + rs.getString("State") + "</State>");
				}else{
					mainCode = WFSError.WF_INVALID_CRITERIA_ID;
					subCode = WFSError.WFS_ILP;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = subject = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}
				if(rs != null){
					rs.close();
					rs = null;
				}
				if(pstmt != null){
					pstmt.close();
					pstmt = null;
				}
				if(mainCode == 0){
					StringBuilder queueStrBldr = new StringBuilder("");
					StringBuilder proceStrBldr = new StringBuilder("");
					StringBuilder filterStrBldr = new StringBuilder("<FilterInfo>");
					if((locale == null) || (locale != null && locale.equalsIgnoreCase("en-us")) || !enableMultiLingual.equalsIgnoreCase("Y")){
					pstmt = con.prepareStatement("select OA.ObjectID, OA.ObjectName, OA.ObjectType, FD.FilterXML, FD.FilterColor, FD.ConditionOption from WFReportObjAssocTable OA " + WFSUtil.getTableLockHintStr(dbType)
							+ " LEFT OUTER JOIN WFFilterDefTable FD " + WFSUtil.getTableLockHintStr(dbType) + " ON OA.ObjectID = FD.FilterID and OA.ObjectName = FD.FilterName where OA.CriteriaId = ?");
					}else{
						pstmt = con.prepareStatement("select A.*,B.EntityName from ( select OA.ObjectID, OA.ObjectName, OA.ObjectType, FD.FilterXML, FD.FilterColor, FD.ConditionOption from WFReportObjAssocTable OA " + WFSUtil.getTableLockHintStr(dbType)
						+ " LEFT OUTER JOIN WFFilterDefTable FD " + WFSUtil.getTableLockHintStr(dbType) + " ON OA.ObjectID = FD.FilterID and OA.ObjectName = FD.FilterName where OA.CriteriaId = ? ) A LEFT OUTER JOIN WFMultiLingualTable B "+WFSUtil.getTableLockHintStr(dbType)+" on ((A.ObjectID=B.EntityId and B.EntityType="+WFSConstant.PROCESS_ENTITY_TYPE+" and A.ObjectType='P') or (A.ObjectID=B.EntityId and B.EntityType="+WFSConstant.QUEUE_ENTITY_TYPE+" and A.ObjectType='Q')  or (A.ObjectName=B.FieldName and B.EntityType="+WFSConstant.FILTER_ENTITY_TYPE+" and A.ObjectType='F' and B.parentID="+criteriaId+")) and Locale='"+WFSUtil.TO_SANITIZE_STRING(locale, true)+"'");
					}
					pstmt.setInt(1, criteriaId);
					rs = pstmt.executeQuery();
					while(rs != null && rs.next()){
						int objectId = rs.getInt("ObjectID");
						String objectName = rs.getString("ObjectName");
						String objectType = rs.getString("ObjectType");
						String entityName = "";
						if(locale != null && !locale.equalsIgnoreCase("en-us") && enableMultiLingual.equalsIgnoreCase("Y"))
                        {
                            entityName = rs.getString("EntityName");
                            if(rs.wasNull())
                                entityName = "";
                        }
						if("Q".equalsIgnoreCase(objectType)){
							if(objectId==0 && (objectName == null || objectName == "") )
								objectName = "My Queue";
							queueStrBldr.append("<QueueID>"+ objectId +"</QueueID>");
							if(isArtifactMigrationCase)
				            {
								queueStrBldr.append("<QueueName>"+ objectName +"</QueueName>");
				            }
							else
							{
							queueStrBldr.append("<QueueName EntityName=\""+entityName+"\">"+ objectName +"</QueueName>");
							}
						}else if("P".equalsIgnoreCase(objectType)){
							proceStrBldr.append("<ProcessDefinitionID>" + objectId + "</ProcessDefinitionID>");
							if(isArtifactMigrationCase)
				            {
								proceStrBldr.append("<ProcessName>"+ objectName +"</ProcessName>");
				            }
							else
							{
							proceStrBldr.append("<ProcessName EntityName=\""+entityName+"\">"+ objectName +"</ProcessName>");
							}
						}else if("F".equalsIgnoreCase(objectType)){
							filterStrBldr.append("<Filter><FilterAlias>"+ objectName + "</FilterAlias>");
							filterStrBldr.append("<EntityName>" + entityName + "</EntityName>");
							String FilterXML = rs.getString("FilterXML");
							FilterXML = FilterXML.replaceAll("&UserIndex&", "&amp;UserIndex&amp;");
							FilterXML = FilterXML.replaceAll("&UserName&", "&amp;UserName&amp;");
							filterStrBldr.append("<FilterXML>" + FilterXML + "</FilterXML>");
							filterStrBldr.append("<FilterColor>" + rs.getString("FilterColor") + "</FilterColor>");
							filterStrBldr.append("<ConditionOption>" + rs.getString("ConditionOption") + "</ConditionOption></Filter>");
						}
					}
					queueStrBldr.append("");
					proceStrBldr.append("");
					filterStrBldr.append("</FilterInfo>");
					
					tempSB.append(queueStrBldr).append(proceStrBldr).append(filterStrBldr);
	
					if(rs != null){
						rs.close();
						rs = null;
					}
					if(pstmt != null){
						pstmt.close();
						pstmt = null;
					}
					
					if(isArtifactMigrationCase)
		            {

						//input XML for WFGetVarMappingData
						StringBuilder WFGetVarMappingDataXML = new StringBuilder();
						XMLParser parser1 = new XMLParser();
						long startTime = 0L;
						long endTime = 0L;
						String WFGetVarMappingDataResult = "";
						int userId = participant.getid(); ;

						WFGetVarMappingDataXML.append("<?xml version=\"1.0\"?><WFGetVarMappingData_Input><Option>WFGetVarMappingData</Option>");
						WFGetVarMappingDataXML.append("<EngineName>" + engine + "</EngineName>");
						WFGetVarMappingDataXML.append("<SessionId>" + sessionID  + "</SessionId>");                      
						WFGetVarMappingDataXML.append("<CriteriaId>" +  criteriaId  + "</CriteriaId>");   
						WFGetVarMappingDataXML.append("<DisplayFlag>N</DisplayFlag>");
						WFGetVarMappingDataXML.append("<EnableMultiLingual>" +  enableMultiLingual   + "</EnableMultiLingual>");
						WFGetVarMappingDataXML.append("<openMode>" +  parser.getValueOf("OpenMode", "WD", true)   + "</openMode>");
						WFGetVarMappingDataXML.append("</WFGetVarMappingData_Input>");

						parser1.setInputXML(WFGetVarMappingDataXML.toString());

						try{
							startTime = System.currentTimeMillis();
							//call WMCompleteWorkItem API                                                                         
							WFGetVarMappingDataResult =  WFFindClass.getReference().execute("WFGetVarMappingData", engine, con, parser1,gen);                                                        
							endTime = System.currentTimeMillis();  
						}catch(WFSException wfse){                       
							WFSUtil.printErr(engine,"Exception occurred on calling WFGetVarMappingData API", wfse);
				}
						WFSUtil.writeLog("WFClientServiceHandlerBean", "WFGetVarMappingData", startTime, endTime, 0, WFGetVarMappingDataXML.toString(),WFGetVarMappingDataResult,engine,0,sessionID,userId);                              
						WFGetVarMappingDataXML = null;                  
					
						parser1.setInputXML(WFGetVarMappingDataResult);
						if(WFGetVarMappingDataResult.length() > 0 && "0".equalsIgnoreCase(parser1.getValueOf("MainCode"))){							
							tempSB.append("<VarMappingInfo>");
							tempSB.append(parser1.getValueOf("VarMappingInfo"));
							tempSB.append("</VarMappingInfo>");
						}
						else
						{
							WFSUtil.printOut(engine,"In WFGetVarMappingData API some error occurred due to which VarMappingInfo is not coming ");
						}
		            }
				}
			 }
			} else{
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			
			if(mainCode == 0){
				if(commit && !con.getAutoCommit()){
					con.commit();
					con.setAutoCommit(true);
					commit = false;
				}
				outputXML = new StringBuilder(4000);
				outputXML.append(gen.createOutputFile("WFGetReportCriteria"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");
				if(isArtifactMigrationCase)
				{
					outputXML.append("<CriteriaData>\n");
					outputXML.append("<ArtificationMigration>Y</ArtificationMigration>");
					outputXML.append("<OperationFlag>I</OperationFlag>");
				outputXML.append(tempSB);
					outputXML.append("</CriteriaData>\n");
				}
				else
				{
				outputXML.append(tempSB);
				}
				outputXML.append(gen.closeOutputFile("WFGetReportCriteria"));
			}
		} catch(SQLException e){
			WFSUtil.printErr("", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if(e.getErrorCode() == 0){
				if("08S01".equalsIgnoreCase(e.getSQLState())){
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
				}
			} else{
				descr = e.getMessage();
			}
		} catch(NumberFormatException e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(NullPointerException e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(Exception e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(Error e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} finally{
			try{
				if(mainCode == 0){
					if(commit && !con.getAutoCommit()){
						con.commit();
						con.setAutoCommit(true);
					}
				}else{
					if(commit && !con.getAutoCommit()){
						con.rollback();
						con.setAutoCommit(true);
					}
				}
			}catch(SQLException ex){
				WFSUtil.printErr(engine,"Exception occurred on commit/rollback of transaction for WFGetReportCriteria ", ex);
			}
			try{
				if(rs != null){
					rs.close();
					rs = null;
				}
				if(pstmt != null){
					pstmt.close();
					pstmt = null;
				}
			}catch(Exception ignored){}
			
		}
		if(mainCode != 0){
			return (WFSUtil.generalError(option, engine, gen, mainCode, subCode, errType, subject, descr));
		}
		return outputXML.toString();
	}
	 
	//----------------------------------------------------------------------------------------------------
	//		Function Name 				:	WFGetReportCriteriaList
	//		Date Written (DD/MM/YYYY)	:	15/07/2019
	//		Author						:	Ambuj Tripathi
	//		Input Parameters			:	Connection , XMLParser , XMLGenerator
	//		Output Parameters			:   none
	//		Return Values				:	String
	//		Description					:   This method returns All the Report Criteria Details list present in the cabinet.
	//----------------------------------------------------------------------------------------------------   
	public String WFGetReportCriteriaList(Connection con, XMLParser parser, XMLGenerator gen) {
		int mainCode = 0;
		int subCode = 0;
		String errType = WFSError.WF_TMP;
		String subject = null;
		String descr = null;
		StringBuffer outputXML = new StringBuffer(1000);;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String option = null;
		String engine = "";
		StringBuilder tempStr = new StringBuilder();
		boolean commit = false;
		StringBuilder query = new StringBuilder();
		String locale=null;
		int checkRightsCounter=0;
		try{
			option = parser.getValueOf("Option","", false);
			engine = parser.getValueOf("EngineName","", false);
			int sessionID = parser.getIntOf("SessionId", 0, false);
			String prefix = parser.getValueOf("Prefix","", true);
			boolean sortOrder = parser.getValueOf("SortOrder", "A", true).startsWith("D");
			String lastValue = parser.getValueOf("LastValue", "", true);
			int lastIndex = Integer.parseInt(parser.getValueOf("LastIndex", "0", true));
			int serverBatchSize = ServerProperty.getReference().getBatchSize();
			int noOfRecordsToFetch = parser.getIntOf("NoOfRecordsToFetch", serverBatchSize, true);
			if(noOfRecordsToFetch > serverBatchSize || noOfRecordsToFetch <= 0 ){
				noOfRecordsToFetch = serverBatchSize;
			}
			int orderBy = parser.getIntOf("OrderBy", 2, true);
			int dbType = ServerProperty.getReference().getDBType(engine);
			WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
			String inputRights = parser.getValueOf("RightFlag", "000000", true);
			boolean rightsFlag = inputRights.startsWith("01");
            WFSUtil.printOut(engine,"WMMiscelleneous::WFGetReportCriteriaList : rightsFlag : " + rightsFlag);
			StringBuffer filterStr = new StringBuffer(100);
			StringBuffer timeXml = new StringBuffer(100);
			StringBuilder rightsCheckFilterString = new StringBuilder();
			Map<Integer, String> criteriaMap = new HashMap<Integer, String>();
			StringBuilder criteriaIdFilter = new StringBuilder();
			String enableMultiLingual = parser.getValueOf("EnableMultiLingual", "N", true);
			boolean pmMode = parser.getValueOf("OpenMode", "WD", true).equalsIgnoreCase("PM");
			if(pmMode){
				enableMultiLingual="N";
			}
			
			if(participant != null){
				if(con.getAutoCommit()){
					con.setAutoCommit(false);
					commit = true;
				}
				
				String scope = participant.getscope();
                if(!"ADMIN".equalsIgnoreCase(scope))
                	locale = participant.getlocale();
				
				if(prefix != null && !prefix.isEmpty()){
                    filterStr.append(" AND " + WFSUtil.getLikeFilterStr(parser, "B.CriteriaName", prefix, dbType, true));
                    rightsCheckFilterString.append(WFSUtil.getLikeFilterStr(parser, "ObjectName", prefix, dbType, true));
				}
				
				//Batch Count Condition for beginning
				int recordStill = noOfRecordsToFetch + 1;
				criteriaIdFilter.append(" AND RP.CriteriaId IN (");
				//Getting the list of objects on which user has either of the any assigned rights.
				while(true){
					if(rightsFlag){
						int retrievedRecords = 0;
						int totalRecords = 0;
						int result = 0;
						checkRightsCounter++;
							long startTime = System.currentTimeMillis();
						String rightsWithObjects = WFSUtil.returnRightsForObjectType(con, dbType, participant.getid(), WFSConstant.CONST_OBJTYPE_CRITERIA, (sortOrder) ? "D" : "A", noOfRecordsToFetch, lastValue,rightsCheckFilterString.toString(),0);
						long endTime = System.currentTimeMillis();
						timeXml.append("<RightsTime"+checkRightsCounter+">"); 
						timeXml.append(endTime-startTime);
						timeXml.append("</RightsTime"+checkRightsCounter+">");
						WFSUtil.printOut(engine,"WMMiscelleneous::WFGetReportCriteriaList : rightsWithObjects : " + rightsWithObjects);
						
						if(rightsWithObjects == null || rightsWithObjects.trim().equals("")){
							mainCode = WFSError.WM_NO_MORE_DATA;
                            subCode = 0;
	                        break;
						} else{
							parser.setInputXML(rightsWithObjects);	
							retrievedRecords = Integer.parseInt(parser.getValueOf("RetrievedCount"));
							totalRecords =  Integer.parseInt(parser.getValueOf("TotalCount"));
                            if(retrievedRecords == 0){
                                if(lastIndex <= 0){
                                    mainCode = WFSError.WM_NO_MORE_DATA;
                                    subCode = 0;
                                }
                                break;
                            }
                            else{
                                int startIndex = 0;
                                int endIndex = 0;
                                String loginUserRights = "";
								boolean isRightOnObject = false;
                                for(int i = 0; i < retrievedRecords; i++){
                                    startIndex = parser.getStartIndex("Object", endIndex, 0);
                                    endIndex = parser.getEndIndex("Object", startIndex, 0);
                                    lastValue = parser.getValueOf("ObjectName", startIndex, endIndex);
                                    lastIndex = Integer.parseInt(parser.getValueOf("ObjectId", startIndex, endIndex));
                                    loginUserRights = parser.getValueOf("RightString", startIndex, endIndex);
                                    if(WFSUtil.compareRightsOnObject(loginUserRights, WFSConstant.CONST_CRITERIA_VIEW)){
                                    	criteriaIdFilter.append(lastIndex + ",");
                                    	criteriaMap.put(lastIndex, loginUserRights);
                                    	result++;
                                    }
                                }
                            }
						}

                        if(result <= noOfRecordsToFetch){
                            recordStill = recordStill - result;
                            if( (totalRecords <= retrievedRecords) || (recordStill < 1) ){
                                break;
                            }
                            else{
                                continue;
                            }
                        } else {
                            break;
                        }
                    } else{
                        break;
                    }
				}
				
				if(criteriaMap.size() > 0){
					
					if((locale == null) || (locale != null && locale.equalsIgnoreCase("en-us")) || !enableMultiLingual.equalsIgnoreCase("Y")){
					query.append("SELECT RP.CriteriaId, RP.CriteriaName, RP.Description, FD.FilterName ,FD.FilterId " 
							+ " from WFReportPropertiesTable RP " + WFSUtil.getTableLockHintStr(dbType) + ", WFFilterDefTable FD " + WFSUtil.getTableLockHintStr(dbType) 
							+ " Where FD.CriteriaId = RP.CriteriaId " + criteriaIdFilter.toString().substring(0, criteriaIdFilter.length()-1) + ")");
					}else{
						query.append("SELECT RP.CriteriaId, RP.CriteriaName, RP.Description, FD.FilterName,FD.FilterId,RP.EntityName CriteriaEntityName,FD.EntityName FilterEntityName from (")
						.append("SELECT A.CriteriaId, A.CriteriaName,A.Description,A.ChartInfo,A.ExcludeExitWorkitems,A.State,A.LastModifiedOn,B.EntityName from WFReportPropertiesTable A ")
						.append(WFSUtil.getTableLockHintStr(dbType))
						.append("LEFT OUTER JOIN WFMultiLingualTable B ")
						.append(WFSUtil.getTableLockHintStr(dbType))
						.append("on A.CriteriaId=B.EntityId and EntityType=")
						.append(WFSConstant.CRITERIA_ENTITY_TYPE).append(" and Locale='")
						.append(WFSUtil.TO_SANITIZE_STRING(locale, true))
						.append("' )  RP  , ( SELECT A.FilterID,A.FilterName,A.FilterXML,A.CriteriaID,A.FilterColor,A.ConditionOption ,B.EntityName from WFFilterDefTable A ")
						.append(WFSUtil.getTableLockHintStr(dbType))
						.append(" LEFT OUTER JOIN WFMultiLingualTable B ")
						.append(WFSUtil.getTableLockHintStr(dbType))
						.append("on A.FilterName=B.FieldName and A.CriteriaID=B.ParentId and EntityType=")
						.append(WFSConstant.FILTER_ENTITY_TYPE).append(" and Locale='")
						.append(WFSUtil.TO_SANITIZE_STRING(locale, true))
						.append("' ) FD  Where FD.CriteriaId = RP.CriteriaId ")
						.append(criteriaIdFilter.toString().substring(0, criteriaIdFilter.length()-1))
						.append(")");
					}
	//				//Search condition
	//				if(prefix != null && !prefix.isEmpty()){
	//					query.append(" AND " + WFSUtil.getLikeFilterStr(parser, "RP.CriteriaName", prefix, dbType, true));
	//				}
	//				
	//				//Batch Condition
	//				if(lastValue != null && !lastValue.trim().isEmpty()){
	//					query.append(" And " + WFSUtil.TO_STRING("CriteriaName", false, dbType));
	//					if(sortOrder){
	//						query.append(" < ");
	//					}else{
	//						query.append(" > ");
	//					}
	//					query.append(WFSUtil.TO_STRING(lastValue, false, dbType));
	//				}
					
					//Sort Condition
					switch(orderBy){
						case 1: query.append(" Order By RP.CriteriaId");
						break;
						case 2: query.append(" Order By RP.CriteriaName");
						break;
						case 3: query.append(" Order By RP.Description");
						break;
						default: query.append(" Order By RP.CriteriaName");
						break;
					}
					if(sortOrder){
						query.append(" DESC");
					}
					
					pstmt = con.prepareStatement(query.toString());
					rs = pstmt.executeQuery();
					tempStr.append("<CriteriaList>");
					int precCriteriaID = 0;
					boolean isFirstReport = true;
					int count=0;
					String criteriaEntityName = "";
					String filterEntityName = "";
					while(rs != null && rs.next()){
						int currCriteriaId = rs.getInt("CriteriaId");
						int filterId = rs.getInt("FilterId");
						if( criteriaMap.containsKey(currCriteriaId) ){
							String rightsString =  criteriaMap.get(currCriteriaId);
							criteriaEntityName = "";
							filterEntityName = "";
							if(precCriteriaID == currCriteriaId){
								if(locale != null && !locale.equalsIgnoreCase("en-us") && enableMultiLingual.equalsIgnoreCase("Y"))
		                        {
		                            filterEntityName = rs.getString("FilterEntityName");
		                            if(rs.wasNull())
		                            	filterEntityName = "";
		                        }
								tempStr.append("<FilterName EntityName=\"")
								.append(filterEntityName)
								.append("\" FilterId=\"")
								.append(filterId)
								.append("\">" + rs.getString("FilterName") + "</FilterName>");
							}else{
								if(!isFirstReport){
									tempStr.append("</FilterList>");
									tempStr.append("</Criteria>");
								}
								tempStr.append("<Criteria>");
								tempStr.append("<CriteriaId>" + currCriteriaId + "</CriteriaId>");
								tempStr.append("<CriteriaName>" + rs.getString("CriteriaName") + "</CriteriaName>");
								tempStr.append("<Description>" + rs.getString("Description") + "</Description>");
								tempStr.append("<RightString>" + rightsString + "</RightString>");
								if(locale != null && !locale.equalsIgnoreCase("en-us") && enableMultiLingual.equalsIgnoreCase("Y"))
		                        {
									criteriaEntityName = rs.getString("CriteriaEntityName");
		                            if(rs.wasNull())
		                            	criteriaEntityName = "";
		                            filterEntityName = rs.getString("FilterEntityName");
		                            if(rs.wasNull())
		                            	filterEntityName = "";
		                        }
								tempStr.append("<EntityName>").append(criteriaEntityName).append("</EntityName>");
								tempStr.append("<FilterList>");
								tempStr.append("<FilterName EntityName=\"")
								.append(filterEntityName)
								.append("\" FilterId=\"")
								.append(filterId)
								.append("\">" + rs.getString("FilterName") + "</FilterName>");
								isFirstReport = false;
								precCriteriaID = currCriteriaId;
								count++;
							}
						}
					}
					tempStr.append("</FilterList>");
					tempStr.append("</Criteria>");
					tempStr.append("</CriteriaList>"); 
					if(rs != null){
						rs.close();
						rs = null;
					}
					if(pstmt != null){
						pstmt.close();
						pstmt = null;
					}
					if(count<=0){
						mainCode = WFSError.WM_NO_MORE_DATA;
	                    subCode = 0;
	                    subject = WFSErrorMsg.getMessage(mainCode);
	                    descr = WFSErrorMsg.getMessage(subCode);
	                    errType = WFSError.WF_TMP;
						
					}
				}
				else{
					mainCode = WFSError.WM_NO_MORE_DATA;
					subCode = 0;
				}
			} else{
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if(mainCode == 0 || mainCode==WFSError.WM_NO_MORE_DATA){
				if(commit && !con.getAutoCommit()){
					con.commit();
					con.setAutoCommit(true);
					commit = false;
				}
				outputXML.append(gen.createOutputFile("WFGetReportCriteriaList"));
				outputXML.append("<Exception>\n<MainCode>"+mainCode+"</MainCode>\n</Exception>\n");				
				outputXML.append(tempStr.toString());
				outputXML.append(timeXml);
				outputXML.append(gen.closeOutputFile("WFGetReportCriteriaList"));				
			}
		} catch(SQLException e){
			WFSUtil.printErr("", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if(e.getErrorCode() == 0){
				if("08S01".equalsIgnoreCase(e.getSQLState())){
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
				}
			} else{
				descr = e.getMessage();
			}
		} catch(NumberFormatException e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(NullPointerException e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(Exception e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(Error e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} finally{
			try{
				if(mainCode == 0||mainCode==WFSError.WM_NO_MORE_DATA){
					if(commit && !con.getAutoCommit()){
						con.commit();
						con.setAutoCommit(true);
					}
				}else{
					if(commit && !con.getAutoCommit()){
						con.rollback();
						con.setAutoCommit(true);
					}
				}
			}catch(SQLException ex){
				WFSUtil.printErr(engine,"Exception occurred on commit/rollback of transaction for WFGetReportCriteriaList ", ex);
			}
			try{
				if(rs != null){
					rs.close();
					rs = null;
				}
				if(pstmt != null){
					pstmt.close();
					pstmt = null;
				}
			}catch(Exception ex){}
			
		}
		if(mainCode != 0 && mainCode!=WFSError.WM_NO_MORE_DATA){
			return (WFSUtil.generalError(option, engine, gen, mainCode, subCode, errType, subject, descr));
		}
		return outputXML.toString();
	}
	 
	//----------------------------------------------------------------------------------------------------
	//		Function Name 				:	WFFetchReportData
	//		Date Written (DD/MM/YYYY)	:	15/07/2019
	//		Author						:	Ambuj Tripathi
	//		Input Parameters			:	Connection , XMLParser , XMLGenerator
	//		Output Parameters			:   none
	//		Return Values				:	String
	//		Description					:   This method returns the Report Criteria's filter wise counts when only reportID is provided OR
	//										returns the WI Count for the selected filter of the criteria along with list of Workitems that are
	//										satisfying the selected filter criteria.
	//										Mode1: 	When only Criteria ID is passed - returns count of WI for all the filters of selected Criteria.
	//										Mode2: 	When FilterID is passed with CriteriaId - returns WI Count & WIs List of selected filter of selected criteria.
	//----------------------------------------------------------------------------------------------------   
	public String WFSetVarMappingData(Connection con, XMLParser parser, XMLGenerator gen) {
		int mainCode = 0;
		int subCode = 0;
		String errType = WFSError.WF_TMP;
		String subject = null;
		String descr = null;
		StringBuffer outputXML = new StringBuffer();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String option = null;
		String engine = "";
		StringBuilder tempStr = null;
		boolean commit = false;
		try{
			option = parser.getValueOf("Option","", false);
			engine = parser.getValueOf("EngineName","", false);
			int sessionID = parser.getIntOf("SessionId", 0, false);
			int criteriaId = parser.getIntOf("CriteriaId", 0, false);
			int dbType = ServerProperty.getReference().getDBType(engine);
			WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
			if(participant != null){
				if(con.getAutoCommit()){
					con.setAutoCommit(false);
					commit = true;
				}
				
				//Check for the validity/Existance of CriteriaId..
				pstmt = con.prepareStatement("Select 1 from WFReportPropertiesTable " + WFSUtil.getTableLockHintStr(dbType) + " where CriteriaId = ? ");
				pstmt.setInt(1, criteriaId);
				rs = pstmt.executeQuery();
				if(rs != null && rs.next()){
					if(rs != null){
						rs.close();
						rs = null;
					}
					if(pstmt != null){
						pstmt.close();
						pstmt = null;
					}
					String operationType = parser.getValueOf("OperationType","", false);
					if("D".equalsIgnoreCase(operationType) || "U".equalsIgnoreCase(operationType)){
						pstmt = con.prepareStatement("Delete from WFReportVarMappingTable where CriteriaId = ?");
						pstmt.setInt(1, criteriaId);
						pstmt.executeUpdate();
						if(pstmt != null){
							pstmt.close();
							pstmt = null;
						}
					}else if("I".equalsIgnoreCase(operationType) || "U".equalsIgnoreCase(operationType)){
						int varCount = parser.getNoOfFields("Variable");
						pstmt = con.prepareStatement("Insert into WFReportVarMappingTable(CriteriaId,VariableId,VariableName,"
								+ " Type,DisplayName,SystemDefinedName,OrderId,IsHidden,IsSortable,LastModifiedDateTime,VariableType,DisableSorting,MappedType) "
								+ " values(?,?,?,?,?,?,?,?,?,"+ WFSUtil.getDate(dbType)+",?,?)");
						for(int inx = 0; inx < varCount; inx++){
							XMLParser varParser = new XMLParser();
							if( inx != 0 ){
								varParser.setInputXML(parser.getNextValueOf("Variable"));
							}else{
								varParser.setInputXML(parser.getFirstValueOf("Variable"));
							}
							int variableId = varParser.getIntOf("VariableId", 0, false);
							String variableName = varParser.getValueOf("VariableName","", false);
							String variableType = varParser.getValueOf("VariableType", "", false);
							int type = varParser.getIntOf("Type",0, false);
							String displayName = varParser.getValueOf("DisplayName","", false);
							String systemDefinedName = varParser.getValueOf("SystemDefinedName","", false);
							int orderId = varParser.getIntOf("OrderId", 0, false);
							String isHidden = varParser.getValueOf("IsHidden","", false);
							String isSortable = varParser.getValueOf("IsSortable","", false);
							String disableSorting = varParser.getValueOf("DisableSorting","", false);
							int mappedType = varParser.getIntOf("MappedType", 0, false);
							pstmt.setInt(1, criteriaId);
							pstmt.setInt(2, variableId);
							pstmt.setString(3, variableName);
							pstmt.setInt(4, type);
							pstmt.setString(5, displayName);
							pstmt.setString(6, systemDefinedName);
							pstmt.setInt(7, orderId);
							pstmt.setString(8, isHidden);
							pstmt.setString(9, isSortable);
							pstmt.setString(10, variableType);
							pstmt.setString(11, disableSorting);
							pstmt.setInt(12, mappedType);
							pstmt.addBatch();
						}
						if(pstmt != null && varCount > 0){
							pstmt.executeBatch();
							pstmt.close();
							pstmt = null;
						}
					}
					if(!("I".equalsIgnoreCase(operationType) || "D".equalsIgnoreCase(operationType) || "U".equalsIgnoreCase(operationType))){
						mainCode = WFSError.WM_INVALID_OPERATION_TYPE;
						subCode = WFSError.WFS_ILP;
						subject = WFSErrorMsg.getMessage(mainCode);
						descr = WFSErrorMsg.getMessage(subCode);
						errType = WFSError.WF_TMP;
					}
				}else{
					if(rs != null){
						rs.close();
						rs = null;
					}
					if(pstmt != null){
						pstmt.close();
						pstmt = null;
					}
					mainCode = WFSError.WF_INVALID_CRITERIA_ID;
					subCode = WFSError.WFS_ILP;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}
			} else{
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			
			if(mainCode == 0){
				if(commit && !con.getAutoCommit()){
					con.commit();
					con.setAutoCommit(true);
					commit = false;
				}
				outputXML = new StringBuffer(1000);
				outputXML.append(gen.createOutputFile("WFSetVarMappingData"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");				
//				outputXML.append(tempStr.toString());				
				outputXML.append(gen.closeOutputFile("WFSetVarMappingData"));				
			}
		} catch(SQLException e){
			WFSUtil.printErr("", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if(e.getErrorCode() == 0){
				if("08S01".equalsIgnoreCase(e.getSQLState())){
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
				}
			} else{
				descr = e.getMessage();
			}
		} catch(NumberFormatException e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(NullPointerException e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(Exception e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(Error e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} finally{
			try{
				if(mainCode == 0){
					if(commit && !con.getAutoCommit()){
						con.commit();
						con.setAutoCommit(true);
					}
				}else{
					if(commit && !con.getAutoCommit()){
						con.rollback();
						con.setAutoCommit(true);
					}
				}
			}catch(SQLException ex){
				WFSUtil.printErr(engine,"Exception occurred on commit/rollback of transaction for WFSetVarMappingData ", ex);
			}
			try{
				if(rs != null){
					rs.close();
					rs = null;
				}
			}catch(Exception ignored){}
			try{
				if(pstmt != null){
					pstmt.close();
					pstmt = null;
				}
			}catch(Exception ignored){}
			
		}
		if(mainCode != 0){
			return (WFSUtil.generalError(option, engine, gen, mainCode, subCode, errType, subject, descr));
		}
		return outputXML.toString();
	}
	
	//----------------------------------------------------------------------------------------------------
	//		Function Name 				:	WFGetVarMappingData
	//		Date Written (DD/MM/YYYY)	:	15/07/2019
	//		Author						:	Ambuj Tripathi
	//		Input Parameters			:	Connection , XMLParser , XMLGenerator
	//		Output Parameters			:   none
	//		Return Values				:	String
	//		Description					:   This method returns the Report Criteria's defined displaynames and their respective variable mappings.
	//----------------------------------------------------------------------------------------------------
	public String WFGetVarMappingData(Connection con, XMLParser parser, XMLGenerator gen) {
		int mainCode = 0;
		int subCode = 0;
		String errType = WFSError.WF_TMP;
		String subject = null;
		String descr = null;
		StringBuffer outputXML = new StringBuffer();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String option = null;
		String engine = "";
		StringBuilder tempStr = null;
		boolean commit = false;
		String query=null;
		String locale = null;
		try{
			option = parser.getValueOf("Option","", false);
			engine = parser.getValueOf("EngineName","", false);
			int sessionID = parser.getIntOf("SessionId", 0, false);
			int criteriaId = parser.getIntOf("CriteriaId", 0, false);
			String enableMultiLingual = parser.getValueOf("EnableMultiLingual", "N", true);
			boolean pmMode = parser.getValueOf("OpenMode", "WD", true).equalsIgnoreCase("PM");
			if(pmMode){
				enableMultiLingual="N";
			}
			String  filterStr="";
			boolean  displayFlag = "Y".equalsIgnoreCase(parser.getValueOf("DisplayFlag", "N", true));
			int dbType = ServerProperty.getReference().getDBType(engine);
			WFParticipant participant = WFSUtil.WFCheckSession(con, sessionID);
			Map<String, String> aliasOrderByMap = new HashMap<String, String>();
			Map<String, String> aliasRuleMap = new HashMap<String, String>();
			if(participant != null){
				if(con.getAutoCommit()){
					con.setAutoCommit(false);
					commit = true;
				}
				
				String scope = participant.getscope();
                if(!"ADMIN".equalsIgnoreCase(scope))
                	locale = participant.getlocale();
				
				//Check for the validity/Existance of CriteriaId..
				pstmt = con.prepareStatement("Select LastModifiedOn from WFReportPropertiesTable " + WFSUtil.getTableLockHintStr(dbType) + " where CriteriaId = ? ");
				pstmt.setInt(1, criteriaId);
				rs = pstmt.executeQuery();
				if(rs != null && rs.next()){
					String lastModifiedOn = rs.getString("LastModifiedOn");
					
					if(rs != null){
						rs.close();
						rs = null;
					}
					if(pstmt != null){
						pstmt.close();
						pstmt = null;
					}
					pstmt = con.prepareStatement("select Param1, VariableId1, AliasRule from varaliastable" + WFSUtil.getTableLockHintStr(dbType) 
								+ " where QueueId in (select OBJECTId from wfreportobjAssocTable" + WFSUtil.getTableLockHintStr(dbType) 
								+ " where criteriaId = ? and OBJECTType = 'Q')");
					pstmt.setInt(1, criteriaId);
					rs = pstmt.executeQuery();
					while(rs != null && rs.next()){
						String param1 = rs.getString("Param1");
						String orderBy = rs.getString("VariableId1");
						String aliasRule = rs.getString("AliasRule");
						aliasOrderByMap.put(param1.toUpperCase(), orderBy);
						aliasRuleMap.put(param1.toUpperCase(), aliasRule);
					}
					if(rs != null){
						rs.close();
						rs = null;
					}
					if(pstmt != null){
						pstmt.close();
						pstmt = null;
					}
					if(displayFlag){
						filterStr=filterStr+" AND IsHidden='N'";
					}
					tempStr = new StringBuilder("<CriteriaId>"+ criteriaId +"</CriteriaId><VarMappingInfo>");
					 if((locale == null) || (locale != null && locale.equalsIgnoreCase("en-us")) || !enableMultiLingual.equalsIgnoreCase("Y")){
						 pstmt = con.prepareStatement("Select CriteriaId,VariableId,VariableName,VariableType, Type, DisplayName,SystemDefinedName,OrderId,IsHidden,IsSortable,DisableSorting,MappedType from "
							+ " WFReportVarMappingTable " + WFSUtil.getTableLockHintStr(dbType) + " where CriteriaID = ? "+filterStr+" order by OrderId ASC");
					 }else{
						 query="Select CriteriaId,VariableId,VariableName,VariableType, Type, DisplayName,SystemDefinedName,OrderId,IsHidden,IsSortable,DisableSorting,MappedType,B.EntityName from "
									+ " WFReportVarMappingTable A " + WFSUtil.getTableLockHintStr(dbType) + " LEFT OUTER JOIN WFMultiLingualTable B on A.VariableId=B.EntityId  and A.CriteriaId=B.ParentId and B.EntityType="+WFSConstant.DISPLAY_ENTITY_TYPE+" and Locale='"+WFSUtil.TO_SANITIZE_STRING(locale, true)+"' where CriteriaID = ? "+filterStr+" order by OrderId ASC";
						 pstmt = con.prepareStatement(query);
					 }
					pstmt.setInt(1, criteriaId);
					rs = pstmt.executeQuery();
					while(rs != null && rs.next()){
						String variableType = rs.getString("VariableType");
						String sysDefName = rs.getString("SystemDefinedName");
						String entityName = "";
	                    if(locale != null && !locale.equalsIgnoreCase("en-us") && enableMultiLingual.equalsIgnoreCase("Y"))
	                    {
	                        entityName = rs.getString("EntityName");
	                         if(rs.wasNull())
	                              entityName = "";
	                     }
						tempStr.append("<Variable>");
						int variableId=rs.getInt("VariableId");
						tempStr.append(gen.writeValue("VariableId", ""+variableId));
						tempStr.append(gen.writeValue("VariableType", variableType));
						tempStr.append(gen.writeValue("Type", rs.getString("Type")));
						String isSortTable= rs.getString("IsSortable");
						if("A".equalsIgnoreCase(variableType)){
							tempStr.append(gen.writeValue("Name", rs.getString("VariableName")));
							tempStr.append(gen.writeValueOf("OrderBy", aliasOrderByMap.get(sysDefName.toUpperCase())));
							tempStr.append(gen.writeValueOf("AliasRule", aliasRuleMap.get(sysDefName.toUpperCase())));
						}else if("U".equalsIgnoreCase(variableType)&&
								"Y".equalsIgnoreCase(isSortTable)&&
								variableId>=1&&variableId<=26){
							tempStr.append(gen.writeValue("VariableName", rs.getString("VariableName")));
							tempStr.append(gen.writeValue("OrderBy", String.valueOf(100+variableId)));
							
						}else{
							tempStr.append(gen.writeValue("VariableName", rs.getString("VariableName")));
						}
						tempStr.append(gen.writeValue("DisplayName", rs.getString("DisplayName")));
						tempStr.append(gen.writeValueOf("EntityName", entityName));
						tempStr.append(gen.writeValue("SystemDefinedName", sysDefName));
						tempStr.append(gen.writeValue("OrderId", ""+rs.getInt("OrderId")));
						tempStr.append(gen.writeValue("IsHidden", rs.getString("IsHidden")));
						tempStr.append(gen.writeValue("IsSortable", isSortTable));
						tempStr.append(gen.writeValue("DisableSorting", rs.getString("DisableSorting")));
						tempStr.append(gen.writeValue("MappedType", ""+rs.getInt("MappedType")));
						tempStr.append("</Variable>");
					}
					tempStr.append("</VarMappingInfo>");
					//Adding changes for returning LastModifiedOn
					tempStr.append("<LastModifiedOn>" + lastModifiedOn + "</LastModifiedOn>");
					
					if(rs != null){
						rs.close();
						rs = null;
					}
					if(pstmt != null){
						pstmt.close();
						pstmt = null;
					}
				}else{
					if(rs != null){
						rs.close();
						rs = null;
					}
					if(pstmt != null){
						pstmt.close();
						pstmt = null;
					}
					mainCode = WFSError.WF_INVALID_CRITERIA_ID;
					subCode = WFSError.WFS_ILP;
					subject = WFSErrorMsg.getMessage(mainCode);
					descr = WFSErrorMsg.getMessage(subCode);
					errType = WFSError.WF_TMP;
				}
			} else{
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			
			if(mainCode == 0){
				if(commit && !con.getAutoCommit()){
					con.commit();
					con.setAutoCommit(true);
					commit = false;
				}
				outputXML = new StringBuffer(2000);
				outputXML.append(gen.createOutputFile("WFGetVarMappingData"));
				outputXML.append("<Exception>\n<MainCode>0</MainCode>\n</Exception>\n");				
				outputXML.append(tempStr.toString());				
				outputXML.append(gen.closeOutputFile("WFGetVarMappingData"));				
			}
		} catch(SQLException e){
			WFSUtil.printErr("", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if(e.getErrorCode() == 0){
				if("08S01".equalsIgnoreCase(e.getSQLState())){
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
				}
			} else{
				descr = e.getMessage();
			}
		} catch(NumberFormatException e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(NullPointerException e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(Exception e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(Error e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} finally{
			try{
				if(mainCode == 0){
					if(commit && !con.getAutoCommit()){
						con.commit();
						con.setAutoCommit(true);
					}
				}else{
					if(commit && !con.getAutoCommit()){
						con.rollback();
						con.setAutoCommit(true);
					}
				}
			}catch(SQLException ex){
				WFSUtil.printErr(engine,"Exception occurred on commit/rollback of transaction for WFGetVarMappingData ", ex);
			}
			try{
				if(rs != null){
					rs.close();
					rs = null;
				}
			}catch(Exception ignored){}
			try{
				if(pstmt != null){
					pstmt.close();
					pstmt = null;
				}
			}catch(Exception ignored){}
			
		}
		if(mainCode != 0){
			return (WFSUtil.generalError(option, engine, gen, mainCode, subCode, errType, subject, descr));
		}
		return outputXML.toString();
	}
	/* New APIs related to Custom Criteria report Dashborad are added till here.*/

	
	/**
	 * New common API for Execution of Data Exchange Rules on the data exchange activity
	 * The same API will be used by the Data Exchange Utility internally for execution of rules.
	 * @param con
	 * @param parser
	 * @param gen
	 * @return Return value will be the set of attributes which are updated throughout the execution of the rules.
	 */

	private String WFExecuteDataExchange(Connection con, XMLParser parser, XMLGenerator gen) {
		int mainCode = 0;
		int subCode = 0;
		String errType = WFSError.WF_TMP;
		String subject = null;
		String descr = null;
		StringBuffer outputXML = new StringBuffer();
		String option = null;
		String engine = "";
		String input = null;
		String output = null;
		XMLParser apiParser = new XMLParser();
		try{
			option = parser.getValueOf("Option","", false);
			engine = parser.getValueOf("EngineName","", false);
			int sessionId = parser.getIntOf("SessionId", 0, false);
			int dbType = ServerProperty.getReference().getDBType(engine);
			WFParticipant participant = WFSUtil.WFCheckSession(con, sessionId);
			int processDefId = parser.getIntOf("ProcessDefId", 0, false);
			int activityId = parser.getIntOf("ActivityId", 0, false);
			String workitemDetails = "";
			String processInstanceId = "";
			String DataExOperation = "";
			int workitemId = 0;
			int userId = 0;
			String userName = "";
			int actionId = 0;
			String activityName = "";
			StringBuilder auditDataXML = new StringBuilder();
			boolean isRPACall = "Y".equalsIgnoreCase(parser.getValueOf("IsRPACall","", true));
			if(!isRPACall){
				processInstanceId = parser.getValueOf("ProcessInstanceId","", false);
				workitemId = parser.getIntOf("WorkitemId",0, false);
				workitemDetails = parser.getValueOf("WorkitemDetails","", false);
			}
			if(participant != null){
				userId = participant.getid();
                userName = participant.getname();
				//Define all the data structures required in rule Processing
				WFDataExchangeActivity dataExchangeActivity = null;				
				WFWorkitem workitem = null;
				
				//Get the Activity Details
				if(isRPACall){
                    WFSUtil.printOut(engine,"WMMiscellaneous.WFExecuteDataExchange :: RPA Call ");
					input = CreateXML.GetActivityProperty(engine, sessionId+"", activityId + "", processDefId + "", "X", "Y", false, false).toString();					
				}
				else{
					//Setting userDefVarFlag as true in case Non RPA Call to get the list of process variables which have rights on DX Activity
                    WFSUtil.printOut(engine,"WMMiscellaneous.WFExecuteDataExchange :: Utility Call ");
					input = CreateXML.GetActivityProperty(engine, sessionId+"", activityId + "", processDefId + "", "X", "Y", true, false).toString();
				}
				apiParser.setInputXML(input);
				output = WFFindClass.getReference().execute("GetActivityProperty", engine, con, apiParser, gen);
				apiParser.setInputXML(output);
				
                WFSUtil.printOut(engine,"WMMiscellaneous.WFExecuteDataExchange :: GetActivityProperty Input : " + input + ", output : " + output);
                
				//Proceed Only if the data is populated correctly
				if("0".equals(apiParser.getValueOf("MainCode"))){
	                WFSUtil.printOut(engine,"WMMiscellaneous.WFExecuteDataExchange :: Populating the DataExchange Activity Details ");
					dataExchangeActivity = new WFDataExchangeActivity(apiParser, isRPACall, engine);
					activityName = apiParser.getValueOf("ActivityName");
					if(dataExchangeActivity == null){
						WFSUtil.printErr(engine,"WFExecuteDataExchange :: Unable to populate the activity details.");
						mainCode = WFSError.WF_INVALID_INPUT_DX;
						subCode = WFSError.WF_ERROR_GETTING_DX_ACTIVITY_DETAILS;
						subject = WFSErrorMsg.getMessage(mainCode);
						descr = WFSErrorMsg.getMessage(subCode);
						errType = WFSError.WF_TMP;
					}
					
					//Create workitem object if the activity is populated correctly.
					if(isRPACall){
						workitem = new WFWorkitem(parser.toString(), isRPACall, dataExchangeActivity, engine);						
					}
					else{
						String wiAttributes = (String) WFSUtil.fetchAttributesExt(con, processDefId, activityId, processInstanceId, workitemId, "", engine, dbType, gen, "", false, false, false, sessionId, userId, true);
		                WFSUtil.printOut(engine,"WMMiscellaneous.WFExecuteDataExchange :: Non RPA Case : output of fetchAttributesExt : " + wiAttributes);
						wiAttributes = wiAttributes + workitemDetails;
						workitem = new WFWorkitem(wiAttributes, isRPACall, dataExchangeActivity, engine);
					}
					
					//Check if the workitem objects created successfully..
					if(workitem == null){
						WFSUtil.printErr(engine,"WFExecuteDataExchange :: Unable to populate the activity or workitem details.");
						mainCode = WFSError.WF_INVALID_INPUT_DX;
						subCode = WFSError.WF_ERROR_GETTING_WORKITEM_DETAILS;
						subject = WFSErrorMsg.getMessage(mainCode);
						descr = WFSErrorMsg.getMessage(subCode);
						errType = WFSError.WF_TMP;
					}
					else{
						output = "";
	                    WFSUtil.printOut(engine,"WMMiscellaneous.WFExecuteDataExchange :: Data Exchange execution starting with ISOLATION FLAG :" + dataExchangeActivity.getIsolateFlag());
						output = WFSUtil.evaluateAndExecuteDX(dataExchangeActivity, con, workitem, engine, dbType,processInstanceId,workitemId,processDefId,auditDataXML,activityId);
	                    WFSUtil.printOut(engine,"WMMiscellaneous.WFExecuteDataExchange :: Data Exchange execution completed with output : " + output);
	                    DataExOperation = dataExchangeActivity.getDataExOperation();
					}
				}
				else{
					WFSUtil.printErr(engine,"WFExecuteDataExchange :: Unable to fetch the activity property from GetActivityProperty API");
					mainCode = WFSError.WF_INVALID_INPUT_DX;
					subCode = WFSError.WF_INVALID_DX_ACTIVITY_ID;
					subject = WFSErrorMsg.getMessage(mainCode);
					errType = WFSError.WF_TMP;
					descr = WFSErrorMsg.getMessage(subCode);
				}
			}else{
				mainCode = WFSError.WM_INVALID_SESSION_HANDLE;
				subCode = 0;
				subject = WFSErrorMsg.getMessage(mainCode);
				descr = WFSErrorMsg.getMessage(subCode);
				errType = WFSError.WF_TMP;
			}
			if(mainCode == 0){
				if("I".equalsIgnoreCase(DataExOperation))
				{
					actionId = WFSConstant.WFL_Import_Data;
				}
				else
				{
					actionId = WFSConstant.WFL_Export_Data;
				}
				WFSUtil.generateLog(engine, con,actionId ,processInstanceId, 
						workitemId, processDefId, activityId,activityName,7, userId, userName,
						0, auditDataXML.toString(), null, null,null,null, 1, null);
				outputXML = new StringBuffer(2000);
				outputXML.append(gen.createOutputFile("WFExecuteDataExchange"));
				outputXML.append("<Exception><MainCode>0</MainCode></Exception>");
				outputXML.append(output);
				outputXML.append(gen.closeOutputFile("WFExecuteDataExchange"));
			}
		} catch(SQLException e){
			WFSUtil.printErr("", e);
			mainCode = WFSError.WM_INVALID_FILTER;
			subCode = WFSError.WFS_SQL;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_FAT;
			if(e.getErrorCode() == 0){
				if("08S01".equalsIgnoreCase(e.getSQLState())){
					descr = (new JTSSQLError(e.getSQLState())).getMessage() + "(SQL State : " + e.getSQLState() + ")";
				}
			} else{
				descr = e.getMessage();
			}
		} catch(NumberFormatException e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_ILP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(NullPointerException e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_SYS;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(WFSException e){
			WFSUtil.printErr(engine,"", e);
			mainCode = e.getMainErrorCode();
			subCode = e.getSubErrorCode();
			subject = e.getErrorMessage();
			errType = e.getTypeOfError();
			descr = e.getErrorDescription();
		} catch(Exception e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} catch(Error e){
			WFSUtil.printErr(engine,"", e);
			mainCode = WFSError.WF_OPERATION_FAILED;
			subCode = WFSError.WFS_EXP;
			subject = WFSErrorMsg.getMessage(mainCode);
			errType = WFSError.WF_TMP;
			descr = e.toString();
		} 
		if(mainCode != 0){
			return (WFSUtil.generalError(option, engine, gen, mainCode, subCode, errType, subject, descr));
		}
		
		return outputXML.toString();
	}
} // class WMMiscellaneous
