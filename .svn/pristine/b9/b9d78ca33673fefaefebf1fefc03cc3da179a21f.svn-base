

CREATE OR ALTER PROCEDURE PWM_DELETE_WI_SQL_All_PROCESS (

	
	@IN_NOOFDAYS INT
	,@IN_PROCESSDEFID INTEGER
	
	)
AS
SET NOCOUNT ON;
DECLARE @V_QUERYSTR NVARCHAR(MAX)
DECLARE @EXISTSFLAG INTEGER = 0
DECLARE @V_QUERYSTR_PROCESSDEFID NVARCHAR(MAX)
DECLARE @V_QUERYSTR_PROCESSINSTANCEID NVARCHAR(MAX)
DECLARE @V_QUERYSTR_GENERAL_UNCONDITIONAL NVARCHAR(MAX)
DECLARE @CUR_PROCESSDEFID CURSOR 
DECLARE @CUR_PROCESSINSTANCEID CURSOR 
DECLARE @V_PROCESSDEFID NVARCHAR(100) 
DECLARE @V_MAX_PROCESSDEFID NVARCHAR(50)
DECLARE @V_PARAMDEFINITION NVARCHAR(MAX)
DECLARE @V_QUERYLOGSUBJECT NVARCHAR(MAX)

DECLARE @ERR_MSG NVARCHAR(MAX)
DECLARE @ERR_LINE INT
DECLARE @ERR_NUMBER INT
--DECLARE @V_QUERYLOGSUBJECT NVARCHAR(MAX)



BEGIN

	SET @V_QUERYSTR = 'SELECT @V_MAX_PROCESSDEFID = MAX(PROCESSDEFID) FROM PROCESSDEFTABLE'
	SET @V_PARAMDEFINITION = N' @V_MAX_PROCESSDEFID NVARCHAR (50) OUTPUT'
	EXECUTE sp_executesql @V_QUERYSTR,@V_PARAMDEFINITION,@V_MAX_PROCESSDEFID=@V_MAX_PROCESSDEFID OUTPUT
	
	IF (@IN_NOOFDAYS = NULL OR @IN_NOOFDAYS < 0 OR @IN_PROCESSDEFID = 0 OR @IN_PROCESSDEFID = NULL OR @IN_PROCESSDEFID < -1 OR @IN_PROCESSDEFID > @V_MAX_PROCESSDEFID  )
	BEGIN
		RAISERROR ( 'Invalid or PROCESSDEFID or NoOfDays',16,1)
		RETURN
	END
	 
	SET @ERR_MSG = ''
	
	SET @V_PROCESSDEFID = @IN_PROCESSDEFID
	---------------------------**********UNCONDITIONALLY TRUNCATE THE TABLE**************************************
	BEGIN
		IF EXISTS (SELECT 1 FROM sys.tables WHERE name = N'PDBNewAuditTrail_Table' AND type = 'U')
			BEGIN TRY
				SET @V_QUERYSTR_GENERAL_UNCONDITIONAL = 'TRUNCATE TABLE PDBNewAuditTrail_Table'  
				EXECUTE sp_executesql @V_QUERYSTR_GENERAL_UNCONDITIONAL 
			END TRY
			BEGIN CATCH
				SET @V_QUERYLOGSUBJECT = 'TRUNCATE FAILED FOR PDBNewAuditTrail_Table TABLE: ' + CONVERT(NVARCHAR(10), ERROR_NUMBER()) + ' , ERROR MESSAGE : ' + ERROR_MESSAGE()
				
				EXECUTE PMWLOGINSERT 'ERROR',@V_QUERYLOGSUBJECT,@V_QUERYSTR_GENERAL_UNCONDITIONAL
			END CATCH
						
		IF EXISTS (SELECT 1 FROM sys.tables WHERE name = N'PDBConnectionAuditTrail' AND type = 'U')
			BEGIN TRY
				SET @V_QUERYSTR_GENERAL_UNCONDITIONAL = 'TRUNCATE TABLE PDBConnectionAuditTrail'  
				EXECUTE sp_executesql @V_QUERYSTR_GENERAL_UNCONDITIONAL 
			END TRY
			BEGIN CATCH
				--PRINT ('TRUNCATE FAILED FOR PDBConnectionAuditTrail TABLE: ' + CONVERT(NVARCHAR(10), ERROR_NUMBER()) + ' , ERROR MESSAGE : ' + ERROR_MESSAGE())
				SET @V_QUERYLOGSUBJECT = 'TRUNCATE FAILED FOR PDBConnectionAuditTrail TABLE: ' + CONVERT(NVARCHAR(10), ERROR_NUMBER()) + ' , ERROR MESSAGE : ' + ERROR_MESSAGE()
				
				EXECUTE PMWLOGINSERT 'ERROR',@V_QUERYLOGSUBJECT,@V_QUERYSTR_GENERAL_UNCONDITIONAL
			END CATCH
		IF EXISTS (SELECT 1 FROM sys.tables WHERE name = N'PDBAdminLogTable' AND type = 'U')
			BEGIN TRY
				SET @V_QUERYSTR_GENERAL_UNCONDITIONAL = 'TRUNCATE TABLE PDBAdminLogTable'  
				EXECUTE sp_executesql @V_QUERYSTR_GENERAL_UNCONDITIONAL 
			END TRY
			BEGIN CATCH
				--PRINT ('TRUNCATE FAILED FOR PDBAdminLogTable TABLE: ' + CONVERT(NVARCHAR(10), ERROR_NUMBER()) + ' , ERROR MESSAGE : ' + ERROR_MESSAGE())
				SET @V_QUERYLOGSUBJECT = 'TRUNCATE FAILED FOR PDBAdminLogTable TABLE: '+  CONVERT(NVARCHAR(10), ERROR_NUMBER()) + ' , ERROR MESSAGE : ' + ERROR_MESSAGE()
				
				EXECUTE PMWLOGINSERT 'ERROR',@V_QUERYLOGSUBJECT,@V_QUERYSTR_GENERAL_UNCONDITIONAL
			END CATCH
		IF EXISTS (SELECT 1 FROM sys.tables WHERE name = N'WFHISTORYROUTELOGTABLE' AND type = 'U')
			BEGIN TRY
				--PRINT('CHECK---3')
				SET @V_QUERYSTR_GENERAL_UNCONDITIONAL = 'TRUNCATE TABLE WFHISTORYROUTELOGTABLE'  
				EXECUTE sp_executesql @V_QUERYSTR_GENERAL_UNCONDITIONAL 
			END TRY
			BEGIN CATCH
				--PRINT ('TRUNCATE FAILED FOR WFHISTORYROUTELOGTABLE TABLE: ' + CONVERT(NVARCHAR(10), ERROR_NUMBER()) + ' , ERROR MESSAGE : ' + ERROR_MESSAGE())
				SET @V_QUERYLOGSUBJECT = 'TRUNCATE FAILED FOR WFHISTORYROUTELOGTABLE TABLE: ' + CONVERT(NVARCHAR(10), ERROR_NUMBER()) + ' , ERROR MESSAGE : ' + ERROR_MESSAGE()
				
				EXECUTE PMWLOGINSERT 'ERROR',@V_QUERYLOGSUBJECT,@V_QUERYSTR_GENERAL_UNCONDITIONAL
			END CATCH
		IF EXISTS (SELECT 1 FROM sys.tables WHERE name = N'WFMAILQUEUEHISTORYTABLE' AND type = 'U')
			BEGIN TRY
				SET @V_QUERYSTR_GENERAL_UNCONDITIONAL = 'TRUNCATE TABLE WFMAILQUEUEHISTORYTABLE'  
				EXECUTE sp_executesql @V_QUERYSTR_GENERAL_UNCONDITIONAL 
			END TRY
			BEGIN CATCH
				--PRINT ('TRUNCATE FAILED FOR WFMAILQUEUEHISTORYTABLE TABLE: ' + CONVERT(NVARCHAR(10), ERROR_NUMBER()) + ' , ERROR MESSAGE : ' + ERROR_MESSAGE())
				SET @V_QUERYLOGSUBJECT = 'TRUNCATE FAILED FOR WFMAILQUEUEHISTORYTABLE TABLE: ' + CONVERT(NVARCHAR(10), ERROR_NUMBER()) + ' , ERROR MESSAGE : ' + ERROR_MESSAGE()
				
				EXECUTE PMWLOGINSERT 'ERROR',@V_QUERYLOGSUBJECT,@V_QUERYSTR_GENERAL_UNCONDITIONAL
			END CATCH
		IF EXISTS (SELECT 1 FROM sys.tables WHERE name = N'WFReportDataHistoryTable' AND type = 'U')
			BEGIN TRY
				SET @V_QUERYSTR_GENERAL_UNCONDITIONAL = 'TRUNCATE TABLE WFReportDataHistoryTable'  
				EXECUTE sp_executesql @V_QUERYSTR_GENERAL_UNCONDITIONAL 
			END TRY
			BEGIN CATCH
				--PRINT ('TRUNCATE FAILED FOR WFReportDataHistoryTable TABLE:' + CONVERT(NVARCHAR(10), ERROR_NUMBER()) + ' , ERROR MESSAGE : ' + ERROR_MESSAGE())
				SET @V_QUERYLOGSUBJECT = 'TRUNCATE FAILED FOR WFReportDataHistoryTable TABLE: '+ CONVERT(NVARCHAR(10), ERROR_NUMBER()) + ' , ERROR MESSAGE : ' + ERROR_MESSAGE()
				
				EXECUTE PMWLOGINSERT 'ERROR',@V_QUERYLOGSUBJECT,@V_QUERYSTR_GENERAL_UNCONDITIONAL
			END CATCH
		IF EXISTS (SELECT 1 FROM sys.tables WHERE name = N'WFCurrentrouteLogtable' AND type = 'U')
			BEGIN TRY
				SET @V_QUERYSTR_GENERAL_UNCONDITIONAL = 'TRUNCATE TABLE WFCurrentrouteLogtable'  
				EXECUTE sp_executesql @V_QUERYSTR_GENERAL_UNCONDITIONAL 
			END TRY
			BEGIN CATCH
				--PRINT ('TRUNCATE FAILED FOR WFCurrentrouteLogtable TABLE: ' + CONVERT(NVARCHAR(10), ERROR_NUMBER()) + ' , ERROR MESSAGE : ' + ERROR_MESSAGE())
				SET @V_QUERYLOGSUBJECT = 'TRUNCATE FAILED FOR WFCurrentrouteLogtable TABLE: '+ CONVERT(NVARCHAR(10), ERROR_NUMBER()) + ' , ERROR MESSAGE : ' + ERROR_MESSAGE()
				
				EXECUTE PMWLOGINSERT 'ERROR',@V_QUERYLOGSUBJECT,@V_QUERYSTR_GENERAL_UNCONDITIONAL
			END CATCH
		IF EXISTS (SELECT 1 FROM sys.tables WHERE name = N'SummaryTable' AND type = 'U')
			BEGIN TRY
				SET @V_QUERYSTR_GENERAL_UNCONDITIONAL = 'TRUNCATE TABLE SummaryTable'  
				EXECUTE sp_executesql @V_QUERYSTR_GENERAL_UNCONDITIONAL 
			END TRY
			BEGIN CATCH
				--PRINT ('TRUNCATE FAILED FOR SummaryTable TABLE: ' + CONVERT(NVARCHAR(10), ERROR_NUMBER()) + ' , ERROR MESSAGE : ' + ERROR_MESSAGE())
				SET @V_QUERYLOGSUBJECT = 'TRUNCATE FAILED FOR SummaryTable TABLE: ' + CONVERT(NVARCHAR(10), ERROR_NUMBER()) + ' , ERROR MESSAGE : ' + ERROR_MESSAGE()
				
				EXECUTE PMWLOGINSERT 'ERROR',@V_QUERYLOGSUBJECT,@V_QUERYSTR_GENERAL_UNCONDITIONAL
			END CATCH
	END
						---------------------------********************--------------
	
	IF(@IN_PROCESSDEFID = -1)
		BEGIN
			SET @V_QUERYSTR_PROCESSDEFID = 'SELECT ProcessDefId FROM PROCESSDEFTABLE' 
			IF CURSOR_STATUS('global', 'CUR_PROCESSDEFID') >= - 1
			BEGIN
				DEALLOCATE CUR_PROCESSDEFID
			END
		EXECUTE ('DECLARE CUR_PROCESSDEFID CURSOR FAST_FORWARD FOR ' + @V_QUERYSTR_PROCESSDEFID) 
		OPEN CUR_PROCESSDEFID 
		FETCH CUR_PROCESSDEFID INTO @V_PROCESSDEFID 
		WHILE @@FETCH_STATUS = 0
			BEGIN
				IF ( @V_PROCESSDEFID IS NOT NULL OR @V_PROCESSDEFID <> '')
				BEGIN
						BEGIN TRY
							PRINT 'GOING TO EXECUTE PWM_DELETE_TRGT_WI_NEW FOR PROCESSDEF ID ' + convert(NVARCHAR, @V_PROCESSDEFID)
							EXECUTE PWM_DELETE_TRGT_WI_NEW @V_PROCESSDEFID,@IN_NOOFDAYS
						END TRY
						BEGIN CATCH
							--PRINT ('EXCUTION OF PROC PWM_DELETE_TRGT_WI_NEW GETTING FAILED FOR PROCESSDEFID ' + @V_PROCESSDEFID + 'AND GIVES ERROR AT LINE : ' + CONVERT(NVARCHAR(10), ERROR_NUMBER()) + ' , ERROR MESSAGE : ' + ERROR_MESSAGE())
							SET @V_QUERYLOGSUBJECT = 'EXCUTION OF PROC PWM_DELETE_TRGT_WI_NEW GETTING FAILED FOR PROCESSDEFID ' + @V_PROCESSDEFID + 'AND GIVES ERROR AT LINE : ' + CONVERT(NVARCHAR(10), ERROR_NUMBER()) + ' , ERROR MESSAGE : ' + ERROR_MESSAGE()
							EXECUTE PMWLOGINSERT 'ERROR',@V_QUERYLOGSUBJECT,'CALLING OF PROCEDURE PWM_DELETE_TRGT_WI_NEW FAILED'
						END CATCH
				END
				FETCH NEXT FROM CUR_PROCESSDEFID INTO @V_PROCESSDEFID
			END
		CLOSE CUR_PROCESSDEFID
		DEALLOCATE CUR_PROCESSDEFID
		END
	ELSE
	BEGIN 
		BEGIN TRY
			PRINT 'GOING TO EXECUTE PWM_DELETE_TRGT_WI_NEW FOR PROCESSDEF ID ' + convert(NVARCHAR, @V_PROCESSDEFID)
			EXECUTE PWM_DELETE_TRGT_WI_NEW @V_PROCESSDEFID,@IN_NOOFDAYS
		END TRY
		BEGIN CATCH
				--PRINT ('EXCUTION OF PROC PWM_DELETE_TRGT_WI_NEW GETTING FAILED FOR PROCESSDEFID ' + @V_PROCESSDEFID + 'AND GIVES ERROR AT LINE : ' + CONVERT(NVARCHAR(10), ERROR_NUMBER()) + ' , ERROR MESSAGE : ' + ERROR_MESSAGE())
				SET @V_QUERYLOGSUBJECT = 'EXCUTION OF PROC PWM_DELETE_TRGT_WI_NEW GETTING FAILED FOR PROCESSDEFID ' + @V_PROCESSDEFID + 'AND GIVES ERROR AT LINE : ' + CONVERT(NVARCHAR(10), ERROR_NUMBER()) + ' , ERROR MESSAGE : ' + ERROR_MESSAGE()
				EXECUTE PMWLOGINSERT 'ERROR',@V_QUERYLOGSUBJECT,'CALLING OF PROCEDURE PWM_DELETE_TRGT_WI_NEW FAILED'
		END CATCH
	END
END