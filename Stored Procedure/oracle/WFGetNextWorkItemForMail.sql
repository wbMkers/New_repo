/*
------------------------------------------------------------------------------------------------------
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED
------------------------------------------------------------------------------------------------------
	Group					: Genesis
	Product					: iBPS
	Module					: Transaction Server
	File Name				: WFGetNextWorkItemForMail.sql
	Author					: Shahzad Malik
	Date written			: April 13th, 2020
	Description				: This procedure will fetch those workitem whose NotifyStatus is "Y"
------------------------------------------------------------------------------------------------------
			CHANGE HISTORY
------------------------------------------------------------------------------------------------------
Date		Change By			Change Description (Bug No. (If Any))
------------------------------------------------------------------------------------------------------
13/04/2020	Shahzad Malik		Bug 91513 - Optimization in mailing utility.
28/06/2021  Satyanarayan Sharma  Bug99571-In WFGetNextWorkItemForMail procedure the query to fetch WI and session validation is not properly done
25/08/2021  Satyanarayan Sharma iBPS4.0SP1-Mailing Service Error while getting next workitem.
------------------------------------------------------------------------------------------------------
*/

CREATE OR REPLACE PROCEDURE WFGetNextWorkItemForMail (
	temp_IN_SESSIOINID INT,
	IN_CSNAME NVARCHAR2,
	OUT_MAINCODE OUT INT,
	OUT_CSSESSIONID OUT INT,
	OUT_REFCURSOR OUT SYS_REFCURSOR
)
AS
V_ROWCOUNT  INT;
V_DBSTATUS  INT;
V_PROCESSINSTANCEID NVARCHAR2(250);
V_WORKITEMID INT;
V_PROCESSDEFID INT;
V_PROCESSNAME NVARCHAR2(128);
V_ACTIVITYID INT;
V_ACTIVITYNAME NVARCHAR2(128); 
V_PRIORITYLEVEL INT;
V_INSTRUMENTSTATUS NVARCHAR2(10);
V_LOCKSTATUS NVARCHAR2(10);
V_LOCKEDBYNAME NVARCHAR2(128);
V_VALIDTILL DATE;
V_CREATEDBYNAME NVARCHAR2(128);
V_CREATEDDATETIME DATE; 
V_WORKITEMSTATE INT; 
V_CHECKLISTCOMPLETEFLAG NVARCHAR2(10);
V_ENTRYDATETIME DATE; 
V_LOCKEDTIME DATE;
V_INTRODUCTIONDATETIME DATE; 
V_INTRODUCEDBY NVARCHAR2(128); 
V_ASSIGNEDUSER NVARCHAR2(128);
V_QUEUENAME NVARCHAR2(128);
V_ASSIGNMENTTYPE NVARCHAR2(10);
V_PROCESSINSTANCESTATE INT;
V_QUEUETYPE NVARCHAR2(10);
V_STATUS NVARCHAR2(255);
V_Q_QUEUEID INT;
V_Q_USERID INT; 
V_URN NVARCHAR2(128);
V_ACTIVITYTYPE INT;
V_TURNAROUNDTIME NVARCHAR2(128);
V_QUERY1 VARCHAR2(1000);
IN_SESSIOINID INT;
v_psId					PSREGISTERATIONTABLE.PSID%Type;
BEGIN
	OUT_MAINCODE := 0;
	OUT_CSSESSIONID := temp_IN_SESSIOINID;
	/* Check session validity */
	BEGIN
		SELECT	PSReg.PSID INTO v_psId FROM	PSREGISTERATIONTABLE PSReg, WFPSConnection PSCon WHERE PSCon.SessionID = temp_IN_SESSIOINID AND PSReg.PSID = PSCon.PSID; 
	
		v_rowCount := SQL%ROWCOUNT; 
		v_DBStatus := SQLCODE;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				v_rowCount := 0;			
	END;
	
	IF( v_DBStatus <> 0 OR v_rowCount <= 0 ) THEN
	BEGIN
		out_mainCode	:= 11;		/*Invalid Session Handle */
				RETURN;
	END;
	END IF;	
	
	BEGIN 
		BEGIN
			V_QUERY1 := 'SELECT PROCESSINSTANCEID, PROCESSDEFID, PROCESSNAME, ACTIVITYID, ACTIVITYNAME, PRIORITYLEVEL, INSTRUMENTSTATUS, LOCKSTATUS, LOCKEDBYNAME, VALIDTILL, CREATEDBYNAME, CREATEDDATETIME, WORKITEMSTATE, CHECKLISTCOMPLETEFLAG, ENTRYDATETIME, LOCKEDTIME, INTRODUCTIONDATETIME, INTRODUCEDBY, ASSIGNEDUSER, WORKITEMID, QUEUENAME, ASSIGNMENTTYPE, PROCESSINSTANCESTATE, QUEUETYPE, STATUS, Q_QUEUEID, (EXPECTEDWORKITEMDELAY - ENTRYDATETIME) * 24 AS TURNAROUNDTIME, Q_USERID, URN, ACTIVITYTYPE FROM WFINSTRUMENTTABLE WHERE NOTIFYSTATUS = N''Y'' AND LOCKSTATUS = N''N'' AND (AssignmentType = N''F'' OR AssignmentType = N''E'' ) AND  RoutingStatus = N''N'' AND Q_UserId>0 AND ROWNUM <= 1 ORDER BY PRIORITYLEVEL DESC , ENTRYDATETIME ASC';
			EXECUTE IMMEDIATE V_QUERY1 INTO V_PROCESSINSTANCEID, V_PROCESSDEFID, V_PROCESSNAME, V_ACTIVITYID, V_ACTIVITYNAME, V_PRIORITYLEVEL, V_INSTRUMENTSTATUS, V_LOCKSTATUS, V_LOCKEDBYNAME, V_VALIDTILL, V_CREATEDBYNAME, V_CREATEDDATETIME, V_WORKITEMSTATE, V_CHECKLISTCOMPLETEFLAG, V_ENTRYDATETIME, V_LOCKEDTIME, V_INTRODUCTIONDATETIME, V_INTRODUCEDBY, V_ASSIGNEDUSER, V_WORKITEMID, V_QUEUENAME, V_ASSIGNMENTTYPE, V_PROCESSINSTANCESTATE, V_QUEUETYPE, V_STATUS, V_Q_QUEUEID, V_TURNAROUNDTIME, V_Q_USERID, V_URN, V_ACTIVITYTYPE;
			V_ROWCOUNT := SQL%ROWCOUNT;
			V_DBSTATUS := SQLCODE;
			EXCEPTION 
				WHEN NO_DATA_FOUND THEN
					V_ROWCOUNT := 0;
		END;
		
		IF(V_DBSTATUS <> 0) THEN
			OUT_MAINCODE := 15;
			RETURN;
		END IF;
		
		IF(V_ROWCOUNT <= 0) THEN
		BEGIN
			V_QUERY1 := 'SELECT PROCESSINSTANCEID, PROCESSDEFID, PROCESSNAME, ACTIVITYID, ACTIVITYNAME, PRIORITYLEVEL, INSTRUMENTSTATUS, LOCKSTATUS, LOCKEDBYNAME, VALIDTILL, CREATEDBYNAME, CREATEDDATETIME, WORKITEMSTATE, CHECKLISTCOMPLETEFLAG, ENTRYDATETIME, LOCKEDTIME, INTRODUCTIONDATETIME, INTRODUCEDBY, ASSIGNEDUSER, WORKITEMID, QUEUENAME, ASSIGNMENTTYPE, PROCESSINSTANCESTATE, QUEUETYPE, STATUS, Q_QUEUEID, (EXPECTEDWORKITEMDELAY - ENTRYDATETIME) * 24 AS TURNAROUNDTIME, Q_USERID, URN, ACTIVITYTYPE FROM WFINSTRUMENTTABLE WHERE NOTIFYSTATUS = N''P'' AND LOCKSTATUS = N''N'' AND (AssignmentType = N''F'' OR AssignmentType = N''E'' ) AND  RoutingStatus = N''N'' AND Q_UserId>0 AND ROWNUM <= 1 ORDER BY PRIORITYLEVEL DESC , ENTRYDATETIME ASC';
			EXECUTE IMMEDIATE V_QUERY1 INTO V_PROCESSINSTANCEID, V_PROCESSDEFID, V_PROCESSNAME, V_ACTIVITYID, V_ACTIVITYNAME, V_PRIORITYLEVEL, V_INSTRUMENTSTATUS, V_LOCKSTATUS, V_LOCKEDBYNAME, V_VALIDTILL, V_CREATEDBYNAME, V_CREATEDDATETIME, V_WORKITEMSTATE, V_CHECKLISTCOMPLETEFLAG, V_ENTRYDATETIME, V_LOCKEDTIME, V_INTRODUCTIONDATETIME, V_INTRODUCEDBY, V_ASSIGNEDUSER, V_WORKITEMID, V_QUEUENAME, V_ASSIGNMENTTYPE, V_PROCESSINSTANCESTATE, V_QUEUETYPE, V_STATUS, V_Q_QUEUEID, V_TURNAROUNDTIME, V_Q_USERID, V_URN, V_ACTIVITYTYPE;
			V_ROWCOUNT := SQL%ROWCOUNT;
			V_DBSTATUS := SQLCODE;
			EXCEPTION 
				WHEN NO_DATA_FOUND THEN
					OUT_MAINCODE := 18;
					RETURN;
		END;
		ELSE
		BEGIN
			V_QUERY1 := 'UPDATE WFINSTRUMENTTABLE SET NOTIFYSTATUS = N''P'' WHERE PROCESSINSTANCEID = :PROCESSINSTANCEID AND WORKITEMID = :WORKITEMID AND NOTIFYSTATUS = N''Y''';
			EXECUTE IMMEDIATE V_QUERY1 USING V_PROCESSINSTANCEID, V_WORKITEMID;
			V_ROWCOUNT := SQL%ROWCOUNT;
		END;
		END IF;
	END;
	
	IF(V_DBSTATUS = 0 AND V_ROWCOUNT > 0) THEN
	BEGIN
		V_QUERY1 := 'SELECT :PROCESSINSTANCEID As ProcessInstanceId, :PROCESSINSTANCEID As WorkItemName, :PROCESSDEFID As RouteId, :PROCESSNAME AS RouteName, :ACTIVITYID AS WorkStageId, :ACTIVITYNAME AS ActivityName, :PRIORITYLEVEL AS PriorityLevel, :INSTRUMENTSTATUS AS InstrumentStatus, :LOCKSTATUS AS LockStatus, :LOCKEDBYNAME AS LockedByUserName, :VALIDTILL AS ExpiryDateTime, :CREATEDBYNAME AS CreatedByUserName, :CREATEDDATETIME AS CreationDateTime, :WORKITEMSTATE AS WorkitemState, :CHECKLISTCOMPLETEFLAG AS CheckListCompleteFlag, :ENTRYDATETIME AS EntryDateTime, :LOCKEDTIME AS LockedTime, :INTRODUCTIONDATETIME AS IntroductionDateTime, :INTRODUCEDBY AS IntroducedBy, :ASSIGNEDUSER AS AssignedTo, :WORKITEMID AS WorkItemId, :QUEUENAME AS QueueName, :ASSIGNMENTTYPE AS AssignmentType, :PROCESSINSTANCESTATE AS ProcessInstanceState, :QUEUETYPE AS QueueType, :STATUS AS Status, :Q_QUEUEID AS QueueId, :TURNAROUNDTIME AS Turnaroundtime, :Q_USERID AS UserID, :V_URN AS URN, :V_ACTIVITYTYPE AS ActivityType FROM DUAL';
		OPEN OUT_REFCURSOR FOR V_QUERY1 USING V_PROCESSINSTANCEID, V_PROCESSINSTANCEID,  V_PROCESSDEFID, V_PROCESSNAME, V_ACTIVITYID,
		V_ACTIVITYNAME, V_PRIORITYLEVEL, V_INSTRUMENTSTATUS, V_LOCKSTATUS, V_LOCKEDBYNAME, V_VALIDTILL, V_CREATEDBYNAME, V_CREATEDDATETIME,
		V_WORKITEMSTATE, V_CHECKLISTCOMPLETEFLAG, V_ENTRYDATETIME, V_LOCKEDTIME, V_INTRODUCTIONDATETIME, V_INTRODUCEDBY, V_ASSIGNEDUSER,
		V_WORKITEMID, V_QUEUENAME, V_ASSIGNMENTTYPE, V_PROCESSINSTANCESTATE, V_QUEUETYPE, V_STATUS, V_Q_QUEUEID, V_TURNAROUNDTIME, V_Q_USERID, V_URN, V_ACTIVITYTYPE;
	END;
	END IF;
END;
	